// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tendermint/state/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  ABCIResponses retains the responses
///  of the various ABCI calls during block processing.
///  It is persisted to disk for each height before calling Commit.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.state.ABCIResponses)
pub struct ABCIResponses {
    // message fields
    // @@protoc_insertion_point(field:tendermint.state.ABCIResponses.deliver_txs)
    pub deliver_txs: ::std::vec::Vec<super::types::ResponseDeliverTx>,
    // @@protoc_insertion_point(field:tendermint.state.ABCIResponses.end_block)
    pub end_block: ::protobuf::MessageField<super::types::ResponseEndBlock>,
    // @@protoc_insertion_point(field:tendermint.state.ABCIResponses.begin_block)
    pub begin_block: ::protobuf::MessageField<super::types::ResponseBeginBlock>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.state.ABCIResponses.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ABCIResponses {
    fn default() -> &'a ABCIResponses {
        <ABCIResponses as ::protobuf::Message>::default_instance()
    }
}

impl ABCIResponses {
    pub fn new() -> ABCIResponses {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "deliver_txs",
            |m: &ABCIResponses| { &m.deliver_txs },
            |m: &mut ABCIResponses| { &mut m.deliver_txs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::ResponseEndBlock>(
            "end_block",
            |m: &ABCIResponses| { &m.end_block },
            |m: &mut ABCIResponses| { &mut m.end_block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::ResponseBeginBlock>(
            "begin_block",
            |m: &ABCIResponses| { &m.begin_block },
            |m: &mut ABCIResponses| { &mut m.begin_block },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ABCIResponses>(
            "ABCIResponses",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ABCIResponses {
    const NAME: &'static str = "ABCIResponses";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.deliver_txs.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.end_block)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.begin_block)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.deliver_txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.end_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.begin_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.deliver_txs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.end_block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.begin_block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ABCIResponses {
        ABCIResponses::new()
    }

    fn clear(&mut self) {
        self.deliver_txs.clear();
        self.end_block.clear();
        self.begin_block.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ABCIResponses {
        static instance: ABCIResponses = ABCIResponses {
            deliver_txs: ::std::vec::Vec::new(),
            end_block: ::protobuf::MessageField::none(),
            begin_block: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ABCIResponses {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ABCIResponses").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ABCIResponses {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ABCIResponses {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ValidatorsInfo represents the latest validator set, or the last height it changed
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.state.ValidatorsInfo)
pub struct ValidatorsInfo {
    // message fields
    // @@protoc_insertion_point(field:tendermint.state.ValidatorsInfo.validator_set)
    pub validator_set: ::protobuf::MessageField<super::validator::ValidatorSet>,
    // @@protoc_insertion_point(field:tendermint.state.ValidatorsInfo.last_height_changed)
    pub last_height_changed: i64,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.state.ValidatorsInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorsInfo {
    fn default() -> &'a ValidatorsInfo {
        <ValidatorsInfo as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorsInfo {
    pub fn new() -> ValidatorsInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::validator::ValidatorSet>(
            "validator_set",
            |m: &ValidatorsInfo| { &m.validator_set },
            |m: &mut ValidatorsInfo| { &mut m.validator_set },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_height_changed",
            |m: &ValidatorsInfo| { &m.last_height_changed },
            |m: &mut ValidatorsInfo| { &mut m.last_height_changed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorsInfo>(
            "ValidatorsInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorsInfo {
    const NAME: &'static str = "ValidatorsInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.validator_set)?;
                },
                16 => {
                    self.last_height_changed = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.validator_set.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.last_height_changed != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.last_height_changed);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.validator_set.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.last_height_changed != 0 {
            os.write_int64(2, self.last_height_changed)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorsInfo {
        ValidatorsInfo::new()
    }

    fn clear(&mut self) {
        self.validator_set.clear();
        self.last_height_changed = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorsInfo {
        static instance: ValidatorsInfo = ValidatorsInfo {
            validator_set: ::protobuf::MessageField::none(),
            last_height_changed: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorsInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorsInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorsInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorsInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ConsensusParamsInfo represents the latest consensus params, or the last height it changed
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.state.ConsensusParamsInfo)
pub struct ConsensusParamsInfo {
    // message fields
    // @@protoc_insertion_point(field:tendermint.state.ConsensusParamsInfo.consensus_params)
    pub consensus_params: ::protobuf::MessageField<super::params::ConsensusParams>,
    // @@protoc_insertion_point(field:tendermint.state.ConsensusParamsInfo.last_height_changed)
    pub last_height_changed: i64,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.state.ConsensusParamsInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsensusParamsInfo {
    fn default() -> &'a ConsensusParamsInfo {
        <ConsensusParamsInfo as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusParamsInfo {
    pub fn new() -> ConsensusParamsInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::params::ConsensusParams>(
            "consensus_params",
            |m: &ConsensusParamsInfo| { &m.consensus_params },
            |m: &mut ConsensusParamsInfo| { &mut m.consensus_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_height_changed",
            |m: &ConsensusParamsInfo| { &m.last_height_changed },
            |m: &mut ConsensusParamsInfo| { &mut m.last_height_changed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsensusParamsInfo>(
            "ConsensusParamsInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsensusParamsInfo {
    const NAME: &'static str = "ConsensusParamsInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_params)?;
                },
                16 => {
                    self.last_height_changed = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.consensus_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.last_height_changed != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.last_height_changed);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.consensus_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.last_height_changed != 0 {
            os.write_int64(2, self.last_height_changed)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsensusParamsInfo {
        ConsensusParamsInfo::new()
    }

    fn clear(&mut self) {
        self.consensus_params.clear();
        self.last_height_changed = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsensusParamsInfo {
        static instance: ConsensusParamsInfo = ConsensusParamsInfo {
            consensus_params: ::protobuf::MessageField::none(),
            last_height_changed: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsensusParamsInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsensusParamsInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsensusParamsInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusParamsInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.state.Version)
pub struct Version {
    // message fields
    // @@protoc_insertion_point(field:tendermint.state.Version.consensus)
    pub consensus: ::protobuf::MessageField<super::types::Consensus>,
    // @@protoc_insertion_point(field:tendermint.state.Version.software)
    pub software: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.state.Version.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Version {
    fn default() -> &'a Version {
        <Version as ::protobuf::Message>::default_instance()
    }
}

impl Version {
    pub fn new() -> Version {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Consensus>(
            "consensus",
            |m: &Version| { &m.consensus },
            |m: &mut Version| { &mut m.consensus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "software",
            |m: &Version| { &m.software },
            |m: &mut Version| { &mut m.software },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Version>(
            "Version",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Version {
    const NAME: &'static str = "Version";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus)?;
                },
                18 => {
                    self.software = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.consensus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.software.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.software);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.consensus.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.software.is_empty() {
            os.write_string(2, &self.software)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Version {
        Version::new()
    }

    fn clear(&mut self) {
        self.consensus.clear();
        self.software.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Version {
        static instance: Version = Version {
            consensus: ::protobuf::MessageField::none(),
            software: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Version {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Version").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Version {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Version {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.state.State)
pub struct State {
    // message fields
    // @@protoc_insertion_point(field:tendermint.state.State.version)
    pub version: ::protobuf::MessageField<Version>,
    ///  immutable
    // @@protoc_insertion_point(field:tendermint.state.State.chain_id)
    pub chain_id: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.state.State.initial_height)
    pub initial_height: i64,
    ///  LastBlockHeight=0 at genesis (ie. block(H=0) does not exist)
    // @@protoc_insertion_point(field:tendermint.state.State.last_block_height)
    pub last_block_height: i64,
    // @@protoc_insertion_point(field:tendermint.state.State.last_block_id)
    pub last_block_id: ::protobuf::MessageField<super::types::BlockID>,
    // @@protoc_insertion_point(field:tendermint.state.State.last_block_time)
    pub last_block_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  LastValidators is used to validate block.LastCommit.
    ///  Validators are persisted to the database separately every time they change,
    ///  so we can query for historical validator sets.
    ///  Note that if s.LastBlockHeight causes a valset change,
    ///  we set s.LastHeightValidatorsChanged = s.LastBlockHeight + 1 + 1
    ///  Extra +1 due to nextValSet delay.
    // @@protoc_insertion_point(field:tendermint.state.State.next_validators)
    pub next_validators: ::protobuf::MessageField<super::validator::ValidatorSet>,
    // @@protoc_insertion_point(field:tendermint.state.State.validators)
    pub validators: ::protobuf::MessageField<super::validator::ValidatorSet>,
    // @@protoc_insertion_point(field:tendermint.state.State.last_validators)
    pub last_validators: ::protobuf::MessageField<super::validator::ValidatorSet>,
    // @@protoc_insertion_point(field:tendermint.state.State.last_height_validators_changed)
    pub last_height_validators_changed: i64,
    ///  Consensus parameters used for validating blocks.
    ///  Changes returned by EndBlock and updated after Commit.
    // @@protoc_insertion_point(field:tendermint.state.State.consensus_params)
    pub consensus_params: ::protobuf::MessageField<super::params::ConsensusParams>,
    // @@protoc_insertion_point(field:tendermint.state.State.last_height_consensus_params_changed)
    pub last_height_consensus_params_changed: i64,
    ///  Merkle root of the results from executing prev block
    // @@protoc_insertion_point(field:tendermint.state.State.last_results_hash)
    pub last_results_hash: ::std::vec::Vec<u8>,
    ///  the latest AppHash we've received from calling abci.Commit()
    // @@protoc_insertion_point(field:tendermint.state.State.app_hash)
    pub app_hash: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.state.State.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a State {
    fn default() -> &'a State {
        <State as ::protobuf::Message>::default_instance()
    }
}

impl State {
    pub fn new() -> State {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Version>(
            "version",
            |m: &State| { &m.version },
            |m: &mut State| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &State| { &m.chain_id },
            |m: &mut State| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "initial_height",
            |m: &State| { &m.initial_height },
            |m: &mut State| { &mut m.initial_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_block_height",
            |m: &State| { &m.last_block_height },
            |m: &mut State| { &mut m.last_block_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::BlockID>(
            "last_block_id",
            |m: &State| { &m.last_block_id },
            |m: &mut State| { &mut m.last_block_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_block_time",
            |m: &State| { &m.last_block_time },
            |m: &mut State| { &mut m.last_block_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::validator::ValidatorSet>(
            "next_validators",
            |m: &State| { &m.next_validators },
            |m: &mut State| { &mut m.next_validators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::validator::ValidatorSet>(
            "validators",
            |m: &State| { &m.validators },
            |m: &mut State| { &mut m.validators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::validator::ValidatorSet>(
            "last_validators",
            |m: &State| { &m.last_validators },
            |m: &mut State| { &mut m.last_validators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_height_validators_changed",
            |m: &State| { &m.last_height_validators_changed },
            |m: &mut State| { &mut m.last_height_validators_changed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::params::ConsensusParams>(
            "consensus_params",
            |m: &State| { &m.consensus_params },
            |m: &mut State| { &mut m.consensus_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_height_consensus_params_changed",
            |m: &State| { &m.last_height_consensus_params_changed },
            |m: &mut State| { &mut m.last_height_consensus_params_changed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_results_hash",
            |m: &State| { &m.last_results_hash },
            |m: &mut State| { &mut m.last_results_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_hash",
            |m: &State| { &m.app_hash },
            |m: &mut State| { &mut m.app_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<State>(
            "State",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for State {
    const NAME: &'static str = "State";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.version)?;
                },
                18 => {
                    self.chain_id = is.read_string()?;
                },
                112 => {
                    self.initial_height = is.read_int64()?;
                },
                24 => {
                    self.last_block_height = is.read_int64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_block_id)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_block_time)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.next_validators)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.validators)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_validators)?;
                },
                72 => {
                    self.last_height_validators_changed = is.read_int64()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_params)?;
                },
                88 => {
                    self.last_height_consensus_params_changed = is.read_int64()?;
                },
                98 => {
                    self.last_results_hash = is.read_bytes()?;
                },
                106 => {
                    self.app_hash = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.chain_id);
        }
        if self.initial_height != 0 {
            my_size += ::protobuf::rt::int64_size(14, self.initial_height);
        }
        if self.last_block_height != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.last_block_height);
        }
        if let Some(v) = self.last_block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_block_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.next_validators.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.validators.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_validators.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.last_height_validators_changed != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.last_height_validators_changed);
        }
        if let Some(v) = self.consensus_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.last_height_consensus_params_changed != 0 {
            my_size += ::protobuf::rt::int64_size(11, self.last_height_consensus_params_changed);
        }
        if !self.last_results_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.last_results_hash);
        }
        if !self.app_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(13, &self.app_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(2, &self.chain_id)?;
        }
        if self.initial_height != 0 {
            os.write_int64(14, self.initial_height)?;
        }
        if self.last_block_height != 0 {
            os.write_int64(3, self.last_block_height)?;
        }
        if let Some(v) = self.last_block_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.last_block_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.next_validators.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.validators.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.last_validators.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.last_height_validators_changed != 0 {
            os.write_int64(9, self.last_height_validators_changed)?;
        }
        if let Some(v) = self.consensus_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.last_height_consensus_params_changed != 0 {
            os.write_int64(11, self.last_height_consensus_params_changed)?;
        }
        if !self.last_results_hash.is_empty() {
            os.write_bytes(12, &self.last_results_hash)?;
        }
        if !self.app_hash.is_empty() {
            os.write_bytes(13, &self.app_hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> State {
        State::new()
    }

    fn clear(&mut self) {
        self.version.clear();
        self.chain_id.clear();
        self.initial_height = 0;
        self.last_block_height = 0;
        self.last_block_id.clear();
        self.last_block_time.clear();
        self.next_validators.clear();
        self.validators.clear();
        self.last_validators.clear();
        self.last_height_validators_changed = 0;
        self.consensus_params.clear();
        self.last_height_consensus_params_changed = 0;
        self.last_results_hash.clear();
        self.app_hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static State {
        static instance: State = State {
            version: ::protobuf::MessageField::none(),
            chain_id: ::std::string::String::new(),
            initial_height: 0,
            last_block_height: 0,
            last_block_id: ::protobuf::MessageField::none(),
            last_block_time: ::protobuf::MessageField::none(),
            next_validators: ::protobuf::MessageField::none(),
            validators: ::protobuf::MessageField::none(),
            last_validators: ::protobuf::MessageField::none(),
            last_height_validators_changed: 0,
            consensus_params: ::protobuf::MessageField::none(),
            last_height_consensus_params_changed: 0,
            last_results_hash: ::std::vec::Vec::new(),
            app_hash: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for State {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("State").unwrap()).clone()
    }
}

impl ::std::fmt::Display for State {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for State {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ctendermint/state/types.proto\x12\x10tendermint.state\x1a\x14gogopr\
    oto/gogo.proto\x1a\x1btendermint/abci/types.proto\x1a\x1ctendermint/type\
    s/types.proto\x1a\x20tendermint/types/validator.proto\x1a\x1dtendermint/\
    types/params.proto\x1a\x1etendermint/version/types.proto\x1a\x1fgoogle/p\
    rotobuf/timestamp.proto\"\xda\x01\n\rABCIResponses\x12C\n\x0bdeliver_txs\
    \x18\x01\x20\x03(\x0b2\".tendermint.abci.ResponseDeliverTxR\ndeliverTxs\
    \x12>\n\tend_block\x18\x02\x20\x01(\x0b2!.tendermint.abci.ResponseEndBlo\
    ckR\x08endBlock\x12D\n\x0bbegin_block\x18\x03\x20\x01(\x0b2#.tendermint.\
    abci.ResponseBeginBlockR\nbeginBlock\"\x85\x01\n\x0eValidatorsInfo\x12C\
    \n\rvalidator_set\x18\x01\x20\x01(\x0b2\x1e.tendermint.types.ValidatorSe\
    tR\x0cvalidatorSet\x12.\n\x13last_height_changed\x18\x02\x20\x01(\x03R\
    \x11lastHeightChanged\"\x99\x01\n\x13ConsensusParamsInfo\x12R\n\x10conse\
    nsus_params\x18\x01\x20\x01(\x0b2!.tendermint.types.ConsensusParamsR\x0f\
    consensusParamsB\x04\xc8\xde\x1f\0\x12.\n\x13last_height_changed\x18\x02\
    \x20\x01(\x03R\x11lastHeightChanged\"h\n\x07Version\x12A\n\tconsensus\
    \x18\x01\x20\x01(\x0b2\x1d.tendermint.version.ConsensusR\tconsensusB\x04\
    \xc8\xde\x1f\0\x12\x1a\n\x08software\x18\x02\x20\x01(\tR\x08software\"\
    \xe1\x06\n\x05State\x129\n\x07version\x18\x01\x20\x01(\x0b2\x19.tendermi\
    nt.state.VersionR\x07versionB\x04\xc8\xde\x1f\0\x12&\n\x08chain_id\x18\
    \x02\x20\x01(\tR\x07chainIdB\x0b\xe2\xde\x1f\x07ChainID\x12%\n\x0einitia\
    l_height\x18\x0e\x20\x01(\x03R\rinitialHeight\x12*\n\x11last_block_heigh\
    t\x18\x03\x20\x01(\x03R\x0flastBlockHeight\x12R\n\rlast_block_id\x18\x04\
    \x20\x01(\x0b2\x19.tendermint.types.BlockIDR\x0blastBlockIdB\x13\xc8\xde\
    \x1f\0\xe2\xde\x1f\x0bLastBlockID\x12L\n\x0flast_block_time\x18\x05\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\rlastBlockTimeB\x08\xc8\xde\
    \x1f\0\x90\xdf\x1f\x01\x12G\n\x0fnext_validators\x18\x06\x20\x01(\x0b2\
    \x1e.tendermint.types.ValidatorSetR\x0enextValidators\x12>\n\nvalidators\
    \x18\x07\x20\x01(\x0b2\x1e.tendermint.types.ValidatorSetR\nvalidators\
    \x12G\n\x0flast_validators\x18\x08\x20\x01(\x0b2\x1e.tendermint.types.Va\
    lidatorSetR\x0elastValidators\x12C\n\x1elast_height_validators_changed\
    \x18\t\x20\x01(\x03R\x1blastHeightValidatorsChanged\x12R\n\x10consensus_\
    params\x18\n\x20\x01(\x0b2!.tendermint.types.ConsensusParamsR\x0fconsens\
    usParamsB\x04\xc8\xde\x1f\0\x12N\n$last_height_consensus_params_changed\
    \x18\x0b\x20\x01(\x03R\x20lastHeightConsensusParamsChanged\x12*\n\x11las\
    t_results_hash\x18\x0c\x20\x01(\x0cR\x0flastResultsHash\x12\x19\n\x08app\
    _hash\x18\r\x20\x01(\x0cR\x07appHashB9Z7github.com/tendermint/tendermint\
    /proto/tendermint/stateJ\xc6\x15\n\x06\x12\x04\0\0J\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x19\n\x08\n\x01\x08\x12\
    \x03\x03\0N\n\t\n\x02\x08\x0b\x12\x03\x03\0N\n\t\n\x02\x03\0\x12\x03\x05\
    \0\x1e\n\t\n\x02\x03\x01\x12\x03\x06\0%\n\t\n\x02\x03\x02\x12\x03\x07\0&\
    \n\t\n\x02\x03\x03\x12\x03\x08\0*\n\t\n\x02\x03\x04\x12\x03\t\0'\n\t\n\
    \x02\x03\x05\x12\x03\n\0(\n\t\n\x02\x03\x06\x12\x03\x0b\0)\n\xa6\x01\n\
    \x02\x04\0\x12\x04\x10\0\x14\x01\x1a\x99\x01\x20ABCIResponses\x20retains\
    \x20the\x20responses\n\x20of\x20the\x20various\x20ABCI\x20calls\x20durin\
    g\x20block\x20processing.\n\x20It\x20is\x20persisted\x20to\x20disk\x20fo\
    r\x20each\x20height\x20before\x20calling\x20Commit.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x10\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x11\x02=\n\x0c\
    \n\x05\x04\0\x02\0\x04\x12\x03\x11\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\x11\x0b,\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11-8\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x11;<\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x12\x02=\n\
    \x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x12\x02\"\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x12-6\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x12;<\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\x13\x02=\n\x0c\n\x05\x04\0\x02\x02\x06\x12\
    \x03\x13\x02$\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x13-8\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x13;<\n_\n\x02\x04\x01\x12\x04\x17\0\x1a\x01\
    \x1aS\x20ValidatorsInfo\x20represents\x20the\x20latest\x20validator\x20s\
    et,\x20or\x20the\x20last\x20height\x20it\x20changed\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x17\x08\x16\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x18\x028\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x18\x02\x1f\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x18\x20-\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1867\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03\x19\x028\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03\x19\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\x20\
    3\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1967\ng\n\x02\x04\x02\x12\x04\
    \x1d\0\x20\x01\x1a[\x20ConsensusParamsInfo\x20represents\x20the\x20lates\
    t\x20consensus\x20params,\x20or\x20the\x20last\x20height\x20it\x20change\
    d\n\n\n\n\x03\x04\x02\x01\x12\x03\x1d\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x1e\x02Z\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1e\x02\"\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03\x1e#3\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x1e9:\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03\x1e;Y\n\x0f\n\x08\x04\
    \x02\x02\0\x08\xe9\xfb\x03\x12\x03\x1e<X\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x1f\x02;\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1f\x02\x07\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03\x1f#6\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03\x1f9:\n\n\n\x02\x04\x03\x12\x04\"\0%\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03\"\x08\x0f\n\x0b\n\x04\x04\x03\x02\0\x12\x03#\x02L\n\x0c\n\x05\
    \x04\x03\x02\0\x06\x12\x03#\x02\x1e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03#\x1f(\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03#+,\n\x0c\n\x05\x04\x03\
    \x02\0\x08\x12\x03#-K\n\x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03#\
    .J\n\x0b\n\x04\x04\x03\x02\x01\x12\x03$\x02-\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03$\x1f'\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x03$+,\n\n\n\x02\x04\x04\x12\x04'\0J\
    \x01\n\n\n\x03\x04\x04\x01\x12\x03'\x08\r\n\x0b\n\x04\x04\x04\x02\0\x12\
    \x03(\x025\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03(\x02\t\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03(\n\x11\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03(\x14\
    \x15\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03(\x164\n\x0f\n\x08\x04\x04\x02\
    \0\x08\xe9\xfb\x03\x12\x03(\x173\n\x18\n\x04\x04\x04\x02\x01\x12\x03+\
    \x02A\x1a\x0b\x20immutable\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03+\
    \x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03+\t\x11\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03+\x1a\x1b\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\
    \x03+\x1c@\n\x0f\n\x08\x04\x04\x02\x01\x08\xec\xfb\x03\x12\x03+\x1d?\n\
    \x0b\n\x04\x04\x04\x02\x02\x12\x03,\x02\x1d\n\x0c\n\x05\x04\x04\x02\x02\
    \x05\x12\x03,\x02\x07\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03,\t\x17\n\
    \x0c\n\x05\x04\x04\x02\x02\x03\x12\x03,\x1a\x1c\nK\n\x04\x04\x04\x02\x03\
    \x12\x03/\x021\x1a>\x20LastBlockHeight=0\x20at\x20genesis\x20(ie.\x20blo\
    ck(H=0)\x20does\x20not\x20exist)\n\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\
    \x03/\x02\x07\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03/\x1b,\n\x0c\n\x05\
    \x04\x04\x02\x03\x03\x12\x03//0\n\x0c\n\x04\x04\x04\x02\x04\x12\x040\x02\
    1M\n\x0c\n\x05\x04\x04\x02\x04\x06\x12\x030\x02\x1a\n\x0c\n\x05\x04\x04\
    \x02\x04\x01\x12\x030\x1b(\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x030/0\n\
    \x0c\n\x05\x04\x04\x02\x04\x08\x12\x031\x06L\n\x0f\n\x08\x04\x04\x02\x04\
    \x08\xe9\xfb\x03\x12\x031\x07#\n\x0f\n\x08\x04\x04\x02\x04\x08\xec\xfb\
    \x03\x12\x031%K\n\x0c\n\x04\x04\x04\x02\x05\x12\x042\x023A\n\x0c\n\x05\
    \x04\x04\x02\x05\x06\x12\x032\x02\x1b\n\x0c\n\x05\x04\x04\x02\x05\x01\
    \x12\x032\x1c+\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x032./\n\x0c\n\x05\
    \x04\x04\x02\x05\x08\x12\x033\x06@\n\x0f\n\x08\x04\x04\x02\x05\x08\xe9\
    \xfb\x03\x12\x033\x07#\n\x0f\n\x08\x04\x04\x02\x05\x08\xf2\xfb\x03\x12\
    \x033%?\n\xde\x02\n\x04\x04\x04\x02\x06\x12\x03;\x02C\x1a\xd0\x02\x20Las\
    tValidators\x20is\x20used\x20to\x20validate\x20block.LastCommit.\n\x20Va\
    lidators\x20are\x20persisted\x20to\x20the\x20database\x20separately\x20e\
    very\x20time\x20they\x20change,\n\x20so\x20we\x20can\x20query\x20for\x20\
    historical\x20validator\x20sets.\n\x20Note\x20that\x20if\x20s.LastBlockH\
    eight\x20causes\x20a\x20valset\x20change,\n\x20we\x20set\x20s.LastHeight\
    ValidatorsChanged\x20=\x20s.LastBlockHeight\x20+\x201\x20+\x201\n\x20Ext\
    ra\x20+1\x20due\x20to\x20nextValSet\x20delay.\n\n\x0c\n\x05\x04\x04\x02\
    \x06\x06\x12\x03;\x02\x1f\n\x0c\n\x05\x04\x04\x02\x06\x01\x12\x03;\x20/\
    \n\x0c\n\x05\x04\x04\x02\x06\x03\x12\x03;AB\n\x0b\n\x04\x04\x04\x02\x07\
    \x12\x03<\x02C\n\x0c\n\x05\x04\x04\x02\x07\x06\x12\x03<\x02\x1f\n\x0c\n\
    \x05\x04\x04\x02\x07\x01\x12\x03<\x20*\n\x0c\n\x05\x04\x04\x02\x07\x03\
    \x12\x03<AB\n\x0b\n\x04\x04\x04\x02\x08\x12\x03=\x02C\n\x0c\n\x05\x04\
    \x04\x02\x08\x06\x12\x03=\x02\x1f\n\x0c\n\x05\x04\x04\x02\x08\x01\x12\
    \x03=\x20/\n\x0c\n\x05\x04\x04\x02\x08\x03\x12\x03=AB\n\x0b\n\x04\x04\
    \x04\x02\t\x12\x03>\x02C\n\x0c\n\x05\x04\x04\x02\t\x05\x12\x03>\x02\x07\
    \n\x0c\n\x05\x04\x04\x02\t\x01\x12\x03>\x20>\n\x0c\n\x05\x04\x04\x02\t\
    \x03\x12\x03>AB\nw\n\x04\x04\x04\x02\n\x12\x03B\x02l\x1aj\x20Consensus\
    \x20parameters\x20used\x20for\x20validating\x20blocks.\n\x20Changes\x20r\
    eturned\x20by\x20EndBlock\x20and\x20updated\x20after\x20Commit.\n\n\x0c\
    \n\x05\x04\x04\x02\n\x06\x12\x03B\x02\"\n\x0c\n\x05\x04\x04\x02\n\x01\
    \x12\x03B#3\n\x0c\n\x05\x04\x04\x02\n\x03\x12\x03BJL\n\x0c\n\x05\x04\x04\
    \x02\n\x08\x12\x03BMk\n\x0f\n\x08\x04\x04\x02\n\x08\xe9\xfb\x03\x12\x03B\
    Nj\n\x0b\n\x04\x04\x04\x02\x0b\x12\x03C\x02M\n\x0c\n\x05\x04\x04\x02\x0b\
    \x05\x12\x03C\x02\x07\n\x0c\n\x05\x04\x04\x02\x0b\x01\x12\x03C#G\n\x0c\n\
    \x05\x04\x04\x02\x0b\x03\x12\x03CJL\nC\n\x04\x04\x04\x02\x0c\x12\x03F\
    \x02\x1f\x1a6\x20Merkle\x20root\x20of\x20the\x20results\x20from\x20execu\
    ting\x20prev\x20block\n\n\x0c\n\x05\x04\x04\x02\x0c\x05\x12\x03F\x02\x07\
    \n\x0c\n\x05\x04\x04\x02\x0c\x01\x12\x03F\x08\x19\n\x0c\n\x05\x04\x04\
    \x02\x0c\x03\x12\x03F\x1c\x1e\nK\n\x04\x04\x04\x02\r\x12\x03I\x02\x16\
    \x1a>\x20the\x20latest\x20AppHash\x20we've\x20received\x20from\x20callin\
    g\x20abci.Commit()\n\n\x0c\n\x05\x04\x04\x02\r\x05\x12\x03I\x02\x07\n\
    \x0c\n\x05\x04\x04\x02\r\x01\x12\x03I\x08\x10\n\x0c\n\x05\x04\x04\x02\r\
    \x03\x12\x03I\x13\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            deps.push(super::validator::file_descriptor().clone());
            deps.push(super::params::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ABCIResponses::generated_message_descriptor_data());
            messages.push(ValidatorsInfo::generated_message_descriptor_data());
            messages.push(ConsensusParamsInfo::generated_message_descriptor_data());
            messages.push(Version::generated_message_descriptor_data());
            messages.push(State::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
