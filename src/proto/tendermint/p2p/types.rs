// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tendermint/p2p/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.p2p.NetAddress)
pub struct NetAddress {
    // message fields
    // @@protoc_insertion_point(field:tendermint.p2p.NetAddress.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.p2p.NetAddress.ip)
    pub ip: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.p2p.NetAddress.port)
    pub port: u32,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.p2p.NetAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NetAddress {
    fn default() -> &'a NetAddress {
        <NetAddress as ::protobuf::Message>::default_instance()
    }
}

impl NetAddress {
    pub fn new() -> NetAddress {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &NetAddress| { &m.id },
            |m: &mut NetAddress| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ip",
            |m: &NetAddress| { &m.ip },
            |m: &mut NetAddress| { &mut m.ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &NetAddress| { &m.port },
            |m: &mut NetAddress| { &mut m.port },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NetAddress>(
            "NetAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NetAddress {
    const NAME: &'static str = "NetAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.ip = is.read_string()?;
                },
                24 => {
                    self.port = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ip);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.port);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.ip.is_empty() {
            os.write_string(2, &self.ip)?;
        }
        if self.port != 0 {
            os.write_uint32(3, self.port)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NetAddress {
        NetAddress::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.ip.clear();
        self.port = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NetAddress {
        static instance: NetAddress = NetAddress {
            id: ::std::string::String::new(),
            ip: ::std::string::String::new(),
            port: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NetAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NetAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.p2p.ProtocolVersion)
pub struct ProtocolVersion {
    // message fields
    // @@protoc_insertion_point(field:tendermint.p2p.ProtocolVersion.p2p)
    pub p2p: u64,
    // @@protoc_insertion_point(field:tendermint.p2p.ProtocolVersion.block)
    pub block: u64,
    // @@protoc_insertion_point(field:tendermint.p2p.ProtocolVersion.app)
    pub app: u64,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.p2p.ProtocolVersion.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProtocolVersion {
    fn default() -> &'a ProtocolVersion {
        <ProtocolVersion as ::protobuf::Message>::default_instance()
    }
}

impl ProtocolVersion {
    pub fn new() -> ProtocolVersion {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "p2p",
            |m: &ProtocolVersion| { &m.p2p },
            |m: &mut ProtocolVersion| { &mut m.p2p },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block",
            |m: &ProtocolVersion| { &m.block },
            |m: &mut ProtocolVersion| { &mut m.block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app",
            |m: &ProtocolVersion| { &m.app },
            |m: &mut ProtocolVersion| { &mut m.app },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProtocolVersion>(
            "ProtocolVersion",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProtocolVersion {
    const NAME: &'static str = "ProtocolVersion";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.p2p = is.read_uint64()?;
                },
                16 => {
                    self.block = is.read_uint64()?;
                },
                24 => {
                    self.app = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.p2p != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.p2p);
        }
        if self.block != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.block);
        }
        if self.app != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.app);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.p2p != 0 {
            os.write_uint64(1, self.p2p)?;
        }
        if self.block != 0 {
            os.write_uint64(2, self.block)?;
        }
        if self.app != 0 {
            os.write_uint64(3, self.app)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProtocolVersion {
        ProtocolVersion::new()
    }

    fn clear(&mut self) {
        self.p2p = 0;
        self.block = 0;
        self.app = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProtocolVersion {
        static instance: ProtocolVersion = ProtocolVersion {
            p2p: 0,
            block: 0,
            app: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProtocolVersion {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProtocolVersion").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProtocolVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolVersion {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.p2p.DefaultNodeInfo)
pub struct DefaultNodeInfo {
    // message fields
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfo.protocol_version)
    pub protocol_version: ::protobuf::MessageField<ProtocolVersion>,
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfo.default_node_id)
    pub default_node_id: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfo.listen_addr)
    pub listen_addr: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfo.network)
    pub network: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfo.version)
    pub version: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfo.channels)
    pub channels: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfo.moniker)
    pub moniker: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfo.other)
    pub other: ::protobuf::MessageField<DefaultNodeInfoOther>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.p2p.DefaultNodeInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DefaultNodeInfo {
    fn default() -> &'a DefaultNodeInfo {
        <DefaultNodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl DefaultNodeInfo {
    pub fn new() -> DefaultNodeInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProtocolVersion>(
            "protocol_version",
            |m: &DefaultNodeInfo| { &m.protocol_version },
            |m: &mut DefaultNodeInfo| { &mut m.protocol_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "default_node_id",
            |m: &DefaultNodeInfo| { &m.default_node_id },
            |m: &mut DefaultNodeInfo| { &mut m.default_node_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "listen_addr",
            |m: &DefaultNodeInfo| { &m.listen_addr },
            |m: &mut DefaultNodeInfo| { &mut m.listen_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "network",
            |m: &DefaultNodeInfo| { &m.network },
            |m: &mut DefaultNodeInfo| { &mut m.network },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &DefaultNodeInfo| { &m.version },
            |m: &mut DefaultNodeInfo| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channels",
            |m: &DefaultNodeInfo| { &m.channels },
            |m: &mut DefaultNodeInfo| { &mut m.channels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "moniker",
            |m: &DefaultNodeInfo| { &m.moniker },
            |m: &mut DefaultNodeInfo| { &mut m.moniker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, DefaultNodeInfoOther>(
            "other",
            |m: &DefaultNodeInfo| { &m.other },
            |m: &mut DefaultNodeInfo| { &mut m.other },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DefaultNodeInfo>(
            "DefaultNodeInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DefaultNodeInfo {
    const NAME: &'static str = "DefaultNodeInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.protocol_version)?;
                },
                18 => {
                    self.default_node_id = is.read_string()?;
                },
                26 => {
                    self.listen_addr = is.read_string()?;
                },
                34 => {
                    self.network = is.read_string()?;
                },
                42 => {
                    self.version = is.read_string()?;
                },
                50 => {
                    self.channels = is.read_bytes()?;
                },
                58 => {
                    self.moniker = is.read_string()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.other)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.protocol_version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.default_node_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.default_node_id);
        }
        if !self.listen_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.listen_addr);
        }
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.network);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        if !self.channels.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.channels);
        }
        if !self.moniker.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.moniker);
        }
        if let Some(v) = self.other.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.protocol_version.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.default_node_id.is_empty() {
            os.write_string(2, &self.default_node_id)?;
        }
        if !self.listen_addr.is_empty() {
            os.write_string(3, &self.listen_addr)?;
        }
        if !self.network.is_empty() {
            os.write_string(4, &self.network)?;
        }
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        if !self.channels.is_empty() {
            os.write_bytes(6, &self.channels)?;
        }
        if !self.moniker.is_empty() {
            os.write_string(7, &self.moniker)?;
        }
        if let Some(v) = self.other.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DefaultNodeInfo {
        DefaultNodeInfo::new()
    }

    fn clear(&mut self) {
        self.protocol_version.clear();
        self.default_node_id.clear();
        self.listen_addr.clear();
        self.network.clear();
        self.version.clear();
        self.channels.clear();
        self.moniker.clear();
        self.other.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DefaultNodeInfo {
        static instance: DefaultNodeInfo = DefaultNodeInfo {
            protocol_version: ::protobuf::MessageField::none(),
            default_node_id: ::std::string::String::new(),
            listen_addr: ::std::string::String::new(),
            network: ::std::string::String::new(),
            version: ::std::string::String::new(),
            channels: ::std::vec::Vec::new(),
            moniker: ::std::string::String::new(),
            other: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DefaultNodeInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DefaultNodeInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DefaultNodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DefaultNodeInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.p2p.DefaultNodeInfoOther)
pub struct DefaultNodeInfoOther {
    // message fields
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfoOther.tx_index)
    pub tx_index: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
    pub rpc_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.p2p.DefaultNodeInfoOther.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DefaultNodeInfoOther {
    fn default() -> &'a DefaultNodeInfoOther {
        <DefaultNodeInfoOther as ::protobuf::Message>::default_instance()
    }
}

impl DefaultNodeInfoOther {
    pub fn new() -> DefaultNodeInfoOther {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_index",
            |m: &DefaultNodeInfoOther| { &m.tx_index },
            |m: &mut DefaultNodeInfoOther| { &mut m.tx_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rpc_address",
            |m: &DefaultNodeInfoOther| { &m.rpc_address },
            |m: &mut DefaultNodeInfoOther| { &mut m.rpc_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DefaultNodeInfoOther>(
            "DefaultNodeInfoOther",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DefaultNodeInfoOther {
    const NAME: &'static str = "DefaultNodeInfoOther";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tx_index = is.read_string()?;
                },
                18 => {
                    self.rpc_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tx_index.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tx_index);
        }
        if !self.rpc_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rpc_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tx_index.is_empty() {
            os.write_string(1, &self.tx_index)?;
        }
        if !self.rpc_address.is_empty() {
            os.write_string(2, &self.rpc_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DefaultNodeInfoOther {
        DefaultNodeInfoOther::new()
    }

    fn clear(&mut self) {
        self.tx_index.clear();
        self.rpc_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DefaultNodeInfoOther {
        static instance: DefaultNodeInfoOther = DefaultNodeInfoOther {
            tx_index: ::std::string::String::new(),
            rpc_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DefaultNodeInfoOther {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DefaultNodeInfoOther").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DefaultNodeInfoOther {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DefaultNodeInfoOther {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1atendermint/p2p/types.proto\x12\x0etendermint.p2p\x1a\x14gogoproto/\
    gogo.proto\"P\n\nNetAddress\x12\x16\n\x02id\x18\x01\x20\x01(\tR\x02idB\
    \x06\xe2\xde\x1f\x02ID\x12\x16\n\x02ip\x18\x02\x20\x01(\tR\x02ipB\x06\
    \xe2\xde\x1f\x02IP\x12\x12\n\x04port\x18\x03\x20\x01(\rR\x04port\"T\n\
    \x0fProtocolVersion\x12\x19\n\x03p2p\x18\x01\x20\x01(\x04R\x03p2pB\x07\
    \xe2\xde\x1f\x03P2P\x12\x14\n\x05block\x18\x02\x20\x01(\x04R\x05block\
    \x12\x10\n\x03app\x18\x03\x20\x01(\x04R\x03app\"\xeb\x02\n\x0fDefaultNod\
    eInfo\x12P\n\x10protocol_version\x18\x01\x20\x01(\x0b2\x1f.tendermint.p2\
    p.ProtocolVersionR\x0fprotocolVersionB\x04\xc8\xde\x1f\0\x129\n\x0fdefau\
    lt_node_id\x18\x02\x20\x01(\tR\rdefaultNodeIdB\x11\xe2\xde\x1f\rDefaultN\
    odeID\x12\x1f\n\x0blisten_addr\x18\x03\x20\x01(\tR\nlistenAddr\x12\x18\n\
    \x07network\x18\x04\x20\x01(\tR\x07network\x12\x18\n\x07version\x18\x05\
    \x20\x01(\tR\x07version\x12\x1a\n\x08channels\x18\x06\x20\x01(\x0cR\x08c\
    hannels\x12\x18\n\x07moniker\x18\x07\x20\x01(\tR\x07moniker\x12@\n\x05ot\
    her\x18\x08\x20\x01(\x0b2$.tendermint.p2p.DefaultNodeInfoOtherR\x05other\
    B\x04\xc8\xde\x1f\0\"b\n\x14DefaultNodeInfoOther\x12\x19\n\x08tx_index\
    \x18\x01\x20\x01(\tR\x07txIndex\x12/\n\x0brpc_address\x18\x02\x20\x01(\t\
    R\nrpcAddressB\x0e\xe2\xde\x1f\nRPCAddressB7Z5github.com/tendermint/tend\
    ermint/proto/tendermint/p2pJ\xe5\t\n\x06\x12\x04\0\0!\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x17\n\x08\n\x01\x08\
    \x12\x03\x03\0L\n\t\n\x02\x08\x0b\x12\x03\x03\0L\n\t\n\x02\x03\0\x12\x03\
    \x05\0\x1e\n\n\n\x02\x04\0\x12\x04\x07\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x07\x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x022\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x08\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x10\x11\n\x0c\n\x05\
    \x04\0\x02\0\x08\x12\x03\x08\x121\n\x0f\n\x08\x04\0\x02\0\x08\xec\xfb\
    \x03\x12\x03\x08\x130\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x022\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\t\t\x0b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x10\x11\n\x0c\n\
    \x05\x04\0\x02\x01\x08\x12\x03\t\x121\n\x0f\n\x08\x04\0\x02\x01\x08\xec\
    \xfb\x03\x12\x03\t\x130\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x02\x12\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\n\t\r\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n\x10\x11\n\n\n\
    \x02\x04\x01\x12\x04\r\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x17\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0e\x024\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\t\x0c\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x11\x12\n\x0c\n\x05\x04\x01\
    \x02\0\x08\x12\x03\x0e\x133\n\x0f\n\x08\x04\x01\x02\0\x08\xec\xfb\x03\
    \x12\x03\x0e\x142\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x02\x13\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\x0f\t\x0e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\
    \x11\x12\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x10\x02\x13\n\x0c\n\x05\x04\
    \x01\x02\x02\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03\x10\t\x0c\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x10\x11\x12\n\n\n\
    \x02\x04\x02\x12\x04\x13\0\x1c\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\x08\
    \x17\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x14\x02K\n\x0c\n\x05\x04\x02\x02\
    \0\x06\x12\x03\x14\x02\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x14\x17\
    '\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x14*+\n\x0c\n\x05\x04\x02\x02\0\
    \x08\x12\x03\x14,J\n\x0f\n\x08\x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03\x14\
    -I\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x15\x02W\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\
    \x17&\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x15*+\n\x0c\n\x05\x04\x02\
    \x02\x01\x08\x12\x03\x15,V\n\x0f\n\x08\x04\x02\x02\x01\x08\xec\xfb\x03\
    \x12\x03\x15-U\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x16\x02,\n\x0c\n\x05\
    \x04\x02\x02\x02\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x03\x16\x17\"\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x16*+\n\x0b\n\
    \x04\x04\x02\x02\x03\x12\x03\x17\x02,\n\x0c\n\x05\x04\x02\x02\x03\x05\
    \x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x17\x17\x1e\
    \n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x17*+\n\x0b\n\x04\x04\x02\x02\
    \x04\x12\x03\x18\x02,\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x18\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x18\x17\x1e\n\x0c\n\x05\x04\
    \x02\x02\x04\x03\x12\x03\x18*+\n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x19\
    \x02,\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03\x19\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\x05\x01\x12\x03\x19\x17\x1f\n\x0c\n\x05\x04\x02\x02\x05\x03\
    \x12\x03\x19*+\n\x0b\n\x04\x04\x02\x02\x06\x12\x03\x1a\x02,\n\x0c\n\x05\
    \x04\x02\x02\x06\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x02\x02\x06\x01\
    \x12\x03\x1a\x17\x1e\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03\x1a*+\n\x0b\
    \n\x04\x04\x02\x02\x07\x12\x03\x1b\x02K\n\x0c\n\x05\x04\x02\x02\x07\x06\
    \x12\x03\x1b\x02\x16\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03\x1b\x17\x1c\
    \n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03\x1b*+\n\x0c\n\x05\x04\x02\x02\
    \x07\x08\x12\x03\x1b,J\n\x0f\n\x08\x04\x02\x02\x07\x08\xe9\xfb\x03\x12\
    \x03\x1b-I\n\n\n\x02\x04\x03\x12\x04\x1e\0!\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03\x1e\x08\x1c\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1f\x02\x19\n\x0c\
    \n\x05\x04\x03\x02\0\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03\x1f\t\x11\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1f\x17\x18\
    \n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x20\x02A\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x20\
    \t\x14\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x20\x17\x18\n\x0c\n\x05\
    \x04\x03\x02\x01\x08\x12\x03\x20\x19@\n\x0f\n\x08\x04\x03\x02\x01\x08\
    \xec\xfb\x03\x12\x03\x20\x1a?b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(NetAddress::generated_message_descriptor_data());
            messages.push(ProtocolVersion::generated_message_descriptor_data());
            messages.push(DefaultNodeInfo::generated_message_descriptor_data());
            messages.push(DefaultNodeInfoOther::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
