// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tendermint/consensus/wal.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgInfo are msgs from the reactor which may update the state
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.consensus.MsgInfo)
pub struct MsgInfo {
    // message fields
    // @@protoc_insertion_point(field:tendermint.consensus.MsgInfo.msg)
    pub msg: ::protobuf::MessageField<super::types::Message>,
    // @@protoc_insertion_point(field:tendermint.consensus.MsgInfo.peer_id)
    pub peer_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.consensus.MsgInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgInfo {
    fn default() -> &'a MsgInfo {
        <MsgInfo as ::protobuf::Message>::default_instance()
    }
}

impl MsgInfo {
    pub fn new() -> MsgInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Message>(
            "msg",
            |m: &MsgInfo| { &m.msg },
            |m: &mut MsgInfo| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "peer_id",
            |m: &MsgInfo| { &m.peer_id },
            |m: &mut MsgInfo| { &mut m.peer_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgInfo>(
            "MsgInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgInfo {
    const NAME: &'static str = "MsgInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.msg)?;
                },
                18 => {
                    self.peer_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.msg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.peer_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.peer_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.msg.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.peer_id.is_empty() {
            os.write_string(2, &self.peer_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgInfo {
        MsgInfo::new()
    }

    fn clear(&mut self) {
        self.msg.clear();
        self.peer_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgInfo {
        static instance: MsgInfo = MsgInfo {
            msg: ::protobuf::MessageField::none(),
            peer_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TimeoutInfo internally generated messages which may update the state
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.consensus.TimeoutInfo)
pub struct TimeoutInfo {
    // message fields
    // @@protoc_insertion_point(field:tendermint.consensus.TimeoutInfo.duration)
    pub duration: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:tendermint.consensus.TimeoutInfo.height)
    pub height: i64,
    // @@protoc_insertion_point(field:tendermint.consensus.TimeoutInfo.round)
    pub round: i32,
    // @@protoc_insertion_point(field:tendermint.consensus.TimeoutInfo.step)
    pub step: u32,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.consensus.TimeoutInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TimeoutInfo {
    fn default() -> &'a TimeoutInfo {
        <TimeoutInfo as ::protobuf::Message>::default_instance()
    }
}

impl TimeoutInfo {
    pub fn new() -> TimeoutInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "duration",
            |m: &TimeoutInfo| { &m.duration },
            |m: &mut TimeoutInfo| { &mut m.duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &TimeoutInfo| { &m.height },
            |m: &mut TimeoutInfo| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round",
            |m: &TimeoutInfo| { &m.round },
            |m: &mut TimeoutInfo| { &mut m.round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "step",
            |m: &TimeoutInfo| { &m.step },
            |m: &mut TimeoutInfo| { &mut m.step },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TimeoutInfo>(
            "TimeoutInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TimeoutInfo {
    const NAME: &'static str = "TimeoutInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.duration)?;
                },
                16 => {
                    self.height = is.read_int64()?;
                },
                24 => {
                    self.round = is.read_int32()?;
                },
                32 => {
                    self.step = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.height);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.round);
        }
        if self.step != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.step);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.duration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.height != 0 {
            os.write_int64(2, self.height)?;
        }
        if self.round != 0 {
            os.write_int32(3, self.round)?;
        }
        if self.step != 0 {
            os.write_uint32(4, self.step)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TimeoutInfo {
        TimeoutInfo::new()
    }

    fn clear(&mut self) {
        self.duration.clear();
        self.height = 0;
        self.round = 0;
        self.step = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TimeoutInfo {
        static instance: TimeoutInfo = TimeoutInfo {
            duration: ::protobuf::MessageField::none(),
            height: 0,
            round: 0,
            step: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TimeoutInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TimeoutInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TimeoutInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeoutInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  EndHeight marks the end of the given height inside WAL.
///  @internal used by scripts/wal2json util.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.consensus.EndHeight)
pub struct EndHeight {
    // message fields
    // @@protoc_insertion_point(field:tendermint.consensus.EndHeight.height)
    pub height: i64,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.consensus.EndHeight.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EndHeight {
    fn default() -> &'a EndHeight {
        <EndHeight as ::protobuf::Message>::default_instance()
    }
}

impl EndHeight {
    pub fn new() -> EndHeight {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &EndHeight| { &m.height },
            |m: &mut EndHeight| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EndHeight>(
            "EndHeight",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EndHeight {
    const NAME: &'static str = "EndHeight";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EndHeight {
        EndHeight::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EndHeight {
        static instance: EndHeight = EndHeight {
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EndHeight {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EndHeight").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EndHeight {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndHeight {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.consensus.WALMessage)
pub struct WALMessage {
    // message oneof groups
    pub sum: ::std::option::Option<walmessage::Sum>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.consensus.WALMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WALMessage {
    fn default() -> &'a WALMessage {
        <WALMessage as ::protobuf::Message>::default_instance()
    }
}

impl WALMessage {
    pub fn new() -> WALMessage {
        ::std::default::Default::default()
    }

    // .tendermint.types.EventDataRoundState event_data_round_state = 1;

    pub fn event_data_round_state(&self) -> &super::events::EventDataRoundState {
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::EventDataRoundState(ref v)) => v,
            _ => <super::events::EventDataRoundState as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_event_data_round_state(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_event_data_round_state(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::EventDataRoundState(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_event_data_round_state(&mut self, v: super::events::EventDataRoundState) {
        self.sum = ::std::option::Option::Some(walmessage::Sum::EventDataRoundState(v))
    }

    // Mutable pointer to the field.
    pub fn mut_event_data_round_state(&mut self) -> &mut super::events::EventDataRoundState {
        if let ::std::option::Option::Some(walmessage::Sum::EventDataRoundState(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(walmessage::Sum::EventDataRoundState(super::events::EventDataRoundState::new()));
        }
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::EventDataRoundState(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_event_data_round_state(&mut self) -> super::events::EventDataRoundState {
        if self.has_event_data_round_state() {
            match self.sum.take() {
                ::std::option::Option::Some(walmessage::Sum::EventDataRoundState(v)) => v,
                _ => panic!(),
            }
        } else {
            super::events::EventDataRoundState::new()
        }
    }

    // .tendermint.consensus.MsgInfo msg_info = 2;

    pub fn msg_info(&self) -> &MsgInfo {
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::MsgInfo(ref v)) => v,
            _ => <MsgInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_msg_info(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_msg_info(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::MsgInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_msg_info(&mut self, v: MsgInfo) {
        self.sum = ::std::option::Option::Some(walmessage::Sum::MsgInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_msg_info(&mut self) -> &mut MsgInfo {
        if let ::std::option::Option::Some(walmessage::Sum::MsgInfo(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(walmessage::Sum::MsgInfo(MsgInfo::new()));
        }
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::MsgInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_msg_info(&mut self) -> MsgInfo {
        if self.has_msg_info() {
            match self.sum.take() {
                ::std::option::Option::Some(walmessage::Sum::MsgInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            MsgInfo::new()
        }
    }

    // .tendermint.consensus.TimeoutInfo timeout_info = 3;

    pub fn timeout_info(&self) -> &TimeoutInfo {
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::TimeoutInfo(ref v)) => v,
            _ => <TimeoutInfo as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_timeout_info(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_timeout_info(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::TimeoutInfo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timeout_info(&mut self, v: TimeoutInfo) {
        self.sum = ::std::option::Option::Some(walmessage::Sum::TimeoutInfo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timeout_info(&mut self) -> &mut TimeoutInfo {
        if let ::std::option::Option::Some(walmessage::Sum::TimeoutInfo(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(walmessage::Sum::TimeoutInfo(TimeoutInfo::new()));
        }
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::TimeoutInfo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timeout_info(&mut self) -> TimeoutInfo {
        if self.has_timeout_info() {
            match self.sum.take() {
                ::std::option::Option::Some(walmessage::Sum::TimeoutInfo(v)) => v,
                _ => panic!(),
            }
        } else {
            TimeoutInfo::new()
        }
    }

    // .tendermint.consensus.EndHeight end_height = 4;

    pub fn end_height(&self) -> &EndHeight {
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::EndHeight(ref v)) => v,
            _ => <EndHeight as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_end_height(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_end_height(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::EndHeight(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_end_height(&mut self, v: EndHeight) {
        self.sum = ::std::option::Option::Some(walmessage::Sum::EndHeight(v))
    }

    // Mutable pointer to the field.
    pub fn mut_end_height(&mut self) -> &mut EndHeight {
        if let ::std::option::Option::Some(walmessage::Sum::EndHeight(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(walmessage::Sum::EndHeight(EndHeight::new()));
        }
        match self.sum {
            ::std::option::Option::Some(walmessage::Sum::EndHeight(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_end_height(&mut self) -> EndHeight {
        if self.has_end_height() {
            match self.sum.take() {
                ::std::option::Option::Some(walmessage::Sum::EndHeight(v)) => v,
                _ => panic!(),
            }
        } else {
            EndHeight::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::events::EventDataRoundState>(
            "event_data_round_state",
            WALMessage::has_event_data_round_state,
            WALMessage::event_data_round_state,
            WALMessage::mut_event_data_round_state,
            WALMessage::set_event_data_round_state,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MsgInfo>(
            "msg_info",
            WALMessage::has_msg_info,
            WALMessage::msg_info,
            WALMessage::mut_msg_info,
            WALMessage::set_msg_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TimeoutInfo>(
            "timeout_info",
            WALMessage::has_timeout_info,
            WALMessage::timeout_info,
            WALMessage::mut_timeout_info,
            WALMessage::set_timeout_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, EndHeight>(
            "end_height",
            WALMessage::has_end_height,
            WALMessage::end_height,
            WALMessage::mut_end_height,
            WALMessage::set_end_height,
        ));
        oneofs.push(walmessage::Sum::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WALMessage>(
            "WALMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WALMessage {
    const NAME: &'static str = "WALMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sum = ::std::option::Option::Some(walmessage::Sum::EventDataRoundState(is.read_message()?));
                },
                18 => {
                    self.sum = ::std::option::Option::Some(walmessage::Sum::MsgInfo(is.read_message()?));
                },
                26 => {
                    self.sum = ::std::option::Option::Some(walmessage::Sum::TimeoutInfo(is.read_message()?));
                },
                34 => {
                    self.sum = ::std::option::Option::Some(walmessage::Sum::EndHeight(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &walmessage::Sum::EventDataRoundState(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &walmessage::Sum::MsgInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &walmessage::Sum::TimeoutInfo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &walmessage::Sum::EndHeight(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &walmessage::Sum::EventDataRoundState(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &walmessage::Sum::MsgInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &walmessage::Sum::TimeoutInfo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &walmessage::Sum::EndHeight(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WALMessage {
        WALMessage::new()
    }

    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WALMessage {
        static instance: WALMessage = WALMessage {
            sum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WALMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WALMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WALMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WALMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `WALMessage`
pub mod walmessage {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:tendermint.consensus.WALMessage.sum)
    pub enum Sum {
        // @@protoc_insertion_point(oneof_field:tendermint.consensus.WALMessage.event_data_round_state)
        EventDataRoundState(super::super::events::EventDataRoundState),
        // @@protoc_insertion_point(oneof_field:tendermint.consensus.WALMessage.msg_info)
        MsgInfo(super::MsgInfo),
        // @@protoc_insertion_point(oneof_field:tendermint.consensus.WALMessage.timeout_info)
        TimeoutInfo(super::TimeoutInfo),
        // @@protoc_insertion_point(oneof_field:tendermint.consensus.WALMessage.end_height)
        EndHeight(super::EndHeight),
    }

    impl ::protobuf::Oneof for Sum {
    }

    impl ::protobuf::OneofFull for Sum {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::WALMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("sum").unwrap()).clone()
        }
    }

    impl Sum {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Sum>("sum")
        }
    }
}

///  TimedWALMessage wraps WALMessage and adds Time for debugging purposes.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.consensus.TimedWALMessage)
pub struct TimedWALMessage {
    // message fields
    // @@protoc_insertion_point(field:tendermint.consensus.TimedWALMessage.time)
    pub time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:tendermint.consensus.TimedWALMessage.msg)
    pub msg: ::protobuf::MessageField<WALMessage>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.consensus.TimedWALMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TimedWALMessage {
    fn default() -> &'a TimedWALMessage {
        <TimedWALMessage as ::protobuf::Message>::default_instance()
    }
}

impl TimedWALMessage {
    pub fn new() -> TimedWALMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "time",
            |m: &TimedWALMessage| { &m.time },
            |m: &mut TimedWALMessage| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, WALMessage>(
            "msg",
            |m: &TimedWALMessage| { &m.msg },
            |m: &mut TimedWALMessage| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TimedWALMessage>(
            "TimedWALMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TimedWALMessage {
    const NAME: &'static str = "TimedWALMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.msg)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.msg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.msg.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TimedWALMessage {
        TimedWALMessage::new()
    }

    fn clear(&mut self) {
        self.time.clear();
        self.msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TimedWALMessage {
        static instance: TimedWALMessage = TimedWALMessage {
            time: ::protobuf::MessageField::none(),
            msg: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TimedWALMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TimedWALMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TimedWALMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimedWALMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1etendermint/consensus/wal.proto\x12\x14tendermint.consensus\x1a\x14\
    gogoproto/gogo.proto\x1a\x20tendermint/consensus/types.proto\x1a\x1dtend\
    ermint/types/events.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fg\
    oogle/protobuf/timestamp.proto\"e\n\x07MsgInfo\x125\n\x03msg\x18\x01\x20\
    \x01(\x0b2\x1d.tendermint.consensus.MessageR\x03msgB\x04\xc8\xde\x1f\0\
    \x12#\n\x07peer_id\x18\x02\x20\x01(\tR\x06peerIdB\n\xe2\xde\x1f\x06PeerI\
    D\"\x90\x01\n\x0bTimeoutInfo\x12?\n\x08duration\x18\x01\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\x08durationB\x08\xc8\xde\x1f\0\x98\xdf\
    \x1f\x01\x12\x16\n\x06height\x18\x02\x20\x01(\x03R\x06height\x12\x14\n\
    \x05round\x18\x03\x20\x01(\x05R\x05round\x12\x12\n\x04step\x18\x04\x20\
    \x01(\rR\x04step\"#\n\tEndHeight\x12\x16\n\x06height\x18\x01\x20\x01(\
    \x03R\x06height\"\xb7\x02\n\nWALMessage\x12\\\n\x16event_data_round_stat\
    e\x18\x01\x20\x01(\x0b2%.tendermint.types.EventDataRoundStateH\0R\x13eve\
    ntDataRoundState\x12:\n\x08msg_info\x18\x02\x20\x01(\x0b2\x1d.tendermint\
    .consensus.MsgInfoH\0R\x07msgInfo\x12F\n\x0ctimeout_info\x18\x03\x20\x01\
    (\x0b2!.tendermint.consensus.TimeoutInfoH\0R\x0btimeoutInfo\x12@\n\nend_\
    height\x18\x04\x20\x01(\x0b2\x1f.tendermint.consensus.EndHeightH\0R\tend\
    HeightB\x05\n\x03sum\"\x7f\n\x0fTimedWALMessage\x128\n\x04time\x18\x01\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x04timeB\x08\xc8\xde\x1f\0\
    \x90\xdf\x1f\x01\x122\n\x03msg\x18\x02\x20\x01(\x0b2\x20.tendermint.cons\
    ensus.WALMessageR\x03msgB=Z;github.com/tendermint/tendermint/proto/tende\
    rmint/consensusJ\x9d\x0b\n\x06\x12\x04\0\0-\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1d\n\x08\n\x01\x08\x12\x03\x03\0\
    R\n\t\n\x02\x08\x0b\x12\x03\x03\0R\n\t\n\x02\x03\0\x12\x03\x05\0\x1e\n\t\
    \n\x02\x03\x01\x12\x03\x06\0*\n\t\n\x02\x03\x02\x12\x03\x07\0'\n\t\n\x02\
    \x03\x03\x12\x03\x08\0(\n\t\n\x02\x03\x04\x12\x03\t\0)\nJ\n\x02\x04\0\
    \x12\x04\x0c\0\x0f\x01\x1a>\x20MsgInfo\x20are\x20msgs\x20from\x20the\x20\
    reactor\x20which\x20may\x20update\x20the\x20state\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x0c\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\r\x025\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03\r\x02\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\n\
    \r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x14\x15\n\x0c\n\x05\x04\0\x02\0\
    \x08\x12\x03\r\x164\n\x0f\n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\r\
    \x173\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0e\x02:\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\n\
    \x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\x14\x15\n\x0c\n\x05\x04\0\
    \x02\x01\x08\x12\x03\x0e\x169\n\x0f\n\x08\x04\0\x02\x01\x08\xec\xfb\x03\
    \x12\x03\x0e\x178\nR\n\x02\x04\x01\x12\x04\x12\0\x18\x01\x1aF\x20Timeout\
    Info\x20internally\x20generated\x20messages\x20which\x20may\x20update\
    \x20the\x20state\n\n\n\n\x03\x04\x01\x01\x12\x03\x12\x08\x13\n\x0c\n\x04\
    \x04\x01\x02\0\x12\x04\x13\x02\x14E\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03\x13\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x13\x1b#\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x13&'\n\x0c\n\x05\x04\x01\x02\0\x08\x12\
    \x03\x14\x06D\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03\x14\x07#\
    \n\x0f\n\x08\x04\x01\x02\0\x08\xf3\xfb\x03\x12\x03\x14%C\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x15\x02\x14\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\
    \x15\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\t\x0f\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03\x15\x12\x13\n\x0b\n\x04\x04\x01\x02\x02\
    \x12\x03\x16\x02\x14\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x16\x02\x07\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x16\t\x0e\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x16\x12\x13\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x17\
    \x02\x14\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03\x17\t\r\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x03\x17\x12\x13\no\n\x02\x04\x02\x12\x04\x1c\0\x1e\x01\x1ac\x20EndHeigh\
    t\x20marks\x20the\x20end\x20of\x20the\x20given\x20height\x20inside\x20WA\
    L.\n\x20@internal\x20used\x20by\x20scripts/wal2json\x20util.\n\n\n\n\x03\
    \x04\x02\x01\x12\x03\x1c\x08\x11\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1d\
    \x02\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x1d\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x1d\x11\x12\n\n\n\x02\x04\x03\x12\x04\x20\0'\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03\x20\x08\x12\n\x0c\n\x04\x04\x03\x08\0\x12\x04!\x02&\x03\n\
    \x0c\n\x05\x04\x03\x08\0\x01\x12\x03!\x08\x0b\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\"\x04D\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\"\x04(\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\")?\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\"BC\
    \n\x0b\n\x04\x04\x03\x02\x01\x12\x03#\x04D\n\x0c\n\x05\x04\x03\x02\x01\
    \x06\x12\x03#\x04\x0b\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03#)1\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03#BC\n\x0b\n\x04\x04\x03\x02\x02\x12\x03$\
    \x04D\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03$\x04\x0f\n\x0c\n\x05\x04\
    \x03\x02\x02\x01\x12\x03$)5\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03$BC\n\
    \x0b\n\x04\x04\x03\x02\x03\x12\x03%\x04D\n\x0c\n\x05\x04\x03\x02\x03\x06\
    \x12\x03%\x04\r\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03%)3\n\x0c\n\x05\
    \x04\x03\x02\x03\x03\x12\x03%BC\nT\n\x02\x04\x04\x12\x04*\0-\x01\x1aH\
    \x20TimedWALMessage\x20wraps\x20WALMessage\x20and\x20adds\x20Time\x20for\
    \x20debugging\x20purposes.\n\n\n\n\x03\x04\x04\x01\x12\x03*\x08\x17\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03+\x02`\n\x0c\n\x05\x04\x04\x02\0\x06\x12\
    \x03+\x02\x1b\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03+\x1c\x20\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03+#$\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03+%_\n\
    \x0f\n\x08\x04\x04\x02\0\x08\xe9\xfb\x03\x12\x03+&B\n\x0f\n\x08\x04\x04\
    \x02\0\x08\xf2\xfb\x03\x12\x03+D^\n\x0b\n\x04\x04\x04\x02\x01\x12\x03,\
    \x02%\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03,\x02\x0c\n\x0c\n\x05\x04\
    \x04\x02\x01\x01\x12\x03,\x1c\x1f\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\
    \x03,#$b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            deps.push(super::events::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(MsgInfo::generated_message_descriptor_data());
            messages.push(TimeoutInfo::generated_message_descriptor_data());
            messages.push(EndHeight::generated_message_descriptor_data());
            messages.push(WALMessage::generated_message_descriptor_data());
            messages.push(TimedWALMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
