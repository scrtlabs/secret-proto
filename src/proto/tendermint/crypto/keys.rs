// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tendermint/crypto/keys.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  PublicKey defines the keys available for use with Tendermint Validators
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.crypto.PublicKey)
pub struct PublicKey {
    // message oneof groups
    pub sum: ::std::option::Option<public_key::Sum>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.crypto.PublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PublicKey {
    fn default() -> &'a PublicKey {
        <PublicKey as ::protobuf::Message>::default_instance()
    }
}

impl PublicKey {
    pub fn new() -> PublicKey {
        ::std::default::Default::default()
    }

    // bytes ed25519 = 1;

    pub fn ed25519(&self) -> &[u8] {
        match self.sum {
            ::std::option::Option::Some(public_key::Sum::Ed25519(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_ed25519(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_ed25519(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(public_key::Sum::Ed25519(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ed25519(&mut self, v: ::std::vec::Vec<u8>) {
        self.sum = ::std::option::Option::Some(public_key::Sum::Ed25519(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ed25519(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(public_key::Sum::Ed25519(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(public_key::Sum::Ed25519(::std::vec::Vec::new()));
        }
        match self.sum {
            ::std::option::Option::Some(public_key::Sum::Ed25519(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ed25519(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_ed25519() {
            match self.sum.take() {
                ::std::option::Option::Some(public_key::Sum::Ed25519(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes secp256k1 = 2;

    pub fn secp256k1(&self) -> &[u8] {
        match self.sum {
            ::std::option::Option::Some(public_key::Sum::Secp256k1(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_secp256k1(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_secp256k1(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(public_key::Sum::Secp256k1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_secp256k1(&mut self, v: ::std::vec::Vec<u8>) {
        self.sum = ::std::option::Option::Some(public_key::Sum::Secp256k1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_secp256k1(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(public_key::Sum::Secp256k1(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(public_key::Sum::Secp256k1(::std::vec::Vec::new()));
        }
        match self.sum {
            ::std::option::Option::Some(public_key::Sum::Secp256k1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_secp256k1(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_secp256k1() {
            match self.sum.take() {
                ::std::option::Option::Some(public_key::Sum::Secp256k1(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "ed25519",
            PublicKey::has_ed25519,
            PublicKey::ed25519,
            PublicKey::set_ed25519,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "secp256k1",
            PublicKey::has_secp256k1,
            PublicKey::secp256k1,
            PublicKey::set_secp256k1,
        ));
        oneofs.push(public_key::Sum::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PublicKey>(
            "PublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PublicKey {
    const NAME: &'static str = "PublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sum = ::std::option::Option::Some(public_key::Sum::Ed25519(is.read_bytes()?));
                },
                18 => {
                    self.sum = ::std::option::Option::Some(public_key::Sum::Secp256k1(is.read_bytes()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &public_key::Sum::Ed25519(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &public_key::Sum::Secp256k1(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &public_key::Sum::Ed25519(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &public_key::Sum::Secp256k1(ref v) => {
                    os.write_bytes(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PublicKey {
        PublicKey::new()
    }

    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PublicKey {
        static instance: PublicKey = PublicKey {
            sum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PublicKey`
pub mod public_key {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:tendermint.crypto.PublicKey.sum)
    pub enum Sum {
        // @@protoc_insertion_point(oneof_field:tendermint.crypto.PublicKey.ed25519)
        Ed25519(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:tendermint.crypto.PublicKey.secp256k1)
        Secp256k1(::std::vec::Vec<u8>),
    }

    impl ::protobuf::Oneof for Sum {
    }

    impl ::protobuf::OneofFull for Sum {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PublicKey as ::protobuf::MessageFull>::descriptor().oneof_by_name("sum").unwrap()).clone()
        }
    }

    impl Sum {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Sum>("sum")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ctendermint/crypto/keys.proto\x12\x11tendermint.crypto\x1a\x14gogop\
    roto/gogo.proto\"X\n\tPublicKey\x12\x1a\n\x07ed25519\x18\x01\x20\x01(\
    \x0cH\0R\x07ed25519\x12\x1e\n\tsecp256k1\x18\x02\x20\x01(\x0cH\0R\tsecp2\
    56k1B\x05\n\x03sum:\x08\xe8\xa1\x1f\x01\xe8\xa0\x1f\x01B:Z8github.com/te\
    ndermint/tendermint/proto/tendermint/cryptoJ\xdf\x02\n\x06\x12\x04\0\0\
    \x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\
    \x1a\n\x08\n\x01\x08\x12\x03\x03\0O\n\t\n\x02\x08\x0b\x12\x03\x03\0O\n\t\
    \n\x02\x03\0\x12\x03\x05\0\x1e\nU\n\x02\x04\0\x12\x04\x08\0\x10\x01\x1aI\
    \x20PublicKey\x20defines\x20the\x20keys\x20available\x20for\x20use\x20wi\
    th\x20Tendermint\x20Validators\n\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x11\
    \n\n\n\x03\x04\0\x07\x12\x03\t\x02$\n\r\n\x06\x04\0\x07\x9d\xf4\x03\x12\
    \x03\t\x02$\n\n\n\x03\x04\0\x07\x12\x03\n\x02$\n\r\n\x06\x04\0\x07\x8d\
    \xf4\x03\x12\x03\n\x02$\n\x0c\n\x04\x04\0\x08\0\x12\x04\x0c\x02\x0f\x03\
    \n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x0c\x08\x0b\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\r\x04\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\x04\t\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\r\n\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \r\x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0e\x04\x18\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\x0e\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x0e\n\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PublicKey::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
