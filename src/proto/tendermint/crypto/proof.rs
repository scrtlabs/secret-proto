// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tendermint/crypto/proof.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.crypto.Proof)
pub struct Proof {
    // message fields
    // @@protoc_insertion_point(field:tendermint.crypto.Proof.total)
    pub total: i64,
    // @@protoc_insertion_point(field:tendermint.crypto.Proof.index)
    pub index: i64,
    // @@protoc_insertion_point(field:tendermint.crypto.Proof.leaf_hash)
    pub leaf_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:tendermint.crypto.Proof.aunts)
    pub aunts: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.crypto.Proof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proof {
    fn default() -> &'a Proof {
        <Proof as ::protobuf::Message>::default_instance()
    }
}

impl Proof {
    pub fn new() -> Proof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total",
            |m: &Proof| { &m.total },
            |m: &mut Proof| { &mut m.total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &Proof| { &m.index },
            |m: &mut Proof| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "leaf_hash",
            |m: &Proof| { &m.leaf_hash },
            |m: &mut Proof| { &mut m.leaf_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "aunts",
            |m: &Proof| { &m.aunts },
            |m: &mut Proof| { &mut m.aunts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proof>(
            "Proof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proof {
    const NAME: &'static str = "Proof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.total = is.read_int64()?;
                },
                16 => {
                    self.index = is.read_int64()?;
                },
                26 => {
                    self.leaf_hash = is.read_bytes()?;
                },
                34 => {
                    self.aunts.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.total);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.index);
        }
        if !self.leaf_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.leaf_hash);
        }
        for value in &self.aunts {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.total != 0 {
            os.write_int64(1, self.total)?;
        }
        if self.index != 0 {
            os.write_int64(2, self.index)?;
        }
        if !self.leaf_hash.is_empty() {
            os.write_bytes(3, &self.leaf_hash)?;
        }
        for v in &self.aunts {
            os.write_bytes(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proof {
        Proof::new()
    }

    fn clear(&mut self) {
        self.total = 0;
        self.index = 0;
        self.leaf_hash.clear();
        self.aunts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proof {
        static instance: Proof = Proof {
            total: 0,
            index: 0,
            leaf_hash: ::std::vec::Vec::new(),
            aunts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Proof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.crypto.ValueOp)
pub struct ValueOp {
    // message fields
    ///  Encoded in ProofOp.Key.
    // @@protoc_insertion_point(field:tendermint.crypto.ValueOp.key)
    pub key: ::std::vec::Vec<u8>,
    ///  To encode in ProofOp.Data
    // @@protoc_insertion_point(field:tendermint.crypto.ValueOp.proof)
    pub proof: ::protobuf::MessageField<Proof>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.crypto.ValueOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValueOp {
    fn default() -> &'a ValueOp {
        <ValueOp as ::protobuf::Message>::default_instance()
    }
}

impl ValueOp {
    pub fn new() -> ValueOp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &ValueOp| { &m.key },
            |m: &mut ValueOp| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Proof>(
            "proof",
            |m: &ValueOp| { &m.proof },
            |m: &mut ValueOp| { &mut m.proof },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValueOp>(
            "ValueOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValueOp {
    const NAME: &'static str = "ValueOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if let Some(v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if let Some(v) = self.proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValueOp {
        ValueOp::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.proof.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValueOp {
        static instance: ValueOp = ValueOp {
            key: ::std::vec::Vec::new(),
            proof: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValueOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValueOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValueOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.crypto.DominoOp)
pub struct DominoOp {
    // message fields
    // @@protoc_insertion_point(field:tendermint.crypto.DominoOp.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.crypto.DominoOp.input)
    pub input: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.crypto.DominoOp.output)
    pub output: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.crypto.DominoOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DominoOp {
    fn default() -> &'a DominoOp {
        <DominoOp as ::protobuf::Message>::default_instance()
    }
}

impl DominoOp {
    pub fn new() -> DominoOp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &DominoOp| { &m.key },
            |m: &mut DominoOp| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input",
            |m: &DominoOp| { &m.input },
            |m: &mut DominoOp| { &mut m.input },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "output",
            |m: &DominoOp| { &m.output },
            |m: &mut DominoOp| { &mut m.output },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DominoOp>(
            "DominoOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DominoOp {
    const NAME: &'static str = "DominoOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.input = is.read_string()?;
                },
                26 => {
                    self.output = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.input);
        }
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.output);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.input.is_empty() {
            os.write_string(2, &self.input)?;
        }
        if !self.output.is_empty() {
            os.write_string(3, &self.output)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DominoOp {
        DominoOp::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.input.clear();
        self.output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DominoOp {
        static instance: DominoOp = DominoOp {
            key: ::std::string::String::new(),
            input: ::std::string::String::new(),
            output: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DominoOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DominoOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DominoOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DominoOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ProofOp defines an operation used for calculating Merkle root
///  The data could be arbitrary format, providing nessecary data
///  for example neighbouring node hash
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.crypto.ProofOp)
pub struct ProofOp {
    // message fields
    // @@protoc_insertion_point(field:tendermint.crypto.ProofOp.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:tendermint.crypto.ProofOp.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:tendermint.crypto.ProofOp.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.crypto.ProofOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProofOp {
    fn default() -> &'a ProofOp {
        <ProofOp as ::protobuf::Message>::default_instance()
    }
}

impl ProofOp {
    pub fn new() -> ProofOp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ProofOp| { &m.type_ },
            |m: &mut ProofOp| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &ProofOp| { &m.key },
            |m: &mut ProofOp| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &ProofOp| { &m.data },
            |m: &mut ProofOp| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProofOp>(
            "ProofOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProofOp {
    const NAME: &'static str = "ProofOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = is.read_string()?;
                },
                18 => {
                    self.key = is.read_bytes()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.key);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(2, &self.key)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProofOp {
        ProofOp::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.key.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProofOp {
        static instance: ProofOp = ProofOp {
            type_: ::std::string::String::new(),
            key: ::std::vec::Vec::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProofOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProofOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProofOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ProofOps is Merkle proof defined by the list of ProofOps
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.crypto.ProofOps)
pub struct ProofOps {
    // message fields
    // @@protoc_insertion_point(field:tendermint.crypto.ProofOps.ops)
    pub ops: ::std::vec::Vec<ProofOp>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.crypto.ProofOps.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProofOps {
    fn default() -> &'a ProofOps {
        <ProofOps as ::protobuf::Message>::default_instance()
    }
}

impl ProofOps {
    pub fn new() -> ProofOps {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ops",
            |m: &ProofOps| { &m.ops },
            |m: &mut ProofOps| { &mut m.ops },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProofOps>(
            "ProofOps",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProofOps {
    const NAME: &'static str = "ProofOps";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ops.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.ops {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.ops {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProofOps {
        ProofOps::new()
    }

    fn clear(&mut self) {
        self.ops.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProofOps {
        static instance: ProofOps = ProofOps {
            ops: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProofOps {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProofOps").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProofOps {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofOps {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dtendermint/crypto/proof.proto\x12\x11tendermint.crypto\x1a\x14gogo\
    proto/gogo.proto\"f\n\x05Proof\x12\x14\n\x05total\x18\x01\x20\x01(\x03R\
    \x05total\x12\x14\n\x05index\x18\x02\x20\x01(\x03R\x05index\x12\x1b\n\tl\
    eaf_hash\x18\x03\x20\x01(\x0cR\x08leafHash\x12\x14\n\x05aunts\x18\x04\
    \x20\x03(\x0cR\x05aunts\"K\n\x07ValueOp\x12\x10\n\x03key\x18\x01\x20\x01\
    (\x0cR\x03key\x12.\n\x05proof\x18\x02\x20\x01(\x0b2\x18.tendermint.crypt\
    o.ProofR\x05proof\"J\n\x08DominoOp\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05input\x18\x02\x20\x01(\tR\x05input\x12\x16\n\x06out\
    put\x18\x03\x20\x01(\tR\x06output\"C\n\x07ProofOp\x12\x12\n\x04type\x18\
    \x01\x20\x01(\tR\x04type\x12\x10\n\x03key\x18\x02\x20\x01(\x0cR\x03key\
    \x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\">\n\x08ProofOps\x122\n\
    \x03ops\x18\x01\x20\x03(\x0b2\x1a.tendermint.crypto.ProofOpR\x03opsB\x04\
    \xc8\xde\x1f\0B:Z8github.com/tendermint/tendermint/proto/tendermint/cryp\
    toJ\xd3\t\n\x06\x12\x04\0\0(\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x1a\n\x08\n\x01\x08\x12\x03\x03\0O\n\t\n\x02\x08\
    \x0b\x12\x03\x03\0O\n\t\n\x02\x03\0\x12\x03\x05\0\x1e\n\n\n\x02\x04\0\
    \x12\x04\x07\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\r\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x08\x02\x1f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\
    \x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x11\x16\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x08\x1d\x1e\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\
    \x1f\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\t\x11\x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\
    \x1d\x1e\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x02\x1f\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\
    \x11\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n\x1d\x1e\n\x0b\n\x04\x04\
    \0\x02\x03\x12\x03\x0b\x02\x1f\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x0b\
    \x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x0b\x10\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03\x0b\x11\x16\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x0b\x1d\x1e\n\n\n\x02\x04\x01\x12\x04\x0e\0\x14\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x0e\x08\x0f\n&\n\x04\x04\x01\x02\0\x12\x03\x10\x02\x10\x1a\
    \x19\x20Encoded\x20in\x20ProofOp.Key.\n\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x10\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x10\x08\x0b\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10\x0e\x0f\n(\n\x04\x04\x01\x02\
    \x01\x12\x03\x13\x02\x12\x1a\x1b\x20To\x20encode\x20in\x20ProofOp.Data\n\
    \n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x13\x02\x07\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x13\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x13\x10\x11\n\n\n\x02\x04\x02\x12\x04\x16\0\x1a\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x16\x08\x10\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x17\x02\x14\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x17\t\x0c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x17\x12\
    \x13\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x18\x02\x14\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x18\t\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18\x12\x13\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03\x19\x02\x14\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x19\t\x0f\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x19\x12\x13\n\xae\x01\n\x02\x04\
    \x03\x12\x04\x1f\0#\x01\x1a\xa1\x01\x20ProofOp\x20defines\x20an\x20opera\
    tion\x20used\x20for\x20calculating\x20Merkle\x20root\n\x20The\x20data\
    \x20could\x20be\x20arbitrary\x20format,\x20providing\x20nessecary\x20dat\
    a\n\x20for\x20example\x20neighbouring\x20node\x20hash\n\n\n\n\x03\x04\
    \x03\x01\x12\x03\x1f\x08\x0f\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x20\x02\
    \x12\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03\x20\t\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x20\
    \x10\x11\n\x0b\n\x04\x04\x03\x02\x01\x12\x03!\x02\x12\n\x0c\n\x05\x04\
    \x03\x02\x01\x05\x12\x03!\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03!\t\x0c\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03!\x10\x11\n\x0b\n\x04\
    \x04\x03\x02\x02\x12\x03\"\x02\x12\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\
    \x03\"\x02\x07\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\"\t\r\n\x0c\n\x05\
    \x04\x03\x02\x02\x03\x12\x03\"\x10\x11\nF\n\x02\x04\x04\x12\x04&\0(\x01\
    \x1a:\x20ProofOps\x20is\x20Merkle\x20proof\x20defined\x20by\x20the\x20li\
    st\x20of\x20ProofOps\n\n\n\n\x03\x04\x04\x01\x12\x03&\x08\x10\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x03'\x02:\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03'\
    \x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03'\x0b\x12\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03'\x13\x16\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03'\
    \x19\x1a\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03'\x1b9\n\x0f\n\x08\x04\x04\
    \x02\0\x08\xe9\xfb\x03\x12\x03'\x1c8b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Proof::generated_message_descriptor_data());
            messages.push(ValueOp::generated_message_descriptor_data());
            messages.push(DominoOp::generated_message_descriptor_data());
            messages.push(ProofOp::generated_message_descriptor_data());
            messages.push(ProofOps::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
