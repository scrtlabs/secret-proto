// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tendermint/statesync/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.statesync.Message)
pub struct Message {
    // message oneof groups
    pub sum: ::std::option::Option<message::Sum>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.statesync.Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .tendermint.statesync.SnapshotsRequest snapshots_request = 1;

    pub fn snapshots_request(&self) -> &SnapshotsRequest {
        match self.sum {
            ::std::option::Option::Some(message::Sum::SnapshotsRequest(ref v)) => v,
            _ => <SnapshotsRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_snapshots_request(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_snapshots_request(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(message::Sum::SnapshotsRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_snapshots_request(&mut self, v: SnapshotsRequest) {
        self.sum = ::std::option::Option::Some(message::Sum::SnapshotsRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_snapshots_request(&mut self) -> &mut SnapshotsRequest {
        if let ::std::option::Option::Some(message::Sum::SnapshotsRequest(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(message::Sum::SnapshotsRequest(SnapshotsRequest::new()));
        }
        match self.sum {
            ::std::option::Option::Some(message::Sum::SnapshotsRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_snapshots_request(&mut self) -> SnapshotsRequest {
        if self.has_snapshots_request() {
            match self.sum.take() {
                ::std::option::Option::Some(message::Sum::SnapshotsRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotsRequest::new()
        }
    }

    // .tendermint.statesync.SnapshotsResponse snapshots_response = 2;

    pub fn snapshots_response(&self) -> &SnapshotsResponse {
        match self.sum {
            ::std::option::Option::Some(message::Sum::SnapshotsResponse(ref v)) => v,
            _ => <SnapshotsResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_snapshots_response(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_snapshots_response(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(message::Sum::SnapshotsResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_snapshots_response(&mut self, v: SnapshotsResponse) {
        self.sum = ::std::option::Option::Some(message::Sum::SnapshotsResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_snapshots_response(&mut self) -> &mut SnapshotsResponse {
        if let ::std::option::Option::Some(message::Sum::SnapshotsResponse(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(message::Sum::SnapshotsResponse(SnapshotsResponse::new()));
        }
        match self.sum {
            ::std::option::Option::Some(message::Sum::SnapshotsResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_snapshots_response(&mut self) -> SnapshotsResponse {
        if self.has_snapshots_response() {
            match self.sum.take() {
                ::std::option::Option::Some(message::Sum::SnapshotsResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotsResponse::new()
        }
    }

    // .tendermint.statesync.ChunkRequest chunk_request = 3;

    pub fn chunk_request(&self) -> &ChunkRequest {
        match self.sum {
            ::std::option::Option::Some(message::Sum::ChunkRequest(ref v)) => v,
            _ => <ChunkRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_chunk_request(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_chunk_request(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(message::Sum::ChunkRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chunk_request(&mut self, v: ChunkRequest) {
        self.sum = ::std::option::Option::Some(message::Sum::ChunkRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chunk_request(&mut self) -> &mut ChunkRequest {
        if let ::std::option::Option::Some(message::Sum::ChunkRequest(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(message::Sum::ChunkRequest(ChunkRequest::new()));
        }
        match self.sum {
            ::std::option::Option::Some(message::Sum::ChunkRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chunk_request(&mut self) -> ChunkRequest {
        if self.has_chunk_request() {
            match self.sum.take() {
                ::std::option::Option::Some(message::Sum::ChunkRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            ChunkRequest::new()
        }
    }

    // .tendermint.statesync.ChunkResponse chunk_response = 4;

    pub fn chunk_response(&self) -> &ChunkResponse {
        match self.sum {
            ::std::option::Option::Some(message::Sum::ChunkResponse(ref v)) => v,
            _ => <ChunkResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_chunk_response(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_chunk_response(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(message::Sum::ChunkResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chunk_response(&mut self, v: ChunkResponse) {
        self.sum = ::std::option::Option::Some(message::Sum::ChunkResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chunk_response(&mut self) -> &mut ChunkResponse {
        if let ::std::option::Option::Some(message::Sum::ChunkResponse(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(message::Sum::ChunkResponse(ChunkResponse::new()));
        }
        match self.sum {
            ::std::option::Option::Some(message::Sum::ChunkResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chunk_response(&mut self) -> ChunkResponse {
        if self.has_chunk_response() {
            match self.sum.take() {
                ::std::option::Option::Some(message::Sum::ChunkResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            ChunkResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SnapshotsRequest>(
            "snapshots_request",
            Message::has_snapshots_request,
            Message::snapshots_request,
            Message::mut_snapshots_request,
            Message::set_snapshots_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SnapshotsResponse>(
            "snapshots_response",
            Message::has_snapshots_response,
            Message::snapshots_response,
            Message::mut_snapshots_response,
            Message::set_snapshots_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ChunkRequest>(
            "chunk_request",
            Message::has_chunk_request,
            Message::chunk_request,
            Message::mut_chunk_request,
            Message::set_chunk_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ChunkResponse>(
            "chunk_response",
            Message::has_chunk_response,
            Message::chunk_response,
            Message::mut_chunk_response,
            Message::set_chunk_response,
        ));
        oneofs.push(message::Sum::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sum = ::std::option::Option::Some(message::Sum::SnapshotsRequest(is.read_message()?));
                },
                18 => {
                    self.sum = ::std::option::Option::Some(message::Sum::SnapshotsResponse(is.read_message()?));
                },
                26 => {
                    self.sum = ::std::option::Option::Some(message::Sum::ChunkRequest(is.read_message()?));
                },
                34 => {
                    self.sum = ::std::option::Option::Some(message::Sum::ChunkResponse(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &message::Sum::SnapshotsRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &message::Sum::SnapshotsResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &message::Sum::ChunkRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &message::Sum::ChunkResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &message::Sum::SnapshotsRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &message::Sum::SnapshotsResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &message::Sum::ChunkRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &message::Sum::ChunkResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            sum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message`
pub mod message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:tendermint.statesync.Message.sum)
    pub enum Sum {
        // @@protoc_insertion_point(oneof_field:tendermint.statesync.Message.snapshots_request)
        SnapshotsRequest(super::SnapshotsRequest),
        // @@protoc_insertion_point(oneof_field:tendermint.statesync.Message.snapshots_response)
        SnapshotsResponse(super::SnapshotsResponse),
        // @@protoc_insertion_point(oneof_field:tendermint.statesync.Message.chunk_request)
        ChunkRequest(super::ChunkRequest),
        // @@protoc_insertion_point(oneof_field:tendermint.statesync.Message.chunk_response)
        ChunkResponse(super::ChunkResponse),
    }

    impl ::protobuf::Oneof for Sum {
    }

    impl ::protobuf::OneofFull for Sum {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Message as ::protobuf::MessageFull>::descriptor().oneof_by_name("sum").unwrap()).clone()
        }
    }

    impl Sum {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Sum>("sum")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.statesync.SnapshotsRequest)
pub struct SnapshotsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.statesync.SnapshotsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SnapshotsRequest {
    fn default() -> &'a SnapshotsRequest {
        <SnapshotsRequest as ::protobuf::Message>::default_instance()
    }
}

impl SnapshotsRequest {
    pub fn new() -> SnapshotsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SnapshotsRequest>(
            "SnapshotsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SnapshotsRequest {
    const NAME: &'static str = "SnapshotsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SnapshotsRequest {
        SnapshotsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SnapshotsRequest {
        static instance: SnapshotsRequest = SnapshotsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SnapshotsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SnapshotsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SnapshotsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.statesync.SnapshotsResponse)
pub struct SnapshotsResponse {
    // message fields
    // @@protoc_insertion_point(field:tendermint.statesync.SnapshotsResponse.height)
    pub height: u64,
    // @@protoc_insertion_point(field:tendermint.statesync.SnapshotsResponse.format)
    pub format: u32,
    // @@protoc_insertion_point(field:tendermint.statesync.SnapshotsResponse.chunks)
    pub chunks: u32,
    // @@protoc_insertion_point(field:tendermint.statesync.SnapshotsResponse.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:tendermint.statesync.SnapshotsResponse.metadata)
    pub metadata: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.statesync.SnapshotsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SnapshotsResponse {
    fn default() -> &'a SnapshotsResponse {
        <SnapshotsResponse as ::protobuf::Message>::default_instance()
    }
}

impl SnapshotsResponse {
    pub fn new() -> SnapshotsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &SnapshotsResponse| { &m.height },
            |m: &mut SnapshotsResponse| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &SnapshotsResponse| { &m.format },
            |m: &mut SnapshotsResponse| { &mut m.format },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chunks",
            |m: &SnapshotsResponse| { &m.chunks },
            |m: &mut SnapshotsResponse| { &mut m.chunks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &SnapshotsResponse| { &m.hash },
            |m: &mut SnapshotsResponse| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metadata",
            |m: &SnapshotsResponse| { &m.metadata },
            |m: &mut SnapshotsResponse| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SnapshotsResponse>(
            "SnapshotsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SnapshotsResponse {
    const NAME: &'static str = "SnapshotsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_uint64()?;
                },
                16 => {
                    self.format = is.read_uint32()?;
                },
                24 => {
                    self.chunks = is.read_uint32()?;
                },
                34 => {
                    self.hash = is.read_bytes()?;
                },
                42 => {
                    self.metadata = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.height);
        }
        if self.format != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.format);
        }
        if self.chunks != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.chunks);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.hash);
        }
        if !self.metadata.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.metadata);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        if self.format != 0 {
            os.write_uint32(2, self.format)?;
        }
        if self.chunks != 0 {
            os.write_uint32(3, self.chunks)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(4, &self.hash)?;
        }
        if !self.metadata.is_empty() {
            os.write_bytes(5, &self.metadata)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SnapshotsResponse {
        SnapshotsResponse::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.format = 0;
        self.chunks = 0;
        self.hash.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SnapshotsResponse {
        static instance: SnapshotsResponse = SnapshotsResponse {
            height: 0,
            format: 0,
            chunks: 0,
            hash: ::std::vec::Vec::new(),
            metadata: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SnapshotsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SnapshotsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SnapshotsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.statesync.ChunkRequest)
pub struct ChunkRequest {
    // message fields
    // @@protoc_insertion_point(field:tendermint.statesync.ChunkRequest.height)
    pub height: u64,
    // @@protoc_insertion_point(field:tendermint.statesync.ChunkRequest.format)
    pub format: u32,
    // @@protoc_insertion_point(field:tendermint.statesync.ChunkRequest.index)
    pub index: u32,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.statesync.ChunkRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChunkRequest {
    fn default() -> &'a ChunkRequest {
        <ChunkRequest as ::protobuf::Message>::default_instance()
    }
}

impl ChunkRequest {
    pub fn new() -> ChunkRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &ChunkRequest| { &m.height },
            |m: &mut ChunkRequest| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &ChunkRequest| { &m.format },
            |m: &mut ChunkRequest| { &mut m.format },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &ChunkRequest| { &m.index },
            |m: &mut ChunkRequest| { &mut m.index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkRequest>(
            "ChunkRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChunkRequest {
    const NAME: &'static str = "ChunkRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_uint64()?;
                },
                16 => {
                    self.format = is.read_uint32()?;
                },
                24 => {
                    self.index = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.height);
        }
        if self.format != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.format);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        if self.format != 0 {
            os.write_uint32(2, self.format)?;
        }
        if self.index != 0 {
            os.write_uint32(3, self.index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChunkRequest {
        ChunkRequest::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.format = 0;
        self.index = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChunkRequest {
        static instance: ChunkRequest = ChunkRequest {
            height: 0,
            format: 0,
            index: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChunkRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChunkRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChunkRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.statesync.ChunkResponse)
pub struct ChunkResponse {
    // message fields
    // @@protoc_insertion_point(field:tendermint.statesync.ChunkResponse.height)
    pub height: u64,
    // @@protoc_insertion_point(field:tendermint.statesync.ChunkResponse.format)
    pub format: u32,
    // @@protoc_insertion_point(field:tendermint.statesync.ChunkResponse.index)
    pub index: u32,
    // @@protoc_insertion_point(field:tendermint.statesync.ChunkResponse.chunk)
    pub chunk: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:tendermint.statesync.ChunkResponse.missing)
    pub missing: bool,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.statesync.ChunkResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChunkResponse {
    fn default() -> &'a ChunkResponse {
        <ChunkResponse as ::protobuf::Message>::default_instance()
    }
}

impl ChunkResponse {
    pub fn new() -> ChunkResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &ChunkResponse| { &m.height },
            |m: &mut ChunkResponse| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &ChunkResponse| { &m.format },
            |m: &mut ChunkResponse| { &mut m.format },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &ChunkResponse| { &m.index },
            |m: &mut ChunkResponse| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chunk",
            |m: &ChunkResponse| { &m.chunk },
            |m: &mut ChunkResponse| { &mut m.chunk },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "missing",
            |m: &ChunkResponse| { &m.missing },
            |m: &mut ChunkResponse| { &mut m.missing },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkResponse>(
            "ChunkResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChunkResponse {
    const NAME: &'static str = "ChunkResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_uint64()?;
                },
                16 => {
                    self.format = is.read_uint32()?;
                },
                24 => {
                    self.index = is.read_uint32()?;
                },
                34 => {
                    self.chunk = is.read_bytes()?;
                },
                40 => {
                    self.missing = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.height);
        }
        if self.format != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.format);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.index);
        }
        if !self.chunk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.chunk);
        }
        if self.missing != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        if self.format != 0 {
            os.write_uint32(2, self.format)?;
        }
        if self.index != 0 {
            os.write_uint32(3, self.index)?;
        }
        if !self.chunk.is_empty() {
            os.write_bytes(4, &self.chunk)?;
        }
        if self.missing != false {
            os.write_bool(5, self.missing)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChunkResponse {
        ChunkResponse::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.format = 0;
        self.index = 0;
        self.chunk.clear();
        self.missing = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChunkResponse {
        static instance: ChunkResponse = ChunkResponse {
            height: 0,
            format: 0,
            index: 0,
            chunk: ::std::vec::Vec::new(),
            missing: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChunkResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChunkResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChunkResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20tendermint/statesync/types.proto\x12\x14tendermint.statesync\"\xda\
    \x02\n\x07Message\x12U\n\x11snapshots_request\x18\x01\x20\x01(\x0b2&.ten\
    dermint.statesync.SnapshotsRequestH\0R\x10snapshotsRequest\x12X\n\x12sna\
    pshots_response\x18\x02\x20\x01(\x0b2'.tendermint.statesync.SnapshotsRes\
    ponseH\0R\x11snapshotsResponse\x12I\n\rchunk_request\x18\x03\x20\x01(\
    \x0b2\".tendermint.statesync.ChunkRequestH\0R\x0cchunkRequest\x12L\n\x0e\
    chunk_response\x18\x04\x20\x01(\x0b2#.tendermint.statesync.ChunkResponse\
    H\0R\rchunkResponseB\x05\n\x03sum\"\x12\n\x10SnapshotsRequest\"\x8b\x01\
    \n\x11SnapshotsResponse\x12\x16\n\x06height\x18\x01\x20\x01(\x04R\x06hei\
    ght\x12\x16\n\x06format\x18\x02\x20\x01(\rR\x06format\x12\x16\n\x06chunk\
    s\x18\x03\x20\x01(\rR\x06chunks\x12\x12\n\x04hash\x18\x04\x20\x01(\x0cR\
    \x04hash\x12\x1a\n\x08metadata\x18\x05\x20\x01(\x0cR\x08metadata\"T\n\
    \x0cChunkRequest\x12\x16\n\x06height\x18\x01\x20\x01(\x04R\x06height\x12\
    \x16\n\x06format\x18\x02\x20\x01(\rR\x06format\x12\x14\n\x05index\x18\
    \x03\x20\x01(\rR\x05index\"\x85\x01\n\rChunkResponse\x12\x16\n\x06height\
    \x18\x01\x20\x01(\x04R\x06height\x12\x16\n\x06format\x18\x02\x20\x01(\rR\
    \x06format\x12\x14\n\x05index\x18\x03\x20\x01(\rR\x05index\x12\x14\n\x05\
    chunk\x18\x04\x20\x01(\x0cR\x05chunk\x12\x18\n\x07missing\x18\x05\x20\
    \x01(\x08R\x07missingB=Z;github.com/tendermint/tendermint/proto/tendermi\
    nt/statesyncJ\xeb\x08\n\x06\x12\x04\0\0$\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0\x1d\n\x08\n\x01\x08\x12\x03\x03\0R\n\
    \t\n\x02\x08\x0b\x12\x03\x03\0R\n\n\n\x02\x04\0\x12\x04\x05\0\x0c\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x05\x08\x0f\n\x0c\n\x04\x04\0\x08\0\x12\x04\
    \x06\x02\x0b\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x06\x08\x0b\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x07\x04-\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\
    \x07\x04\x14\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x16'\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x07+,\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x08\x04\
    -\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x08\x04\x15\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x08\x16(\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08+\
    ,\n\x0b\n\x04\x04\0\x02\x02\x12\x03\t\x04-\n\x0c\n\x05\x04\0\x02\x02\x06\
    \x12\x03\t\x04\x10\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\x16#\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\t+,\n\x0b\n\x04\x04\0\x02\x03\x12\x03\n\
    \x04-\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\n\x04\x11\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\n\x16$\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\n+,\n\
    \t\n\x02\x04\x01\x12\x03\x0e\0\x1b\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\
    \x18\n\n\n\x02\x04\x02\x12\x04\x10\0\x16\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x10\x08\x19\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x02\x16\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x11\t\x0f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x11\x14\x15\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x12\x02\x16\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x12\
    \t\x0f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x12\x14\x15\n\x0b\n\x04\
    \x04\x02\x02\x02\x12\x03\x13\x02\x16\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03\x13\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x13\t\x0f\n\x0c\
    \n\x05\x04\x02\x02\x02\x03\x12\x03\x13\x14\x15\n\x0b\n\x04\x04\x02\x02\
    \x03\x12\x03\x14\x02\x16\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x14\x02\
    \x07\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x14\t\r\n\x0c\n\x05\x04\x02\
    \x02\x03\x03\x12\x03\x14\x14\x15\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x15\
    \x02\x16\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\x04\x01\x12\x03\x15\t\x11\n\x0c\n\x05\x04\x02\x02\x04\x03\
    \x12\x03\x15\x14\x15\n\n\n\x02\x04\x03\x12\x04\x18\0\x1c\x01\n\n\n\x03\
    \x04\x03\x01\x12\x03\x18\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x19\
    \x02\x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x19\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x19\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1a\x02\x14\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03\x1a\t\x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1a\x12\
    \x13\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x1b\x02\x14\n\x0c\n\x05\x04\x03\
    \x02\x02\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\
    \x1b\t\x0e\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1b\x12\x13\n\n\n\x02\
    \x04\x04\x12\x04\x1e\0$\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1e\x08\x15\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03\x1f\x02\x15\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1f\t\x0f\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1f\x13\x14\n\x0b\n\x04\x04\x04\
    \x02\x01\x12\x03\x20\x02\x15\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x20\
    \x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x20\t\x0f\n\x0c\n\x05\
    \x04\x04\x02\x01\x03\x12\x03\x20\x13\x14\n\x0b\n\x04\x04\x04\x02\x02\x12\
    \x03!\x02\x15\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03!\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x03!\t\x0e\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x03!\x13\x14\n\x0b\n\x04\x04\x04\x02\x03\x12\x03\"\x02\x15\n\x0c\n\
    \x05\x04\x04\x02\x03\x05\x12\x03\"\x02\x07\n\x0c\n\x05\x04\x04\x02\x03\
    \x01\x12\x03\"\t\x0e\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03\"\x13\x14\n\
    \x0b\n\x04\x04\x04\x02\x04\x12\x03#\x02\x15\n\x0c\n\x05\x04\x04\x02\x04\
    \x05\x12\x03#\x02\x06\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03#\t\x10\n\
    \x0c\n\x05\x04\x04\x02\x04\x03\x12\x03#\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Message::generated_message_descriptor_data());
            messages.push(SnapshotsRequest::generated_message_descriptor_data());
            messages.push(SnapshotsResponse::generated_message_descriptor_data());
            messages.push(ChunkRequest::generated_message_descriptor_data());
            messages.push(ChunkResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
