// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tendermint/types/canonical.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.types.CanonicalBlockID)
pub struct CanonicalBlockID {
    // message fields
    // @@protoc_insertion_point(field:tendermint.types.CanonicalBlockID.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalBlockID.part_set_header)
    pub part_set_header: ::protobuf::MessageField<CanonicalPartSetHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.types.CanonicalBlockID.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CanonicalBlockID {
    fn default() -> &'a CanonicalBlockID {
        <CanonicalBlockID as ::protobuf::Message>::default_instance()
    }
}

impl CanonicalBlockID {
    pub fn new() -> CanonicalBlockID {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &CanonicalBlockID| { &m.hash },
            |m: &mut CanonicalBlockID| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CanonicalPartSetHeader>(
            "part_set_header",
            |m: &CanonicalBlockID| { &m.part_set_header },
            |m: &mut CanonicalBlockID| { &mut m.part_set_header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CanonicalBlockID>(
            "CanonicalBlockID",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CanonicalBlockID {
    const NAME: &'static str = "CanonicalBlockID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.part_set_header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if let Some(v) = self.part_set_header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if let Some(v) = self.part_set_header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CanonicalBlockID {
        CanonicalBlockID::new()
    }

    fn clear(&mut self) {
        self.hash.clear();
        self.part_set_header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CanonicalBlockID {
        static instance: CanonicalBlockID = CanonicalBlockID {
            hash: ::std::vec::Vec::new(),
            part_set_header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CanonicalBlockID {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CanonicalBlockID").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CanonicalBlockID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CanonicalBlockID {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.types.CanonicalPartSetHeader)
pub struct CanonicalPartSetHeader {
    // message fields
    // @@protoc_insertion_point(field:tendermint.types.CanonicalPartSetHeader.total)
    pub total: u32,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalPartSetHeader.hash)
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.types.CanonicalPartSetHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CanonicalPartSetHeader {
    fn default() -> &'a CanonicalPartSetHeader {
        <CanonicalPartSetHeader as ::protobuf::Message>::default_instance()
    }
}

impl CanonicalPartSetHeader {
    pub fn new() -> CanonicalPartSetHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total",
            |m: &CanonicalPartSetHeader| { &m.total },
            |m: &mut CanonicalPartSetHeader| { &mut m.total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &CanonicalPartSetHeader| { &m.hash },
            |m: &mut CanonicalPartSetHeader| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CanonicalPartSetHeader>(
            "CanonicalPartSetHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CanonicalPartSetHeader {
    const NAME: &'static str = "CanonicalPartSetHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.total = is.read_uint32()?;
                },
                18 => {
                    self.hash = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.total);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.total != 0 {
            os.write_uint32(1, self.total)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CanonicalPartSetHeader {
        CanonicalPartSetHeader::new()
    }

    fn clear(&mut self) {
        self.total = 0;
        self.hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CanonicalPartSetHeader {
        static instance: CanonicalPartSetHeader = CanonicalPartSetHeader {
            total: 0,
            hash: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CanonicalPartSetHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CanonicalPartSetHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CanonicalPartSetHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CanonicalPartSetHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.types.CanonicalProposal)
pub struct CanonicalProposal {
    // message fields
    // @@protoc_insertion_point(field:tendermint.types.CanonicalProposal.type)
    pub type_: ::protobuf::EnumOrUnknown<super::types::SignedMsgType>,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalProposal.height)
    pub height: i64,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalProposal.round)
    pub round: i64,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalProposal.pol_round)
    pub pol_round: i64,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalProposal.block_id)
    pub block_id: ::protobuf::MessageField<CanonicalBlockID>,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalProposal.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalProposal.chain_id)
    pub chain_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.types.CanonicalProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CanonicalProposal {
    fn default() -> &'a CanonicalProposal {
        <CanonicalProposal as ::protobuf::Message>::default_instance()
    }
}

impl CanonicalProposal {
    pub fn new() -> CanonicalProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &CanonicalProposal| { &m.type_ },
            |m: &mut CanonicalProposal| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &CanonicalProposal| { &m.height },
            |m: &mut CanonicalProposal| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round",
            |m: &CanonicalProposal| { &m.round },
            |m: &mut CanonicalProposal| { &mut m.round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pol_round",
            |m: &CanonicalProposal| { &m.pol_round },
            |m: &mut CanonicalProposal| { &mut m.pol_round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CanonicalBlockID>(
            "block_id",
            |m: &CanonicalProposal| { &m.block_id },
            |m: &mut CanonicalProposal| { &mut m.block_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &CanonicalProposal| { &m.timestamp },
            |m: &mut CanonicalProposal| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &CanonicalProposal| { &m.chain_id },
            |m: &mut CanonicalProposal| { &mut m.chain_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CanonicalProposal>(
            "CanonicalProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CanonicalProposal {
    const NAME: &'static str = "CanonicalProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.height = is.read_sfixed64()?;
                },
                25 => {
                    self.round = is.read_sfixed64()?;
                },
                32 => {
                    self.pol_round = is.read_int64()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block_id)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                58 => {
                    self.chain_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.height != 0 {
            my_size += 1 + 8;
        }
        if self.round != 0 {
            my_size += 1 + 8;
        }
        if self.pol_round != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.pol_round);
        }
        if let Some(v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.chain_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.height != 0 {
            os.write_sfixed64(2, self.height)?;
        }
        if self.round != 0 {
            os.write_sfixed64(3, self.round)?;
        }
        if self.pol_round != 0 {
            os.write_int64(4, self.pol_round)?;
        }
        if let Some(v) = self.block_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(7, &self.chain_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CanonicalProposal {
        CanonicalProposal::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN);
        self.height = 0;
        self.round = 0;
        self.pol_round = 0;
        self.block_id.clear();
        self.timestamp.clear();
        self.chain_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CanonicalProposal {
        static instance: CanonicalProposal = CanonicalProposal {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            height: 0,
            round: 0,
            pol_round: 0,
            block_id: ::protobuf::MessageField::none(),
            timestamp: ::protobuf::MessageField::none(),
            chain_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CanonicalProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CanonicalProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CanonicalProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CanonicalProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.types.CanonicalVote)
pub struct CanonicalVote {
    // message fields
    // @@protoc_insertion_point(field:tendermint.types.CanonicalVote.type)
    pub type_: ::protobuf::EnumOrUnknown<super::types::SignedMsgType>,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalVote.height)
    pub height: i64,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalVote.round)
    pub round: i64,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalVote.block_id)
    pub block_id: ::protobuf::MessageField<CanonicalBlockID>,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalVote.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:tendermint.types.CanonicalVote.chain_id)
    pub chain_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.types.CanonicalVote.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CanonicalVote {
    fn default() -> &'a CanonicalVote {
        <CanonicalVote as ::protobuf::Message>::default_instance()
    }
}

impl CanonicalVote {
    pub fn new() -> CanonicalVote {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &CanonicalVote| { &m.type_ },
            |m: &mut CanonicalVote| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &CanonicalVote| { &m.height },
            |m: &mut CanonicalVote| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round",
            |m: &CanonicalVote| { &m.round },
            |m: &mut CanonicalVote| { &mut m.round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CanonicalBlockID>(
            "block_id",
            |m: &CanonicalVote| { &m.block_id },
            |m: &mut CanonicalVote| { &mut m.block_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &CanonicalVote| { &m.timestamp },
            |m: &mut CanonicalVote| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &CanonicalVote| { &m.chain_id },
            |m: &mut CanonicalVote| { &mut m.chain_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CanonicalVote>(
            "CanonicalVote",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CanonicalVote {
    const NAME: &'static str = "CanonicalVote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.height = is.read_sfixed64()?;
                },
                25 => {
                    self.round = is.read_sfixed64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block_id)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                50 => {
                    self.chain_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.height != 0 {
            my_size += 1 + 8;
        }
        if self.round != 0 {
            my_size += 1 + 8;
        }
        if let Some(v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.chain_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.height != 0 {
            os.write_sfixed64(2, self.height)?;
        }
        if self.round != 0 {
            os.write_sfixed64(3, self.round)?;
        }
        if let Some(v) = self.block_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(6, &self.chain_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CanonicalVote {
        CanonicalVote::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN);
        self.height = 0;
        self.round = 0;
        self.block_id.clear();
        self.timestamp.clear();
        self.chain_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CanonicalVote {
        static instance: CanonicalVote = CanonicalVote {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            height: 0,
            round: 0,
            block_id: ::protobuf::MessageField::none(),
            timestamp: ::protobuf::MessageField::none(),
            chain_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CanonicalVote {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CanonicalVote").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CanonicalVote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CanonicalVote {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20tendermint/types/canonical.proto\x12\x10tendermint.types\x1a\x14go\
    goproto/gogo.proto\x1a\x1ctendermint/types/types.proto\x1a\x1fgoogle/pro\
    tobuf/timestamp.proto\"~\n\x10CanonicalBlockID\x12\x12\n\x04hash\x18\x01\
    \x20\x01(\x0cR\x04hash\x12V\n\x0fpart_set_header\x18\x02\x20\x01(\x0b2(.\
    tendermint.types.CanonicalPartSetHeaderR\rpartSetHeaderB\x04\xc8\xde\x1f\
    \0\"B\n\x16CanonicalPartSetHeader\x12\x14\n\x05total\x18\x01\x20\x01(\rR\
    \x05total\x12\x12\n\x04hash\x18\x02\x20\x01(\x0cR\x04hash\"\xd9\x02\n\
    \x11CanonicalProposal\x123\n\x04type\x18\x01\x20\x01(\x0e2\x1f.tendermin\
    t.types.SignedMsgTypeR\x04type\x12\x16\n\x06height\x18\x02\x20\x01(\x10R\
    \x06height\x12\x14\n\x05round\x18\x03\x20\x01(\x10R\x05round\x12)\n\tpol\
    _round\x18\x04\x20\x01(\x03R\x08polRoundB\x0c\xe2\xde\x1f\x08POLRound\
    \x12J\n\x08block_id\x18\x05\x20\x01(\x0b2\".tendermint.types.CanonicalBl\
    ockIDR\x07blockIdB\x0b\xe2\xde\x1f\x07BlockID\x12B\n\ttimestamp\x18\x06\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\xc8\xde\
    \x1f\0\x90\xdf\x1f\x01\x12&\n\x08chain_id\x18\x07\x20\x01(\tR\x07chainId\
    B\x0b\xe2\xde\x1f\x07ChainID\"\xaa\x02\n\rCanonicalVote\x123\n\x04type\
    \x18\x01\x20\x01(\x0e2\x1f.tendermint.types.SignedMsgTypeR\x04type\x12\
    \x16\n\x06height\x18\x02\x20\x01(\x10R\x06height\x12\x14\n\x05round\x18\
    \x03\x20\x01(\x10R\x05round\x12J\n\x08block_id\x18\x04\x20\x01(\x0b2\".t\
    endermint.types.CanonicalBlockIDR\x07blockIdB\x0b\xe2\xde\x1f\x07BlockID\
    \x12B\n\ttimestamp\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \ttimestampB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x01\x12&\n\x08chain_id\x18\
    \x06\x20\x01(\tR\x07chainIdB\x0b\xe2\xde\x1f\x07ChainIDB9Z7github.com/te\
    ndermint/tendermint/proto/tendermint/typesJ\xf9\x0c\n\x06\x12\x04\0\0$\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x19\n\
    \x08\n\x01\x08\x12\x03\x03\0N\n\t\n\x02\x08\x0b\x12\x03\x03\0N\n\t\n\x02\
    \x03\0\x12\x03\x05\0\x1e\n\t\n\x02\x03\x01\x12\x03\x06\0&\n\t\n\x02\x03\
    \x02\x12\x03\x07\0)\n\n\n\x02\x04\0\x12\x04\t\0\x0c\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\t\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02-\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\n\x19\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n+,\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x0b\x02L\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0b\x02\
    \x18\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x19(\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x0b+,\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x0b-K\n\
    \x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x0b.J\n\n\n\x02\x04\x01\
    \x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x1e\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x0f\x02\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x0f\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0f\t\x0e\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x0f\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x10\x02\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x10\x02\x07\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\t\r\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x10\x11\x12\n\n\n\x02\x04\x02\x12\x04\x13\0\x1b\x01\n\n\
    \n\x03\x04\x02\x01\x12\x03\x13\x08\x19\n\"\n\x04\x04\x02\x02\0\x12\x03\
    \x14\x02*\"\x15\x20type\x20alias\x20for\x20byte\n\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03\x14\x02\x0f\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x14\
    \x1c\x20\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x14()\nA\n\x04\x04\x02\
    \x02\x01\x12\x03\x15\x02*\"4\x20canonicalization\x20requires\x20fixed\
    \x20size\x20encoding\x20here\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x15\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\x1c\"\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03\x15()\nA\n\x04\x04\x02\x02\x02\x12\x03\x16\
    \x02*\"4\x20canonicalization\x20requires\x20fixed\x20size\x20encoding\
    \x20here\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x16\x02\n\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x16\x1c!\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x16()\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x17\x02P\n\x0c\n\x05\
    \x04\x02\x02\x03\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\x02\x02\x03\x01\
    \x12\x03\x17\x1c%\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x17()\n\x0c\n\
    \x05\x04\x02\x02\x03\x08\x12\x03\x17*O\n\x0f\n\x08\x04\x02\x02\x03\x08\
    \xec\xfb\x03\x12\x03\x17+N\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x18\x02O\
    \n\x0c\n\x05\x04\x02\x02\x04\x06\x12\x03\x18\x02\x12\n\x0c\n\x05\x04\x02\
    \x02\x04\x01\x12\x03\x18\x1c$\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\
    \x18()\n\x0c\n\x05\x04\x02\x02\x04\x08\x12\x03\x18*N\n\x0f\n\x08\x04\x02\
    \x02\x04\x08\xec\xfb\x03\x12\x03\x18+M\n\x0b\n\x04\x04\x02\x02\x05\x12\
    \x03\x19\x02e\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\x03\x19\x02\x1b\n\x0c\
    \n\x05\x04\x02\x02\x05\x01\x12\x03\x19\x1c%\n\x0c\n\x05\x04\x02\x02\x05\
    \x03\x12\x03\x19()\n\x0c\n\x05\x04\x02\x02\x05\x08\x12\x03\x19*d\n\x0f\n\
    \x08\x04\x02\x02\x05\x08\xe9\xfb\x03\x12\x03\x19+G\n\x0f\n\x08\x04\x02\
    \x02\x05\x08\xf2\xfb\x03\x12\x03\x19Ic\n\x0b\n\x04\x04\x02\x02\x06\x12\
    \x03\x1a\x02O\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03\x1a\x02\x08\n\x0c\
    \n\x05\x04\x02\x02\x06\x01\x12\x03\x1a\x1c$\n\x0c\n\x05\x04\x02\x02\x06\
    \x03\x12\x03\x1a()\n\x0c\n\x05\x04\x02\x02\x06\x08\x12\x03\x1a*N\n\x0f\n\
    \x08\x04\x02\x02\x06\x08\xec\xfb\x03\x12\x03\x1a+M\n\n\n\x02\x04\x03\x12\
    \x04\x1d\0$\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1d\x08\x15\n\"\n\x04\x04\
    \x03\x02\0\x12\x03\x1e\x02*\"\x15\x20type\x20alias\x20for\x20byte\n\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1e\x02\x0f\n\x0c\n\x05\x04\x03\x02\
    \0\x01\x12\x03\x1e\x1c\x20\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1e()\n\
    A\n\x04\x04\x03\x02\x01\x12\x03\x1f\x02*\"4\x20canonicalization\x20requi\
    res\x20fixed\x20size\x20encoding\x20here\n\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x03\x1f\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1f\x1c\"\
    \n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1f()\nA\n\x04\x04\x03\x02\x02\
    \x12\x03\x20\x02*\"4\x20canonicalization\x20requires\x20fixed\x20size\
    \x20encoding\x20here\n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x20\x02\n\
    \n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x20\x1c!\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03\x20()\n\x0b\n\x04\x04\x03\x02\x03\x12\x03!\x02O\n\
    \x0c\n\x05\x04\x03\x02\x03\x06\x12\x03!\x02\x12\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x03!\x1c$\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03!()\n\x0c\
    \n\x05\x04\x03\x02\x03\x08\x12\x03!*N\n\x0f\n\x08\x04\x03\x02\x03\x08\
    \xec\xfb\x03\x12\x03!+M\n\x0b\n\x04\x04\x03\x02\x04\x12\x03\"\x02e\n\x0c\
    \n\x05\x04\x03\x02\x04\x06\x12\x03\"\x02\x1b\n\x0c\n\x05\x04\x03\x02\x04\
    \x01\x12\x03\"\x1c%\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\"()\n\x0c\n\
    \x05\x04\x03\x02\x04\x08\x12\x03\"*d\n\x0f\n\x08\x04\x03\x02\x04\x08\xe9\
    \xfb\x03\x12\x03\"+G\n\x0f\n\x08\x04\x03\x02\x04\x08\xf2\xfb\x03\x12\x03\
    \"Ic\n\x0b\n\x04\x04\x03\x02\x05\x12\x03#\x02O\n\x0c\n\x05\x04\x03\x02\
    \x05\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03#\x1c$\
    \n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03#()\n\x0c\n\x05\x04\x03\x02\x05\
    \x08\x12\x03#*N\n\x0f\n\x08\x04\x03\x02\x05\x08\xec\xfb\x03\x12\x03#+Mb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(CanonicalBlockID::generated_message_descriptor_data());
            messages.push(CanonicalPartSetHeader::generated_message_descriptor_data());
            messages.push(CanonicalProposal::generated_message_descriptor_data());
            messages.push(CanonicalVote::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
