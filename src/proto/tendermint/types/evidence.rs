// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tendermint/types/evidence.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.types.Evidence)
pub struct Evidence {
    // message oneof groups
    pub sum: ::std::option::Option<evidence::Sum>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.types.Evidence.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Evidence {
    fn default() -> &'a Evidence {
        <Evidence as ::protobuf::Message>::default_instance()
    }
}

impl Evidence {
    pub fn new() -> Evidence {
        ::std::default::Default::default()
    }

    // .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1;

    pub fn duplicate_vote_evidence(&self) -> &DuplicateVoteEvidence {
        match self.sum {
            ::std::option::Option::Some(evidence::Sum::DuplicateVoteEvidence(ref v)) => v,
            _ => <DuplicateVoteEvidence as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_duplicate_vote_evidence(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_duplicate_vote_evidence(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(evidence::Sum::DuplicateVoteEvidence(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_duplicate_vote_evidence(&mut self, v: DuplicateVoteEvidence) {
        self.sum = ::std::option::Option::Some(evidence::Sum::DuplicateVoteEvidence(v))
    }

    // Mutable pointer to the field.
    pub fn mut_duplicate_vote_evidence(&mut self) -> &mut DuplicateVoteEvidence {
        if let ::std::option::Option::Some(evidence::Sum::DuplicateVoteEvidence(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(evidence::Sum::DuplicateVoteEvidence(DuplicateVoteEvidence::new()));
        }
        match self.sum {
            ::std::option::Option::Some(evidence::Sum::DuplicateVoteEvidence(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_duplicate_vote_evidence(&mut self) -> DuplicateVoteEvidence {
        if self.has_duplicate_vote_evidence() {
            match self.sum.take() {
                ::std::option::Option::Some(evidence::Sum::DuplicateVoteEvidence(v)) => v,
                _ => panic!(),
            }
        } else {
            DuplicateVoteEvidence::new()
        }
    }

    // .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2;

    pub fn light_client_attack_evidence(&self) -> &LightClientAttackEvidence {
        match self.sum {
            ::std::option::Option::Some(evidence::Sum::LightClientAttackEvidence(ref v)) => v,
            _ => <LightClientAttackEvidence as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_light_client_attack_evidence(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_light_client_attack_evidence(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(evidence::Sum::LightClientAttackEvidence(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_light_client_attack_evidence(&mut self, v: LightClientAttackEvidence) {
        self.sum = ::std::option::Option::Some(evidence::Sum::LightClientAttackEvidence(v))
    }

    // Mutable pointer to the field.
    pub fn mut_light_client_attack_evidence(&mut self) -> &mut LightClientAttackEvidence {
        if let ::std::option::Option::Some(evidence::Sum::LightClientAttackEvidence(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(evidence::Sum::LightClientAttackEvidence(LightClientAttackEvidence::new()));
        }
        match self.sum {
            ::std::option::Option::Some(evidence::Sum::LightClientAttackEvidence(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_light_client_attack_evidence(&mut self) -> LightClientAttackEvidence {
        if self.has_light_client_attack_evidence() {
            match self.sum.take() {
                ::std::option::Option::Some(evidence::Sum::LightClientAttackEvidence(v)) => v,
                _ => panic!(),
            }
        } else {
            LightClientAttackEvidence::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DuplicateVoteEvidence>(
            "duplicate_vote_evidence",
            Evidence::has_duplicate_vote_evidence,
            Evidence::duplicate_vote_evidence,
            Evidence::mut_duplicate_vote_evidence,
            Evidence::set_duplicate_vote_evidence,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LightClientAttackEvidence>(
            "light_client_attack_evidence",
            Evidence::has_light_client_attack_evidence,
            Evidence::light_client_attack_evidence,
            Evidence::mut_light_client_attack_evidence,
            Evidence::set_light_client_attack_evidence,
        ));
        oneofs.push(evidence::Sum::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Evidence>(
            "Evidence",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Evidence {
    const NAME: &'static str = "Evidence";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sum = ::std::option::Option::Some(evidence::Sum::DuplicateVoteEvidence(is.read_message()?));
                },
                18 => {
                    self.sum = ::std::option::Option::Some(evidence::Sum::LightClientAttackEvidence(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &evidence::Sum::DuplicateVoteEvidence(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &evidence::Sum::LightClientAttackEvidence(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &evidence::Sum::DuplicateVoteEvidence(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &evidence::Sum::LightClientAttackEvidence(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Evidence {
        Evidence::new()
    }

    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Evidence {
        static instance: Evidence = Evidence {
            sum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Evidence {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Evidence").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Evidence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Evidence {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Evidence`
pub mod evidence {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:tendermint.types.Evidence.sum)
    pub enum Sum {
        // @@protoc_insertion_point(oneof_field:tendermint.types.Evidence.duplicate_vote_evidence)
        DuplicateVoteEvidence(super::DuplicateVoteEvidence),
        // @@protoc_insertion_point(oneof_field:tendermint.types.Evidence.light_client_attack_evidence)
        LightClientAttackEvidence(super::LightClientAttackEvidence),
    }

    impl ::protobuf::Oneof for Sum {
    }

    impl ::protobuf::OneofFull for Sum {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Evidence as ::protobuf::MessageFull>::descriptor().oneof_by_name("sum").unwrap()).clone()
        }
    }

    impl Sum {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Sum>("sum")
        }
    }
}

///  DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.types.DuplicateVoteEvidence)
pub struct DuplicateVoteEvidence {
    // message fields
    // @@protoc_insertion_point(field:tendermint.types.DuplicateVoteEvidence.vote_a)
    pub vote_a: ::protobuf::MessageField<super::types::Vote>,
    // @@protoc_insertion_point(field:tendermint.types.DuplicateVoteEvidence.vote_b)
    pub vote_b: ::protobuf::MessageField<super::types::Vote>,
    // @@protoc_insertion_point(field:tendermint.types.DuplicateVoteEvidence.total_voting_power)
    pub total_voting_power: i64,
    // @@protoc_insertion_point(field:tendermint.types.DuplicateVoteEvidence.validator_power)
    pub validator_power: i64,
    // @@protoc_insertion_point(field:tendermint.types.DuplicateVoteEvidence.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.types.DuplicateVoteEvidence.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DuplicateVoteEvidence {
    fn default() -> &'a DuplicateVoteEvidence {
        <DuplicateVoteEvidence as ::protobuf::Message>::default_instance()
    }
}

impl DuplicateVoteEvidence {
    pub fn new() -> DuplicateVoteEvidence {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Vote>(
            "vote_a",
            |m: &DuplicateVoteEvidence| { &m.vote_a },
            |m: &mut DuplicateVoteEvidence| { &mut m.vote_a },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::Vote>(
            "vote_b",
            |m: &DuplicateVoteEvidence| { &m.vote_b },
            |m: &mut DuplicateVoteEvidence| { &mut m.vote_b },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_voting_power",
            |m: &DuplicateVoteEvidence| { &m.total_voting_power },
            |m: &mut DuplicateVoteEvidence| { &mut m.total_voting_power },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_power",
            |m: &DuplicateVoteEvidence| { &m.validator_power },
            |m: &mut DuplicateVoteEvidence| { &mut m.validator_power },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &DuplicateVoteEvidence| { &m.timestamp },
            |m: &mut DuplicateVoteEvidence| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DuplicateVoteEvidence>(
            "DuplicateVoteEvidence",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DuplicateVoteEvidence {
    const NAME: &'static str = "DuplicateVoteEvidence";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.vote_a)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.vote_b)?;
                },
                24 => {
                    self.total_voting_power = is.read_int64()?;
                },
                32 => {
                    self.validator_power = is.read_int64()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.vote_a.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.vote_b.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.total_voting_power != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.total_voting_power);
        }
        if self.validator_power != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.validator_power);
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.vote_a.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.vote_b.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.total_voting_power != 0 {
            os.write_int64(3, self.total_voting_power)?;
        }
        if self.validator_power != 0 {
            os.write_int64(4, self.validator_power)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DuplicateVoteEvidence {
        DuplicateVoteEvidence::new()
    }

    fn clear(&mut self) {
        self.vote_a.clear();
        self.vote_b.clear();
        self.total_voting_power = 0;
        self.validator_power = 0;
        self.timestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DuplicateVoteEvidence {
        static instance: DuplicateVoteEvidence = DuplicateVoteEvidence {
            vote_a: ::protobuf::MessageField::none(),
            vote_b: ::protobuf::MessageField::none(),
            total_voting_power: 0,
            validator_power: 0,
            timestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DuplicateVoteEvidence {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DuplicateVoteEvidence").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DuplicateVoteEvidence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DuplicateVoteEvidence {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.types.LightClientAttackEvidence)
pub struct LightClientAttackEvidence {
    // message fields
    // @@protoc_insertion_point(field:tendermint.types.LightClientAttackEvidence.conflicting_block)
    pub conflicting_block: ::protobuf::MessageField<super::types::LightBlock>,
    // @@protoc_insertion_point(field:tendermint.types.LightClientAttackEvidence.common_height)
    pub common_height: i64,
    // @@protoc_insertion_point(field:tendermint.types.LightClientAttackEvidence.byzantine_validators)
    pub byzantine_validators: ::std::vec::Vec<super::validator::Validator>,
    // @@protoc_insertion_point(field:tendermint.types.LightClientAttackEvidence.total_voting_power)
    pub total_voting_power: i64,
    // @@protoc_insertion_point(field:tendermint.types.LightClientAttackEvidence.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.types.LightClientAttackEvidence.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LightClientAttackEvidence {
    fn default() -> &'a LightClientAttackEvidence {
        <LightClientAttackEvidence as ::protobuf::Message>::default_instance()
    }
}

impl LightClientAttackEvidence {
    pub fn new() -> LightClientAttackEvidence {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::LightBlock>(
            "conflicting_block",
            |m: &LightClientAttackEvidence| { &m.conflicting_block },
            |m: &mut LightClientAttackEvidence| { &mut m.conflicting_block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "common_height",
            |m: &LightClientAttackEvidence| { &m.common_height },
            |m: &mut LightClientAttackEvidence| { &mut m.common_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "byzantine_validators",
            |m: &LightClientAttackEvidence| { &m.byzantine_validators },
            |m: &mut LightClientAttackEvidence| { &mut m.byzantine_validators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_voting_power",
            |m: &LightClientAttackEvidence| { &m.total_voting_power },
            |m: &mut LightClientAttackEvidence| { &mut m.total_voting_power },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &LightClientAttackEvidence| { &m.timestamp },
            |m: &mut LightClientAttackEvidence| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LightClientAttackEvidence>(
            "LightClientAttackEvidence",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LightClientAttackEvidence {
    const NAME: &'static str = "LightClientAttackEvidence";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.conflicting_block)?;
                },
                16 => {
                    self.common_height = is.read_int64()?;
                },
                26 => {
                    self.byzantine_validators.push(is.read_message()?);
                },
                32 => {
                    self.total_voting_power = is.read_int64()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.conflicting_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.common_height != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.common_height);
        }
        for value in &self.byzantine_validators {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.total_voting_power != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.total_voting_power);
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.conflicting_block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.common_height != 0 {
            os.write_int64(2, self.common_height)?;
        }
        for v in &self.byzantine_validators {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.total_voting_power != 0 {
            os.write_int64(4, self.total_voting_power)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LightClientAttackEvidence {
        LightClientAttackEvidence::new()
    }

    fn clear(&mut self) {
        self.conflicting_block.clear();
        self.common_height = 0;
        self.byzantine_validators.clear();
        self.total_voting_power = 0;
        self.timestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LightClientAttackEvidence {
        static instance: LightClientAttackEvidence = LightClientAttackEvidence {
            conflicting_block: ::protobuf::MessageField::none(),
            common_height: 0,
            byzantine_validators: ::std::vec::Vec::new(),
            total_voting_power: 0,
            timestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LightClientAttackEvidence {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LightClientAttackEvidence").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LightClientAttackEvidence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LightClientAttackEvidence {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tendermint.types.EvidenceList)
pub struct EvidenceList {
    // message fields
    // @@protoc_insertion_point(field:tendermint.types.EvidenceList.evidence)
    pub evidence: ::std::vec::Vec<Evidence>,
    // special fields
    // @@protoc_insertion_point(special_field:tendermint.types.EvidenceList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvidenceList {
    fn default() -> &'a EvidenceList {
        <EvidenceList as ::protobuf::Message>::default_instance()
    }
}

impl EvidenceList {
    pub fn new() -> EvidenceList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "evidence",
            |m: &EvidenceList| { &m.evidence },
            |m: &mut EvidenceList| { &mut m.evidence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvidenceList>(
            "EvidenceList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvidenceList {
    const NAME: &'static str = "EvidenceList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.evidence.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.evidence {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.evidence {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvidenceList {
        EvidenceList::new()
    }

    fn clear(&mut self) {
        self.evidence.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvidenceList {
        static instance: EvidenceList = EvidenceList {
            evidence: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvidenceList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvidenceList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvidenceList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvidenceList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ftendermint/types/evidence.proto\x12\x10tendermint.types\x1a\x14gog\
    oproto/gogo.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1ctendermi\
    nt/types/types.proto\x1a\x20tendermint/types/validator.proto\"\xe4\x01\n\
    \x08Evidence\x12a\n\x17duplicate_vote_evidence\x18\x01\x20\x01(\x0b2'.te\
    ndermint.types.DuplicateVoteEvidenceH\0R\x15duplicateVoteEvidence\x12n\n\
    \x1clight_client_attack_evidence\x18\x02\x20\x01(\x0b2+.tendermint.types\
    .LightClientAttackEvidenceH\0R\x19lightClientAttackEvidenceB\x05\n\x03su\
    m\"\x90\x02\n\x15DuplicateVoteEvidence\x12-\n\x06vote_a\x18\x01\x20\x01(\
    \x0b2\x16.tendermint.types.VoteR\x05voteA\x12-\n\x06vote_b\x18\x02\x20\
    \x01(\x0b2\x16.tendermint.types.VoteR\x05voteB\x12,\n\x12total_voting_po\
    wer\x18\x03\x20\x01(\x03R\x10totalVotingPower\x12'\n\x0fvalidator_power\
    \x18\x04\x20\x01(\x03R\x0evalidatorPower\x12B\n\ttimestamp\x18\x05\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\xc8\xde\x1f\0\
    \x90\xdf\x1f\x01\"\xcd\x02\n\x19LightClientAttackEvidence\x12I\n\x11conf\
    licting_block\x18\x01\x20\x01(\x0b2\x1c.tendermint.types.LightBlockR\x10\
    conflictingBlock\x12#\n\rcommon_height\x18\x02\x20\x01(\x03R\x0ccommonHe\
    ight\x12N\n\x14byzantine_validators\x18\x03\x20\x03(\x0b2\x1b.tendermint\
    .types.ValidatorR\x13byzantineValidators\x12,\n\x12total_voting_power\
    \x18\x04\x20\x01(\x03R\x10totalVotingPower\x12B\n\ttimestamp\x18\x05\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\xc8\xde\x1f\0\
    \x90\xdf\x1f\x01\"L\n\x0cEvidenceList\x12<\n\x08evidence\x18\x01\x20\x03\
    (\x0b2\x1a.tendermint.types.EvidenceR\x08evidenceB\x04\xc8\xde\x1f\0B9Z7\
    github.com/tendermint/tendermint/proto/tendermint/typesJ\x83\n\n\x06\x12\
    \x04\0\0%\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x01\0\x19\n\x08\n\x01\x08\x12\x03\x03\0N\n\t\n\x02\x08\x0b\x12\x03\x03\
    \0N\n\t\n\x02\x03\0\x12\x03\x05\0\x1e\n\t\n\x02\x03\x01\x12\x03\x06\0)\n\
    \t\n\x02\x03\x02\x12\x03\x07\0&\n\t\n\x02\x03\x03\x12\x03\x08\0*\n\n\n\
    \x02\x04\0\x12\x04\n\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x10\n\
    \x0c\n\x04\x04\0\x08\0\x12\x04\x0b\x02\x0e\x03\n\x0c\n\x05\x04\0\x08\0\
    \x01\x12\x03\x0b\x08\x0b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x04?\n\x0c\
    \n\x05\x04\0\x02\0\x06\x12\x03\x0c\x04\x19\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x0c\x1e5\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c=>\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\r\x04?\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\r\
    \x04\x1d\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x1e:\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\r=>\nb\n\x02\x04\x01\x12\x04\x12\0\x18\x01\x1aV\x20\
    DuplicateVoteEvidence\x20contains\x20evidence\x20of\x20a\x20validator\
    \x20signed\x20two\x20conflicting\x20votes.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03\x12\x08\x1d\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x13\x02)\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03\x13\x02\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x13\x1e$\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x13'(\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x14\x02)\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\
    \x03\x14\x02\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x14\x1e$\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x03\x14'(\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x15\x025\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x15\x02\x07\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\x15\x1e0\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\x1534\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x16\x022\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03\x16\x1e-\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1601\n\
    \x0b\n\x04\x04\x01\x02\x04\x12\x03\x17\x02g\n\x0c\n\x05\x04\x01\x02\x04\
    \x06\x12\x03\x17\x02\x1b\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x17\x1e\
    '\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x17*+\n\x0c\n\x05\x04\x01\x02\
    \x04\x08\x12\x03\x17,f\n\x0f\n\x08\x04\x01\x02\x04\x08\xe9\xfb\x03\x12\
    \x03\x17-I\n\x0f\n\x08\x04\x01\x02\x04\x08\xf2\xfb\x03\x12\x03\x17Ke\nv\
    \n\x02\x04\x02\x12\x04\x1b\0!\x01\x1aj\x20LightClientAttackEvidence\x20c\
    ontains\x20evidence\x20of\x20a\x20set\x20of\x20validators\x20attempting\
    \x20to\x20mislead\x20a\x20light\x20client.\n\n\n\n\x03\x04\x02\x01\x12\
    \x03\x1b\x08!\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1c\x02<\n\x0c\n\x05\x04\
    \x02\x02\0\x06\x12\x03\x1c\x02\x1d\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x1c&7\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1c:;\n\x0b\n\x04\x04\x02\
    \x02\x01\x12\x03\x1d\x02<\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1d\
    \x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1d&3\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03\x1d:;\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1e\
    \x02?\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x1e\x02\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x06\x12\x03\x1e\x0b%\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\
    \x03\x1e&:\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x1e=>\n\x0b\n\x04\x04\
    \x02\x02\x03\x12\x03\x1f\x02=\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\
    \x1f\x02\x07\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x1f&8\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x03\x1f;<\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\
    \x20\x02o\n\x0c\n\x05\x04\x02\x02\x04\x06\x12\x03\x20\x02\x1b\n\x0c\n\
    \x05\x04\x02\x02\x04\x01\x12\x03\x20&/\n\x0c\n\x05\x04\x02\x02\x04\x03\
    \x12\x03\x2023\n\x0c\n\x05\x04\x02\x02\x04\x08\x12\x03\x204n\n\x0f\n\x08\
    \x04\x02\x02\x04\x08\xe9\xfb\x03\x12\x03\x205Q\n\x0f\n\x08\x04\x02\x02\
    \x04\x08\xf2\xfb\x03\x12\x03\x20Sm\n\n\n\x02\x04\x03\x12\x04#\0%\x01\n\n\
    \n\x03\x04\x03\x01\x12\x03#\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03$\
    \x02@\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03$\x02\n\n\x0c\n\x05\x04\x03\
    \x02\0\x06\x12\x03$\x0b\x13\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03$\x14\
    \x1c\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03$\x1f\x20\n\x0c\n\x05\x04\x03\
    \x02\0\x08\x12\x03$!?\n\x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03$\
    \">b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            deps.push(super::validator::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Evidence::generated_message_descriptor_data());
            messages.push(DuplicateVoteEvidence::generated_message_descriptor_data());
            messages.push(LightClientAttackEvidence::generated_message_descriptor_data());
            messages.push(EvidenceList::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
