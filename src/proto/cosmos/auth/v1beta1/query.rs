// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/auth/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryAccountsRequest is the request type for the Query/Accounts RPC method.
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.QueryAccountsRequest)
pub struct QueryAccountsRequest {
    // message fields
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.QueryAccountsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.QueryAccountsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAccountsRequest {
    fn default() -> &'a QueryAccountsRequest {
        <QueryAccountsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAccountsRequest {
    pub fn new() -> QueryAccountsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryAccountsRequest| { &m.pagination },
            |m: &mut QueryAccountsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAccountsRequest>(
            "QueryAccountsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAccountsRequest {
    const NAME: &'static str = "QueryAccountsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAccountsRequest {
        QueryAccountsRequest::new()
    }

    fn clear(&mut self) {
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAccountsRequest {
        static instance: QueryAccountsRequest = QueryAccountsRequest {
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAccountsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAccountsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAccountsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAccountsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAccountsResponse is the response type for the Query/Accounts RPC method.
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.QueryAccountsResponse)
pub struct QueryAccountsResponse {
    // message fields
    ///  accounts are the existing accounts
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.QueryAccountsResponse.accounts)
    pub accounts: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.QueryAccountsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.QueryAccountsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAccountsResponse {
    fn default() -> &'a QueryAccountsResponse {
        <QueryAccountsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAccountsResponse {
    pub fn new() -> QueryAccountsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "accounts",
            |m: &QueryAccountsResponse| { &m.accounts },
            |m: &mut QueryAccountsResponse| { &mut m.accounts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryAccountsResponse| { &m.pagination },
            |m: &mut QueryAccountsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAccountsResponse>(
            "QueryAccountsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAccountsResponse {
    const NAME: &'static str = "QueryAccountsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.accounts.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.accounts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAccountsResponse {
        QueryAccountsResponse::new()
    }

    fn clear(&mut self) {
        self.accounts.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAccountsResponse {
        static instance: QueryAccountsResponse = QueryAccountsResponse {
            accounts: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAccountsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAccountsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAccountsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAccountsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAccountRequest is the request type for the Query/Account RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.QueryAccountRequest)
pub struct QueryAccountRequest {
    // message fields
    ///  address defines the address to query for.
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.QueryAccountRequest.address)
    pub address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.QueryAccountRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAccountRequest {
    fn default() -> &'a QueryAccountRequest {
        <QueryAccountRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAccountRequest {
    pub fn new() -> QueryAccountRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &QueryAccountRequest| { &m.address },
            |m: &mut QueryAccountRequest| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAccountRequest>(
            "QueryAccountRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAccountRequest {
    const NAME: &'static str = "QueryAccountRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAccountRequest {
        QueryAccountRequest::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAccountRequest {
        static instance: QueryAccountRequest = QueryAccountRequest {
            address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAccountRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAccountRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAccountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAccountRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAccountResponse is the response type for the Query/Account RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.QueryAccountResponse)
pub struct QueryAccountResponse {
    // message fields
    ///  account defines the account of the corresponding address.
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.QueryAccountResponse.account)
    pub account: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.QueryAccountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAccountResponse {
    fn default() -> &'a QueryAccountResponse {
        <QueryAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAccountResponse {
    pub fn new() -> QueryAccountResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "account",
            |m: &QueryAccountResponse| { &m.account },
            |m: &mut QueryAccountResponse| { &mut m.account },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAccountResponse>(
            "QueryAccountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAccountResponse {
    const NAME: &'static str = "QueryAccountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.account)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAccountResponse {
        QueryAccountResponse::new()
    }

    fn clear(&mut self) {
        self.account.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAccountResponse {
        static instance: QueryAccountResponse = QueryAccountResponse {
            account: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAccountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAccountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAccountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.QueryParamsRequest)
pub struct QueryParamsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.QueryParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsRequest>(
            "QueryParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: QueryParamsRequest = QueryParamsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.QueryParamsResponse)
pub struct QueryParamsResponse {
    // message fields
    ///  params defines the parameters of the module.
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.QueryParamsResponse.params)
    pub params: ::protobuf::MessageField<super::auth::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.QueryParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::auth::Params>(
            "params",
            |m: &QueryParamsResponse| { &m.params },
            |m: &mut QueryParamsResponse| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsResponse>(
            "QueryParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: QueryParamsResponse = QueryParamsResponse {
            params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/auth/v1beta1/query.proto\x12\x13cosmos.auth.v1beta1\x1a*cos\
    mos/base/query/v1beta1/pagination.proto\x1a\x14gogoproto/gogo.proto\x1a\
    \x19google/protobuf/any.proto\x1a\x1cgoogle/api/annotations.proto\x1a\
    \x1ecosmos/auth/v1beta1/auth.proto\x1a\x19cosmos_proto/cosmos.proto\"^\n\
    \x14QueryAccountsRequest\x12F\n\npagination\x18\x01\x20\x01(\x0b2&.cosmo\
    s.base.query.v1beta1.PageRequestR\npagination\"\xa0\x01\n\x15QueryAccoun\
    tsResponse\x12>\n\x08accounts\x18\x01\x20\x03(\x0b2\x14.google.protobuf.\
    AnyR\x08accountsB\x0c\xca\xb4-\x08AccountI\x12G\n\npagination\x18\x02\
    \x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination\"9\n\
    \x13QueryAccountRequest\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07addr\
    ess:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"T\n\x14QueryAccountResponse\x12<\n\
    \x07account\x18\x01\x20\x01(\x0b2\x14.google.protobuf.AnyR\x07accountB\
    \x0c\xca\xb4-\x08AccountI\"\x14\n\x12QueryParamsRequest\"P\n\x13QueryPar\
    amsResponse\x129\n\x06params\x18\x01\x20\x01(\x0b2\x1b.cosmos.auth.v1bet\
    a1.ParamsR\x06paramsB\x04\xc8\xde\x1f\02\xa7\x03\n\x05Query\x12\x88\x01\
    \n\x08Accounts\x12).cosmos.auth.v1beta1.QueryAccountsRequest\x1a*.cosmos\
    .auth.v1beta1.QueryAccountsResponse\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/c\
    osmos/auth/v1beta1/accounts\x12\x8f\x01\n\x07Account\x12(.cosmos.auth.v1\
    beta1.QueryAccountRequest\x1a).cosmos.auth.v1beta1.QueryAccountResponse\
    \"/\x82\xd3\xe4\x93\x02)\x12'/cosmos/auth/v1beta1/accounts/{address}\x12\
    \x80\x01\n\x06Params\x12'.cosmos.auth.v1beta1.QueryParamsRequest\x1a(.co\
    smos.auth.v1beta1.QueryParamsResponse\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b\
    /cosmos/auth/v1beta1/paramsB+Z)github.com/cosmos/cosmos-sdk/x/auth/types\
    J\x93\x10\n\x06\x12\x04\0\0I\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x03\04\n\t\n\x02\x03\
    \x01\x12\x03\x04\0\x1e\n\t\n\x02\x03\x02\x12\x03\x05\0#\n\t\n\x02\x03\
    \x03\x12\x03\x06\0&\n\t\n\x02\x03\x04\x12\x03\x07\0(\n\t\n\x02\x03\x05\
    \x12\x03\x08\0#\n\x08\n\x01\x08\x12\x03\n\0@\n\t\n\x02\x08\x0b\x12\x03\n\
    \0@\n5\n\x02\x06\0\x12\x04\r\0\x1e\x01\x1a)\x20Query\x20defines\x20the\
    \x20gRPC\x20querier\x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\r\x08\r\nS\
    \n\x04\x06\0\x02\0\x12\x04\x11\x02\x13\x03\x1aE\x20Accounts\x20returns\
    \x20all\x20the\x20existing\x20accounts\n\n\x20Since:\x20cosmos-sdk\x200.\
    43\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x11\x06\x0e\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x11\x0f#\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x11.C\n\
    \x0c\n\x05\x06\0\x02\0\x04\x12\x03\x12\x04C\n\x11\n\n\x06\0\x02\0\x04\
    \xb0\xca\xbc\"\x02\x12\x03\x12\x04C\nA\n\x04\x06\0\x02\x01\x12\x04\x16\
    \x02\x18\x03\x1a3\x20Account\x20returns\x20account\x20details\x20based\
    \x20on\x20address.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x16\x06\r\n\
    \x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x16\x0e!\n\x0c\n\x05\x06\0\x02\x01\
    \x03\x12\x03\x16,@\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03\x17\x04M\n\x11\
    \n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\x02\x12\x03\x17\x04M\n.\n\x04\x06\0\
    \x02\x02\x12\x04\x1b\x02\x1d\x03\x1a\x20\x20Params\x20queries\x20all\x20\
    parameters.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1b\x06\x0c\n\x0c\n\
    \x05\x06\0\x02\x02\x02\x12\x03\x1b\r\x1f\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03\x1b*=\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03\x1c\x04A\n\x11\n\n\
    \x06\0\x02\x02\x04\xb0\xca\xbc\"\x02\x12\x03\x1c\x04A\nr\n\x02\x04\0\x12\
    \x04#\0&\x01\x1af\x20QueryAccountsRequest\x20is\x20the\x20request\x20typ\
    e\x20for\x20the\x20Query/Accounts\x20RPC\x20method.\n\n\x20Since:\x20cos\
    mos-sdk\x200.43\n\n\n\n\x03\x04\0\x01\x12\x03#\x08\x1c\nI\n\x04\x04\0\
    \x02\0\x12\x03%\x027\x1a<\x20pagination\x20defines\x20an\x20optional\x20\
    pagination\x20for\x20the\x20request.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03%\x02'\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03%(2\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03%56\nt\n\x02\x04\x01\x12\x04+\01\x01\x1ah\x20QueryAccounts\
    Response\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Account\
    s\x20RPC\x20method.\n\n\x20Since:\x20cosmos-sdk\x200.43\n\n\n\n\x03\x04\
    \x01\x01\x12\x03+\x08\x1d\n1\n\x04\x04\x01\x02\0\x12\x03-\x02\\\x1a$\x20\
    accounts\x20are\x20the\x20existing\x20accounts\n\n\x0c\n\x05\x04\x01\x02\
    \0\x04\x12\x03-\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03-\x0b\x1e\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03-\x1f'\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03-*+\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03-,[\n\x0f\n\x08\x04\x01\
    \x02\0\x08\xc9\xd6\x05\x12\x03--Z\nA\n\x04\x04\x01\x02\x01\x12\x030\x028\
    \x1a4\x20pagination\x20defines\x20the\x20pagination\x20in\x20the\x20resp\
    onse.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x030\x02(\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x030)3\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03067\n\
    W\n\x02\x04\x02\x12\x044\0:\x01\x1aK\x20QueryAccountRequest\x20is\x20the\
    \x20request\x20type\x20for\x20the\x20Query/Account\x20RPC\x20method.\n\n\
    \n\n\x03\x04\x02\x01\x12\x034\x08\x1b\n\n\n\x03\x04\x02\x07\x12\x035\x02\
    -\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x035\x02-\n\n\n\x03\x04\x02\x07\
    \x12\x036\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x036\x02-\n8\n\x04\
    \x04\x02\x02\0\x12\x039\x02\x15\x1a+\x20address\x20defines\x20the\x20add\
    ress\x20to\x20query\x20for.\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x039\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x039\t\x10\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x039\x13\x14\nY\n\x02\x04\x03\x12\x04=\0@\x01\x1aM\x20Que\
    ryAccountResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Quer\
    y/Account\x20RPC\x20method.\n\n\n\n\x03\x04\x03\x01\x12\x03=\x08\x1c\nH\
    \n\x04\x04\x03\x02\0\x12\x03?\x02R\x1a;\x20account\x20defines\x20the\x20\
    account\x20of\x20the\x20corresponding\x20address.\n\n\x0c\n\x05\x04\x03\
    \x02\0\x06\x12\x03?\x02\x15\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03?\x16\
    \x1d\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03?\x20!\n\x0c\n\x05\x04\x03\x02\
    \0\x08\x12\x03?\"Q\n\x0f\n\x08\x04\x03\x02\0\x08\xc9\xd6\x05\x12\x03?#P\
    \nT\n\x02\x04\x04\x12\x03C\0\x1d\x1aI\x20QueryParamsRequest\x20is\x20the\
    \x20request\x20type\x20for\x20the\x20Query/Params\x20RPC\x20method.\n\n\
    \n\n\x03\x04\x04\x01\x12\x03C\x08\x1a\nW\n\x02\x04\x05\x12\x04F\0I\x01\
    \x1aK\x20QueryParamsResponse\x20is\x20the\x20response\x20type\x20for\x20\
    the\x20Query/Params\x20RPC\x20method.\n\n\n\n\x03\x04\x05\x01\x12\x03F\
    \x08\x1b\n;\n\x04\x04\x05\x02\0\x12\x03H\x023\x1a.\x20params\x20defines\
    \x20the\x20parameters\x20of\x20the\x20module.\n\n\x0c\n\x05\x04\x05\x02\
    \0\x06\x12\x03H\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03H\t\x0f\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03H\x12\x13\n\x0c\n\x05\x04\x05\x02\0\
    \x08\x12\x03H\x142\n\x0f\n\x08\x04\x05\x02\0\x08\xe9\xfb\x03\x12\x03H\
    \x151b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::auth::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(QueryAccountsRequest::generated_message_descriptor_data());
            messages.push(QueryAccountsResponse::generated_message_descriptor_data());
            messages.push(QueryAccountRequest::generated_message_descriptor_data());
            messages.push(QueryAccountResponse::generated_message_descriptor_data());
            messages.push(QueryParamsRequest::generated_message_descriptor_data());
            messages.push(QueryParamsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
