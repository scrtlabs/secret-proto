// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/auth/v1beta1/auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  BaseAccount defines a base account type. It contains all the necessary fields
///  for basic account functionality. Any custom account type should extend this
///  type for additional functionality (e.g. vesting).
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.BaseAccount)
pub struct BaseAccount {
    // message fields
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.BaseAccount.address)
    pub address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.BaseAccount.pub_key)
    pub pub_key: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.BaseAccount.account_number)
    pub account_number: u64,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.BaseAccount.sequence)
    pub sequence: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.BaseAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BaseAccount {
    fn default() -> &'a BaseAccount {
        <BaseAccount as ::protobuf::Message>::default_instance()
    }
}

impl BaseAccount {
    pub fn new() -> BaseAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &BaseAccount| { &m.address },
            |m: &mut BaseAccount| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "pub_key",
            |m: &BaseAccount| { &m.pub_key },
            |m: &mut BaseAccount| { &mut m.pub_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_number",
            |m: &BaseAccount| { &m.account_number },
            |m: &mut BaseAccount| { &mut m.account_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &BaseAccount| { &m.sequence },
            |m: &mut BaseAccount| { &mut m.sequence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BaseAccount>(
            "BaseAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BaseAccount {
    const NAME: &'static str = "BaseAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pub_key)?;
                },
                24 => {
                    self.account_number = is.read_uint64()?;
                },
                32 => {
                    self.sequence = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.account_number != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.account_number);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.sequence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(v) = self.pub_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.account_number != 0 {
            os.write_uint64(3, self.account_number)?;
        }
        if self.sequence != 0 {
            os.write_uint64(4, self.sequence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BaseAccount {
        BaseAccount::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.pub_key.clear();
        self.account_number = 0;
        self.sequence = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BaseAccount {
        static instance: BaseAccount = BaseAccount {
            address: ::std::string::String::new(),
            pub_key: ::protobuf::MessageField::none(),
            account_number: 0,
            sequence: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BaseAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BaseAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BaseAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ModuleAccount defines an account for modules that holds coins on a pool.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.ModuleAccount)
pub struct ModuleAccount {
    // message fields
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.ModuleAccount.base_account)
    pub base_account: ::protobuf::MessageField<BaseAccount>,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.ModuleAccount.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.ModuleAccount.permissions)
    pub permissions: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.ModuleAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ModuleAccount {
    fn default() -> &'a ModuleAccount {
        <ModuleAccount as ::protobuf::Message>::default_instance()
    }
}

impl ModuleAccount {
    pub fn new() -> ModuleAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BaseAccount>(
            "base_account",
            |m: &ModuleAccount| { &m.base_account },
            |m: &mut ModuleAccount| { &mut m.base_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ModuleAccount| { &m.name },
            |m: &mut ModuleAccount| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "permissions",
            |m: &ModuleAccount| { &m.permissions },
            |m: &mut ModuleAccount| { &mut m.permissions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ModuleAccount>(
            "ModuleAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ModuleAccount {
    const NAME: &'static str = "ModuleAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base_account)?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.permissions.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.permissions {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.base_account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.permissions {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ModuleAccount {
        ModuleAccount::new()
    }

    fn clear(&mut self) {
        self.base_account.clear();
        self.name.clear();
        self.permissions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ModuleAccount {
        static instance: ModuleAccount = ModuleAccount {
            base_account: ::protobuf::MessageField::none(),
            name: ::std::string::String::new(),
            permissions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ModuleAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ModuleAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ModuleAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModuleAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Params defines the parameters for the auth module.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.auth.v1beta1.Params)
pub struct Params {
    // message fields
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.Params.max_memo_characters)
    pub max_memo_characters: u64,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.Params.tx_sig_limit)
    pub tx_sig_limit: u64,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.Params.tx_size_cost_per_byte)
    pub tx_size_cost_per_byte: u64,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.Params.sig_verify_cost_ed25519)
    pub sig_verify_cost_ed25519: u64,
    // @@protoc_insertion_point(field:cosmos.auth.v1beta1.Params.sig_verify_cost_secp256k1)
    pub sig_verify_cost_secp256k1: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.auth.v1beta1.Params.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_memo_characters",
            |m: &Params| { &m.max_memo_characters },
            |m: &mut Params| { &mut m.max_memo_characters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_sig_limit",
            |m: &Params| { &m.tx_sig_limit },
            |m: &mut Params| { &mut m.tx_sig_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_size_cost_per_byte",
            |m: &Params| { &m.tx_size_cost_per_byte },
            |m: &mut Params| { &mut m.tx_size_cost_per_byte },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sig_verify_cost_ed25519",
            |m: &Params| { &m.sig_verify_cost_ed25519 },
            |m: &mut Params| { &mut m.sig_verify_cost_ed25519 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sig_verify_cost_secp256k1",
            |m: &Params| { &m.sig_verify_cost_secp256k1 },
            |m: &mut Params| { &mut m.sig_verify_cost_secp256k1 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Params>(
            "Params",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Params {
    const NAME: &'static str = "Params";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.max_memo_characters = is.read_uint64()?;
                },
                16 => {
                    self.tx_sig_limit = is.read_uint64()?;
                },
                24 => {
                    self.tx_size_cost_per_byte = is.read_uint64()?;
                },
                32 => {
                    self.sig_verify_cost_ed25519 = is.read_uint64()?;
                },
                40 => {
                    self.sig_verify_cost_secp256k1 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.max_memo_characters != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.max_memo_characters);
        }
        if self.tx_sig_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.tx_sig_limit);
        }
        if self.tx_size_cost_per_byte != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.tx_size_cost_per_byte);
        }
        if self.sig_verify_cost_ed25519 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.sig_verify_cost_ed25519);
        }
        if self.sig_verify_cost_secp256k1 != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.sig_verify_cost_secp256k1);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.max_memo_characters != 0 {
            os.write_uint64(1, self.max_memo_characters)?;
        }
        if self.tx_sig_limit != 0 {
            os.write_uint64(2, self.tx_sig_limit)?;
        }
        if self.tx_size_cost_per_byte != 0 {
            os.write_uint64(3, self.tx_size_cost_per_byte)?;
        }
        if self.sig_verify_cost_ed25519 != 0 {
            os.write_uint64(4, self.sig_verify_cost_ed25519)?;
        }
        if self.sig_verify_cost_secp256k1 != 0 {
            os.write_uint64(5, self.sig_verify_cost_secp256k1)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Params {
        Params::new()
    }

    fn clear(&mut self) {
        self.max_memo_characters = 0;
        self.tx_sig_limit = 0;
        self.tx_size_cost_per_byte = 0;
        self.sig_verify_cost_ed25519 = 0;
        self.sig_verify_cost_secp256k1 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Params {
        static instance: Params = Params {
            max_memo_characters: 0,
            tx_sig_limit: 0,
            tx_size_cost_per_byte: 0,
            sig_verify_cost_ed25519: 0,
            sig_verify_cost_secp256k1: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Params {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Params").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecosmos/auth/v1beta1/auth.proto\x12\x13cosmos.auth.v1beta1\x1a\x19c\
    osmos_proto/cosmos.proto\x1a\x14gogoproto/gogo.proto\x1a\x19google/proto\
    buf/any.proto\"\xfd\x01\n\x0bBaseAccount\x12\x18\n\x07address\x18\x01\
    \x20\x01(\tR\x07address\x12\\\n\x07pub_key\x18\x02\x20\x01(\x0b2\x14.goo\
    gle.protobuf.AnyR\x06pubKeyB-\xf2\xde\x1f\x11yaml:\"public_key\"\xea\xde\
    \x1f\x14public_key,omitempty\x12@\n\x0eaccount_number\x18\x03\x20\x01(\
    \x04R\raccountNumberB\x19\xf2\xde\x1f\x15yaml:\"account_number\"\x12\x1a\
    \n\x08sequence\x18\x04\x20\x01(\x04R\x08sequence:\x18\xd2\xb4-\x08Accoun\
    tI\xe8\xa0\x1f\0\x88\xa0\x1f\0\x98\xa0\x1f\0\"\xc3\x01\n\rModuleAccount\
    \x12`\n\x0cbase_account\x18\x01\x20\x01(\x0b2\x20.cosmos.auth.v1beta1.Ba\
    seAccountR\x0bbaseAccountB\x1b\xf2\xde\x1f\x13yaml:\"base_account\"\xd0\
    \xde\x1f\x01\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x20\n\x0b\
    permissions\x18\x03\x20\x03(\tR\x0bpermissions:\x1a\xd2\xb4-\x0eModuleAc\
    countI\x88\xa0\x1f\0\x98\xa0\x1f\0\"\xdf\x03\n\x06Params\x12N\n\x13max_m\
    emo_characters\x18\x01\x20\x01(\x04R\x11maxMemoCharactersB\x1e\xf2\xde\
    \x1f\x1ayaml:\"max_memo_characters\"\x129\n\x0ctx_sig_limit\x18\x02\x20\
    \x01(\x04R\ntxSigLimitB\x17\xf2\xde\x1f\x13yaml:\"tx_sig_limit\"\x12R\n\
    \x15tx_size_cost_per_byte\x18\x03\x20\x01(\x04R\x11txSizeCostPerByteB\
    \x20\xf2\xde\x1f\x1cyaml:\"tx_size_cost_per_byte\"\x12q\n\x17sig_verify_\
    cost_ed25519\x18\x04\x20\x01(\x04R\x14sigVerifyCostEd25519B:\xf2\xde\x1f\
    \x1eyaml:\"sig_verify_cost_ed25519\"\xe2\xde\x1f\x14SigVerifyCostED25519\
    \x12y\n\x19sig_verify_cost_secp256k1\x18\x05\x20\x01(\x04R\x16sigVerifyC\
    ostSecp256k1B>\xf2\xde\x1f\x20yaml:\"sig_verify_cost_secp256k1\"\xe2\xde\
    \x1f\x16SigVerifyCostSecp256k1:\x08\xe8\xa0\x1f\x01\x98\xa0\x1f\0B+Z)git\
    hub.com/cosmos/cosmos-sdk/x/auth/typesJ\xc3\r\n\x06\x12\x04\0\01\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1c\n\t\n\
    \x02\x03\0\x12\x03\x03\0#\n\t\n\x02\x03\x01\x12\x03\x04\0\x1e\n\t\n\x02\
    \x03\x02\x12\x03\x05\0#\n\x08\n\x01\x08\x12\x03\x07\0@\n\t\n\x02\x08\x0b\
    \x12\x03\x07\0@\n\xdc\x01\n\x02\x04\0\x12\x04\x0c\0\x18\x01\x1a\xcf\x01\
    \x20BaseAccount\x20defines\x20a\x20base\x20account\x20type.\x20It\x20con\
    tains\x20all\x20the\x20necessary\x20fields\n\x20for\x20basic\x20account\
    \x20functionality.\x20Any\x20custom\x20account\x20type\x20should\x20exte\
    nd\x20this\n\x20type\x20for\x20additional\x20functionality\x20(e.g.\x20v\
    esting).\n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x13\n\n\n\x03\x04\0\x07\
    \x12\x03\r\x02.\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\r\x02.\n\n\n\x03\
    \x04\0\x07\x12\x03\x0e\x02.\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\x03\x0e\
    \x02.\n\n\n\x03\x04\0\x07\x12\x03\x0f\x02.\n\r\n\x06\x04\0\x07\x8d\xf4\
    \x03\x12\x03\x0f\x02.\n\n\n\x03\x04\0\x07\x12\x03\x11\x02:\n\r\n\x06\x04\
    \0\x07\xca\xd6\x05\x12\x03\x11\x02:\n\x0b\n\x04\x04\0\x02\0\x12\x03\x13\
    \x02\"\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x13\x16\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x13\
    \x20!\n\x0c\n\x04\x04\0\x02\x01\x12\x04\x14\x02\x15c\n\x0c\n\x05\x04\0\
    \x02\x01\x06\x12\x03\x14\x02\x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x14\x16\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x14\x20!\n\x0c\n\x05\
    \x04\0\x02\x01\x08\x12\x03\x15\x06b\n\x0f\n\x08\x04\0\x02\x01\x08\xed\
    \xfb\x03\x12\x03\x15\x073\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\
    \x03\x155a\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x16\x02O\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x16\t\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x16\x1a\x1b\n\x0c\n\x05\
    \x04\0\x02\x02\x08\x12\x03\x16\x1cN\n\x0f\n\x08\x04\0\x02\x02\x08\xee\
    \xfb\x03\x12\x03\x16\x1dM\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x17\x02\x1c\
    \n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x17\t\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x17\x1a\
    \x1b\nV\n\x02\x04\x01\x12\x04\x1b\0#\x01\x1aJ\x20ModuleAccount\x20define\
    s\x20an\x20account\x20for\x20modules\x20that\x20holds\x20coins\x20on\x20\
    a\x20pool.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1b\x08\x15\n\n\n\x03\x04\x01\
    \x07\x12\x03\x1c\x025\n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03\x1c\x025\
    \n\n\n\x03\x04\x01\x07\x12\x03\x1d\x025\n\r\n\x06\x04\x01\x07\x83\xf4\
    \x03\x12\x03\x1d\x025\n\n\n\x03\x04\x01\x07\x12\x03\x1e\x02@\n\r\n\x06\
    \x04\x01\x07\xca\xd6\x05\x12\x03\x1e\x02@\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x20\x02n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x20\x02\r\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x20\x12\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x20!\"\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x20#m\n\x0f\n\x08\
    \x04\x01\x02\0\x08\xea\xfb\x03\x12\x03\x20$<\n\x0f\n\x08\x04\x01\x02\0\
    \x08\xee\xfb\x03\x12\x03\x20>l\n\x0b\n\x04\x04\x01\x02\x01\x12\x03!\x02#\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03!\x12\x16\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03!!\
    \"\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\"\x02#\n\x0c\n\x05\x04\x01\x02\
    \x02\x04\x12\x03\"\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\"\x0b\
    \x11\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\"\x12\x1d\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03\"!\"\n@\n\x02\x04\x02\x12\x04&\01\x01\x1a4\x20P\
    arams\x20defines\x20the\x20parameters\x20for\x20the\x20auth\x20module.\n\
    \n\n\n\x03\x04\x02\x01\x12\x03&\x08\x0e\n\n\n\x03\x04\x02\x07\x12\x03'\
    \x02-\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x03'\x02-\n\n\n\x03\x04\x02\
    \x07\x12\x03(\x02.\n\r\n\x06\x04\x02\x07\x83\xf4\x03\x12\x03(\x02.\n\x0b\
    \n\x04\x04\x02\x02\0\x12\x03*\x02]\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    *\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03*\t\x1c\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03*#$\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03*%\\\n\
    \x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x03*&[\n\x0b\n\x04\x04\x02\
    \x02\x01\x12\x03+\x02V\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03+\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03+\t\x15\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03+#$\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03+%U\n\x0f\n\
    \x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\x03+&T\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x03,\x02_\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03,\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x02\x01\x12\x03,\t\x1e\n\x0c\n\x05\x04\x02\x02\
    \x02\x03\x12\x03,#$\n\x0c\n\x05\x04\x02\x02\x02\x08\x12\x03,%^\n\x0f\n\
    \x08\x04\x02\x02\x02\x08\xee\xfb\x03\x12\x03,&]\n\x0c\n\x04\x04\x02\x02\
    \x03\x12\x04-\x02.s\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03-\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x03\x01\x12\x03-\t\x20\n\x0c\n\x05\x04\x02\x02\
    \x03\x03\x12\x03-#$\n\x0c\n\x05\x04\x02\x02\x03\x08\x12\x03.\x06r\n\x0f\
    \n\x08\x04\x02\x02\x03\x08\xec\xfb\x03\x12\x03.\x076\n\x0f\n\x08\x04\x02\
    \x02\x03\x08\xee\xfb\x03\x12\x03.8q\n\x0c\n\x04\x04\x02\x02\x04\x12\x04/\
    \x020w\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\x04\x01\x12\x03/\t\"\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03/%&\
    \n\x0c\n\x05\x04\x02\x02\x04\x08\x12\x030\x06v\n\x0f\n\x08\x04\x02\x02\
    \x04\x08\xec\xfb\x03\x12\x030\x078\n\x0f\n\x08\x04\x02\x02\x04\x08\xee\
    \xfb\x03\x12\x030:ub\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(BaseAccount::generated_message_descriptor_data());
            messages.push(ModuleAccount::generated_message_descriptor_data());
            messages.push(Params::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
