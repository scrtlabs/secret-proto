// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/authz/v1beta1/event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  EventGrant is emitted on Msg/Grant
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.EventGrant)
pub struct EventGrant {
    // message fields
    ///  Msg type URL for which an autorization is granted
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.EventGrant.msg_type_url)
    pub msg_type_url: ::std::string::String,
    ///  Granter account address
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.EventGrant.granter)
    pub granter: ::std::string::String,
    ///  Grantee account address
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.EventGrant.grantee)
    pub grantee: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.EventGrant.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EventGrant {
    fn default() -> &'a EventGrant {
        <EventGrant as ::protobuf::Message>::default_instance()
    }
}

impl EventGrant {
    pub fn new() -> EventGrant {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_type_url",
            |m: &EventGrant| { &m.msg_type_url },
            |m: &mut EventGrant| { &mut m.msg_type_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &EventGrant| { &m.granter },
            |m: &mut EventGrant| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &EventGrant| { &m.grantee },
            |m: &mut EventGrant| { &mut m.grantee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EventGrant>(
            "EventGrant",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EventGrant {
    const NAME: &'static str = "EventGrant";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.msg_type_url = is.read_string()?;
                },
                26 => {
                    self.granter = is.read_string()?;
                },
                34 => {
                    self.grantee = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.msg_type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg_type_url);
        }
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.grantee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.msg_type_url.is_empty() {
            os.write_string(2, &self.msg_type_url)?;
        }
        if !self.granter.is_empty() {
            os.write_string(3, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(4, &self.grantee)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EventGrant {
        EventGrant::new()
    }

    fn clear(&mut self) {
        self.msg_type_url.clear();
        self.granter.clear();
        self.grantee.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EventGrant {
        static instance: EventGrant = EventGrant {
            msg_type_url: ::std::string::String::new(),
            granter: ::std::string::String::new(),
            grantee: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EventGrant {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EventGrant").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EventGrant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventGrant {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  EventRevoke is emitted on Msg/Revoke
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.EventRevoke)
pub struct EventRevoke {
    // message fields
    ///  Msg type URL for which an autorization is revoked
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.EventRevoke.msg_type_url)
    pub msg_type_url: ::std::string::String,
    ///  Granter account address
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.EventRevoke.granter)
    pub granter: ::std::string::String,
    ///  Grantee account address
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.EventRevoke.grantee)
    pub grantee: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.EventRevoke.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EventRevoke {
    fn default() -> &'a EventRevoke {
        <EventRevoke as ::protobuf::Message>::default_instance()
    }
}

impl EventRevoke {
    pub fn new() -> EventRevoke {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_type_url",
            |m: &EventRevoke| { &m.msg_type_url },
            |m: &mut EventRevoke| { &mut m.msg_type_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &EventRevoke| { &m.granter },
            |m: &mut EventRevoke| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &EventRevoke| { &m.grantee },
            |m: &mut EventRevoke| { &mut m.grantee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EventRevoke>(
            "EventRevoke",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EventRevoke {
    const NAME: &'static str = "EventRevoke";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.msg_type_url = is.read_string()?;
                },
                26 => {
                    self.granter = is.read_string()?;
                },
                34 => {
                    self.grantee = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.msg_type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg_type_url);
        }
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.grantee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.msg_type_url.is_empty() {
            os.write_string(2, &self.msg_type_url)?;
        }
        if !self.granter.is_empty() {
            os.write_string(3, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(4, &self.grantee)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EventRevoke {
        EventRevoke::new()
    }

    fn clear(&mut self) {
        self.msg_type_url.clear();
        self.granter.clear();
        self.grantee.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EventRevoke {
        static instance: EventRevoke = EventRevoke {
            msg_type_url: ::std::string::String::new(),
            granter: ::std::string::String::new(),
            grantee: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EventRevoke {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EventRevoke").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EventRevoke {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventRevoke {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20cosmos/authz/v1beta1/event.proto\x12\x14cosmos.authz.v1beta1\"b\n\
    \nEventGrant\x12\x20\n\x0cmsg_type_url\x18\x02\x20\x01(\tR\nmsgTypeUrl\
    \x12\x18\n\x07granter\x18\x03\x20\x01(\tR\x07granter\x12\x18\n\x07grante\
    e\x18\x04\x20\x01(\tR\x07grantee\"c\n\x0bEventRevoke\x12\x20\n\x0cmsg_ty\
    pe_url\x18\x02\x20\x01(\tR\nmsgTypeUrl\x12\x18\n\x07granter\x18\x03\x20\
    \x01(\tR\x07granter\x12\x18\n\x07grantee\x18\x04\x20\x01(\tR\x07granteeB\
    &Z$github.com/cosmos/cosmos-sdk/x/authzJ\xe9\x05\n\x06\x12\x04\x01\0\x18\
    \x01\n\"\n\x01\x0c\x12\x03\x01\0\x12\x1a\x18\x20Since:\x20cosmos-sdk\x20\
    0.43\n\n\x08\n\x01\x02\x12\x03\x02\0\x1d\n\x08\n\x01\x08\x12\x03\x04\0;\
    \n\t\n\x02\x08\x0b\x12\x03\x04\0;\n0\n\x02\x04\0\x12\x04\x07\0\x0e\x01\
    \x1a$\x20EventGrant\x20is\x20emitted\x20on\x20Msg/Grant\n\n\n\n\x03\x04\
    \0\x01\x12\x03\x07\x08\x12\n@\n\x04\x04\0\x02\0\x12\x03\t\x02\x1a\x1a3\
    \x20Msg\x20type\x20URL\x20for\x20which\x20an\x20autorization\x20is\x20gr\
    anted\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\t\t\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x18\x19\
    \n&\n\x04\x04\0\x02\x01\x12\x03\x0b\x02\x15\x1a\x19\x20Granter\x20accoun\
    t\x20address\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x0b\t\x10\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x0b\x13\x14\n&\n\x04\x04\0\x02\x02\x12\x03\r\x02\x15\x1a\x19\
    \x20Grantee\x20account\x20address\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\r\t\x10\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\r\x13\x14\n2\n\x02\x04\x01\x12\x04\x11\0\x18\
    \x01\x1a&\x20EventRevoke\x20is\x20emitted\x20on\x20Msg/Revoke\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\x11\x08\x13\n@\n\x04\x04\x01\x02\0\x12\x03\x13\
    \x02\x1a\x1a3\x20Msg\x20type\x20URL\x20for\x20which\x20an\x20autorizatio\
    n\x20is\x20revoked\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x13\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x13\t\x15\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x13\x18\x19\n&\n\x04\x04\x01\x02\x01\x12\x03\x15\x02\x15\
    \x1a\x19\x20Granter\x20account\x20address\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\t\
    \x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x15\x13\x14\n&\n\x04\x04\
    \x01\x02\x02\x12\x03\x17\x02\x15\x1a\x19\x20Grantee\x20account\x20addres\
    s\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03\x17\t\x10\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\x17\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(EventGrant::generated_message_descriptor_data());
            messages.push(EventRevoke::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
