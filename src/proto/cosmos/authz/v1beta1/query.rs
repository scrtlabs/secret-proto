// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/authz/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryGrantsRequest is the request type for the Query/Grants RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.QueryGrantsRequest)
pub struct QueryGrantsRequest {
    // message fields
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGrantsRequest.granter)
    pub granter: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGrantsRequest.grantee)
    pub grantee: ::std::string::String,
    ///  Optional, msg_type_url, when set, will query only grants matching given msg type.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGrantsRequest.msg_type_url)
    pub msg_type_url: ::std::string::String,
    ///  pagination defines an pagination for the request.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGrantsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.QueryGrantsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryGrantsRequest {
    fn default() -> &'a QueryGrantsRequest {
        <QueryGrantsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryGrantsRequest {
    pub fn new() -> QueryGrantsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &QueryGrantsRequest| { &m.granter },
            |m: &mut QueryGrantsRequest| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &QueryGrantsRequest| { &m.grantee },
            |m: &mut QueryGrantsRequest| { &mut m.grantee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_type_url",
            |m: &QueryGrantsRequest| { &m.msg_type_url },
            |m: &mut QueryGrantsRequest| { &mut m.msg_type_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryGrantsRequest| { &m.pagination },
            |m: &mut QueryGrantsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryGrantsRequest>(
            "QueryGrantsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryGrantsRequest {
    const NAME: &'static str = "QueryGrantsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.granter = is.read_string()?;
                },
                18 => {
                    self.grantee = is.read_string()?;
                },
                26 => {
                    self.msg_type_url = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grantee);
        }
        if !self.msg_type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.msg_type_url);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(2, &self.grantee)?;
        }
        if !self.msg_type_url.is_empty() {
            os.write_string(3, &self.msg_type_url)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryGrantsRequest {
        QueryGrantsRequest::new()
    }

    fn clear(&mut self) {
        self.granter.clear();
        self.grantee.clear();
        self.msg_type_url.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryGrantsRequest {
        static instance: QueryGrantsRequest = QueryGrantsRequest {
            granter: ::std::string::String::new(),
            grantee: ::std::string::String::new(),
            msg_type_url: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryGrantsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryGrantsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryGrantsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGrantsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryGrantsResponse is the response type for the Query/Authorizations RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.QueryGrantsResponse)
pub struct QueryGrantsResponse {
    // message fields
    ///  authorizations is a list of grants granted for grantee by granter.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGrantsResponse.grants)
    pub grants: ::std::vec::Vec<super::authz::Grant>,
    ///  pagination defines an pagination for the response.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGrantsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.QueryGrantsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryGrantsResponse {
    fn default() -> &'a QueryGrantsResponse {
        <QueryGrantsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryGrantsResponse {
    pub fn new() -> QueryGrantsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "grants",
            |m: &QueryGrantsResponse| { &m.grants },
            |m: &mut QueryGrantsResponse| { &mut m.grants },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryGrantsResponse| { &m.pagination },
            |m: &mut QueryGrantsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryGrantsResponse>(
            "QueryGrantsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryGrantsResponse {
    const NAME: &'static str = "QueryGrantsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.grants.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.grants {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.grants {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryGrantsResponse {
        QueryGrantsResponse::new()
    }

    fn clear(&mut self) {
        self.grants.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryGrantsResponse {
        static instance: QueryGrantsResponse = QueryGrantsResponse {
            grants: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryGrantsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryGrantsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryGrantsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGrantsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryGranterGrantsRequest is the request type for the Query/GranterGrants RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.QueryGranterGrantsRequest)
pub struct QueryGranterGrantsRequest {
    // message fields
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGranterGrantsRequest.granter)
    pub granter: ::std::string::String,
    ///  pagination defines an pagination for the request.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGranterGrantsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.QueryGranterGrantsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryGranterGrantsRequest {
    fn default() -> &'a QueryGranterGrantsRequest {
        <QueryGranterGrantsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryGranterGrantsRequest {
    pub fn new() -> QueryGranterGrantsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &QueryGranterGrantsRequest| { &m.granter },
            |m: &mut QueryGranterGrantsRequest| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryGranterGrantsRequest| { &m.pagination },
            |m: &mut QueryGranterGrantsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryGranterGrantsRequest>(
            "QueryGranterGrantsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryGranterGrantsRequest {
    const NAME: &'static str = "QueryGranterGrantsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.granter = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryGranterGrantsRequest {
        QueryGranterGrantsRequest::new()
    }

    fn clear(&mut self) {
        self.granter.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryGranterGrantsRequest {
        static instance: QueryGranterGrantsRequest = QueryGranterGrantsRequest {
            granter: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryGranterGrantsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryGranterGrantsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryGranterGrantsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGranterGrantsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryGranterGrantsResponse is the response type for the Query/GranterGrants RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.QueryGranterGrantsResponse)
pub struct QueryGranterGrantsResponse {
    // message fields
    ///  grants is a list of grants granted by the granter.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGranterGrantsResponse.grants)
    pub grants: ::std::vec::Vec<super::authz::GrantAuthorization>,
    ///  pagination defines an pagination for the response.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGranterGrantsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.QueryGranterGrantsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryGranterGrantsResponse {
    fn default() -> &'a QueryGranterGrantsResponse {
        <QueryGranterGrantsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryGranterGrantsResponse {
    pub fn new() -> QueryGranterGrantsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "grants",
            |m: &QueryGranterGrantsResponse| { &m.grants },
            |m: &mut QueryGranterGrantsResponse| { &mut m.grants },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryGranterGrantsResponse| { &m.pagination },
            |m: &mut QueryGranterGrantsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryGranterGrantsResponse>(
            "QueryGranterGrantsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryGranterGrantsResponse {
    const NAME: &'static str = "QueryGranterGrantsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.grants.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.grants {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.grants {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryGranterGrantsResponse {
        QueryGranterGrantsResponse::new()
    }

    fn clear(&mut self) {
        self.grants.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryGranterGrantsResponse {
        static instance: QueryGranterGrantsResponse = QueryGranterGrantsResponse {
            grants: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryGranterGrantsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryGranterGrantsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryGranterGrantsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGranterGrantsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryGranteeGrantsRequest is the request type for the Query/IssuedGrants RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.QueryGranteeGrantsRequest)
pub struct QueryGranteeGrantsRequest {
    // message fields
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGranteeGrantsRequest.grantee)
    pub grantee: ::std::string::String,
    ///  pagination defines an pagination for the request.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGranteeGrantsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.QueryGranteeGrantsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryGranteeGrantsRequest {
    fn default() -> &'a QueryGranteeGrantsRequest {
        <QueryGranteeGrantsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryGranteeGrantsRequest {
    pub fn new() -> QueryGranteeGrantsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &QueryGranteeGrantsRequest| { &m.grantee },
            |m: &mut QueryGranteeGrantsRequest| { &mut m.grantee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryGranteeGrantsRequest| { &m.pagination },
            |m: &mut QueryGranteeGrantsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryGranteeGrantsRequest>(
            "QueryGranteeGrantsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryGranteeGrantsRequest {
    const NAME: &'static str = "QueryGranteeGrantsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.grantee = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grantee);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.grantee.is_empty() {
            os.write_string(1, &self.grantee)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryGranteeGrantsRequest {
        QueryGranteeGrantsRequest::new()
    }

    fn clear(&mut self) {
        self.grantee.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryGranteeGrantsRequest {
        static instance: QueryGranteeGrantsRequest = QueryGranteeGrantsRequest {
            grantee: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryGranteeGrantsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryGranteeGrantsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryGranteeGrantsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGranteeGrantsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.QueryGranteeGrantsResponse)
pub struct QueryGranteeGrantsResponse {
    // message fields
    ///  grants is a list of grants granted to the grantee.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGranteeGrantsResponse.grants)
    pub grants: ::std::vec::Vec<super::authz::GrantAuthorization>,
    ///  pagination defines an pagination for the response.
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.QueryGranteeGrantsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.QueryGranteeGrantsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryGranteeGrantsResponse {
    fn default() -> &'a QueryGranteeGrantsResponse {
        <QueryGranteeGrantsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryGranteeGrantsResponse {
    pub fn new() -> QueryGranteeGrantsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "grants",
            |m: &QueryGranteeGrantsResponse| { &m.grants },
            |m: &mut QueryGranteeGrantsResponse| { &mut m.grants },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryGranteeGrantsResponse| { &m.pagination },
            |m: &mut QueryGranteeGrantsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryGranteeGrantsResponse>(
            "QueryGranteeGrantsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryGranteeGrantsResponse {
    const NAME: &'static str = "QueryGranteeGrantsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.grants.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.grants {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.grants {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryGranteeGrantsResponse {
        QueryGranteeGrantsResponse::new()
    }

    fn clear(&mut self) {
        self.grants.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryGranteeGrantsResponse {
        static instance: QueryGranteeGrantsResponse = QueryGranteeGrantsResponse {
            grants: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryGranteeGrantsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryGranteeGrantsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryGranteeGrantsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGranteeGrantsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20cosmos/authz/v1beta1/query.proto\x12\x14cosmos.authz.v1beta1\x1a\
    \x1cgoogle/api/annotations.proto\x1a*cosmos/base/query/v1beta1/paginatio\
    n.proto\x1a\x20cosmos/authz/v1beta1/authz.proto\"\xb2\x01\n\x12QueryGran\
    tsRequest\x12\x18\n\x07granter\x18\x01\x20\x01(\tR\x07granter\x12\x18\n\
    \x07grantee\x18\x02\x20\x01(\tR\x07grantee\x12\x20\n\x0cmsg_type_url\x18\
    \x03\x20\x01(\tR\nmsgTypeUrl\x12F\n\npagination\x18\x04\x20\x01(\x0b2&.c\
    osmos.base.query.v1beta1.PageRequestR\npagination\"\x93\x01\n\x13QueryGr\
    antsResponse\x123\n\x06grants\x18\x01\x20\x03(\x0b2\x1b.cosmos.authz.v1b\
    eta1.GrantR\x06grants\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cosmos.b\
    ase.query.v1beta1.PageResponseR\npagination\"}\n\x19QueryGranterGrantsRe\
    quest\x12\x18\n\x07granter\x18\x01\x20\x01(\tR\x07granter\x12F\n\npagina\
    tion\x18\x02\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagi\
    nation\"\xa7\x01\n\x1aQueryGranterGrantsResponse\x12@\n\x06grants\x18\
    \x01\x20\x03(\x0b2(.cosmos.authz.v1beta1.GrantAuthorizationR\x06grants\
    \x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1beta1.Pag\
    eResponseR\npagination\"}\n\x19QueryGranteeGrantsRequest\x12\x18\n\x07gr\
    antee\x18\x01\x20\x01(\tR\x07grantee\x12F\n\npagination\x18\x02\x20\x01(\
    \x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagination\"\xa7\x01\n\
    \x1aQueryGranteeGrantsResponse\x12@\n\x06grants\x18\x01\x20\x03(\x0b2(.c\
    osmos.authz.v1beta1.GrantAuthorizationR\x06grants\x12G\n\npagination\x18\
    \x02\x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination2\
    \xe7\x03\n\x05Query\x12\x83\x01\n\x06Grants\x12(.cosmos.authz.v1beta1.Qu\
    eryGrantsRequest\x1a).cosmos.authz.v1beta1.QueryGrantsResponse\"$\x82\
    \xd3\xe4\x93\x02\x1e\x12\x1c/cosmos/authz/v1beta1/grants\x12\xaa\x01\n\r\
    GranterGrants\x12/.cosmos.authz.v1beta1.QueryGranterGrantsRequest\x1a0.c\
    osmos.authz.v1beta1.QueryGranterGrantsResponse\"6\x82\xd3\xe4\x93\x020\
    \x12./cosmos/authz/v1beta1/grants/granter/{granter}\x12\xaa\x01\n\rGrant\
    eeGrants\x12/.cosmos.authz.v1beta1.QueryGranteeGrantsRequest\x1a0.cosmos\
    .authz.v1beta1.QueryGranteeGrantsResponse\"6\x82\xd3\xe4\x93\x020\x12./c\
    osmos/authz/v1beta1/grants/grantee/{grantee}B&Z$github.com/cosmos/cosmos\
    -sdk/x/authzJ\xd5\x15\n\x06\x12\x04\x01\0P\x01\n\"\n\x01\x0c\x12\x03\x01\
    \0\x12\x1a\x18\x20Since:\x20cosmos-sdk\x200.43\n\n\x08\n\x01\x02\x12\x03\
    \x02\0\x1d\n\t\n\x02\x03\0\x12\x03\x04\0&\n\t\n\x02\x03\x01\x12\x03\x05\
    \04\n\t\n\x02\x03\x02\x12\x03\x06\0*\n\x08\n\x01\x08\x12\x03\x08\0;\n\t\
    \n\x02\x08\x0b\x12\x03\x08\0;\n5\n\x02\x06\0\x12\x04\x0b\0\x1e\x01\x1a)\
    \x20Query\x20defines\x20the\x20gRPC\x20querier\x20service.\n\n\n\n\x03\
    \x06\0\x01\x12\x03\x0b\x08\r\nW\n\x04\x06\0\x02\0\x12\x04\r\x02\x0f\x03\
    \x1aI\x20Returns\x20list\x20of\x20`Authorization`,\x20granted\x20to\x20t\
    he\x20grantee\x20by\x20the\x20granter.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\r\x06\x0c\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\r\r\x1f\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\r*=\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x0e\x04\
    B\n\x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x0e\x04B\nr\n\x04\
    \x06\0\x02\x01\x12\x04\x14\x02\x16\x03\x1ad\x20GranterGrants\x20returns\
    \x20list\x20of\x20`GrantAuthorization`,\x20granted\x20by\x20granter.\n\n\
    \x20Since:\x20cosmos-sdk\x200.45.2\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x14\x06\x13\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x14\x14-\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x148R\n\x0c\n\x05\x06\0\x02\x01\x04\x12\
    \x03\x15\x04T\n\x11\n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\x02\x12\x03\x15\
    \x04T\nk\n\x04\x06\0\x02\x02\x12\x04\x1b\x02\x1d\x03\x1a]\x20GranteeGran\
    ts\x20returns\x20a\x20list\x20of\x20`GrantAuthorization`\x20by\x20grante\
    e.\n\n\x20Since:\x20cosmos-sdk\x200.45.2\n\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03\x1b\x06\x13\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1b\x14-\n\
    \x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1b8R\n\x0c\n\x05\x06\0\x02\x02\x04\
    \x12\x03\x1c\x04T\n\x11\n\n\x06\0\x02\x02\x04\xb0\xca\xbc\"\x02\x12\x03\
    \x1c\x04T\nU\n\x02\x04\0\x12\x04!\0(\x01\x1aI\x20QueryGrantsRequest\x20i\
    s\x20the\x20request\x20type\x20for\x20the\x20Query/Grants\x20RPC\x20meth\
    od.\n\n\n\n\x03\x04\0\x01\x12\x03!\x08\x1a\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\"\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\"\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\"\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\"\
    \x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\x03#\x02\x15\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03#\t\
    \x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03#\x13\x14\n`\n\x04\x04\0\x02\
    \x02\x12\x03%\x02\x1a\x1aS\x20Optional,\x20msg_type_url,\x20when\x20set,\
    \x20will\x20query\x20only\x20grants\x20matching\x20given\x20msg\x20type.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03%\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03%\t\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03%\x18\x19\n\
    @\n\x04\x04\0\x02\x03\x12\x03'\x027\x1a3\x20pagination\x20defines\x20an\
    \x20pagination\x20for\x20the\x20request.\n\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03'\x02'\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03'(2\n\x0c\n\x05\x04\
    \0\x02\x03\x03\x12\x03'56\n_\n\x02\x04\x01\x12\x04+\00\x01\x1aS\x20Query\
    GrantsResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/A\
    uthorizations\x20RPC\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03+\x08\x1b\
    \nQ\n\x04\x04\x01\x02\0\x12\x03-\x02\x1c\x1aD\x20authorizations\x20is\
    \x20a\x20list\x20of\x20grants\x20granted\x20for\x20grantee\x20by\x20gran\
    ter.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03-\x02\n\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03-\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03-\x11\
    \x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03-\x1a\x1b\nA\n\x04\x04\x01\x02\
    \x01\x12\x03/\x028\x1a4\x20pagination\x20defines\x20an\x20pagination\x20\
    for\x20the\x20response.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03/\x02(\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03/)3\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03/67\nc\n\x02\x04\x02\x12\x043\08\x01\x1aW\x20QueryGranterGra\
    ntsRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Query/Grante\
    rGrants\x20RPC\x20method.\n\n\n\n\x03\x04\x02\x01\x12\x033\x08!\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x034\x02\x15\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x034\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x034\t\x10\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x034\x13\x14\n@\n\x04\x04\x02\x02\x01\x12\x037\
    \x027\x1a3\x20pagination\x20defines\x20an\x20pagination\x20for\x20the\
    \x20request.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x037\x02'\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x037(2\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x037\
    56\ne\n\x02\x04\x03\x12\x04;\0@\x01\x1aY\x20QueryGranterGrantsResponse\
    \x20is\x20the\x20response\x20type\x20for\x20the\x20Query/GranterGrants\
    \x20RPC\x20method.\n\n\n\n\x03\x04\x03\x01\x12\x03;\x08\"\nA\n\x04\x04\
    \x03\x02\0\x12\x03=\x02)\x1a4\x20grants\x20is\x20a\x20list\x20of\x20gran\
    ts\x20granted\x20by\x20the\x20granter.\n\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x03=\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03=\x0b\x1d\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03=\x1e$\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03='(\nA\n\x04\x04\x03\x02\x01\x12\x03?\x028\x1a4\x20pagination\x20def\
    ines\x20an\x20pagination\x20for\x20the\x20response.\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x06\x12\x03?\x02(\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03?)\
    3\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03?67\nb\n\x02\x04\x04\x12\x04C\0\
    H\x01\x1aV\x20QueryGranteeGrantsRequest\x20is\x20the\x20request\x20type\
    \x20for\x20the\x20Query/IssuedGrants\x20RPC\x20method.\n\n\n\n\x03\x04\
    \x04\x01\x12\x03C\x08!\n\x0b\n\x04\x04\x04\x02\0\x12\x03D\x02\x15\n\x0c\
    \n\x05\x04\x04\x02\0\x05\x12\x03D\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03D\t\x10\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03D\x13\x14\n@\n\x04\
    \x04\x04\x02\x01\x12\x03G\x027\x1a3\x20pagination\x20defines\x20an\x20pa\
    gination\x20for\x20the\x20request.\n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\
    \x03G\x02'\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03G(2\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03G56\ne\n\x02\x04\x05\x12\x04K\0P\x01\x1aY\x20Que\
    ryGranteeGrantsResponse\x20is\x20the\x20response\x20type\x20for\x20the\
    \x20Query/GranteeGrants\x20RPC\x20method.\n\n\n\n\x03\x04\x05\x01\x12\
    \x03K\x08\"\nA\n\x04\x04\x05\x02\0\x12\x03M\x02)\x1a4\x20grants\x20is\
    \x20a\x20list\x20of\x20grants\x20granted\x20to\x20the\x20grantee.\n\n\
    \x0c\n\x05\x04\x05\x02\0\x04\x12\x03M\x02\n\n\x0c\n\x05\x04\x05\x02\0\
    \x06\x12\x03M\x0b\x1d\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03M\x1e$\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03M'(\nA\n\x04\x04\x05\x02\x01\x12\x03O\
    \x028\x1a4\x20pagination\x20defines\x20an\x20pagination\x20for\x20the\
    \x20response.\n\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03O\x02(\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x03O)3\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03O67b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::authz::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(QueryGrantsRequest::generated_message_descriptor_data());
            messages.push(QueryGrantsResponse::generated_message_descriptor_data());
            messages.push(QueryGranterGrantsRequest::generated_message_descriptor_data());
            messages.push(QueryGranterGrantsResponse::generated_message_descriptor_data());
            messages.push(QueryGranteeGrantsRequest::generated_message_descriptor_data());
            messages.push(QueryGranteeGrantsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
