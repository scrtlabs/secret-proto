// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/authz/v1beta1/authz.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenericAuthorization gives the grantee unrestricted permissions to execute
///  the provided method on behalf of the granter's account.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.GenericAuthorization)
pub struct GenericAuthorization {
    // message fields
    ///  Msg, identified by it's type URL, to grant unrestricted permissions to execute
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.GenericAuthorization.msg)
    pub msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.GenericAuthorization.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenericAuthorization {
    fn default() -> &'a GenericAuthorization {
        <GenericAuthorization as ::protobuf::Message>::default_instance()
    }
}

impl GenericAuthorization {
    pub fn new() -> GenericAuthorization {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &GenericAuthorization| { &m.msg },
            |m: &mut GenericAuthorization| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenericAuthorization>(
            "GenericAuthorization",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenericAuthorization {
    const NAME: &'static str = "GenericAuthorization";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenericAuthorization {
        GenericAuthorization::new()
    }

    fn clear(&mut self) {
        self.msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenericAuthorization {
        static instance: GenericAuthorization = GenericAuthorization {
            msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenericAuthorization {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenericAuthorization").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenericAuthorization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenericAuthorization {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Grant gives permissions to execute
///  the provide method with expiration time.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.Grant)
pub struct Grant {
    // message fields
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.Grant.authorization)
    pub authorization: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.Grant.expiration)
    pub expiration: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.Grant.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Grant {
    fn default() -> &'a Grant {
        <Grant as ::protobuf::Message>::default_instance()
    }
}

impl Grant {
    pub fn new() -> Grant {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "authorization",
            |m: &Grant| { &m.authorization },
            |m: &mut Grant| { &mut m.authorization },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "expiration",
            |m: &Grant| { &m.expiration },
            |m: &mut Grant| { &mut m.expiration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Grant>(
            "Grant",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Grant {
    const NAME: &'static str = "Grant";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.authorization)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.expiration)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.authorization.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.expiration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.authorization.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.expiration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Grant {
        Grant::new()
    }

    fn clear(&mut self) {
        self.authorization.clear();
        self.expiration.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Grant {
        static instance: Grant = Grant {
            authorization: ::protobuf::MessageField::none(),
            expiration: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Grant {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Grant").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Grant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Grant {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GrantAuthorization extends a grant with both the addresses of the grantee and granter.
///  It is used in genesis.proto and query.proto
///
///  Since: cosmos-sdk 0.45.2
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.authz.v1beta1.GrantAuthorization)
pub struct GrantAuthorization {
    // message fields
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.GrantAuthorization.granter)
    pub granter: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.GrantAuthorization.grantee)
    pub grantee: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.GrantAuthorization.authorization)
    pub authorization: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:cosmos.authz.v1beta1.GrantAuthorization.expiration)
    pub expiration: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.authz.v1beta1.GrantAuthorization.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GrantAuthorization {
    fn default() -> &'a GrantAuthorization {
        <GrantAuthorization as ::protobuf::Message>::default_instance()
    }
}

impl GrantAuthorization {
    pub fn new() -> GrantAuthorization {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &GrantAuthorization| { &m.granter },
            |m: &mut GrantAuthorization| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &GrantAuthorization| { &m.grantee },
            |m: &mut GrantAuthorization| { &mut m.grantee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "authorization",
            |m: &GrantAuthorization| { &m.authorization },
            |m: &mut GrantAuthorization| { &mut m.authorization },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "expiration",
            |m: &GrantAuthorization| { &m.expiration },
            |m: &mut GrantAuthorization| { &mut m.expiration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GrantAuthorization>(
            "GrantAuthorization",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GrantAuthorization {
    const NAME: &'static str = "GrantAuthorization";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.granter = is.read_string()?;
                },
                18 => {
                    self.grantee = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.authorization)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.expiration)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grantee);
        }
        if let Some(v) = self.authorization.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.expiration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(2, &self.grantee)?;
        }
        if let Some(v) = self.authorization.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.expiration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GrantAuthorization {
        GrantAuthorization::new()
    }

    fn clear(&mut self) {
        self.granter.clear();
        self.grantee.clear();
        self.authorization.clear();
        self.expiration.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GrantAuthorization {
        static instance: GrantAuthorization = GrantAuthorization {
            granter: ::std::string::String::new(),
            grantee: ::std::string::String::new(),
            authorization: ::protobuf::MessageField::none(),
            expiration: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GrantAuthorization {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GrantAuthorization").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GrantAuthorization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrantAuthorization {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20cosmos/authz/v1beta1/authz.proto\x12\x14cosmos.authz.v1beta1\x1a\
    \x19cosmos_proto/cosmos.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\
    \x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\";\n\x14Generi\
    cAuthorization\x12\x10\n\x03msg\x18\x01\x20\x01(\tR\x03msg:\x11\xd2\xb4-\
    \rAuthorization\"\x9c\x01\n\x05Grant\x12M\n\rauthorization\x18\x01\x20\
    \x01(\x0b2\x14.google.protobuf.AnyR\rauthorizationB\x11\xca\xb4-\rAuthor\
    ization\x12D\n\nexpiration\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Tim\
    estampR\nexpirationB\x08\x90\xdf\x1f\x01\xc8\xde\x1f\0\"\xdd\x01\n\x12Gr\
    antAuthorization\x12\x18\n\x07granter\x18\x01\x20\x01(\tR\x07granter\x12\
    \x18\n\x07grantee\x18\x02\x20\x01(\tR\x07grantee\x12M\n\rauthorization\
    \x18\x03\x20\x01(\x0b2\x14.google.protobuf.AnyR\rauthorizationB\x11\xca\
    \xb4-\rAuthorization\x12D\n\nexpiration\x18\x04\x20\x01(\x0b2\x1a.google\
    .protobuf.TimestampR\nexpirationB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x01B*Z$g\
    ithub.com/cosmos/cosmos-sdk/x/authz\xc8\xe1\x1e\0J\xdf\t\n\x06\x12\x04\
    \x01\0&\x01\n\"\n\x01\x0c\x12\x03\x01\0\x12\x1a\x18\x20Since:\x20cosmos-\
    sdk\x200.43\n\n\x08\n\x01\x02\x12\x03\x02\0\x1d\n\t\n\x02\x03\0\x12\x03\
    \x04\0#\n\t\n\x02\x03\x01\x12\x03\x05\0)\n\t\n\x02\x03\x02\x12\x03\x06\0\
    \x1e\n\t\n\x02\x03\x03\x12\x03\x07\0#\n\x08\n\x01\x08\x12\x03\t\0P\n\t\n\
    \x02\x08\x0b\x12\x03\t\0P\n\x08\n\x01\x08\x12\x03\n\0/\n\x0b\n\x04\x08\
    \x99\xec\x03\x12\x03\n\0/\n\x92\x01\n\x02\x04\0\x12\x04\x0e\0\x13\x01\
    \x1a\x85\x01\x20GenericAuthorization\x20gives\x20the\x20grantee\x20unres\
    tricted\x20permissions\x20to\x20execute\n\x20the\x20provided\x20method\
    \x20on\x20behalf\x20of\x20the\x20granter's\x20account.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x0e\x08\x1c\n\n\n\x03\x04\0\x07\x12\x03\x0f\x02?\n\r\n\x06\
    \x04\0\x07\xca\xd6\x05\x12\x03\x0f\x02?\n]\n\x04\x04\0\x02\0\x12\x03\x12\
    \x02\x11\x1aP\x20Msg,\x20identified\x20by\x20it's\x20type\x20URL,\x20to\
    \x20grant\x20unrestricted\x20permissions\x20to\x20execute\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x12\t\x0c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x12\x0f\x10\nZ\n\x02\x04\
    \x01\x12\x04\x17\0\x1a\x01\x1aN\x20Grant\x20gives\x20permissions\x20to\
    \x20execute\n\x20the\x20provide\x20method\x20with\x20expiration\x20time.\
    \n\n\n\n\x03\x04\x01\x01\x12\x03\x17\x08\r\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x18\x02c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x18\x02\x15\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x18\x1c)\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x18,-\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x18.b\n\x0f\n\x08\
    \x04\x01\x02\0\x08\xc9\xd6\x05\x12\x03\x18/a\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x19\x02i\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x19\x02\x1b\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\x1c&\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x19,-\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\x19.h\n\
    \x0f\n\x08\x04\x01\x02\x01\x08\xf2\xfb\x03\x12\x03\x19/I\n\x0f\n\x08\x04\
    \x01\x02\x01\x08\xe9\xfb\x03\x12\x03\x19Kg\n\xad\x01\n\x02\x04\x02\x12\
    \x04\x20\0&\x01\x1a\xa0\x01\x20GrantAuthorization\x20extends\x20a\x20gra\
    nt\x20with\x20both\x20the\x20addresses\x20of\x20the\x20grantee\x20and\
    \x20granter.\n\x20It\x20is\x20used\x20in\x20genesis.proto\x20and\x20quer\
    y.proto\n\n\x20Since:\x20cosmos-sdk\x200.45.2\n\n\n\n\x03\x04\x02\x01\
    \x12\x03\x20\x08\x1a\n\x0b\n\x04\x04\x02\x02\0\x12\x03!\x02\x15\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03!\t\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03!\x13\x14\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03\"\x02\x15\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x03\"\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\"\t\x10\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\"\x13\x14\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03$\x02c\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03$\x02\x15\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03$\x1c)\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03$,-\n\x0c\n\x05\x04\x02\x02\x02\x08\x12\x03$.b\n\x0f\n\x08\x04\
    \x02\x02\x02\x08\xc9\xd6\x05\x12\x03$/a\n\x0b\n\x04\x04\x02\x02\x03\x12\
    \x03%\x02i\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03%\x02\x1b\n\x0c\n\x05\
    \x04\x02\x02\x03\x01\x12\x03%\x1c&\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\
    \x03%,-\n\x0c\n\x05\x04\x02\x02\x03\x08\x12\x03%.h\n\x0f\n\x08\x04\x02\
    \x02\x03\x08\xe9\xfb\x03\x12\x03%/K\n\x0f\n\x08\x04\x02\x02\x03\x08\xf2\
    \xfb\x03\x12\x03%Mgb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(GenericAuthorization::generated_message_descriptor_data());
            messages.push(Grant::generated_message_descriptor_data());
            messages.push(GrantAuthorization::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
