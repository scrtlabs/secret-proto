// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/crypto/ed25519/keys.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  PubKey is an ed25519 public key for handling Tendermint keys in SDK.
///  It's needed for Any serialization and SDK compatibility.
///  It must not be used in a non Tendermint key context because it doesn't implement
///  ADR-28. Nevertheless, you will like to use ed25519 in app user level
///  then you must create a new proto message and follow ADR-28 for Address construction.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.crypto.ed25519.PubKey)
pub struct PubKey {
    // message fields
    // @@protoc_insertion_point(field:cosmos.crypto.ed25519.PubKey.key)
    pub key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.crypto.ed25519.PubKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PubKey {
    fn default() -> &'a PubKey {
        <PubKey as ::protobuf::Message>::default_instance()
    }
}

impl PubKey {
    pub fn new() -> PubKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &PubKey| { &m.key },
            |m: &mut PubKey| { &mut m.key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PubKey>(
            "PubKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PubKey {
    const NAME: &'static str = "PubKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PubKey {
        PubKey::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PubKey {
        static instance: PubKey = PubKey {
            key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PubKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PubKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PubKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Deprecated: PrivKey defines a ed25519 private key.
///  NOTE: ed25519 keys must not be used in SDK apps except in a tendermint validator context.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.crypto.ed25519.PrivKey)
pub struct PrivKey {
    // message fields
    // @@protoc_insertion_point(field:cosmos.crypto.ed25519.PrivKey.key)
    pub key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.crypto.ed25519.PrivKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PrivKey {
    fn default() -> &'a PrivKey {
        <PrivKey as ::protobuf::Message>::default_instance()
    }
}

impl PrivKey {
    pub fn new() -> PrivKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &PrivKey| { &m.key },
            |m: &mut PrivKey| { &mut m.key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PrivKey>(
            "PrivKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PrivKey {
    const NAME: &'static str = "PrivKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PrivKey {
        PrivKey::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PrivKey {
        static instance: PrivKey = PrivKey {
            key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PrivKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PrivKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PrivKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrivKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20cosmos/crypto/ed25519/keys.proto\x12\x15cosmos.crypto.ed25519\x1a\
    \x14gogoproto/gogo.proto\">\n\x06PubKey\x12.\n\x03key\x18\x01\x20\x01(\
    \x0cR\x03keyB\x1c\xfa\xde\x1f\x18crypto/ed25519.PublicKey:\x04\x98\xa0\
    \x1f\0\":\n\x07PrivKey\x12/\n\x03key\x18\x01\x20\x01(\x0cR\x03keyB\x1d\
    \xfa\xde\x1f\x19crypto/ed25519.PrivateKeyB2Z0github.com/cosmos/cosmos-sd\
    k/crypto/keys/ed25519J\xb8\x06\n\x06\x12\x04\0\0\x16\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1e\n\t\n\x02\x03\0\x12\
    \x03\x03\0\x1e\n\x08\n\x01\x08\x12\x03\x05\0G\n\t\n\x02\x08\x0b\x12\x03\
    \x05\0G\n\xfb\x02\n\x02\x04\0\x12\x04\x0c\0\x10\x01\x1a\xee\x02\x20PubKe\
    y\x20is\x20an\x20ed25519\x20public\x20key\x20for\x20handling\x20Tendermi\
    nt\x20keys\x20in\x20SDK.\n\x20It's\x20needed\x20for\x20Any\x20serializat\
    ion\x20and\x20SDK\x20compatibility.\n\x20It\x20must\x20not\x20be\x20used\
    \x20in\x20a\x20non\x20Tendermint\x20key\x20context\x20because\x20it\x20d\
    oesn't\x20implement\n\x20ADR-28.\x20Nevertheless,\x20you\x20will\x20like\
    \x20to\x20use\x20ed25519\x20in\x20app\x20user\x20level\n\x20then\x20you\
    \x20must\x20create\x20a\x20new\x20proto\x20message\x20and\x20follow\x20A\
    DR-28\x20for\x20Address\x20construction.\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x0c\x08\x0e\n\n\n\x03\x04\0\x07\x12\x03\r\x02.\n\r\n\x06\x04\0\x07\x83\
    \xf4\x03\x12\x03\r\x02.\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x02D\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0f\x08\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x0e\x0f\n\x0c\n\
    \x05\x04\0\x02\0\x08\x12\x03\x0f\x10C\n\x0f\n\x08\x04\0\x02\0\x08\xef\
    \xfb\x03\x12\x03\x0f\x11B\n\x9c\x01\n\x02\x04\x01\x12\x04\x14\0\x16\x01\
    \x1a\x8f\x01\x20Deprecated:\x20PrivKey\x20defines\x20a\x20ed25519\x20pri\
    vate\x20key.\n\x20NOTE:\x20ed25519\x20keys\x20must\x20not\x20be\x20used\
    \x20in\x20SDK\x20apps\x20except\x20in\x20a\x20tendermint\x20validator\
    \x20context.\n\n\n\n\x03\x04\x01\x01\x12\x03\x14\x08\x0f\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\x15\x02E\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x15\
    \x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x15\x08\x0b\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x15\x0e\x0f\n\x0c\n\x05\x04\x01\x02\0\x08\x12\
    \x03\x15\x10D\n\x0f\n\x08\x04\x01\x02\0\x08\xef\xfb\x03\x12\x03\x15\x11C\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PubKey::generated_message_descriptor_data());
            messages.push(PrivKey::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
