// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/crypto/multisig/keys.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  LegacyAminoPubKey specifies a public key type
///  which nests multiple public keys and a threshold,
///  it uses legacy amino address rules.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.crypto.multisig.LegacyAminoPubKey)
pub struct LegacyAminoPubKey {
    // message fields
    // @@protoc_insertion_point(field:cosmos.crypto.multisig.LegacyAminoPubKey.threshold)
    pub threshold: u32,
    // @@protoc_insertion_point(field:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
    pub public_keys: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.crypto.multisig.LegacyAminoPubKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LegacyAminoPubKey {
    fn default() -> &'a LegacyAminoPubKey {
        <LegacyAminoPubKey as ::protobuf::Message>::default_instance()
    }
}

impl LegacyAminoPubKey {
    pub fn new() -> LegacyAminoPubKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "threshold",
            |m: &LegacyAminoPubKey| { &m.threshold },
            |m: &mut LegacyAminoPubKey| { &mut m.threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "public_keys",
            |m: &LegacyAminoPubKey| { &m.public_keys },
            |m: &mut LegacyAminoPubKey| { &mut m.public_keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LegacyAminoPubKey>(
            "LegacyAminoPubKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LegacyAminoPubKey {
    const NAME: &'static str = "LegacyAminoPubKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.threshold = is.read_uint32()?;
                },
                18 => {
                    self.public_keys.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.threshold != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.threshold);
        }
        for value in &self.public_keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.threshold != 0 {
            os.write_uint32(1, self.threshold)?;
        }
        for v in &self.public_keys {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LegacyAminoPubKey {
        LegacyAminoPubKey::new()
    }

    fn clear(&mut self) {
        self.threshold = 0;
        self.public_keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LegacyAminoPubKey {
        static instance: LegacyAminoPubKey = LegacyAminoPubKey {
            threshold: 0,
            public_keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LegacyAminoPubKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LegacyAminoPubKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LegacyAminoPubKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LegacyAminoPubKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!cosmos/crypto/multisig/keys.proto\x12\x16cosmos.crypto.multisig\x1a\
    \x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\"\xa3\x01\n\
    \x11LegacyAminoPubKey\x122\n\tthreshold\x18\x01\x20\x01(\rR\tthresholdB\
    \x14\xf2\xde\x1f\x10yaml:\"threshold\"\x12T\n\x0bpublic_keys\x18\x02\x20\
    \x03(\x0b2\x14.google.protobuf.AnyR\npublicKeysB\x1d\xf2\xde\x1f\x0eyaml\
    :\"pubkeys\"\xe2\xde\x1f\x07PubKeys:\x04\x88\xa0\x1f\0B3Z1github.com/cos\
    mos/cosmos-sdk/crypto/keys/multisigJ\xd1\x03\n\x06\x12\x04\0\0\x11\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1f\n\t\n\
    \x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\x12\x03\x04\0#\n\x08\n\
    \x01\x08\x12\x03\x06\0H\n\t\n\x02\x08\x0b\x12\x03\x06\0H\n\x94\x01\n\x02\
    \x04\0\x12\x04\x0b\0\x11\x01\x1a\x87\x01\x20LegacyAminoPubKey\x20specifi\
    es\x20a\x20public\x20key\x20type\n\x20which\x20nests\x20multiple\x20publ\
    ic\x20keys\x20and\x20a\x20threshold,\n\x20it\x20uses\x20legacy\x20amino\
    \x20address\x20rules.\n\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x19\n\n\n\
    \x03\x04\0\x07\x12\x03\x0c\x02-\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\
    \x0c\x02-\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x02]\n\x0c\n\x05\x04\0\x02\
    \0\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\x0b\
    \x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e-.\n\x0c\n\x05\x04\0\x02\0\
    \x08\x12\x03\x0e/\\\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x0e0\
    [\n\x0c\n\x04\x04\0\x02\x01\x12\x04\x0f\x02\x10V\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0f\x0b\
    \x1e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x1f*\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x0f-.\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x10\x06\
    U\n\x0f\n\x08\x04\0\x02\x01\x08\xec\xfb\x03\x12\x03\x10\x07)\n\x0f\n\x08\
    \x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x10+Tb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LegacyAminoPubKey::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
