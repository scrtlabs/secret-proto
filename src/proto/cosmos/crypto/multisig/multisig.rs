// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/crypto/multisig/v1beta1/multisig.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
///  See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
///  signed and with which modes.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.crypto.multisig.v1beta1.MultiSignature)
pub struct MultiSignature {
    // message fields
    // @@protoc_insertion_point(field:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
    pub signatures: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.crypto.multisig.v1beta1.MultiSignature.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MultiSignature {
    fn default() -> &'a MultiSignature {
        <MultiSignature as ::protobuf::Message>::default_instance()
    }
}

impl MultiSignature {
    pub fn new() -> MultiSignature {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signatures",
            |m: &MultiSignature| { &m.signatures },
            |m: &mut MultiSignature| { &mut m.signatures },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MultiSignature>(
            "MultiSignature",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MultiSignature {
    const NAME: &'static str = "MultiSignature";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signatures.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.signatures {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.signatures {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MultiSignature {
        MultiSignature::new()
    }

    fn clear(&mut self) {
        self.signatures.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MultiSignature {
        static instance: MultiSignature = MultiSignature {
            signatures: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MultiSignature {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MultiSignature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MultiSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MultiSignature {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  CompactBitArray is an implementation of a space efficient bit array.
///  This is used to ensure that the encoded data takes up a minimal amount of
///  space after proto encoding.
///  This is not thread safe, and is not intended for concurrent usage.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.crypto.multisig.v1beta1.CompactBitArray)
pub struct CompactBitArray {
    // message fields
    // @@protoc_insertion_point(field:cosmos.crypto.multisig.v1beta1.CompactBitArray.extra_bits_stored)
    pub extra_bits_stored: u32,
    // @@protoc_insertion_point(field:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
    pub elems: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.crypto.multisig.v1beta1.CompactBitArray.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactBitArray {
    fn default() -> &'a CompactBitArray {
        <CompactBitArray as ::protobuf::Message>::default_instance()
    }
}

impl CompactBitArray {
    pub fn new() -> CompactBitArray {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "extra_bits_stored",
            |m: &CompactBitArray| { &m.extra_bits_stored },
            |m: &mut CompactBitArray| { &mut m.extra_bits_stored },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "elems",
            |m: &CompactBitArray| { &m.elems },
            |m: &mut CompactBitArray| { &mut m.elems },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactBitArray>(
            "CompactBitArray",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactBitArray {
    const NAME: &'static str = "CompactBitArray";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.extra_bits_stored = is.read_uint32()?;
                },
                18 => {
                    self.elems = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.extra_bits_stored != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.extra_bits_stored);
        }
        if !self.elems.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.elems);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.extra_bits_stored != 0 {
            os.write_uint32(1, self.extra_bits_stored)?;
        }
        if !self.elems.is_empty() {
            os.write_bytes(2, &self.elems)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactBitArray {
        CompactBitArray::new()
    }

    fn clear(&mut self) {
        self.extra_bits_stored = 0;
        self.elems.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactBitArray {
        static instance: CompactBitArray = CompactBitArray {
            extra_bits_stored: 0,
            elems: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactBitArray {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactBitArray").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactBitArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactBitArray {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-cosmos/crypto/multisig/v1beta1/multisig.proto\x12\x1ecosmos.crypto.mu\
    ltisig.v1beta1\x1a\x14gogoproto/gogo.proto\"6\n\x0eMultiSignature\x12\
    \x1e\n\nsignatures\x18\x01\x20\x03(\x0cR\nsignatures:\x04\xd0\xa1\x1f\
    \x01\"Y\n\x0fCompactBitArray\x12*\n\x11extra_bits_stored\x18\x01\x20\x01\
    (\rR\x0fextraBitsStored\x12\x14\n\x05elems\x18\x02\x20\x01(\x0cR\x05elem\
    s:\x04\x98\xa0\x1f\0B+Z)github.com/cosmos/cosmos-sdk/crypto/typesJ\xfe\
    \x05\n\x06\x12\x04\0\0\x18\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0'\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\x08\n\x01\
    \x08\x12\x03\x05\0@\n\t\n\x02\x08\x0b\x12\x03\x05\0@\n\xbc\x01\n\x02\x04\
    \0\x12\x04\n\0\r\x01\x1a\xaf\x01\x20MultiSignature\x20wraps\x20the\x20si\
    gnatures\x20from\x20a\x20multisig.LegacyAminoPubKey.\n\x20See\x20cosmos.\
    tx.v1betata1.ModeInfo.Multi\x20for\x20how\x20to\x20specify\x20which\x20s\
    igners\n\x20signed\x20and\x20with\x20which\x20modes.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\n\x08\x16\n\n\n\x03\x04\0\x07\x12\x03\x0b\x021\n\r\n\x06\
    \x04\0\x07\x9a\xf4\x03\x12\x03\x0b\x021\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x0c\x02.\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x0c\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\
    \x11\x1b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c,-\n\xff\x01\n\x02\x04\
    \x01\x12\x04\x13\0\x18\x01\x1a\xf2\x01\x20CompactBitArray\x20is\x20an\
    \x20implementation\x20of\x20a\x20space\x20efficient\x20bit\x20array.\n\
    \x20This\x20is\x20used\x20to\x20ensure\x20that\x20the\x20encoded\x20data\
    \x20takes\x20up\x20a\x20minimal\x20amount\x20of\n\x20space\x20after\x20p\
    roto\x20encoding.\n\x20This\x20is\x20not\x20thread\x20safe,\x20and\x20is\
    \x20not\x20intended\x20for\x20concurrent\x20usage.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x13\x08\x17\n\n\n\x03\x04\x01\x07\x12\x03\x14\x02.\n\r\n\
    \x06\x04\x01\x07\x83\xf4\x03\x12\x03\x14\x02.\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x16\x02\x1f\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x16\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x16\t\x1a\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x16\x1d\x1e\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x17\x02\x1f\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x17\t\x0e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x17\x1d\x1eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(MultiSignature::generated_message_descriptor_data());
            messages.push(CompactBitArray::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
