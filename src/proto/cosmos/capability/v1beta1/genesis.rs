// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/capability/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisOwners defines the capability owners with their corresponding index.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.capability.v1beta1.GenesisOwners)
pub struct GenesisOwners {
    // message fields
    ///  index is the index of the capability owner.
    // @@protoc_insertion_point(field:cosmos.capability.v1beta1.GenesisOwners.index)
    pub index: u64,
    ///  index_owners are the owners at the given index.
    // @@protoc_insertion_point(field:cosmos.capability.v1beta1.GenesisOwners.index_owners)
    pub index_owners: ::protobuf::MessageField<super::capability::CapabilityOwners>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.capability.v1beta1.GenesisOwners.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisOwners {
    fn default() -> &'a GenesisOwners {
        <GenesisOwners as ::protobuf::Message>::default_instance()
    }
}

impl GenesisOwners {
    pub fn new() -> GenesisOwners {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &GenesisOwners| { &m.index },
            |m: &mut GenesisOwners| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::capability::CapabilityOwners>(
            "index_owners",
            |m: &GenesisOwners| { &m.index_owners },
            |m: &mut GenesisOwners| { &mut m.index_owners },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisOwners>(
            "GenesisOwners",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisOwners {
    const NAME: &'static str = "GenesisOwners";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_uint64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.index_owners)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.index);
        }
        if let Some(v) = self.index_owners.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_uint64(1, self.index)?;
        }
        if let Some(v) = self.index_owners.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisOwners {
        GenesisOwners::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.index_owners.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisOwners {
        static instance: GenesisOwners = GenesisOwners {
            index: 0,
            index_owners: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisOwners {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisOwners").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisOwners {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisOwners {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GenesisState defines the capability module's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.capability.v1beta1.GenesisState)
pub struct GenesisState {
    // message fields
    ///  index is the capability global index.
    // @@protoc_insertion_point(field:cosmos.capability.v1beta1.GenesisState.index)
    pub index: u64,
    ///  owners represents a map from index to owners of the capability index
    ///  index key is string to allow amino marshalling.
    // @@protoc_insertion_point(field:cosmos.capability.v1beta1.GenesisState.owners)
    pub owners: ::std::vec::Vec<GenesisOwners>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.capability.v1beta1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &GenesisState| { &m.index },
            |m: &mut GenesisState| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "owners",
            |m: &GenesisState| { &m.owners },
            |m: &mut GenesisState| { &mut m.owners },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_uint64()?;
                },
                18 => {
                    self.owners.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.index);
        }
        for value in &self.owners {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_uint64(1, self.index)?;
        }
        for v in &self.owners {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.owners.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            index: 0,
            owners: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'cosmos/capability/v1beta1/genesis.proto\x12\x19cosmos.capability.v1be\
    ta1\x1a\x14gogoproto/gogo.proto\x1a*cosmos/capability/v1beta1/capability\
    .proto\"\x92\x01\n\rGenesisOwners\x12\x14\n\x05index\x18\x01\x20\x01(\
    \x04R\x05index\x12k\n\x0cindex_owners\x18\x02\x20\x01(\x0b2+.cosmos.capa\
    bility.v1beta1.CapabilityOwnersR\x0bindexOwnersB\x1b\xf2\xde\x1f\x13yaml\
    :\"index_owners\"\xc8\xde\x1f\0\"l\n\x0cGenesisState\x12\x14\n\x05index\
    \x18\x01\x20\x01(\x04R\x05index\x12F\n\x06owners\x18\x02\x20\x03(\x0b2(.\
    cosmos.capability.v1beta1.GenesisOwnersR\x06ownersB\x04\xc8\xde\x1f\0B1Z\
    /github.com/cosmos/cosmos-sdk/x/capability/typesJ\xc3\x06\n\x06\x12\x04\
    \0\0\x19\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\
    \0\"\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\x12\x03\x04\04\
    \n\x08\n\x01\x08\x12\x03\x06\0F\n\t\n\x02\x08\x0b\x12\x03\x06\0F\nY\n\
    \x02\x04\0\x12\x04\t\0\x0f\x01\x1aM\x20GenesisOwners\x20defines\x20the\
    \x20capability\x20owners\x20with\x20their\x20corresponding\x20index.\n\n\
    \n\n\x03\x04\0\x01\x12\x03\t\x08\x15\n:\n\x04\x04\0\x02\0\x12\x03\x0b\
    \x02\x13\x1a-\x20index\x20is\x20the\x20index\x20of\x20the\x20capability\
    \x20owner.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0b\t\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0b\x11\x12\n>\n\x04\x04\0\x02\x01\x12\x03\x0e\x02s\x1a1\x20index_owner\
    s\x20are\x20the\x20owners\x20at\x20the\x20given\x20index.\n\n\x0c\n\x05\
    \x04\0\x02\x01\x06\x12\x03\x0e\x02\x12\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x0e\x13\x1f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\"#\n\x0c\n\
    \x05\x04\0\x02\x01\x08\x12\x03\x0e$r\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\
    \xfb\x03\x12\x03\x0e%A\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\
    \x0eCq\nI\n\x02\x04\x01\x12\x04\x12\0\x19\x01\x1a=\x20GenesisState\x20de\
    fines\x20the\x20capability\x20module's\x20genesis\x20state.\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x12\x08\x14\n4\n\x04\x04\x01\x02\0\x12\x03\x14\x02\
    \x13\x1a'\x20index\x20is\x20the\x20capability\x20global\x20index.\n\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x14\t\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x14\x11\
    \x12\n\x84\x01\n\x04\x04\x01\x02\x01\x12\x03\x18\x02C\x1aw\x20owners\x20\
    represents\x20a\x20map\x20from\x20index\x20to\x20owners\x20of\x20the\x20\
    capability\x20index\n\x20index\x20key\x20is\x20string\x20to\x20allow\x20\
    amino\x20marshalling.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x18\x02\
    \n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x18\x0b\x18\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x18\x19\x1f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x18\"#\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\x18$B\n\x0f\n\x08\
    \x04\x01\x02\x01\x08\xe9\xfb\x03\x12\x03\x18%Ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::capability::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(GenesisOwners::generated_message_descriptor_data());
            messages.push(GenesisState::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
