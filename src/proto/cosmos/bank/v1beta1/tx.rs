// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/bank/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgSend represents a message to send coins from one account to another.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.MsgSend)
pub struct MsgSend {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.MsgSend.from_address)
    pub from_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.MsgSend.to_address)
    pub to_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.MsgSend.amount)
    pub amount: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.MsgSend.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSend {
    fn default() -> &'a MsgSend {
        <MsgSend as ::protobuf::Message>::default_instance()
    }
}

impl MsgSend {
    pub fn new() -> MsgSend {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_address",
            |m: &MsgSend| { &m.from_address },
            |m: &mut MsgSend| { &mut m.from_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_address",
            |m: &MsgSend| { &m.to_address },
            |m: &mut MsgSend| { &mut m.to_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &MsgSend| { &m.amount },
            |m: &mut MsgSend| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSend>(
            "MsgSend",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSend {
    const NAME: &'static str = "MsgSend";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.from_address = is.read_string()?;
                },
                18 => {
                    self.to_address = is.read_string()?;
                },
                26 => {
                    self.amount.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.from_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.from_address);
        }
        if !self.to_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.to_address);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.from_address.is_empty() {
            os.write_string(1, &self.from_address)?;
        }
        if !self.to_address.is_empty() {
            os.write_string(2, &self.to_address)?;
        }
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSend {
        MsgSend::new()
    }

    fn clear(&mut self) {
        self.from_address.clear();
        self.to_address.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSend {
        static instance: MsgSend = MsgSend {
            from_address: ::std::string::String::new(),
            to_address: ::std::string::String::new(),
            amount: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSend {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSend").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSend {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSendResponse defines the Msg/Send response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.MsgSendResponse)
pub struct MsgSendResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.MsgSendResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSendResponse {
    fn default() -> &'a MsgSendResponse {
        <MsgSendResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSendResponse {
    pub fn new() -> MsgSendResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSendResponse>(
            "MsgSendResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSendResponse {
    const NAME: &'static str = "MsgSendResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSendResponse {
        MsgSendResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSendResponse {
        static instance: MsgSendResponse = MsgSendResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSendResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSendResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSendResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSendResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgMultiSend represents an arbitrary multi-in, multi-out send message.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.MsgMultiSend)
pub struct MsgMultiSend {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.MsgMultiSend.inputs)
    pub inputs: ::std::vec::Vec<super::bank::Input>,
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.MsgMultiSend.outputs)
    pub outputs: ::std::vec::Vec<super::bank::Output>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.MsgMultiSend.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgMultiSend {
    fn default() -> &'a MsgMultiSend {
        <MsgMultiSend as ::protobuf::Message>::default_instance()
    }
}

impl MsgMultiSend {
    pub fn new() -> MsgMultiSend {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inputs",
            |m: &MsgMultiSend| { &m.inputs },
            |m: &mut MsgMultiSend| { &mut m.inputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outputs",
            |m: &MsgMultiSend| { &m.outputs },
            |m: &mut MsgMultiSend| { &mut m.outputs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgMultiSend>(
            "MsgMultiSend",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgMultiSend {
    const NAME: &'static str = "MsgMultiSend";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inputs.push(is.read_message()?);
                },
                18 => {
                    self.outputs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.inputs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.outputs {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgMultiSend {
        MsgMultiSend::new()
    }

    fn clear(&mut self) {
        self.inputs.clear();
        self.outputs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgMultiSend {
        static instance: MsgMultiSend = MsgMultiSend {
            inputs: ::std::vec::Vec::new(),
            outputs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgMultiSend {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgMultiSend").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgMultiSend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMultiSend {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgMultiSendResponse defines the Msg/MultiSend response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.MsgMultiSendResponse)
pub struct MsgMultiSendResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.MsgMultiSendResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgMultiSendResponse {
    fn default() -> &'a MsgMultiSendResponse {
        <MsgMultiSendResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgMultiSendResponse {
    pub fn new() -> MsgMultiSendResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgMultiSendResponse>(
            "MsgMultiSendResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgMultiSendResponse {
    const NAME: &'static str = "MsgMultiSendResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgMultiSendResponse {
        MsgMultiSendResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgMultiSendResponse {
        static instance: MsgMultiSendResponse = MsgMultiSendResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgMultiSendResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgMultiSendResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgMultiSendResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMultiSendResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ccosmos/bank/v1beta1/tx.proto\x12\x13cosmos.bank.v1beta1\x1a\x14gog\
    oproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a\x1ecosmos/ba\
    nk/v1beta1/bank.proto\"\xea\x01\n\x07MsgSend\x12:\n\x0cfrom_address\x18\
    \x01\x20\x01(\tR\x0bfromAddressB\x17\xf2\xde\x1f\x13yaml:\"from_address\
    \"\x124\n\nto_address\x18\x02\x20\x01(\tR\ttoAddressB\x15\xf2\xde\x1f\
    \x11yaml:\"to_address\"\x12c\n\x06amount\x18\x03\x20\x03(\x0b2\x19.cosmo\
    s.base.v1beta1.CoinR\x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sd\
    k/types.Coins\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x11\n\x0f\
    MsgSendResponse\"\x8b\x01\n\x0cMsgMultiSend\x128\n\x06inputs\x18\x01\x20\
    \x03(\x0b2\x1a.cosmos.bank.v1beta1.InputR\x06inputsB\x04\xc8\xde\x1f\0\
    \x12;\n\x07outputs\x18\x02\x20\x03(\x0b2\x1b.cosmos.bank.v1beta1.OutputR\
    \x07outputsB\x04\xc8\xde\x1f\0:\x04\xe8\xa0\x1f\0\"\x16\n\x14MsgMultiSen\
    dResponse2\xac\x01\n\x03Msg\x12J\n\x04Send\x12\x1c.cosmos.bank.v1beta1.M\
    sgSend\x1a$.cosmos.bank.v1beta1.MsgSendResponse\x12Y\n\tMultiSend\x12!.c\
    osmos.bank.v1beta1.MsgMultiSend\x1a).cosmos.bank.v1beta1.MsgMultiSendRes\
    ponseB+Z)github.com/cosmos/cosmos-sdk/x/bank/typesJ\xc9\n\n\x06\x12\x04\
    \0\0)\x1f\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\
    \x1c\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\x12\x03\x04\0(\
    \n\t\n\x02\x03\x02\x12\x03\x05\0(\n\x08\n\x01\x08\x12\x03\x07\0@\n\t\n\
    \x02\x08\x0b\x12\x03\x07\0@\n/\n\x02\x06\0\x12\x04\n\0\x10\x01\x1a#\x20M\
    sg\x20defines\x20the\x20bank\x20Msg\x20service.\n\n\n\n\x03\x06\0\x01\
    \x12\x03\n\x08\x0b\n[\n\x04\x06\0\x02\0\x12\x03\x0c\x02.\x1aN\x20Send\
    \x20defines\x20a\x20method\x20for\x20sending\x20coins\x20from\x20one\x20\
    account\x20to\x20another\x20account.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\x0c\x06\n\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0c\x0b\x12\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\x0c\x1d,\na\n\x04\x06\0\x02\x01\x12\x03\x0f\
    \x02=\x1aT\x20MultiSend\x20defines\x20a\x20method\x20for\x20sending\x20c\
    oins\x20from\x20some\x20accounts\x20to\x20other\x20accounts.\n\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x0f\x06\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x0f\x10\x1c\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0f';\nU\n\
    \x02\x04\0\x12\x04\x13\0\x1b\x01\x1aI\x20MsgSend\x20represents\x20a\x20m\
    essage\x20to\x20send\x20coins\x20from\x20one\x20account\x20to\x20another\
    .\n\n\n\n\x03\x04\0\x01\x12\x03\x13\x08\x0f\n\n\n\x03\x04\0\x07\x12\x03\
    \x14\x02-\n\r\n\x06\x04\0\x07\x8d\xf4\x03\x12\x03\x14\x02-\n\n\n\x03\x04\
    \0\x07\x12\x03\x15\x02-\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x15\x02-\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x17\x02`\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x17\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x17\x0b\x17\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17-.\n\x0c\n\x05\x04\0\x02\0\x08\x12\
    \x03\x17/_\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x170^\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x18\x02^\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x18\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x18\x0b\x15\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x18-.\n\x0c\n\x05\x04\0\x02\x01\x08\x12\
    \x03\x18/]\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x180\\\n\
    \x0c\n\x04\x04\0\x02\x02\x12\x04\x19\x02\x1al\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03\x19\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x19\x0b#\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x19$*\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x19-.\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x1a\x06k\n\x0f\n\
    \x08\x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x1a\x07#\n\x0f\n\x08\x04\0\
    \x02\x02\x08\xf5\xfb\x03\x12\x03\x1a%j\n@\n\x02\x04\x01\x12\x03\x1e\0\
    \x1a\x1a5\x20MsgSendResponse\x20defines\x20the\x20Msg/Send\x20response\
    \x20type.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1e\x08\x17\nT\n\x02\x04\x02\
    \x12\x04!\0&\x01\x1aH\x20MsgMultiSend\x20represents\x20an\x20arbitrary\
    \x20multi-in,\x20multi-out\x20send\x20message.\n\n\n\n\x03\x04\x02\x01\
    \x12\x03!\x08\x14\n\n\n\x03\x04\x02\x07\x12\x03\"\x02#\n\r\n\x06\x04\x02\
    \x07\x8d\xf4\x03\x12\x03\"\x02#\n\x0b\n\x04\x04\x02\x02\0\x12\x03$\x02=\
    \n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03$\x02\n\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03$\x0b\x10\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03$\x12\x18\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03$\x1c\x1d\n\x0c\n\x05\x04\x02\x02\0\
    \x08\x12\x03$\x1e<\n\x0f\n\x08\x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03$\
    \x1f;\n\x0b\n\x04\x04\x02\x02\x01\x12\x03%\x02=\n\x0c\n\x05\x04\x02\x02\
    \x01\x04\x12\x03%\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03%\x0b\x11\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03%\x12\x19\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03%\x1c\x1d\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03%\
    \x1e<\n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\xfb\x03\x12\x03%\x1f;\nJ\n\x02\
    \x04\x03\x12\x03)\0\x1f\x1a?\x20MsgMultiSendResponse\x20defines\x20the\
    \x20Msg/MultiSend\x20response\x20type.\n\n\n\n\x03\x04\x03\x01\x12\x03)\
    \x08\x1cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::bank::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(MsgSend::generated_message_descriptor_data());
            messages.push(MsgSendResponse::generated_message_descriptor_data());
            messages.push(MsgMultiSend::generated_message_descriptor_data());
            messages.push(MsgMultiSendResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
