// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/bank/v1beta1/authz.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  SendAuthorization allows the grantee to spend up to spend_limit coins from
///  the granter's account.
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.SendAuthorization)
pub struct SendAuthorization {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.SendAuthorization.spend_limit)
    pub spend_limit: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.SendAuthorization.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendAuthorization {
    fn default() -> &'a SendAuthorization {
        <SendAuthorization as ::protobuf::Message>::default_instance()
    }
}

impl SendAuthorization {
    pub fn new() -> SendAuthorization {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "spend_limit",
            |m: &SendAuthorization| { &m.spend_limit },
            |m: &mut SendAuthorization| { &mut m.spend_limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendAuthorization>(
            "SendAuthorization",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendAuthorization {
    const NAME: &'static str = "SendAuthorization";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.spend_limit.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.spend_limit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.spend_limit {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendAuthorization {
        SendAuthorization::new()
    }

    fn clear(&mut self) {
        self.spend_limit.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendAuthorization {
        static instance: SendAuthorization = SendAuthorization {
            spend_limit: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendAuthorization {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendAuthorization").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendAuthorization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendAuthorization {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/bank/v1beta1/authz.proto\x12\x13cosmos.bank.v1beta1\x1a\x14\
    gogoproto/gogo.proto\x1a\x19cosmos_proto/cosmos.proto\x1a\x1ecosmos/base\
    /v1beta1/coin.proto\"\x94\x01\n\x11SendAuthorization\x12l\n\x0bspend_lim\
    it\x18\x01\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\nspendLimitB0\xaa\
    \xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0:\x11\xd2\
    \xb4-\rAuthorizationB+Z)github.com/cosmos/cosmos-sdk/x/bank/typesJ\xfb\
    \x02\n\x06\x12\x04\0\0\x12\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\
    \x03\x01\x12\x03\x04\0#\n\t\n\x02\x03\x02\x12\x03\x05\0(\n\x08\n\x01\x08\
    \x12\x03\x07\0@\n\t\n\x02\x08\x0b\x12\x03\x07\0@\n\x89\x01\n\x02\x04\0\
    \x12\x04\r\0\x12\x01\x1a}\x20SendAuthorization\x20allows\x20the\x20grant\
    ee\x20to\x20spend\x20up\x20to\x20spend_limit\x20coins\x20from\n\x20the\
    \x20granter's\x20account.\n\n\x20Since:\x20cosmos-sdk\x200.43\n\n\n\n\
    \x03\x04\0\x01\x12\x03\r\x08\x19\n\n\n\x03\x04\0\x07\x12\x03\x0e\x02?\n\
    \r\n\x06\x04\0\x07\xca\xd6\x05\x12\x03\x0e\x02?\n\x0c\n\x04\x04\0\x02\0\
    \x12\x04\x10\x02\x11l\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x10\x02\n\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x10\x0b#\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x10$/\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1023\n\x0c\n\x05\x04\
    \0\x02\0\x08\x12\x03\x11\x06k\n\x0f\n\x08\x04\0\x02\0\x08\xe9\xfb\x03\
    \x12\x03\x11\x07#\n\x0f\n\x08\x04\0\x02\0\x08\xf5\xfb\x03\x12\x03\x11%jb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SendAuthorization::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
