// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/bank/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryBalanceRequest is the request type for the Query/Balance RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryBalanceRequest)
pub struct QueryBalanceRequest {
    // message fields
    ///  address is the address to query balances for.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryBalanceRequest.address)
    pub address: ::std::string::String,
    ///  denom is the coin denom to query balances for.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryBalanceRequest.denom)
    pub denom: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryBalanceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryBalanceRequest {
    fn default() -> &'a QueryBalanceRequest {
        <QueryBalanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryBalanceRequest {
    pub fn new() -> QueryBalanceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &QueryBalanceRequest| { &m.address },
            |m: &mut QueryBalanceRequest| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "denom",
            |m: &QueryBalanceRequest| { &m.denom },
            |m: &mut QueryBalanceRequest| { &mut m.denom },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryBalanceRequest>(
            "QueryBalanceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryBalanceRequest {
    const NAME: &'static str = "QueryBalanceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    self.denom = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if !self.denom.is_empty() {
            os.write_string(2, &self.denom)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryBalanceRequest {
        QueryBalanceRequest::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.denom.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryBalanceRequest {
        static instance: QueryBalanceRequest = QueryBalanceRequest {
            address: ::std::string::String::new(),
            denom: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryBalanceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryBalanceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryBalanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBalanceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryBalanceResponse is the response type for the Query/Balance RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryBalanceResponse)
pub struct QueryBalanceResponse {
    // message fields
    ///  balance is the balance of the coin.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryBalanceResponse.balance)
    pub balance: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryBalanceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryBalanceResponse {
    fn default() -> &'a QueryBalanceResponse {
        <QueryBalanceResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryBalanceResponse {
    pub fn new() -> QueryBalanceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "balance",
            |m: &QueryBalanceResponse| { &m.balance },
            |m: &mut QueryBalanceResponse| { &mut m.balance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryBalanceResponse>(
            "QueryBalanceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryBalanceResponse {
    const NAME: &'static str = "QueryBalanceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.balance)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.balance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.balance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryBalanceResponse {
        QueryBalanceResponse::new()
    }

    fn clear(&mut self) {
        self.balance.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryBalanceResponse {
        static instance: QueryBalanceResponse = QueryBalanceResponse {
            balance: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryBalanceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryBalanceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryBalanceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBalanceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryBalanceRequest is the request type for the Query/AllBalances RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryAllBalancesRequest)
pub struct QueryAllBalancesRequest {
    // message fields
    ///  address is the address to query balances for.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryAllBalancesRequest.address)
    pub address: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryAllBalancesRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryAllBalancesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAllBalancesRequest {
    fn default() -> &'a QueryAllBalancesRequest {
        <QueryAllBalancesRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAllBalancesRequest {
    pub fn new() -> QueryAllBalancesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &QueryAllBalancesRequest| { &m.address },
            |m: &mut QueryAllBalancesRequest| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryAllBalancesRequest| { &m.pagination },
            |m: &mut QueryAllBalancesRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAllBalancesRequest>(
            "QueryAllBalancesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAllBalancesRequest {
    const NAME: &'static str = "QueryAllBalancesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAllBalancesRequest {
        QueryAllBalancesRequest::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAllBalancesRequest {
        static instance: QueryAllBalancesRequest = QueryAllBalancesRequest {
            address: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAllBalancesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAllBalancesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAllBalancesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAllBalancesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryAllBalancesResponse)
pub struct QueryAllBalancesResponse {
    // message fields
    ///  balances is the balances of all the coins.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryAllBalancesResponse.balances)
    pub balances: ::std::vec::Vec<super::coin::Coin>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryAllBalancesResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryAllBalancesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAllBalancesResponse {
    fn default() -> &'a QueryAllBalancesResponse {
        <QueryAllBalancesResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAllBalancesResponse {
    pub fn new() -> QueryAllBalancesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "balances",
            |m: &QueryAllBalancesResponse| { &m.balances },
            |m: &mut QueryAllBalancesResponse| { &mut m.balances },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryAllBalancesResponse| { &m.pagination },
            |m: &mut QueryAllBalancesResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAllBalancesResponse>(
            "QueryAllBalancesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAllBalancesResponse {
    const NAME: &'static str = "QueryAllBalancesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.balances.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.balances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.balances {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAllBalancesResponse {
        QueryAllBalancesResponse::new()
    }

    fn clear(&mut self) {
        self.balances.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAllBalancesResponse {
        static instance: QueryAllBalancesResponse = QueryAllBalancesResponse {
            balances: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAllBalancesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAllBalancesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAllBalancesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAllBalancesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QuerySpendableBalancesRequest defines the gRPC request structure for querying
///  an account's spendable balances.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
pub struct QuerySpendableBalancesRequest {
    // message fields
    ///  address is the address to query spendable balances for.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.address)
    pub address: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuerySpendableBalancesRequest {
    fn default() -> &'a QuerySpendableBalancesRequest {
        <QuerySpendableBalancesRequest as ::protobuf::Message>::default_instance()
    }
}

impl QuerySpendableBalancesRequest {
    pub fn new() -> QuerySpendableBalancesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &QuerySpendableBalancesRequest| { &m.address },
            |m: &mut QuerySpendableBalancesRequest| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QuerySpendableBalancesRequest| { &m.pagination },
            |m: &mut QuerySpendableBalancesRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuerySpendableBalancesRequest>(
            "QuerySpendableBalancesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuerySpendableBalancesRequest {
    const NAME: &'static str = "QuerySpendableBalancesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuerySpendableBalancesRequest {
        QuerySpendableBalancesRequest::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuerySpendableBalancesRequest {
        static instance: QuerySpendableBalancesRequest = QuerySpendableBalancesRequest {
            address: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuerySpendableBalancesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuerySpendableBalancesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuerySpendableBalancesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuerySpendableBalancesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QuerySpendableBalancesResponse defines the gRPC response structure for querying
///  an account's spendable balances.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
pub struct QuerySpendableBalancesResponse {
    // message fields
    ///  balances is the spendable balances of all the coins.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.balances)
    pub balances: ::std::vec::Vec<super::coin::Coin>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuerySpendableBalancesResponse {
    fn default() -> &'a QuerySpendableBalancesResponse {
        <QuerySpendableBalancesResponse as ::protobuf::Message>::default_instance()
    }
}

impl QuerySpendableBalancesResponse {
    pub fn new() -> QuerySpendableBalancesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "balances",
            |m: &QuerySpendableBalancesResponse| { &m.balances },
            |m: &mut QuerySpendableBalancesResponse| { &mut m.balances },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QuerySpendableBalancesResponse| { &m.pagination },
            |m: &mut QuerySpendableBalancesResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuerySpendableBalancesResponse>(
            "QuerySpendableBalancesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuerySpendableBalancesResponse {
    const NAME: &'static str = "QuerySpendableBalancesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.balances.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.balances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.balances {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuerySpendableBalancesResponse {
        QuerySpendableBalancesResponse::new()
    }

    fn clear(&mut self) {
        self.balances.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuerySpendableBalancesResponse {
        static instance: QuerySpendableBalancesResponse = QuerySpendableBalancesResponse {
            balances: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuerySpendableBalancesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuerySpendableBalancesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuerySpendableBalancesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuerySpendableBalancesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
pub struct QueryTotalSupplyRequest {
    // message fields
    ///  pagination defines an optional pagination for the request.
    ///
    ///  Since: cosmos-sdk 0.43
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryTotalSupplyRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryTotalSupplyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryTotalSupplyRequest {
    fn default() -> &'a QueryTotalSupplyRequest {
        <QueryTotalSupplyRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryTotalSupplyRequest {
    pub fn new() -> QueryTotalSupplyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryTotalSupplyRequest| { &m.pagination },
            |m: &mut QueryTotalSupplyRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryTotalSupplyRequest>(
            "QueryTotalSupplyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryTotalSupplyRequest {
    const NAME: &'static str = "QueryTotalSupplyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryTotalSupplyRequest {
        QueryTotalSupplyRequest::new()
    }

    fn clear(&mut self) {
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryTotalSupplyRequest {
        static instance: QueryTotalSupplyRequest = QueryTotalSupplyRequest {
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryTotalSupplyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryTotalSupplyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryTotalSupplyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTotalSupplyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
///  method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
pub struct QueryTotalSupplyResponse {
    // message fields
    ///  supply is the supply of the coins
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryTotalSupplyResponse.supply)
    pub supply: ::std::vec::Vec<super::coin::Coin>,
    ///  pagination defines the pagination in the response.
    ///
    ///  Since: cosmos-sdk 0.43
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryTotalSupplyResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryTotalSupplyResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryTotalSupplyResponse {
    fn default() -> &'a QueryTotalSupplyResponse {
        <QueryTotalSupplyResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryTotalSupplyResponse {
    pub fn new() -> QueryTotalSupplyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "supply",
            |m: &QueryTotalSupplyResponse| { &m.supply },
            |m: &mut QueryTotalSupplyResponse| { &mut m.supply },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryTotalSupplyResponse| { &m.pagination },
            |m: &mut QueryTotalSupplyResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryTotalSupplyResponse>(
            "QueryTotalSupplyResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryTotalSupplyResponse {
    const NAME: &'static str = "QueryTotalSupplyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.supply.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.supply {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.supply {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryTotalSupplyResponse {
        QueryTotalSupplyResponse::new()
    }

    fn clear(&mut self) {
        self.supply.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryTotalSupplyResponse {
        static instance: QueryTotalSupplyResponse = QueryTotalSupplyResponse {
            supply: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryTotalSupplyResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryTotalSupplyResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryTotalSupplyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTotalSupplyResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QuerySupplyOfRequest is the request type for the Query/SupplyOf RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QuerySupplyOfRequest)
pub struct QuerySupplyOfRequest {
    // message fields
    ///  denom is the coin denom to query balances for.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QuerySupplyOfRequest.denom)
    pub denom: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QuerySupplyOfRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuerySupplyOfRequest {
    fn default() -> &'a QuerySupplyOfRequest {
        <QuerySupplyOfRequest as ::protobuf::Message>::default_instance()
    }
}

impl QuerySupplyOfRequest {
    pub fn new() -> QuerySupplyOfRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "denom",
            |m: &QuerySupplyOfRequest| { &m.denom },
            |m: &mut QuerySupplyOfRequest| { &mut m.denom },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuerySupplyOfRequest>(
            "QuerySupplyOfRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuerySupplyOfRequest {
    const NAME: &'static str = "QuerySupplyOfRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.denom = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuerySupplyOfRequest {
        QuerySupplyOfRequest::new()
    }

    fn clear(&mut self) {
        self.denom.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuerySupplyOfRequest {
        static instance: QuerySupplyOfRequest = QuerySupplyOfRequest {
            denom: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuerySupplyOfRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuerySupplyOfRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuerySupplyOfRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuerySupplyOfRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QuerySupplyOfResponse)
pub struct QuerySupplyOfResponse {
    // message fields
    ///  amount is the supply of the coin.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QuerySupplyOfResponse.amount)
    pub amount: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QuerySupplyOfResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuerySupplyOfResponse {
    fn default() -> &'a QuerySupplyOfResponse {
        <QuerySupplyOfResponse as ::protobuf::Message>::default_instance()
    }
}

impl QuerySupplyOfResponse {
    pub fn new() -> QuerySupplyOfResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "amount",
            |m: &QuerySupplyOfResponse| { &m.amount },
            |m: &mut QuerySupplyOfResponse| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuerySupplyOfResponse>(
            "QuerySupplyOfResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuerySupplyOfResponse {
    const NAME: &'static str = "QuerySupplyOfResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.amount)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.amount.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuerySupplyOfResponse {
        QuerySupplyOfResponse::new()
    }

    fn clear(&mut self) {
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuerySupplyOfResponse {
        static instance: QuerySupplyOfResponse = QuerySupplyOfResponse {
            amount: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuerySupplyOfResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuerySupplyOfResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuerySupplyOfResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuerySupplyOfResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsRequest defines the request type for querying x/bank parameters.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryParamsRequest)
pub struct QueryParamsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsRequest>(
            "QueryParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: QueryParamsRequest = QueryParamsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsResponse defines the response type for querying x/bank parameters.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryParamsResponse)
pub struct QueryParamsResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryParamsResponse.params)
    pub params: ::protobuf::MessageField<super::bank::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::bank::Params>(
            "params",
            |m: &QueryParamsResponse| { &m.params },
            |m: &mut QueryParamsResponse| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsResponse>(
            "QueryParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: QueryParamsResponse = QueryParamsResponse {
            params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDenomsMetadataRequest is the request type for the Query/DenomsMetadata RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
pub struct QueryDenomsMetadataRequest {
    // message fields
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryDenomsMetadataRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryDenomsMetadataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomsMetadataRequest {
    fn default() -> &'a QueryDenomsMetadataRequest {
        <QueryDenomsMetadataRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomsMetadataRequest {
    pub fn new() -> QueryDenomsMetadataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryDenomsMetadataRequest| { &m.pagination },
            |m: &mut QueryDenomsMetadataRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomsMetadataRequest>(
            "QueryDenomsMetadataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomsMetadataRequest {
    const NAME: &'static str = "QueryDenomsMetadataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomsMetadataRequest {
        QueryDenomsMetadataRequest::new()
    }

    fn clear(&mut self) {
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomsMetadataRequest {
        static instance: QueryDenomsMetadataRequest = QueryDenomsMetadataRequest {
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomsMetadataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomsMetadataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomsMetadataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomsMetadataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
pub struct QueryDenomsMetadataResponse {
    // message fields
    ///  metadata provides the client information for all the registered tokens.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.metadatas)
    pub metadatas: ::std::vec::Vec<super::bank::Metadata>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomsMetadataResponse {
    fn default() -> &'a QueryDenomsMetadataResponse {
        <QueryDenomsMetadataResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomsMetadataResponse {
    pub fn new() -> QueryDenomsMetadataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metadatas",
            |m: &QueryDenomsMetadataResponse| { &m.metadatas },
            |m: &mut QueryDenomsMetadataResponse| { &mut m.metadatas },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryDenomsMetadataResponse| { &m.pagination },
            |m: &mut QueryDenomsMetadataResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomsMetadataResponse>(
            "QueryDenomsMetadataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomsMetadataResponse {
    const NAME: &'static str = "QueryDenomsMetadataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.metadatas.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.metadatas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.metadatas {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomsMetadataResponse {
        QueryDenomsMetadataResponse::new()
    }

    fn clear(&mut self) {
        self.metadatas.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomsMetadataResponse {
        static instance: QueryDenomsMetadataResponse = QueryDenomsMetadataResponse {
            metadatas: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomsMetadataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomsMetadataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomsMetadataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomsMetadataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDenomMetadataRequest is the request type for the Query/DenomMetadata RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
pub struct QueryDenomMetadataRequest {
    // message fields
    ///  denom is the coin denom to query the metadata for.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryDenomMetadataRequest.denom)
    pub denom: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryDenomMetadataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomMetadataRequest {
    fn default() -> &'a QueryDenomMetadataRequest {
        <QueryDenomMetadataRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomMetadataRequest {
    pub fn new() -> QueryDenomMetadataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "denom",
            |m: &QueryDenomMetadataRequest| { &m.denom },
            |m: &mut QueryDenomMetadataRequest| { &mut m.denom },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomMetadataRequest>(
            "QueryDenomMetadataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomMetadataRequest {
    const NAME: &'static str = "QueryDenomMetadataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.denom = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomMetadataRequest {
        QueryDenomMetadataRequest::new()
    }

    fn clear(&mut self) {
        self.denom.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomMetadataRequest {
        static instance: QueryDenomMetadataRequest = QueryDenomMetadataRequest {
            denom: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomMetadataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomMetadataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomMetadataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomMetadataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
pub struct QueryDenomMetadataResponse {
    // message fields
    ///  metadata describes and provides all the client information for the requested token.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.QueryDenomMetadataResponse.metadata)
    pub metadata: ::protobuf::MessageField<super::bank::Metadata>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.QueryDenomMetadataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomMetadataResponse {
    fn default() -> &'a QueryDenomMetadataResponse {
        <QueryDenomMetadataResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomMetadataResponse {
    pub fn new() -> QueryDenomMetadataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::bank::Metadata>(
            "metadata",
            |m: &QueryDenomMetadataResponse| { &m.metadata },
            |m: &mut QueryDenomMetadataResponse| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomMetadataResponse>(
            "QueryDenomMetadataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomMetadataResponse {
    const NAME: &'static str = "QueryDenomMetadataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomMetadataResponse {
        QueryDenomMetadataResponse::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomMetadataResponse {
        static instance: QueryDenomMetadataResponse = QueryDenomMetadataResponse {
            metadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomMetadataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomMetadataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomMetadataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomMetadataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/bank/v1beta1/query.proto\x12\x13cosmos.bank.v1beta1\x1a*cos\
    mos/base/query/v1beta1/pagination.proto\x1a\x14gogoproto/gogo.proto\x1a\
    \x1cgoogle/api/annotations.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\
    \x1a\x1ecosmos/bank/v1beta1/bank.proto\"O\n\x13QueryBalanceRequest\x12\
    \x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12\x14\n\x05denom\x18\
    \x02\x20\x01(\tR\x05denom:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"K\n\x14Query\
    BalanceResponse\x123\n\x07balance\x18\x01\x20\x01(\x0b2\x19.cosmos.base.\
    v1beta1.CoinR\x07balance\"\x85\x01\n\x17QueryAllBalancesRequest\x12\x18\
    \n\x07address\x18\x01\x20\x01(\tR\x07address\x12F\n\npagination\x18\x02\
    \x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagination:\x08\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xcc\x01\n\x18QueryAllBalancesResponse\x12\
    g\n\x08balances\x18\x01\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x08b\
    alancesB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\
    \x1f\0\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1bet\
    a1.PageResponseR\npagination\"\x8b\x01\n\x1dQuerySpendableBalancesReques\
    t\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12F\n\npagination\
    \x18\x02\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npaginati\
    on:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xd2\x01\n\x1eQuerySpendableBalance\
    sResponse\x12g\n\x08balances\x18\x01\x20\x03(\x0b2\x19.cosmos.base.v1bet\
    a1.CoinR\x08balancesB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Co\
    ins\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cosmos.base.\
    query.v1beta1.PageResponseR\npagination\"k\n\x17QueryTotalSupplyRequest\
    \x12F\n\npagination\x18\x01\x20\x01(\x0b2&.cosmos.base.query.v1beta1.Pag\
    eRequestR\npagination:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xc8\x01\n\x18Qu\
    eryTotalSupplyResponse\x12c\n\x06supply\x18\x01\x20\x03(\x0b2\x19.cosmos\
    .base.v1beta1.CoinR\x06supplyB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk\
    /types.Coins\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cos\
    mos.base.query.v1beta1.PageResponseR\npagination\",\n\x14QuerySupplyOfRe\
    quest\x12\x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\"P\n\x15QuerySuppl\
    yOfResponse\x127\n\x06amount\x18\x01\x20\x01(\x0b2\x19.cosmos.base.v1bet\
    a1.CoinR\x06amountB\x04\xc8\xde\x1f\0\"\x14\n\x12QueryParamsRequest\"P\n\
    \x13QueryParamsResponse\x129\n\x06params\x18\x01\x20\x01(\x0b2\x1b.cosmo\
    s.bank.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\x1f\0\"d\n\x1aQueryDenomsM\
    etadataRequest\x12F\n\npagination\x18\x01\x20\x01(\x0b2&.cosmos.base.que\
    ry.v1beta1.PageRequestR\npagination\"\xa9\x01\n\x1bQueryDenomsMetadataRe\
    sponse\x12A\n\tmetadatas\x18\x01\x20\x03(\x0b2\x1d.cosmos.bank.v1beta1.M\
    etadataR\tmetadatasB\x04\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\
    \x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination\"1\n\x19\
    QueryDenomMetadataRequest\x12\x14\n\x05denom\x18\x01\x20\x01(\tR\x05deno\
    m\"]\n\x1aQueryDenomMetadataResponse\x12?\n\x08metadata\x18\x01\x20\x01(\
    \x0b2\x1d.cosmos.bank.v1beta1.MetadataR\x08metadataB\x04\xc8\xde\x1f\02\
    \xed\t\n\x05Query\x12\x98\x01\n\x07Balance\x12(.cosmos.bank.v1beta1.Quer\
    yBalanceRequest\x1a).cosmos.bank.v1beta1.QueryBalanceResponse\"8\x82\xd3\
    \xe4\x93\x022\x120/cosmos/bank/v1beta1/balances/{address}/by_denom\x12\
    \x9b\x01\n\x0bAllBalances\x12,.cosmos.bank.v1beta1.QueryAllBalancesReque\
    st\x1a-.cosmos.bank.v1beta1.QueryAllBalancesResponse\"/\x82\xd3\xe4\x93\
    \x02)\x12'/cosmos/bank/v1beta1/balances/{address}\x12\xb7\x01\n\x11Spend\
    ableBalances\x122.cosmos.bank.v1beta1.QuerySpendableBalancesRequest\x1a3\
    .cosmos.bank.v1beta1.QuerySpendableBalancesResponse\"9\x82\xd3\xe4\x93\
    \x023\x121/cosmos/bank/v1beta1/spendable_balances/{address}\x12\x8f\x01\
    \n\x0bTotalSupply\x12,.cosmos.bank.v1beta1.QueryTotalSupplyRequest\x1a-.\
    cosmos.bank.v1beta1.QueryTotalSupplyResponse\"#\x82\xd3\xe4\x93\x02\x1d\
    \x12\x1b/cosmos/bank/v1beta1/supply\x12\x8e\x01\n\x08SupplyOf\x12).cosmo\
    s.bank.v1beta1.QuerySupplyOfRequest\x1a*.cosmos.bank.v1beta1.QuerySupply\
    OfResponse\"+\x82\xd3\xe4\x93\x02%\x12#/cosmos/bank/v1beta1/supply/{deno\
    m}\x12\x80\x01\n\x06Params\x12'.cosmos.bank.v1beta1.QueryParamsRequest\
    \x1a(.cosmos.bank.v1beta1.QueryParamsResponse\"#\x82\xd3\xe4\x93\x02\x1d\
    \x12\x1b/cosmos/bank/v1beta1/params\x12\xa6\x01\n\rDenomMetadata\x12..co\
    smos.bank.v1beta1.QueryDenomMetadataRequest\x1a/.cosmos.bank.v1beta1.Que\
    ryDenomMetadataResponse\"4\x82\xd3\xe4\x93\x02.\x12,/cosmos/bank/v1beta1\
    /denoms_metadata/{denom}\x12\xa1\x01\n\x0eDenomsMetadata\x12/.cosmos.ban\
    k.v1beta1.QueryDenomsMetadataRequest\x1a0.cosmos.bank.v1beta1.QueryDenom\
    sMetadataResponse\",\x82\xd3\xe4\x93\x02&\x12$/cosmos/bank/v1beta1/denom\
    s_metadataB+Z)github.com/cosmos/cosmos-sdk/x/bank/typesJ\xf80\n\x07\x12\
    \x05\0\0\xc0\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x03\04\n\t\n\x02\x03\x01\x12\x03\
    \x04\0\x1e\n\t\n\x02\x03\x02\x12\x03\x05\0&\n\t\n\x02\x03\x03\x12\x03\
    \x06\0(\n\t\n\x02\x03\x04\x12\x03\x07\0(\n\x08\n\x01\x08\x12\x03\t\0@\n\
    \t\n\x02\x08\x0b\x12\x03\t\0@\n5\n\x02\x06\0\x12\x04\x0c\05\x01\x1a)\x20\
    Query\x20defines\x20the\x20gRPC\x20querier\x20service.\n\n\n\n\x03\x06\0\
    \x01\x12\x03\x0c\x08\r\nR\n\x04\x06\0\x02\0\x12\x04\x0e\x02\x10\x03\x1aD\
    \x20Balance\x20queries\x20the\x20balance\x20of\x20a\x20single\x20coin\
    \x20for\x20a\x20single\x20account.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x0e\x06\r\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0e\x0e!\n\x0c\n\x05\x06\
    \0\x02\0\x03\x12\x03\x0e,@\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x0f\x04V\
    \n\x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x0f\x04V\nR\n\x04\
    \x06\0\x02\x01\x12\x04\x13\x02\x15\x03\x1aD\x20AllBalances\x20queries\
    \x20the\x20balance\x20of\x20all\x20coins\x20for\x20a\x20single\x20accoun\
    t.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x13\x06\x11\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x13\x12)\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x134\
    L\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03\x14\x04M\n\x11\n\n\x06\0\x02\x01\
    \x04\xb0\xca\xbc\"\x02\x12\x03\x14\x04M\nb\n\x04\x06\0\x02\x02\x12\x04\
    \x19\x02\x1b\x03\x1aT\x20SpendableBalances\x20queries\x20the\x20spenable\
    \x20balance\x20of\x20all\x20coins\x20for\x20a\x20single\n\x20account.\n\
    \n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x19\x06\x17\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03\x19\x185\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x19@^\n\
    \x0c\n\x05\x06\0\x02\x02\x04\x12\x03\x1a\x04W\n\x11\n\n\x06\0\x02\x02\
    \x04\xb0\xca\xbc\"\x02\x12\x03\x1a\x04W\nB\n\x04\x06\0\x02\x03\x12\x04\
    \x1e\x02\x20\x03\x1a4\x20TotalSupply\x20queries\x20the\x20total\x20suppl\
    y\x20of\x20all\x20coins.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x1e\x06\
    \x11\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x1e\x12)\n\x0c\n\x05\x06\0\
    \x02\x03\x03\x12\x03\x1e4L\n\x0c\n\x05\x06\0\x02\x03\x04\x12\x03\x1f\x04\
    A\n\x11\n\n\x06\0\x02\x03\x04\xb0\xca\xbc\"\x02\x12\x03\x1f\x04A\n=\n\
    \x04\x06\0\x02\x04\x12\x04#\x02%\x03\x1a/\x20SupplyOf\x20queries\x20the\
    \x20supply\x20of\x20a\x20single\x20coin.\n\n\x0c\n\x05\x06\0\x02\x04\x01\
    \x12\x03#\x06\x0e\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03#\x0f#\n\x0c\n\
    \x05\x06\0\x02\x04\x03\x12\x03#.C\n\x0c\n\x05\x06\0\x02\x04\x04\x12\x03$\
    \x04I\n\x11\n\n\x06\0\x02\x04\x04\xb0\xca\xbc\"\x02\x12\x03$\x04I\n?\n\
    \x04\x06\0\x02\x05\x12\x04(\x02*\x03\x1a1\x20Params\x20queries\x20the\
    \x20parameters\x20of\x20x/bank\x20module.\n\n\x0c\n\x05\x06\0\x02\x05\
    \x01\x12\x03(\x06\x0c\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03(\r\x1f\n\x0c\
    \n\x05\x06\0\x02\x05\x03\x12\x03(*=\n\x0c\n\x05\x06\0\x02\x05\x04\x12\
    \x03)\x04A\n\x11\n\n\x06\0\x02\x05\x04\xb0\xca\xbc\"\x02\x12\x03)\x04A\n\
    X\n\x04\x06\0\x02\x06\x12\x04-\x02/\x03\x1aJ\x20DenomsMetadata\x20querie\
    s\x20the\x20client\x20metadata\x20of\x20a\x20given\x20coin\x20denominati\
    on.\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03-\x06\x13\n\x0c\n\x05\x06\0\
    \x02\x06\x02\x12\x03-\x14-\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03-8R\n\
    \x0c\n\x05\x06\0\x02\x06\x04\x12\x03.\x04R\n\x11\n\n\x06\0\x02\x06\x04\
    \xb0\xca\xbc\"\x02\x12\x03.\x04R\na\n\x04\x06\0\x02\x07\x12\x042\x024\
    \x03\x1aS\x20DenomsMetadata\x20queries\x20the\x20client\x20metadata\x20f\
    or\x20all\x20registered\x20coin\x20denominations.\n\n\x0c\n\x05\x06\0\
    \x02\x07\x01\x12\x032\x06\x14\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x032\x15\
    /\n\x0c\n\x05\x06\0\x02\x07\x03\x12\x032:U\n\x0c\n\x05\x06\0\x02\x07\x04\
    \x12\x033\x04J\n\x11\n\n\x06\0\x02\x07\x04\xb0\xca\xbc\"\x02\x12\x033\
    \x04J\nW\n\x02\x04\0\x12\x048\0A\x01\x1aK\x20QueryBalanceRequest\x20is\
    \x20the\x20request\x20type\x20for\x20the\x20Query/Balance\x20RPC\x20meth\
    od.\n\n\n\n\x03\x04\0\x01\x12\x038\x08\x1b\n\n\n\x03\x04\0\x07\x12\x039\
    \x02#\n\r\n\x06\x04\0\x07\x8d\xf4\x03\x12\x039\x02#\n\n\n\x03\x04\0\x07\
    \x12\x03:\x02-\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03:\x02-\n<\n\x04\
    \x04\0\x02\0\x12\x03=\x02\x15\x1a/\x20address\x20is\x20the\x20address\
    \x20to\x20query\x20balances\x20for.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03=\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03=\t\x10\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03=\x13\x14\n=\n\x04\x04\0\x02\x01\x12\x03@\x02\x13\
    \x1a0\x20denom\x20is\x20the\x20coin\x20denom\x20to\x20query\x20balances\
    \x20for.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03@\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03@\t\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03@\
    \x11\x12\nY\n\x02\x04\x01\x12\x04D\0G\x01\x1aM\x20QueryBalanceResponse\
    \x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Balance\x20RPC\
    \x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03D\x08\x1c\n2\n\x04\x04\x01\
    \x02\0\x12\x03F\x02'\x1a%\x20balance\x20is\x20the\x20balance\x20of\x20th\
    e\x20coin.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03F\x02\x1a\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03F\x1b\"\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03F\
    %&\n[\n\x02\x04\x02\x12\x04J\0S\x01\x1aO\x20QueryBalanceRequest\x20is\
    \x20the\x20request\x20type\x20for\x20the\x20Query/AllBalances\x20RPC\x20\
    method.\n\n\n\n\x03\x04\x02\x01\x12\x03J\x08\x1f\n\n\n\x03\x04\x02\x07\
    \x12\x03K\x02#\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x03K\x02#\n\n\n\x03\
    \x04\x02\x07\x12\x03L\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x03L\
    \x02-\n<\n\x04\x04\x02\x02\0\x12\x03O\x02\x15\x1a/\x20address\x20is\x20t\
    he\x20address\x20to\x20query\x20balances\x20for.\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03O\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03O\t\x10\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03O\x13\x14\nI\n\x04\x04\x02\x02\x01\
    \x12\x03R\x027\x1a<\x20pagination\x20defines\x20an\x20optional\x20pagina\
    tion\x20for\x20the\x20request.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\
    R\x02'\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03R(2\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03R56\nb\n\x02\x04\x03\x12\x04W\0^\x01\x1aV\x20QueryAl\
    lBalancesResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Quer\
    y/AllBalances\x20RPC\n\x20method.\n\n\n\n\x03\x04\x03\x01\x12\x03W\x08\
    \x20\n:\n\x04\x04\x03\x02\0\x12\x04Y\x02Zh\x1a,\x20balances\x20is\x20the\
    \x20balances\x20of\x20all\x20the\x20coins.\n\n\x0c\n\x05\x04\x03\x02\0\
    \x04\x12\x03Y\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03Y\x0b#\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03Y$,\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03Y\
    /0\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03Z\x02g\n\x0f\n\x08\x04\x03\x02\0\
    \x08\xe9\xfb\x03\x12\x03Z\x03\x1f\n\x0f\n\x08\x04\x03\x02\0\x08\xf5\xfb\
    \x03\x12\x03Z!f\nA\n\x04\x04\x03\x02\x01\x12\x03]\x028\x1a4\x20paginatio\
    n\x20defines\x20the\x20pagination\x20in\x20the\x20response.\n\n\x0c\n\
    \x05\x04\x03\x02\x01\x06\x12\x03]\x02(\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03])3\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03]67\n}\n\x02\x04\x04\
    \x12\x04b\0k\x01\x1aq\x20QuerySpendableBalancesRequest\x20defines\x20the\
    \x20gRPC\x20request\x20structure\x20for\x20querying\n\x20an\x20account's\
    \x20spendable\x20balances.\n\n\n\n\x03\x04\x04\x01\x12\x03b\x08%\n\n\n\
    \x03\x04\x04\x07\x12\x03c\x02-\n\r\n\x06\x04\x04\x07\x8d\xf4\x03\x12\x03\
    c\x02-\n\n\n\x03\x04\x04\x07\x12\x03d\x02-\n\r\n\x06\x04\x04\x07\x81\xf4\
    \x03\x12\x03d\x02-\nF\n\x04\x04\x04\x02\0\x12\x03g\x02\x15\x1a9\x20addre\
    ss\x20is\x20the\x20address\x20to\x20query\x20spendable\x20balances\x20fo\
    r.\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03g\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03g\t\x10\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03g\x13\x14\
    \nI\n\x04\x04\x04\x02\x01\x12\x03j\x027\x1a<\x20pagination\x20defines\
    \x20an\x20optional\x20pagination\x20for\x20the\x20request.\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x06\x12\x03j\x02'\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\
    \x03j(2\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03j56\n\x7f\n\x02\x04\x05\
    \x12\x04o\0v\x01\x1as\x20QuerySpendableBalancesResponse\x20defines\x20th\
    e\x20gRPC\x20response\x20structure\x20for\x20querying\n\x20an\x20account\
    's\x20spendable\x20balances.\n\n\n\n\x03\x04\x05\x01\x12\x03o\x08&\nD\n\
    \x04\x04\x05\x02\0\x12\x04q\x02rl\x1a6\x20balances\x20is\x20the\x20spend\
    able\x20balances\x20of\x20all\x20the\x20coins.\n\n\x0c\n\x05\x04\x05\x02\
    \0\x04\x12\x03q\x02\n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03q\x0b#\n\x0c\
    \n\x05\x04\x05\x02\0\x01\x12\x03q$,\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x03q/0\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x03r\x06k\n\x0f\n\x08\x04\x05\
    \x02\0\x08\xe9\xfb\x03\x12\x03r\x07#\n\x0f\n\x08\x04\x05\x02\0\x08\xf5\
    \xfb\x03\x12\x03r%j\nA\n\x04\x04\x05\x02\x01\x12\x03u\x028\x1a4\x20pagin\
    ation\x20defines\x20the\x20pagination\x20in\x20the\x20response.\n\n\x0c\
    \n\x05\x04\x05\x02\x01\x06\x12\x03u\x02(\n\x0c\n\x05\x04\x05\x02\x01\x01\
    \x12\x03u)3\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03u67\na\n\x02\x04\x06\
    \x12\x05z\0\x82\x01\x01\x1aT\x20QueryTotalSupplyRequest\x20is\x20the\x20\
    request\x20type\x20for\x20the\x20Query/TotalSupply\x20RPC\n\x20method.\n\
    \n\n\n\x03\x04\x06\x01\x12\x03z\x08\x1f\n\n\n\x03\x04\x06\x07\x12\x03{\
    \x02#\n\r\n\x06\x04\x06\x07\x8d\xf4\x03\x12\x03{\x02#\n\n\n\x03\x04\x06\
    \x07\x12\x03|\x02-\n\r\n\x06\x04\x06\x07\x81\xf4\x03\x12\x03|\x02-\nc\n\
    \x04\x04\x06\x02\0\x12\x04\x81\x01\x027\x1aU\x20pagination\x20defines\
    \x20an\x20optional\x20pagination\x20for\x20the\x20request.\n\n\x20Since:\
    \x20cosmos-sdk\x200.43\n\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\x81\x01\x02\
    '\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\x81\x01(2\n\r\n\x05\x04\x06\x02\0\
    \x03\x12\x04\x81\x0156\nc\n\x02\x04\x07\x12\x06\x86\x01\0\x8f\x01\x01\
    \x1aU\x20QueryTotalSupplyResponse\x20is\x20the\x20response\x20type\x20fo\
    r\x20the\x20Query/TotalSupply\x20RPC\n\x20method\n\n\x0b\n\x03\x04\x07\
    \x01\x12\x04\x86\x01\x08\x20\n3\n\x04\x04\x07\x02\0\x12\x06\x88\x01\x02\
    \x89\x01h\x1a#\x20supply\x20is\x20the\x20supply\x20of\x20the\x20coins\n\
    \n\r\n\x05\x04\x07\x02\0\x04\x12\x04\x88\x01\x02\n\n\r\n\x05\x04\x07\x02\
    \0\x06\x12\x04\x88\x01\x0b#\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\x88\x01$\
    *\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\x88\x01-.\n\r\n\x05\x04\x07\x02\0\
    \x08\x12\x04\x89\x01\x02g\n\x10\n\x08\x04\x07\x02\0\x08\xe9\xfb\x03\x12\
    \x04\x89\x01\x03\x1f\n\x10\n\x08\x04\x07\x02\0\x08\xf5\xfb\x03\x12\x04\
    \x89\x01!f\n[\n\x04\x04\x07\x02\x01\x12\x04\x8e\x01\x028\x1aM\x20paginat\
    ion\x20defines\x20the\x20pagination\x20in\x20the\x20response.\n\n\x20Sin\
    ce:\x20cosmos-sdk\x200.43\n\n\r\n\x05\x04\x07\x02\x01\x06\x12\x04\x8e\
    \x01\x02(\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\x8e\x01)3\n\r\n\x05\x04\
    \x07\x02\x01\x03\x12\x04\x8e\x0167\n[\n\x02\x04\x08\x12\x06\x92\x01\0\
    \x95\x01\x01\x1aM\x20QuerySupplyOfRequest\x20is\x20the\x20request\x20typ\
    e\x20for\x20the\x20Query/SupplyOf\x20RPC\x20method.\n\n\x0b\n\x03\x04\
    \x08\x01\x12\x04\x92\x01\x08\x1c\n>\n\x04\x04\x08\x02\0\x12\x04\x94\x01\
    \x02\x13\x1a0\x20denom\x20is\x20the\x20coin\x20denom\x20to\x20query\x20b\
    alances\x20for.\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x94\x01\x02\x08\n\
    \r\n\x05\x04\x08\x02\0\x01\x12\x04\x94\x01\t\x0e\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\x94\x01\x11\x12\n]\n\x02\x04\t\x12\x06\x98\x01\0\x9b\x01\
    \x01\x1aO\x20QuerySupplyOfResponse\x20is\x20the\x20response\x20type\x20f\
    or\x20the\x20Query/SupplyOf\x20RPC\x20method.\n\n\x0b\n\x03\x04\t\x01\
    \x12\x04\x98\x01\x08\x1d\n1\n\x04\x04\t\x02\0\x12\x04\x9a\x01\x02E\x1a#\
    \x20amount\x20is\x20the\x20supply\x20of\x20the\x20coin.\n\n\r\n\x05\x04\
    \t\x02\0\x06\x12\x04\x9a\x01\x02\x1a\n\r\n\x05\x04\t\x02\0\x01\x12\x04\
    \x9a\x01\x1b!\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x9a\x01$%\n\r\n\x05\x04\
    \t\x02\0\x08\x12\x04\x9a\x01&D\n\x10\n\x08\x04\t\x02\0\x08\xe9\xfb\x03\
    \x12\x04\x9a\x01'C\nY\n\x02\x04\n\x12\x04\x9e\x01\0\x1d\x1aM\x20QueryPar\
    amsRequest\x20defines\x20the\x20request\x20type\x20for\x20querying\x20x/\
    bank\x20parameters.\n\n\x0b\n\x03\x04\n\x01\x12\x04\x9e\x01\x08\x1a\n]\n\
    \x02\x04\x0b\x12\x06\xa1\x01\0\xa3\x01\x01\x1aO\x20QueryParamsResponse\
    \x20defines\x20the\x20response\x20type\x20for\x20querying\x20x/bank\x20p\
    arameters.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xa1\x01\x08\x1b\n\x0c\n\x04\
    \x04\x0b\x02\0\x12\x04\xa2\x01\x023\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\
    \xa2\x01\x02\x08\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xa2\x01\t\x0f\n\r\n\
    \x05\x04\x0b\x02\0\x03\x12\x04\xa2\x01\x12\x13\n\r\n\x05\x04\x0b\x02\0\
    \x08\x12\x04\xa2\x01\x142\n\x10\n\x08\x04\x0b\x02\0\x08\xe9\xfb\x03\x12\
    \x04\xa2\x01\x151\ng\n\x02\x04\x0c\x12\x06\xa6\x01\0\xa9\x01\x01\x1aY\
    \x20QueryDenomsMetadataRequest\x20is\x20the\x20request\x20type\x20for\
    \x20the\x20Query/DenomsMetadata\x20RPC\x20method.\n\n\x0b\n\x03\x04\x0c\
    \x01\x12\x04\xa6\x01\x08\"\nJ\n\x04\x04\x0c\x02\0\x12\x04\xa8\x01\x027\
    \x1a<\x20pagination\x20defines\x20an\x20optional\x20pagination\x20for\
    \x20the\x20request.\n\n\r\n\x05\x04\x0c\x02\0\x06\x12\x04\xa8\x01\x02'\n\
    \r\n\x05\x04\x0c\x02\0\x01\x12\x04\xa8\x01(2\n\r\n\x05\x04\x0c\x02\0\x03\
    \x12\x04\xa8\x0156\nj\n\x02\x04\r\x12\x06\xad\x01\0\xb3\x01\x01\x1a\\\
    \x20QueryDenomsMetadataResponse\x20is\x20the\x20response\x20type\x20for\
    \x20the\x20Query/DenomsMetadata\x20RPC\n\x20method.\n\n\x0b\n\x03\x04\r\
    \x01\x12\x04\xad\x01\x08#\nW\n\x04\x04\r\x02\0\x12\x04\xaf\x01\x02A\x1aI\
    \x20metadata\x20provides\x20the\x20client\x20information\x20for\x20all\
    \x20the\x20registered\x20tokens.\n\n\r\n\x05\x04\r\x02\0\x04\x12\x04\xaf\
    \x01\x02\n\n\r\n\x05\x04\r\x02\0\x06\x12\x04\xaf\x01\x0b\x13\n\r\n\x05\
    \x04\r\x02\0\x01\x12\x04\xaf\x01\x14\x1d\n\r\n\x05\x04\r\x02\0\x03\x12\
    \x04\xaf\x01\x20!\n\r\n\x05\x04\r\x02\0\x08\x12\x04\xaf\x01\"@\n\x10\n\
    \x08\x04\r\x02\0\x08\xe9\xfb\x03\x12\x04\xaf\x01#?\nB\n\x04\x04\r\x02\
    \x01\x12\x04\xb2\x01\x028\x1a4\x20pagination\x20defines\x20the\x20pagina\
    tion\x20in\x20the\x20response.\n\n\r\n\x05\x04\r\x02\x01\x06\x12\x04\xb2\
    \x01\x02(\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\xb2\x01)3\n\r\n\x05\x04\r\
    \x02\x01\x03\x12\x04\xb2\x0167\ne\n\x02\x04\x0e\x12\x06\xb6\x01\0\xb9\
    \x01\x01\x1aW\x20QueryDenomMetadataRequest\x20is\x20the\x20request\x20ty\
    pe\x20for\x20the\x20Query/DenomMetadata\x20RPC\x20method.\n\n\x0b\n\x03\
    \x04\x0e\x01\x12\x04\xb6\x01\x08!\nB\n\x04\x04\x0e\x02\0\x12\x04\xb8\x01\
    \x02\x13\x1a4\x20denom\x20is\x20the\x20coin\x20denom\x20to\x20query\x20t\
    he\x20metadata\x20for.\n\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\xb8\x01\x02\
    \x08\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xb8\x01\t\x0e\n\r\n\x05\x04\x0e\
    \x02\0\x03\x12\x04\xb8\x01\x11\x12\nh\n\x02\x04\x0f\x12\x06\xbd\x01\0\
    \xc0\x01\x01\x1aZ\x20QueryDenomMetadataResponse\x20is\x20the\x20response\
    \x20type\x20for\x20the\x20Query/DenomMetadata\x20RPC\n\x20method.\n\n\
    \x0b\n\x03\x04\x0f\x01\x12\x04\xbd\x01\x08\"\nc\n\x04\x04\x0f\x02\0\x12\
    \x04\xbf\x01\x027\x1aU\x20metadata\x20describes\x20and\x20provides\x20al\
    l\x20the\x20client\x20information\x20for\x20the\x20requested\x20token.\n\
    \n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\xbf\x01\x02\n\n\r\n\x05\x04\x0f\x02\
    \0\x01\x12\x04\xbf\x01\x0b\x13\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xbf\
    \x01\x16\x17\n\r\n\x05\x04\x0f\x02\0\x08\x12\x04\xbf\x01\x186\n\x10\n\
    \x08\x04\x0f\x02\0\x08\xe9\xfb\x03\x12\x04\xbf\x01\x195b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::bank::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(QueryBalanceRequest::generated_message_descriptor_data());
            messages.push(QueryBalanceResponse::generated_message_descriptor_data());
            messages.push(QueryAllBalancesRequest::generated_message_descriptor_data());
            messages.push(QueryAllBalancesResponse::generated_message_descriptor_data());
            messages.push(QuerySpendableBalancesRequest::generated_message_descriptor_data());
            messages.push(QuerySpendableBalancesResponse::generated_message_descriptor_data());
            messages.push(QueryTotalSupplyRequest::generated_message_descriptor_data());
            messages.push(QueryTotalSupplyResponse::generated_message_descriptor_data());
            messages.push(QuerySupplyOfRequest::generated_message_descriptor_data());
            messages.push(QuerySupplyOfResponse::generated_message_descriptor_data());
            messages.push(QueryParamsRequest::generated_message_descriptor_data());
            messages.push(QueryParamsResponse::generated_message_descriptor_data());
            messages.push(QueryDenomsMetadataRequest::generated_message_descriptor_data());
            messages.push(QueryDenomsMetadataResponse::generated_message_descriptor_data());
            messages.push(QueryDenomMetadataRequest::generated_message_descriptor_data());
            messages.push(QueryDenomMetadataResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
