// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/bank/v1beta1/bank.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Params defines the parameters for the bank module.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.Params)
pub struct Params {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Params.send_enabled)
    pub send_enabled: ::std::vec::Vec<SendEnabled>,
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Params.default_send_enabled)
    pub default_send_enabled: bool,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.Params.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "send_enabled",
            |m: &Params| { &m.send_enabled },
            |m: &mut Params| { &mut m.send_enabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "default_send_enabled",
            |m: &Params| { &m.default_send_enabled },
            |m: &mut Params| { &mut m.default_send_enabled },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Params>(
            "Params",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Params {
    const NAME: &'static str = "Params";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.send_enabled.push(is.read_message()?);
                },
                16 => {
                    self.default_send_enabled = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.send_enabled {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.default_send_enabled != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.send_enabled {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.default_send_enabled != false {
            os.write_bool(2, self.default_send_enabled)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Params {
        Params::new()
    }

    fn clear(&mut self) {
        self.send_enabled.clear();
        self.default_send_enabled = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Params {
        static instance: Params = Params {
            send_enabled: ::std::vec::Vec::new(),
            default_send_enabled: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Params {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Params").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SendEnabled maps coin denom to a send_enabled status (whether a denom is
///  sendable).
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.SendEnabled)
pub struct SendEnabled {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.SendEnabled.denom)
    pub denom: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.SendEnabled.enabled)
    pub enabled: bool,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.SendEnabled.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendEnabled {
    fn default() -> &'a SendEnabled {
        <SendEnabled as ::protobuf::Message>::default_instance()
    }
}

impl SendEnabled {
    pub fn new() -> SendEnabled {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "denom",
            |m: &SendEnabled| { &m.denom },
            |m: &mut SendEnabled| { &mut m.denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enabled",
            |m: &SendEnabled| { &m.enabled },
            |m: &mut SendEnabled| { &mut m.enabled },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendEnabled>(
            "SendEnabled",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendEnabled {
    const NAME: &'static str = "SendEnabled";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.denom = is.read_string()?;
                },
                16 => {
                    self.enabled = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if self.enabled != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if self.enabled != false {
            os.write_bool(2, self.enabled)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendEnabled {
        SendEnabled::new()
    }

    fn clear(&mut self) {
        self.denom.clear();
        self.enabled = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendEnabled {
        static instance: SendEnabled = SendEnabled {
            denom: ::std::string::String::new(),
            enabled: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendEnabled {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendEnabled").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendEnabled {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendEnabled {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Input models transaction input.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.Input)
pub struct Input {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Input.address)
    pub address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Input.coins)
    pub coins: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.Input.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Input {
    fn default() -> &'a Input {
        <Input as ::protobuf::Message>::default_instance()
    }
}

impl Input {
    pub fn new() -> Input {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &Input| { &m.address },
            |m: &mut Input| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "coins",
            |m: &Input| { &m.coins },
            |m: &mut Input| { &mut m.coins },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Input>(
            "Input",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Input {
    const NAME: &'static str = "Input";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    self.coins.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        for value in &self.coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        for v in &self.coins {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Input {
        Input::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.coins.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Input {
        static instance: Input = Input {
            address: ::std::string::String::new(),
            coins: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Input {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Input").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Input {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Input {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Output models transaction outputs.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.Output)
pub struct Output {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Output.address)
    pub address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Output.coins)
    pub coins: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.Output.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Output {
    fn default() -> &'a Output {
        <Output as ::protobuf::Message>::default_instance()
    }
}

impl Output {
    pub fn new() -> Output {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &Output| { &m.address },
            |m: &mut Output| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "coins",
            |m: &Output| { &m.coins },
            |m: &mut Output| { &mut m.coins },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Output>(
            "Output",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Output {
    const NAME: &'static str = "Output";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    self.coins.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        for value in &self.coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        for v in &self.coins {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Output {
        Output::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.coins.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Output {
        static instance: Output = Output {
            address: ::std::string::String::new(),
            coins: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Output {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Output").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Output {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Output {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Supply represents a struct that passively keeps track of the total supply
///  amounts in the network.
///  This message is deprecated now that supply is indexed by denom.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.Supply)
pub struct Supply {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Supply.total)
    pub total: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.Supply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Supply {
    fn default() -> &'a Supply {
        <Supply as ::protobuf::Message>::default_instance()
    }
}

impl Supply {
    pub fn new() -> Supply {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "total",
            |m: &Supply| { &m.total },
            |m: &mut Supply| { &mut m.total },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Supply>(
            "Supply",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Supply {
    const NAME: &'static str = "Supply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.total.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.total {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.total {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Supply {
        Supply::new()
    }

    fn clear(&mut self) {
        self.total.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Supply {
        static instance: Supply = Supply {
            total: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Supply {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Supply").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Supply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Supply {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  DenomUnit represents a struct that describes a given
///  denomination unit of the basic token.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.DenomUnit)
pub struct DenomUnit {
    // message fields
    ///  denom represents the string name of the given denom unit (e.g uatom).
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.DenomUnit.denom)
    pub denom: ::std::string::String,
    ///  exponent represents power of 10 exponent that one must
    ///  raise the base_denom to in order to equal the given DenomUnit's denom
    ///  1 denom = 1^exponent base_denom
    ///  (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
    ///  exponent = 6, thus: 1 atom = 10^6 uatom).
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.DenomUnit.exponent)
    pub exponent: u32,
    ///  aliases is a list of string aliases for the given denom
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.DenomUnit.aliases)
    pub aliases: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.DenomUnit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DenomUnit {
    fn default() -> &'a DenomUnit {
        <DenomUnit as ::protobuf::Message>::default_instance()
    }
}

impl DenomUnit {
    pub fn new() -> DenomUnit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "denom",
            |m: &DenomUnit| { &m.denom },
            |m: &mut DenomUnit| { &mut m.denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exponent",
            |m: &DenomUnit| { &m.exponent },
            |m: &mut DenomUnit| { &mut m.exponent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "aliases",
            |m: &DenomUnit| { &m.aliases },
            |m: &mut DenomUnit| { &mut m.aliases },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DenomUnit>(
            "DenomUnit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DenomUnit {
    const NAME: &'static str = "DenomUnit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.denom = is.read_string()?;
                },
                16 => {
                    self.exponent = is.read_uint32()?;
                },
                26 => {
                    self.aliases.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if self.exponent != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.exponent);
        }
        for value in &self.aliases {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if self.exponent != 0 {
            os.write_uint32(2, self.exponent)?;
        }
        for v in &self.aliases {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DenomUnit {
        DenomUnit::new()
    }

    fn clear(&mut self) {
        self.denom.clear();
        self.exponent = 0;
        self.aliases.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DenomUnit {
        static instance: DenomUnit = DenomUnit {
            denom: ::std::string::String::new(),
            exponent: 0,
            aliases: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DenomUnit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DenomUnit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DenomUnit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DenomUnit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Metadata represents a struct that describes
///  a basic token.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.Metadata)
pub struct Metadata {
    // message fields
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Metadata.description)
    pub description: ::std::string::String,
    ///  denom_units represents the list of DenomUnit's for a given coin
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Metadata.denom_units)
    pub denom_units: ::std::vec::Vec<DenomUnit>,
    ///  base represents the base denom (should be the DenomUnit with exponent = 0).
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Metadata.base)
    pub base: ::std::string::String,
    ///  display indicates the suggested denom that should be
    ///  displayed in clients.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Metadata.display)
    pub display: ::std::string::String,
    ///  name defines the name of the token (eg: Cosmos Atom)
    ///
    ///  Since: cosmos-sdk 0.43
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Metadata.name)
    pub name: ::std::string::String,
    ///  symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
    ///  be the same as the display.
    ///
    ///  Since: cosmos-sdk 0.43
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Metadata.symbol)
    pub symbol: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.Metadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Metadata| { &m.description },
            |m: &mut Metadata| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "denom_units",
            |m: &Metadata| { &m.denom_units },
            |m: &mut Metadata| { &mut m.denom_units },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base",
            |m: &Metadata| { &m.base },
            |m: &mut Metadata| { &mut m.base },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display",
            |m: &Metadata| { &m.display },
            |m: &mut Metadata| { &mut m.display },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Metadata| { &m.name },
            |m: &mut Metadata| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "symbol",
            |m: &Metadata| { &m.symbol },
            |m: &mut Metadata| { &mut m.symbol },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metadata>(
            "Metadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metadata {
    const NAME: &'static str = "Metadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.description = is.read_string()?;
                },
                18 => {
                    self.denom_units.push(is.read_message()?);
                },
                26 => {
                    self.base = is.read_string()?;
                },
                34 => {
                    self.display = is.read_string()?;
                },
                42 => {
                    self.name = is.read_string()?;
                },
                50 => {
                    self.symbol = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        for value in &self.denom_units {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.base.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.base);
        }
        if !self.display.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.display);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.symbol);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        for v in &self.denom_units {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.base.is_empty() {
            os.write_string(3, &self.base)?;
        }
        if !self.display.is_empty() {
            os.write_string(4, &self.display)?;
        }
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if !self.symbol.is_empty() {
            os.write_string(6, &self.symbol)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn clear(&mut self) {
        self.description.clear();
        self.denom_units.clear();
        self.base.clear();
        self.display.clear();
        self.name.clear();
        self.symbol.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metadata {
        static instance: Metadata = Metadata {
            description: ::std::string::String::new(),
            denom_units: ::std::vec::Vec::new(),
            base: ::std::string::String::new(),
            display: ::std::string::String::new(),
            name: ::std::string::String::new(),
            symbol: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Metadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecosmos/bank/v1beta1/bank.proto\x12\x13cosmos.bank.v1beta1\x1a\x14g\
    ogoproto/gogo.proto\x1a\x19cosmos_proto/cosmos.proto\x1a\x1ecosmos/base/\
    v1beta1/coin.proto\"\xd3\x01\n\x06Params\x12f\n\x0csend_enabled\x18\x01\
    \x20\x03(\x0b2\x20.cosmos.bank.v1beta1.SendEnabledR\x0bsendEnabledB!\xf2\
    \xde\x1f\x1dyaml:\"send_enabled,omitempty\"\x12[\n\x14default_send_enabl\
    ed\x18\x02\x20\x01(\x08R\x12defaultSendEnabledB)\xf2\xde\x1f%yaml:\"defa\
    ult_send_enabled,omitempty\":\x04\x98\xa0\x1f\0\"G\n\x0bSendEnabled\x12\
    \x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12\x18\n\x07enabled\x18\
    \x02\x20\x01(\x08R\x07enabled:\x08\xe8\xa0\x1f\x01\x98\xa0\x1f\0\"\x8e\
    \x01\n\x05Input\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12a\
    \n\x05coins\x18\x02\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x05coins\
    B0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0:\
    \x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x8f\x01\n\x06Output\x12\x18\n\x07addr\
    ess\x18\x01\x20\x01(\tR\x07address\x12a\n\x05coins\x18\x02\x20\x03(\x0b2\
    \x19.cosmos.base.v1beta1.CoinR\x05coinsB0\xaa\xdf\x1f(github.com/cosmos/\
    cosmos-sdk/types.Coins\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\
    \xb3\x01\n\x06Supply\x12a\n\x05total\x18\x01\x20\x03(\x0b2\x19.cosmos.ba\
    se.v1beta1.CoinR\x05totalB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/typ\
    es.Coins\xc8\xde\x1f\0:F\x18\x01\xd2\xb4-8*github.com/cosmos/cosmos-sdk/\
    x/bank/legacy/v040.SupplyI\x88\xa0\x1f\0\xe8\xa0\x1f\x01\"W\n\tDenomUnit\
    \x12\x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12\x1a\n\x08exponent\
    \x18\x02\x20\x01(\rR\x08exponent\x12\x18\n\x07aliases\x18\x03\x20\x03(\t\
    R\x07aliases\"\xc7\x01\n\x08Metadata\x12\x20\n\x0bdescription\x18\x01\
    \x20\x01(\tR\x0bdescription\x12?\n\x0bdenom_units\x18\x02\x20\x03(\x0b2\
    \x1e.cosmos.bank.v1beta1.DenomUnitR\ndenomUnits\x12\x12\n\x04base\x18\
    \x03\x20\x01(\tR\x04base\x12\x18\n\x07display\x18\x04\x20\x01(\tR\x07dis\
    play\x12\x12\n\x04name\x18\x05\x20\x01(\tR\x04name\x12\x16\n\x06symbol\
    \x18\x06\x20\x01(\tR\x06symbolB+Z)github.com/cosmos/cosmos-sdk/x/bank/ty\
    pesJ\x9a\x19\n\x06\x12\x04\0\0_\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\
    \x02\x03\x01\x12\x03\x04\0#\n\t\n\x02\x03\x02\x12\x03\x05\0(\n\x08\n\x01\
    \x08\x12\x03\x07\0@\n\t\n\x02\x08\x0b\x12\x03\x07\0@\n@\n\x02\x04\0\x12\
    \x04\n\0\x0e\x01\x1a4\x20Params\x20defines\x20the\x20parameters\x20for\
    \x20the\x20bank\x20module.\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x0e\n\n\n\
    \x03\x04\0\x07\x12\x03\x0b\x024\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\x03\
    \x0b\x024\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x02k\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x0b\x16\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\x17#\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x0c./\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0c0j\n\x0f\n\x08\
    \x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x0c1i\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\r\x02s\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x02\x06\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\r\x17+\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \r./\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\r0r\n\x0f\n\x08\x04\0\x02\x01\
    \x08\xee\xfb\x03\x12\x03\r1q\nb\n\x02\x04\x01\x12\x04\x12\0\x17\x01\x1aV\
    \x20SendEnabled\x20maps\x20coin\x20denom\x20to\x20a\x20send_enabled\x20s\
    tatus\x20(whether\x20a\x20denom\x20is\n\x20sendable).\n\n\n\n\x03\x04\
    \x01\x01\x12\x03\x12\x08\x13\n\n\n\x03\x04\x01\x07\x12\x03\x13\x02-\n\r\
    \n\x06\x04\x01\x07\x8d\xf4\x03\x12\x03\x13\x02-\n\n\n\x03\x04\x01\x07\
    \x12\x03\x14\x02.\n\r\n\x06\x04\x01\x07\x83\xf4\x03\x12\x03\x14\x02.\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x15\x02*\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x15\t\x0e\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x15()\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x16\x02*\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x16\x02\x06\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x16\t\x10\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x16()\n-\n\x02\x04\x02\x12\x04\x1a\0!\x01\x1a!\x20Input\
    \x20models\x20transaction\x20input.\n\n\n\n\x03\x04\x02\x01\x12\x03\x1a\
    \x08\r\n\n\n\x03\x04\x02\x07\x12\x03\x1b\x02-\n\r\n\x06\x04\x02\x07\x8d\
    \xf4\x03\x12\x03\x1b\x02-\n\n\n\x03\x04\x02\x07\x12\x03\x1c\x02-\n\r\n\
    \x06\x04\x02\x07\x81\xf4\x03\x12\x03\x1c\x02-\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x1e\x02.\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1e\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1e\x0b\x12\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03\x1e,-\n\x0c\n\x04\x04\x02\x02\x01\x12\x04\x1f\x02\x20l\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x1f\x02\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x06\x12\x03\x1f\x0b#\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1f$)\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1f,-\n\x0c\n\x05\x04\x02\x02\
    \x01\x08\x12\x03\x20\x06k\n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\xfb\x03\
    \x12\x03\x20\x07#\n\x0f\n\x08\x04\x02\x02\x01\x08\xf5\xfb\x03\x12\x03\
    \x20%j\n0\n\x02\x04\x03\x12\x04$\0+\x01\x1a$\x20Output\x20models\x20tran\
    saction\x20outputs.\n\n\n\n\x03\x04\x03\x01\x12\x03$\x08\x0e\n\n\n\x03\
    \x04\x03\x07\x12\x03%\x02-\n\r\n\x06\x04\x03\x07\x8d\xf4\x03\x12\x03%\
    \x02-\n\n\n\x03\x04\x03\x07\x12\x03&\x02-\n\r\n\x06\x04\x03\x07\x81\xf4\
    \x03\x12\x03&\x02-\n\x0b\n\x04\x04\x03\x02\0\x12\x03(\x02.\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03(\x0b\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03(,-\n\x0c\n\x04\x04\
    \x03\x02\x01\x12\x04)\x02*l\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03)\x02\
    \n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03)\x0b#\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03)$)\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03),-\n\x0c\n\
    \x05\x04\x03\x02\x01\x08\x12\x03*\x06k\n\x0f\n\x08\x04\x03\x02\x01\x08\
    \xe9\xfb\x03\x12\x03*\x07#\n\x0f\n\x08\x04\x03\x02\x01\x08\xf5\xfb\x03\
    \x12\x03*%j\n\xb2\x01\n\x02\x04\x04\x12\x040\0:\x01\x1a\xa5\x01\x20Suppl\
    y\x20represents\x20a\x20struct\x20that\x20passively\x20keeps\x20track\
    \x20of\x20the\x20total\x20supply\n\x20amounts\x20in\x20the\x20network.\n\
    \x20This\x20message\x20is\x20deprecated\x20now\x20that\x20supply\x20is\
    \x20indexed\x20by\x20denom.\n\n\n\n\x03\x04\x04\x01\x12\x030\x08\x0e\n\n\
    \n\x03\x04\x04\x07\x12\x031\x02\x1b\n\x0b\n\x04\x04\x04\x07\x03\x12\x031\
    \x02\x1b\n\n\n\x03\x04\x04\x07\x12\x033\x02,\n\r\n\x06\x04\x04\x07\x8d\
    \xf4\x03\x12\x033\x02,\n\n\n\x03\x04\x04\x07\x12\x034\x02-\n\r\n\x06\x04\
    \x04\x07\x81\xf4\x03\x12\x034\x02-\n\n\n\x03\x04\x04\x07\x12\x036\x02j\n\
    \r\n\x06\x04\x04\x07\xca\xd6\x05\x12\x036\x02j\n\x0c\n\x04\x04\x04\x02\0\
    \x12\x048\x029l\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x038\x02\n\n\x0c\n\x05\
    \x04\x04\x02\0\x06\x12\x038\x0b#\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x038$\
    )\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x038,-\n\x0c\n\x05\x04\x04\x02\0\x08\
    \x12\x039\x06k\n\x0f\n\x08\x04\x04\x02\0\x08\xe9\xfb\x03\x12\x039\x07#\n\
    \x0f\n\x08\x04\x04\x02\0\x08\xf5\xfb\x03\x12\x039%j\ni\n\x02\x04\x05\x12\
    \x04>\0I\x01\x1a]\x20DenomUnit\x20represents\x20a\x20struct\x20that\x20d\
    escribes\x20a\x20given\n\x20denomination\x20unit\x20of\x20the\x20basic\
    \x20token.\n\n\n\n\x03\x04\x05\x01\x12\x03>\x08\x11\nT\n\x04\x04\x05\x02\
    \0\x12\x03@\x02\x13\x1aG\x20denom\x20represents\x20the\x20string\x20name\
    \x20of\x20the\x20given\x20denom\x20unit\x20(e.g\x20uatom).\n\n\x0c\n\x05\
    \x04\x05\x02\0\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03@\t\x0e\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03@\x11\x12\n\xa6\x02\n\
    \x04\x04\x05\x02\x01\x12\x03F\x02\x16\x1a\x98\x02\x20exponent\x20represe\
    nts\x20power\x20of\x2010\x20exponent\x20that\x20one\x20must\n\x20raise\
    \x20the\x20base_denom\x20to\x20in\x20order\x20to\x20equal\x20the\x20give\
    n\x20DenomUnit's\x20denom\n\x201\x20denom\x20=\x201^exponent\x20base_den\
    om\n\x20(e.g.\x20with\x20a\x20base_denom\x20of\x20uatom,\x20one\x20can\
    \x20create\x20a\x20DenomUnit\x20of\x20'atom'\x20with\n\x20exponent\x20=\
    \x206,\x20thus:\x201\x20atom\x20=\x2010^6\x20uatom).\n\n\x0c\n\x05\x04\
    \x05\x02\x01\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\
    \x03F\t\x11\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03F\x14\x15\nF\n\x04\
    \x04\x05\x02\x02\x12\x03H\x02\x1e\x1a9\x20aliases\x20is\x20a\x20list\x20\
    of\x20string\x20aliases\x20for\x20the\x20given\x20denom\n\n\x0c\n\x05\
    \x04\x05\x02\x02\x04\x12\x03H\x02\n\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\
    \x03H\x0b\x11\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03H\x12\x19\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x03H\x1c\x1d\nI\n\x02\x04\x06\x12\x04M\0_\
    \x01\x1a=\x20Metadata\x20represents\x20a\x20struct\x20that\x20describes\
    \n\x20a\x20basic\x20token.\n\n\n\n\x03\x04\x06\x01\x12\x03M\x08\x10\n\
    \x0b\n\x04\x04\x06\x02\0\x12\x03N\x02\x19\n\x0c\n\x05\x04\x06\x02\0\x05\
    \x12\x03N\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03N\t\x14\n\x0c\n\
    \x05\x04\x06\x02\0\x03\x12\x03N\x17\x18\nN\n\x04\x04\x06\x02\x01\x12\x03\
    P\x02%\x1aA\x20denom_units\x20represents\x20the\x20list\x20of\x20DenomUn\
    it's\x20for\x20a\x20given\x20coin\n\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\
    \x03P\x02\n\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03P\x0b\x14\n\x0c\n\x05\
    \x04\x06\x02\x01\x01\x12\x03P\x15\x20\n\x0c\n\x05\x04\x06\x02\x01\x03\
    \x12\x03P#$\nZ\n\x04\x04\x06\x02\x02\x12\x03R\x02\x12\x1aM\x20base\x20re\
    presents\x20the\x20base\x20denom\x20(should\x20be\x20the\x20DenomUnit\
    \x20with\x20exponent\x20=\x200).\n\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\
    \x03R\x02\x08\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03R\t\r\n\x0c\n\x05\
    \x04\x06\x02\x02\x03\x12\x03R\x10\x11\nZ\n\x04\x04\x06\x02\x03\x12\x03U\
    \x02\x15\x1aM\x20display\x20indicates\x20the\x20suggested\x20denom\x20th\
    at\x20should\x20be\n\x20displayed\x20in\x20clients.\n\n\x0c\n\x05\x04\
    \x06\x02\x03\x05\x12\x03U\x02\x08\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\
    \x03U\t\x10\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03U\x13\x14\n\\\n\x04\
    \x04\x06\x02\x04\x12\x03Y\x02\x12\x1aO\x20name\x20defines\x20the\x20name\
    \x20of\x20the\x20token\x20(eg:\x20Cosmos\x20Atom)\n\n\x20Since:\x20cosmo\
    s-sdk\x200.43\n\n\x0c\n\x05\x04\x06\x02\x04\x05\x12\x03Y\x02\x08\n\x0c\n\
    \x05\x04\x06\x02\x04\x01\x12\x03Y\t\r\n\x0c\n\x05\x04\x06\x02\x04\x03\
    \x12\x03Y\x10\x11\n\x90\x01\n\x04\x04\x06\x02\x05\x12\x03^\x02\x14\x1a\
    \x82\x01\x20symbol\x20is\x20the\x20token\x20symbol\x20usually\x20shown\
    \x20on\x20exchanges\x20(eg:\x20ATOM).\x20This\x20can\n\x20be\x20the\x20s\
    ame\x20as\x20the\x20display.\n\n\x20Since:\x20cosmos-sdk\x200.43\n\n\x0c\
    \n\x05\x04\x06\x02\x05\x05\x12\x03^\x02\x08\n\x0c\n\x05\x04\x06\x02\x05\
    \x01\x12\x03^\t\x0f\n\x0c\n\x05\x04\x06\x02\x05\x03\x12\x03^\x12\x13b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Params::generated_message_descriptor_data());
            messages.push(SendEnabled::generated_message_descriptor_data());
            messages.push(Input::generated_message_descriptor_data());
            messages.push(Output::generated_message_descriptor_data());
            messages.push(Supply::generated_message_descriptor_data());
            messages.push(DenomUnit::generated_message_descriptor_data());
            messages.push(Metadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
