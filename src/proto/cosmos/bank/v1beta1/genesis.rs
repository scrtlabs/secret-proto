// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/bank/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState defines the bank module's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.GenesisState)
pub struct GenesisState {
    // message fields
    ///  params defines all the paramaters of the module.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.GenesisState.params)
    pub params: ::protobuf::MessageField<super::bank::Params>,
    ///  balances is an array containing the balances of all the accounts.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.GenesisState.balances)
    pub balances: ::std::vec::Vec<Balance>,
    ///  supply represents the total supply. If it is left empty, then supply will be calculated based on the provided
    ///  balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.GenesisState.supply)
    pub supply: ::std::vec::Vec<super::coin::Coin>,
    ///  denom_metadata defines the metadata of the differents coins.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.GenesisState.denom_metadata)
    pub denom_metadata: ::std::vec::Vec<super::bank::Metadata>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::bank::Params>(
            "params",
            |m: &GenesisState| { &m.params },
            |m: &mut GenesisState| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "balances",
            |m: &GenesisState| { &m.balances },
            |m: &mut GenesisState| { &mut m.balances },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "supply",
            |m: &GenesisState| { &m.supply },
            |m: &mut GenesisState| { &mut m.supply },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "denom_metadata",
            |m: &GenesisState| { &m.denom_metadata },
            |m: &mut GenesisState| { &mut m.denom_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                18 => {
                    self.balances.push(is.read_message()?);
                },
                26 => {
                    self.supply.push(is.read_message()?);
                },
                34 => {
                    self.denom_metadata.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.balances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.supply {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.denom_metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.balances {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.supply {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.denom_metadata {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.balances.clear();
        self.supply.clear();
        self.denom_metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            params: ::protobuf::MessageField::none(),
            balances: ::std::vec::Vec::new(),
            supply: ::std::vec::Vec::new(),
            denom_metadata: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Balance defines an account address and balance pair used in the bank module's
///  genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.bank.v1beta1.Balance)
pub struct Balance {
    // message fields
    ///  address is the address of the balance holder.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Balance.address)
    pub address: ::std::string::String,
    ///  coins defines the different coins this balance holds.
    // @@protoc_insertion_point(field:cosmos.bank.v1beta1.Balance.coins)
    pub coins: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.bank.v1beta1.Balance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Balance {
    fn default() -> &'a Balance {
        <Balance as ::protobuf::Message>::default_instance()
    }
}

impl Balance {
    pub fn new() -> Balance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &Balance| { &m.address },
            |m: &mut Balance| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "coins",
            |m: &Balance| { &m.coins },
            |m: &mut Balance| { &mut m.coins },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Balance>(
            "Balance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Balance {
    const NAME: &'static str = "Balance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    self.coins.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        for value in &self.coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        for v in &self.coins {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Balance {
        Balance::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.coins.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Balance {
        static instance: Balance = Balance {
            address: ::std::string::String::new(),
            coins: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Balance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Balance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Balance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Balance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!cosmos/bank/v1beta1/genesis.proto\x12\x13cosmos.bank.v1beta1\x1a\x14g\
    ogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a\x1ecosmos/\
    bank/v1beta1/bank.proto\"\xd3\x02\n\x0cGenesisState\x129\n\x06params\x18\
    \x01\x20\x01(\x0b2\x1b.cosmos.bank.v1beta1.ParamsR\x06paramsB\x04\xc8\
    \xde\x1f\0\x12>\n\x08balances\x18\x02\x20\x03(\x0b2\x1c.cosmos.bank.v1be\
    ta1.BalanceR\x08balancesB\x04\xc8\xde\x1f\0\x12c\n\x06supply\x18\x03\x20\
    \x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06supplyB0\xaa\xdf\x1f(github.\
    com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\x12c\n\x0edenom_metadata\
    \x18\x04\x20\x03(\x0b2\x1d.cosmos.bank.v1beta1.MetadataR\rdenomMetadataB\
    \x1d\xf2\xde\x1f\x15yaml:\"denom_metadata\"\xc8\xde\x1f\0\"\x90\x01\n\
    \x07Balance\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12a\n\
    \x05coins\x18\x02\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x05coinsB0\
    \xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0:\x08\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0B+Z)github.com/cosmos/cosmos-sdk/x/bank/type\
    sJ\x9d\x0b\n\x06\x12\x04\0\0&\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\
    \x03\x01\x12\x03\x04\0(\n\t\n\x02\x03\x02\x12\x03\x05\0(\n\x08\n\x01\x08\
    \x12\x03\x07\0@\n\t\n\x02\x08\x0b\x12\x03\x07\0@\nC\n\x02\x04\0\x12\x04\
    \n\0\x18\x01\x1a7\x20GenesisState\x20defines\x20the\x20bank\x20module's\
    \x20genesis\x20state.\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x14\n?\n\x04\
    \x04\0\x02\0\x12\x03\x0c\x023\x1a2\x20params\x20defines\x20all\x20the\
    \x20paramaters\x20of\x20the\x20module.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\t\x0f\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x0c\x12\x13\n\x0c\n\x05\x04\0\x02\0\x08\x12\
    \x03\x0c\x142\n\x0f\n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\x0c\x151\n\
    P\n\x04\x04\0\x02\x01\x12\x03\x0f\x02?\x1aC\x20balances\x20is\x20an\x20a\
    rray\x20containing\x20the\x20balances\x20of\x20all\x20the\x20accounts.\n\
    \n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03\x0f\x0b\x12\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\
    \x13\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f\x1e\x1f\n\x0c\n\x05\
    \x04\0\x02\x01\x08\x12\x03\x0f\x20>\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\
    \xfb\x03\x12\x03\x0f!=\n\xe1\x01\n\x04\x04\0\x02\x02\x12\x04\x13\x02\x14\
    l\x1a\xd2\x01\x20supply\x20represents\x20the\x20total\x20supply.\x20If\
    \x20it\x20is\x20left\x20empty,\x20then\x20supply\x20will\x20be\x20calcul\
    ated\x20based\x20on\x20the\x20provided\n\x20balances.\x20Otherwise,\x20i\
    t\x20will\x20be\x20used\x20to\x20validate\x20that\x20the\x20sum\x20of\
    \x20the\x20balances\x20equals\x20this\x20amount.\n\n\x0c\n\x05\x04\0\x02\
    \x02\x04\x12\x03\x13\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x13\x0b\
    #\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x13$*\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\x13-.\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x14\x06k\n\x0f\
    \n\x08\x04\0\x02\x02\x08\xf5\xfb\x03\x12\x03\x14\x07L\n\x0f\n\x08\x04\0\
    \x02\x02\x08\xe9\xfb\x03\x12\x03\x14Nj\nK\n\x04\x04\0\x02\x03\x12\x03\
    \x17\x02x\x1a>\x20denom_metadata\x20defines\x20the\x20metadata\x20of\x20\
    the\x20differents\x20coins.\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x17\
    \x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x17\x0b\x13\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03\x17\x14\"\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x17%&\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x17'w\n\x0f\n\x08\x04\0\x02\
    \x03\x08\xee\xfb\x03\x12\x03\x17(X\n\x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\
    \x03\x12\x03\x17Zv\nk\n\x02\x04\x01\x12\x04\x1c\0&\x01\x1a_\x20Balance\
    \x20defines\x20an\x20account\x20address\x20and\x20balance\x20pair\x20use\
    d\x20in\x20the\x20bank\x20module's\n\x20genesis\x20state.\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x1c\x08\x0f\n\n\n\x03\x04\x01\x07\x12\x03\x1d\x02-\
    \n\r\n\x06\x04\x01\x07\x8d\xf4\x03\x12\x03\x1d\x02-\n\n\n\x03\x04\x01\
    \x07\x12\x03\x1e\x02-\n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03\x1e\x02-\
    \n<\n\x04\x04\x01\x02\0\x12\x03!\x02\x15\x1a/\x20address\x20is\x20the\
    \x20address\x20of\x20the\x20balance\x20holder.\n\n\x0c\n\x05\x04\x01\x02\
    \0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03!\t\x10\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03!\x13\x14\nE\n\x04\x04\x01\x02\x01\
    \x12\x04$\x02%l\x1a7\x20coins\x20defines\x20the\x20different\x20coins\
    \x20this\x20balance\x20holds.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03$\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03$\x0b#\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03$$)\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03$,-\n\x0c\
    \n\x05\x04\x01\x02\x01\x08\x12\x03%\x06k\n\x0f\n\x08\x04\x01\x02\x01\x08\
    \xf5\xfb\x03\x12\x03%\x07L\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\x03\
    \x12\x03%Njb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::bank::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(GenesisState::generated_message_descriptor_data());
            messages.push(Balance::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
