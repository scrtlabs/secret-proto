// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/gov/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary
///  proposal Content.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.MsgSubmitProposal)
pub struct MsgSubmitProposal {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgSubmitProposal.content)
    pub content: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgSubmitProposal.initial_deposit)
    pub initial_deposit: ::std::vec::Vec<super::coin::Coin>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgSubmitProposal.proposer)
    pub proposer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.MsgSubmitProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSubmitProposal {
    fn default() -> &'a MsgSubmitProposal {
        <MsgSubmitProposal as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitProposal {
    pub fn new() -> MsgSubmitProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "content",
            |m: &MsgSubmitProposal| { &m.content },
            |m: &mut MsgSubmitProposal| { &mut m.content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "initial_deposit",
            |m: &MsgSubmitProposal| { &m.initial_deposit },
            |m: &mut MsgSubmitProposal| { &mut m.initial_deposit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposer",
            |m: &MsgSubmitProposal| { &m.proposer },
            |m: &mut MsgSubmitProposal| { &mut m.proposer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSubmitProposal>(
            "MsgSubmitProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSubmitProposal {
    const NAME: &'static str = "MsgSubmitProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.content)?;
                },
                18 => {
                    self.initial_deposit.push(is.read_message()?);
                },
                26 => {
                    self.proposer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.initial_deposit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.proposer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.proposer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.content.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.initial_deposit {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.proposer.is_empty() {
            os.write_string(3, &self.proposer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSubmitProposal {
        MsgSubmitProposal::new()
    }

    fn clear(&mut self) {
        self.content.clear();
        self.initial_deposit.clear();
        self.proposer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSubmitProposal {
        static instance: MsgSubmitProposal = MsgSubmitProposal {
            content: ::protobuf::MessageField::none(),
            initial_deposit: ::std::vec::Vec::new(),
            proposer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSubmitProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSubmitProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSubmitProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.MsgSubmitProposalResponse)
pub struct MsgSubmitProposalResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgSubmitProposalResponse.proposal_id)
    pub proposal_id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.MsgSubmitProposalResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSubmitProposalResponse {
    fn default() -> &'a MsgSubmitProposalResponse {
        <MsgSubmitProposalResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitProposalResponse {
    pub fn new() -> MsgSubmitProposalResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &MsgSubmitProposalResponse| { &m.proposal_id },
            |m: &mut MsgSubmitProposalResponse| { &mut m.proposal_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSubmitProposalResponse>(
            "MsgSubmitProposalResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSubmitProposalResponse {
    const NAME: &'static str = "MsgSubmitProposalResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSubmitProposalResponse {
        MsgSubmitProposalResponse::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSubmitProposalResponse {
        static instance: MsgSubmitProposalResponse = MsgSubmitProposalResponse {
            proposal_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSubmitProposalResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSubmitProposalResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSubmitProposalResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitProposalResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgVote defines a message to cast a vote.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.MsgVote)
pub struct MsgVote {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgVote.proposal_id)
    pub proposal_id: u64,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgVote.voter)
    pub voter: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgVote.option)
    pub option: ::protobuf::EnumOrUnknown<super::gov::VoteOption>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.MsgVote.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgVote {
    fn default() -> &'a MsgVote {
        <MsgVote as ::protobuf::Message>::default_instance()
    }
}

impl MsgVote {
    pub fn new() -> MsgVote {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &MsgVote| { &m.proposal_id },
            |m: &mut MsgVote| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "voter",
            |m: &MsgVote| { &m.voter },
            |m: &mut MsgVote| { &mut m.voter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "option",
            |m: &MsgVote| { &m.option },
            |m: &mut MsgVote| { &mut m.option },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgVote>(
            "MsgVote",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgVote {
    const NAME: &'static str = "MsgVote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    self.voter = is.read_string()?;
                },
                24 => {
                    self.option = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        if self.option != ::protobuf::EnumOrUnknown::new(super::gov::VoteOption::VOTE_OPTION_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.option.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        if self.option != ::protobuf::EnumOrUnknown::new(super::gov::VoteOption::VOTE_OPTION_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.option))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgVote {
        MsgVote::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.voter.clear();
        self.option = ::protobuf::EnumOrUnknown::new(super::gov::VoteOption::VOTE_OPTION_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgVote {
        static instance: MsgVote = MsgVote {
            proposal_id: 0,
            voter: ::std::string::String::new(),
            option: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgVote {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgVote").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgVote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVote {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgVoteResponse defines the Msg/Vote response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.MsgVoteResponse)
pub struct MsgVoteResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.MsgVoteResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgVoteResponse {
    fn default() -> &'a MsgVoteResponse {
        <MsgVoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgVoteResponse {
    pub fn new() -> MsgVoteResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgVoteResponse>(
            "MsgVoteResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgVoteResponse {
    const NAME: &'static str = "MsgVoteResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgVoteResponse {
        MsgVoteResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgVoteResponse {
        static instance: MsgVoteResponse = MsgVoteResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgVoteResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgVoteResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgVoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVoteResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgVoteWeighted defines a message to cast a vote.
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.MsgVoteWeighted)
pub struct MsgVoteWeighted {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgVoteWeighted.proposal_id)
    pub proposal_id: u64,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgVoteWeighted.voter)
    pub voter: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgVoteWeighted.options)
    pub options: ::std::vec::Vec<super::gov::WeightedVoteOption>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.MsgVoteWeighted.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgVoteWeighted {
    fn default() -> &'a MsgVoteWeighted {
        <MsgVoteWeighted as ::protobuf::Message>::default_instance()
    }
}

impl MsgVoteWeighted {
    pub fn new() -> MsgVoteWeighted {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &MsgVoteWeighted| { &m.proposal_id },
            |m: &mut MsgVoteWeighted| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "voter",
            |m: &MsgVoteWeighted| { &m.voter },
            |m: &mut MsgVoteWeighted| { &mut m.voter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &MsgVoteWeighted| { &m.options },
            |m: &mut MsgVoteWeighted| { &mut m.options },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgVoteWeighted>(
            "MsgVoteWeighted",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgVoteWeighted {
    const NAME: &'static str = "MsgVoteWeighted";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    self.voter = is.read_string()?;
                },
                26 => {
                    self.options.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        for v in &self.options {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgVoteWeighted {
        MsgVoteWeighted::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.voter.clear();
        self.options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgVoteWeighted {
        static instance: MsgVoteWeighted = MsgVoteWeighted {
            proposal_id: 0,
            voter: ::std::string::String::new(),
            options: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgVoteWeighted {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgVoteWeighted").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgVoteWeighted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVoteWeighted {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgVoteWeightedResponse defines the Msg/VoteWeighted response type.
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.MsgVoteWeightedResponse)
pub struct MsgVoteWeightedResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.MsgVoteWeightedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgVoteWeightedResponse {
    fn default() -> &'a MsgVoteWeightedResponse {
        <MsgVoteWeightedResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgVoteWeightedResponse {
    pub fn new() -> MsgVoteWeightedResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgVoteWeightedResponse>(
            "MsgVoteWeightedResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgVoteWeightedResponse {
    const NAME: &'static str = "MsgVoteWeightedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgVoteWeightedResponse {
        MsgVoteWeightedResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgVoteWeightedResponse {
        static instance: MsgVoteWeightedResponse = MsgVoteWeightedResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgVoteWeightedResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgVoteWeightedResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgVoteWeightedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVoteWeightedResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgDeposit defines a message to submit a deposit to an existing proposal.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.MsgDeposit)
pub struct MsgDeposit {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgDeposit.proposal_id)
    pub proposal_id: u64,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgDeposit.depositor)
    pub depositor: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.MsgDeposit.amount)
    pub amount: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.MsgDeposit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDeposit {
    fn default() -> &'a MsgDeposit {
        <MsgDeposit as ::protobuf::Message>::default_instance()
    }
}

impl MsgDeposit {
    pub fn new() -> MsgDeposit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &MsgDeposit| { &m.proposal_id },
            |m: &mut MsgDeposit| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "depositor",
            |m: &MsgDeposit| { &m.depositor },
            |m: &mut MsgDeposit| { &mut m.depositor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &MsgDeposit| { &m.amount },
            |m: &mut MsgDeposit| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDeposit>(
            "MsgDeposit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDeposit {
    const NAME: &'static str = "MsgDeposit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    self.depositor = is.read_string()?;
                },
                26 => {
                    self.amount.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.depositor);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.depositor.is_empty() {
            os.write_string(2, &self.depositor)?;
        }
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDeposit {
        MsgDeposit::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.depositor.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDeposit {
        static instance: MsgDeposit = MsgDeposit {
            proposal_id: 0,
            depositor: ::std::string::String::new(),
            amount: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDeposit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDeposit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDeposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDeposit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgDepositResponse defines the Msg/Deposit response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.MsgDepositResponse)
pub struct MsgDepositResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.MsgDepositResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDepositResponse {
    fn default() -> &'a MsgDepositResponse {
        <MsgDepositResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgDepositResponse {
    pub fn new() -> MsgDepositResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDepositResponse>(
            "MsgDepositResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDepositResponse {
    const NAME: &'static str = "MsgDepositResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDepositResponse {
        MsgDepositResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDepositResponse {
        static instance: MsgDepositResponse = MsgDepositResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDepositResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDepositResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDepositResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDepositResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bcosmos/gov/v1beta1/tx.proto\x12\x12cosmos.gov.v1beta1\x1a\x1ecosmo\
    s/base/v1beta1/coin.proto\x1a\x1ccosmos/gov/v1beta1/gov.proto\x1a\x19cos\
    mos_proto/cosmos.proto\x1a\x14gogoproto/gogo.proto\x1a\x19google/protobu\
    f/any.proto\"\x8f\x02\n\x11MsgSubmitProposal\x12;\n\x07content\x18\x01\
    \x20\x01(\x0b2\x14.google.protobuf.AnyR\x07contentB\x0b\xca\xb4-\x07Cont\
    ent\x12\x8e\x01\n\x0finitial_deposit\x18\x02\x20\x03(\x0b2\x19.cosmos.ba\
    se.v1beta1.CoinR\x0einitialDepositBJ\xaa\xdf\x1f(github.com/cosmos/cosmo\
    s-sdk/types.Coins\xc8\xde\x1f\0\xf2\xde\x1f\x16yaml:\"initial_deposit\"\
    \x12\x1a\n\x08proposer\x18\x03\x20\x01(\tR\x08proposer:\x10\xe8\xa0\x1f\
    \0\x80\xdc\x20\0\x98\xa0\x1f\0\x88\xa0\x1f\0\"c\n\x19MsgSubmitProposalRe\
    sponse\x12F\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalIdB%\xf2\xde\
    \x1f\x12yaml:\"proposal_id\"\xea\xde\x1f\x0bproposal_id\"\xb1\x01\n\x07M\
    sgVote\x12F\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalIdB%\xf2\xde\
    \x1f\x12yaml:\"proposal_id\"\xea\xde\x1f\x0bproposal_id\x12\x14\n\x05vot\
    er\x18\x02\x20\x01(\tR\x05voter\x126\n\x06option\x18\x03\x20\x01(\x0e2\
    \x1e.cosmos.gov.v1beta1.VoteOptionR\x06option:\x10\xe8\xa0\x1f\0\x80\xdc\
    \x20\0\x98\xa0\x1f\0\x88\xa0\x1f\0\"\x11\n\x0fMsgVoteResponse\"\xba\x01\
    \n\x0fMsgVoteWeighted\x127\n\x0bproposal_id\x18\x01\x20\x01(\x04R\npropo\
    salIdB\x16\xf2\xde\x1f\x12yaml:\"proposal_id\"\x12\x14\n\x05voter\x18\
    \x02\x20\x01(\tR\x05voter\x12F\n\x07options\x18\x03\x20\x03(\x0b2&.cosmo\
    s.gov.v1beta1.WeightedVoteOptionR\x07optionsB\x04\xc8\xde\x1f\0:\x10\xe8\
    \xa0\x1f\0\x80\xdc\x20\0\x98\xa0\x1f\0\x88\xa0\x1f\0\"\x19\n\x17MsgVoteW\
    eightedResponse\"\xe9\x01\n\nMsgDeposit\x12F\n\x0bproposal_id\x18\x01\
    \x20\x01(\x04R\nproposalIdB%\xf2\xde\x1f\x12yaml:\"proposal_id\"\xea\xde\
    \x1f\x0bproposal_id\x12\x1c\n\tdepositor\x18\x02\x20\x01(\tR\tdepositor\
    \x12c\n\x06amount\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\
    \x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\
    \xde\x1f\0:\x10\xe8\xa0\x1f\0\x80\xdc\x20\0\x98\xa0\x1f\0\x88\xa0\x1f\0\
    \"\x14\n\x12MsgDepositResponse2\xec\x02\n\x03Msg\x12f\n\x0eSubmitProposa\
    l\x12%.cosmos.gov.v1beta1.MsgSubmitProposal\x1a-.cosmos.gov.v1beta1.MsgS\
    ubmitProposalResponse\x12H\n\x04Vote\x12\x1b.cosmos.gov.v1beta1.MsgVote\
    \x1a#.cosmos.gov.v1beta1.MsgVoteResponse\x12`\n\x0cVoteWeighted\x12#.cos\
    mos.gov.v1beta1.MsgVoteWeighted\x1a+.cosmos.gov.v1beta1.MsgVoteWeightedR\
    esponse\x12Q\n\x07Deposit\x12\x1e.cosmos.gov.v1beta1.MsgDeposit\x1a&.cos\
    mos.gov.v1beta1.MsgDepositResponseB*Z(github.com/cosmos/cosmos-sdk/x/gov\
    /typesJ\xc4\x17\n\x06\x12\x04\0\0b\x1d\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x1b\n\t\n\x02\x03\0\x12\x03\x03\0(\n\t\n\
    \x02\x03\x01\x12\x03\x04\0&\n\t\n\x02\x03\x02\x12\x03\x05\0#\n\t\n\x02\
    \x03\x03\x12\x03\x06\0\x1e\n\t\n\x02\x03\x04\x12\x03\x07\0#\n\x08\n\x01\
    \x08\x12\x03\t\0?\n\t\n\x02\x08\x0b\x12\x03\t\0?\n/\n\x02\x06\0\x12\x04\
    \x0c\0\x1a\x01\x1a#\x20Msg\x20defines\x20the\x20bank\x20Msg\x20service.\
    \n\n\n\n\x03\x06\0\x01\x12\x03\x0c\x08\x0b\nV\n\x04\x06\0\x02\0\x12\x03\
    \x0e\x02L\x1aI\x20SubmitProposal\x20defines\x20a\x20method\x20to\x20crea\
    te\x20new\x20proposal\x20given\x20a\x20content.\n\n\x0c\n\x05\x06\0\x02\
    \0\x01\x12\x03\x0e\x06\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0e\x15&\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0e1J\nJ\n\x04\x06\0\x02\x01\x12\
    \x03\x11\x02.\x1a=\x20Vote\x20defines\x20a\x20method\x20to\x20add\x20a\
    \x20vote\x20on\x20a\x20specific\x20proposal.\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03\x11\x06\n\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x11\x0b\x12\
    \n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x11\x1d,\nt\n\x04\x06\0\x02\x02\
    \x12\x03\x16\x02F\x1ag\x20VoteWeighted\x20defines\x20a\x20method\x20to\
    \x20add\x20a\x20weighted\x20vote\x20on\x20a\x20specific\x20proposal.\n\n\
    \x20Since:\x20cosmos-sdk\x200.43\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    \x16\x06\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x16\x13\"\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03\x16-D\nN\n\x04\x06\0\x02\x03\x12\x03\x19\x027\
    \x1aA\x20Deposit\x20defines\x20a\x20method\x20to\x20add\x20deposit\x20on\
    \x20a\x20specific\x20proposal.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \x19\x06\r\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x19\x0e\x18\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03\x19#5\nm\n\x02\x04\0\x12\x04\x1e\0+\x01\x1aa\
    \x20MsgSubmitProposal\x20defines\x20an\x20sdk.Msg\x20type\x20that\x20sup\
    ports\x20submitting\x20arbitrary\n\x20proposal\x20Content.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x1e\x08\x19\n\n\n\x03\x04\0\x07\x12\x03\x1f\x02.\n\r\
    \n\x06\x04\0\x07\x8d\xf4\x03\x12\x03\x1f\x02.\n\n\n\x03\x04\0\x07\x12\
    \x03\x20\x02.\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\x03\x20\x02.\n\n\n\x03\
    \x04\0\x07\x12\x03!\x02.\n\r\n\x06\x04\0\x07\xc0\x8b\x04\x12\x03!\x02.\n\
    \n\n\x03\x04\0\x07\x12\x03\"\x02.\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\
    \x03\"\x02.\n\x0b\n\x04\x04\0\x02\0\x12\x03$\x02g\n\x0c\n\x05\x04\0\x02\
    \0\x06\x12\x03$\x02\x15\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03$\x16\x1d\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03$67\n\x0c\n\x05\x04\0\x02\0\x08\x12\
    \x03$8f\n\x0f\n\x08\x04\0\x02\0\x08\xc9\xd6\x05\x12\x03$9e\n\x0c\n\x04\
    \x04\0\x02\x01\x12\x04%\x02)\x04\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03%\
    \x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03%\x0b#\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03%$3\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03%67\n\r\n\x05\
    \x04\0\x02\x01\x08\x12\x04%8)\x03\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\
    \x03\x12\x03&\x04$\n\x0f\n\x08\x04\0\x02\x01\x08\xf5\xfb\x03\x12\x03'\
    \x04I\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03(\x049\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03*\x02\x16\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03*\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03*\t\x11\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03*\x14\x15\nU\n\x02\x04\x01\x12\x04.\00\x01\x1a\
    I\x20MsgSubmitProposalResponse\x20defines\x20the\x20Msg/SubmitProposal\
    \x20response\x20type.\n\n\n\n\x03\x04\x01\x01\x12\x03.\x08!\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03/\x02n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03/\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03/\t\x14\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03/\x17\x18\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03/\x19m\
    \n\x0f\n\x08\x04\x01\x02\0\x08\xed\xfb\x03\x12\x03/\x1a=\n\x0f\n\x08\x04\
    \x01\x02\0\x08\xee\xfb\x03\x12\x03/?l\n7\n\x02\x04\x02\x12\x043\0<\x01\
    \x1a+\x20MsgVote\x20defines\x20a\x20message\x20to\x20cast\x20a\x20vote.\
    \n\n\n\n\x03\x04\x02\x01\x12\x033\x08\x0f\n\n\n\x03\x04\x02\x07\x12\x034\
    \x02.\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x034\x02.\n\n\n\x03\x04\x02\
    \x07\x12\x035\x02.\n\r\n\x06\x04\x02\x07\x83\xf4\x03\x12\x035\x02.\n\n\n\
    \x03\x04\x02\x07\x12\x036\x02.\n\r\n\x06\x04\x02\x07\xc0\x8b\x04\x12\x03\
    6\x02.\n\n\n\x03\x04\x02\x07\x12\x037\x02.\n\r\n\x06\x04\x02\x07\x81\xf4\
    \x03\x12\x037\x02.\n\x0b\n\x04\x04\x02\x02\0\x12\x039\x02r\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x039\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x039\r\x18\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x039\x1b\x1c\n\x0c\n\x05\
    \x04\x02\x02\0\x08\x12\x039\x1dq\n\x0f\n\x08\x04\x02\x02\0\x08\xed\xfb\
    \x03\x12\x039\x1eA\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x039Cp\
    \n\x0b\n\x04\x04\x02\x02\x01\x12\x03:\x02\x1d\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03:\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03:\r\x12\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03:\x1b\x1c\n\x0b\n\x04\x04\x02\
    \x02\x02\x12\x03;\x02\x1d\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03;\x02\
    \x0c\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03;\r\x13\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03;\x1b\x1c\n@\n\x02\x04\x03\x12\x03?\0\x1a\x1a5\x20Ms\
    gVoteResponse\x20defines\x20the\x20Msg/Vote\x20response\x20type.\n\n\n\n\
    \x03\x04\x03\x01\x12\x03?\x08\x17\nX\n\x02\x04\x04\x12\x04D\0M\x01\x1aL\
    \x20MsgVoteWeighted\x20defines\x20a\x20message\x20to\x20cast\x20a\x20vot\
    e.\n\n\x20Since:\x20cosmos-sdk\x200.43\n\n\n\n\x03\x04\x04\x01\x12\x03D\
    \x08\x17\n\n\n\x03\x04\x04\x07\x12\x03E\x02.\n\r\n\x06\x04\x04\x07\x8d\
    \xf4\x03\x12\x03E\x02.\n\n\n\x03\x04\x04\x07\x12\x03F\x02.\n\r\n\x06\x04\
    \x04\x07\x83\xf4\x03\x12\x03F\x02.\n\n\n\x03\x04\x04\x07\x12\x03G\x02.\n\
    \r\n\x06\x04\x04\x07\xc0\x8b\x04\x12\x03G\x02.\n\n\n\x03\x04\x04\x07\x12\
    \x03H\x02.\n\r\n\x06\x04\x04\x07\x81\xf4\x03\x12\x03H\x02.\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03J\x02^\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03J\x02\
    \x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03J\x1e)\n\x0c\n\x05\x04\x04\x02\
    \0\x03\x12\x03J,-\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03J.]\n\x0f\n\x08\
    \x04\x04\x02\0\x08\xee\xfb\x03\x12\x03J/\\\n\x0b\n\x04\x04\x04\x02\x01\
    \x12\x03K\x02.\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03K\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03K\x1e#\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03K,-\n\x0b\n\x04\x04\x04\x02\x02\x12\x03L\x02M\n\x0c\n\x05\x04\
    \x04\x02\x02\x04\x12\x03L\x02\n\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03L\
    \x0b\x1d\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03L\x1e%\n\x0c\n\x05\x04\
    \x04\x02\x02\x03\x12\x03L,-\n\x0c\n\x05\x04\x04\x02\x02\x08\x12\x03L.L\n\
    \x0f\n\x08\x04\x04\x02\x02\x08\xe9\xfb\x03\x12\x03L/K\ni\n\x02\x04\x05\
    \x12\x03R\0\"\x1a^\x20MsgVoteWeightedResponse\x20defines\x20the\x20Msg/V\
    oteWeighted\x20response\x20type.\n\n\x20Since:\x20cosmos-sdk\x200.43\n\n\
    \n\n\x03\x04\x05\x01\x12\x03R\x08\x1f\nW\n\x02\x04\x06\x12\x04U\0_\x01\
    \x1aK\x20MsgDeposit\x20defines\x20a\x20message\x20to\x20submit\x20a\x20d\
    eposit\x20to\x20an\x20existing\x20proposal.\n\n\n\n\x03\x04\x06\x01\x12\
    \x03U\x08\x12\n\n\n\x03\x04\x06\x07\x12\x03V\x02.\n\r\n\x06\x04\x06\x07\
    \x8d\xf4\x03\x12\x03V\x02.\n\n\n\x03\x04\x06\x07\x12\x03W\x02.\n\r\n\x06\
    \x04\x06\x07\x83\xf4\x03\x12\x03W\x02.\n\n\n\x03\x04\x06\x07\x12\x03X\
    \x02.\n\r\n\x06\x04\x06\x07\xc0\x8b\x04\x12\x03X\x02.\n\n\n\x03\x04\x06\
    \x07\x12\x03Y\x02.\n\r\n\x06\x04\x06\x07\x81\xf4\x03\x12\x03Y\x02.\n\x0b\
    \n\x04\x04\x06\x02\0\x12\x03[\x02p\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03\
    [\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03[\x0b\x16\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03[\x19\x1a\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03[\
    \x1bo\n\x0f\n\x08\x04\x06\x02\0\x08\xed\xfb\x03\x12\x03[\x1c?\n\x0f\n\
    \x08\x04\x06\x02\0\x08\xee\xfb\x03\x12\x03[An\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03\\\x02\x1b\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03\\\x02\x08\
    \n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03\\\x0b\x14\n\x0c\n\x05\x04\x06\
    \x02\x01\x03\x12\x03\\\x19\x1a\n\x0c\n\x04\x04\x06\x02\x02\x12\x04]\x02^\
    l\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x03]\x02\n\n\x0c\n\x05\x04\x06\x02\
    \x02\x06\x12\x03]\x0b#\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03]$*\n\x0c\
    \n\x05\x04\x06\x02\x02\x03\x12\x03]-.\n\x0c\n\x05\x04\x06\x02\x02\x08\
    \x12\x03^\x06k\n\x0f\n\x08\x04\x06\x02\x02\x08\xe9\xfb\x03\x12\x03^\x07#\
    \n\x0f\n\x08\x04\x06\x02\x02\x08\xf5\xfb\x03\x12\x03^%j\nF\n\x02\x04\x07\
    \x12\x03b\0\x1d\x1a;\x20MsgDepositResponse\x20defines\x20the\x20Msg/Depo\
    sit\x20response\x20type.\n\n\n\n\x03\x04\x07\x01\x12\x03b\x08\x1ab\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::gov::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(MsgSubmitProposal::generated_message_descriptor_data());
            messages.push(MsgSubmitProposalResponse::generated_message_descriptor_data());
            messages.push(MsgVote::generated_message_descriptor_data());
            messages.push(MsgVoteResponse::generated_message_descriptor_data());
            messages.push(MsgVoteWeighted::generated_message_descriptor_data());
            messages.push(MsgVoteWeightedResponse::generated_message_descriptor_data());
            messages.push(MsgDeposit::generated_message_descriptor_data());
            messages.push(MsgDepositResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
