// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/gov/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryProposalRequest is the request type for the Query/Proposal RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryProposalRequest)
pub struct QueryProposalRequest {
    // message fields
    ///  proposal_id defines the unique id of the proposal.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryProposalRequest.proposal_id)
    pub proposal_id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryProposalRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryProposalRequest {
    fn default() -> &'a QueryProposalRequest {
        <QueryProposalRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryProposalRequest {
    pub fn new() -> QueryProposalRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &QueryProposalRequest| { &m.proposal_id },
            |m: &mut QueryProposalRequest| { &mut m.proposal_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryProposalRequest>(
            "QueryProposalRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryProposalRequest {
    const NAME: &'static str = "QueryProposalRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryProposalRequest {
        QueryProposalRequest::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryProposalRequest {
        static instance: QueryProposalRequest = QueryProposalRequest {
            proposal_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryProposalRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryProposalRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryProposalRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryProposalRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryProposalResponse is the response type for the Query/Proposal RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryProposalResponse)
pub struct QueryProposalResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryProposalResponse.proposal)
    pub proposal: ::protobuf::MessageField<super::gov::Proposal>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryProposalResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryProposalResponse {
    fn default() -> &'a QueryProposalResponse {
        <QueryProposalResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryProposalResponse {
    pub fn new() -> QueryProposalResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::Proposal>(
            "proposal",
            |m: &QueryProposalResponse| { &m.proposal },
            |m: &mut QueryProposalResponse| { &mut m.proposal },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryProposalResponse>(
            "QueryProposalResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryProposalResponse {
    const NAME: &'static str = "QueryProposalResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proposal)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.proposal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.proposal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryProposalResponse {
        QueryProposalResponse::new()
    }

    fn clear(&mut self) {
        self.proposal.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryProposalResponse {
        static instance: QueryProposalResponse = QueryProposalResponse {
            proposal: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryProposalResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryProposalResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryProposalResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryProposalResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryProposalsRequest is the request type for the Query/Proposals RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryProposalsRequest)
pub struct QueryProposalsRequest {
    // message fields
    ///  proposal_status defines the status of the proposals.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryProposalsRequest.proposal_status)
    pub proposal_status: ::protobuf::EnumOrUnknown<super::gov::ProposalStatus>,
    ///  voter defines the voter address for the proposals.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryProposalsRequest.voter)
    pub voter: ::std::string::String,
    ///  depositor defines the deposit addresses from the proposals.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryProposalsRequest.depositor)
    pub depositor: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryProposalsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryProposalsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryProposalsRequest {
    fn default() -> &'a QueryProposalsRequest {
        <QueryProposalsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryProposalsRequest {
    pub fn new() -> QueryProposalsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_status",
            |m: &QueryProposalsRequest| { &m.proposal_status },
            |m: &mut QueryProposalsRequest| { &mut m.proposal_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "voter",
            |m: &QueryProposalsRequest| { &m.voter },
            |m: &mut QueryProposalsRequest| { &mut m.voter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "depositor",
            |m: &QueryProposalsRequest| { &m.depositor },
            |m: &mut QueryProposalsRequest| { &mut m.depositor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryProposalsRequest| { &m.pagination },
            |m: &mut QueryProposalsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryProposalsRequest>(
            "QueryProposalsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryProposalsRequest {
    const NAME: &'static str = "QueryProposalsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_status = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.voter = is.read_string()?;
                },
                26 => {
                    self.depositor = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_status != ::protobuf::EnumOrUnknown::new(super::gov::ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.proposal_status.value());
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.depositor);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_status != ::protobuf::EnumOrUnknown::new(super::gov::ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.proposal_status))?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        if !self.depositor.is_empty() {
            os.write_string(3, &self.depositor)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryProposalsRequest {
        QueryProposalsRequest::new()
    }

    fn clear(&mut self) {
        self.proposal_status = ::protobuf::EnumOrUnknown::new(super::gov::ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED);
        self.voter.clear();
        self.depositor.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryProposalsRequest {
        static instance: QueryProposalsRequest = QueryProposalsRequest {
            proposal_status: ::protobuf::EnumOrUnknown::from_i32(0),
            voter: ::std::string::String::new(),
            depositor: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryProposalsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryProposalsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryProposalsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryProposalsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryProposalsResponse is the response type for the Query/Proposals RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryProposalsResponse)
pub struct QueryProposalsResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryProposalsResponse.proposals)
    pub proposals: ::std::vec::Vec<super::gov::Proposal>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryProposalsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryProposalsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryProposalsResponse {
    fn default() -> &'a QueryProposalsResponse {
        <QueryProposalsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryProposalsResponse {
    pub fn new() -> QueryProposalsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "proposals",
            |m: &QueryProposalsResponse| { &m.proposals },
            |m: &mut QueryProposalsResponse| { &mut m.proposals },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryProposalsResponse| { &m.pagination },
            |m: &mut QueryProposalsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryProposalsResponse>(
            "QueryProposalsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryProposalsResponse {
    const NAME: &'static str = "QueryProposalsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.proposals.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.proposals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.proposals {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryProposalsResponse {
        QueryProposalsResponse::new()
    }

    fn clear(&mut self) {
        self.proposals.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryProposalsResponse {
        static instance: QueryProposalsResponse = QueryProposalsResponse {
            proposals: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryProposalsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryProposalsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryProposalsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryProposalsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryVoteRequest is the request type for the Query/Vote RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryVoteRequest)
pub struct QueryVoteRequest {
    // message fields
    ///  proposal_id defines the unique id of the proposal.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryVoteRequest.proposal_id)
    pub proposal_id: u64,
    ///  voter defines the oter address for the proposals.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryVoteRequest.voter)
    pub voter: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryVoteRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryVoteRequest {
    fn default() -> &'a QueryVoteRequest {
        <QueryVoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryVoteRequest {
    pub fn new() -> QueryVoteRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &QueryVoteRequest| { &m.proposal_id },
            |m: &mut QueryVoteRequest| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "voter",
            |m: &QueryVoteRequest| { &m.voter },
            |m: &mut QueryVoteRequest| { &mut m.voter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryVoteRequest>(
            "QueryVoteRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryVoteRequest {
    const NAME: &'static str = "QueryVoteRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    self.voter = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryVoteRequest {
        QueryVoteRequest::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.voter.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryVoteRequest {
        static instance: QueryVoteRequest = QueryVoteRequest {
            proposal_id: 0,
            voter: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryVoteRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryVoteRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryVoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryVoteRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryVoteResponse is the response type for the Query/Vote RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryVoteResponse)
pub struct QueryVoteResponse {
    // message fields
    ///  vote defined the queried vote.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryVoteResponse.vote)
    pub vote: ::protobuf::MessageField<super::gov::Vote>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryVoteResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryVoteResponse {
    fn default() -> &'a QueryVoteResponse {
        <QueryVoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryVoteResponse {
    pub fn new() -> QueryVoteResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::Vote>(
            "vote",
            |m: &QueryVoteResponse| { &m.vote },
            |m: &mut QueryVoteResponse| { &mut m.vote },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryVoteResponse>(
            "QueryVoteResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryVoteResponse {
    const NAME: &'static str = "QueryVoteResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.vote)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.vote.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.vote.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryVoteResponse {
        QueryVoteResponse::new()
    }

    fn clear(&mut self) {
        self.vote.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryVoteResponse {
        static instance: QueryVoteResponse = QueryVoteResponse {
            vote: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryVoteResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryVoteResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryVoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryVoteResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryVotesRequest is the request type for the Query/Votes RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryVotesRequest)
pub struct QueryVotesRequest {
    // message fields
    ///  proposal_id defines the unique id of the proposal.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryVotesRequest.proposal_id)
    pub proposal_id: u64,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryVotesRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryVotesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryVotesRequest {
    fn default() -> &'a QueryVotesRequest {
        <QueryVotesRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryVotesRequest {
    pub fn new() -> QueryVotesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &QueryVotesRequest| { &m.proposal_id },
            |m: &mut QueryVotesRequest| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryVotesRequest| { &m.pagination },
            |m: &mut QueryVotesRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryVotesRequest>(
            "QueryVotesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryVotesRequest {
    const NAME: &'static str = "QueryVotesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryVotesRequest {
        QueryVotesRequest::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryVotesRequest {
        static instance: QueryVotesRequest = QueryVotesRequest {
            proposal_id: 0,
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryVotesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryVotesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryVotesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryVotesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryVotesResponse is the response type for the Query/Votes RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryVotesResponse)
pub struct QueryVotesResponse {
    // message fields
    ///  votes defined the queried votes.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryVotesResponse.votes)
    pub votes: ::std::vec::Vec<super::gov::Vote>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryVotesResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryVotesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryVotesResponse {
    fn default() -> &'a QueryVotesResponse {
        <QueryVotesResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryVotesResponse {
    pub fn new() -> QueryVotesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "votes",
            |m: &QueryVotesResponse| { &m.votes },
            |m: &mut QueryVotesResponse| { &mut m.votes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryVotesResponse| { &m.pagination },
            |m: &mut QueryVotesResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryVotesResponse>(
            "QueryVotesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryVotesResponse {
    const NAME: &'static str = "QueryVotesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.votes.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.votes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.votes {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryVotesResponse {
        QueryVotesResponse::new()
    }

    fn clear(&mut self) {
        self.votes.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryVotesResponse {
        static instance: QueryVotesResponse = QueryVotesResponse {
            votes: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryVotesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryVotesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryVotesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryVotesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryParamsRequest)
pub struct QueryParamsRequest {
    // message fields
    ///  params_type defines which parameters to query for, can be one of "voting",
    ///  "tallying" or "deposit".
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryParamsRequest.params_type)
    pub params_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "params_type",
            |m: &QueryParamsRequest| { &m.params_type },
            |m: &mut QueryParamsRequest| { &mut m.params_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsRequest>(
            "QueryParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.params_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.params_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.params_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.params_type.is_empty() {
            os.write_string(1, &self.params_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn clear(&mut self) {
        self.params_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: QueryParamsRequest = QueryParamsRequest {
            params_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryParamsResponse)
pub struct QueryParamsResponse {
    // message fields
    ///  voting_params defines the parameters related to voting.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryParamsResponse.voting_params)
    pub voting_params: ::protobuf::MessageField<super::gov::VotingParams>,
    ///  deposit_params defines the parameters related to deposit.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryParamsResponse.deposit_params)
    pub deposit_params: ::protobuf::MessageField<super::gov::DepositParams>,
    ///  tally_params defines the parameters related to tally.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryParamsResponse.tally_params)
    pub tally_params: ::protobuf::MessageField<super::gov::TallyParams>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::VotingParams>(
            "voting_params",
            |m: &QueryParamsResponse| { &m.voting_params },
            |m: &mut QueryParamsResponse| { &mut m.voting_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::DepositParams>(
            "deposit_params",
            |m: &QueryParamsResponse| { &m.deposit_params },
            |m: &mut QueryParamsResponse| { &mut m.deposit_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::TallyParams>(
            "tally_params",
            |m: &QueryParamsResponse| { &m.tally_params },
            |m: &mut QueryParamsResponse| { &mut m.tally_params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsResponse>(
            "QueryParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.voting_params)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deposit_params)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tally_params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.voting_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.deposit_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tally_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.voting_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.deposit_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.tally_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn clear(&mut self) {
        self.voting_params.clear();
        self.deposit_params.clear();
        self.tally_params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: QueryParamsResponse = QueryParamsResponse {
            voting_params: ::protobuf::MessageField::none(),
            deposit_params: ::protobuf::MessageField::none(),
            tally_params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDepositRequest is the request type for the Query/Deposit RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryDepositRequest)
pub struct QueryDepositRequest {
    // message fields
    ///  proposal_id defines the unique id of the proposal.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryDepositRequest.proposal_id)
    pub proposal_id: u64,
    ///  depositor defines the deposit addresses from the proposals.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryDepositRequest.depositor)
    pub depositor: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryDepositRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDepositRequest {
    fn default() -> &'a QueryDepositRequest {
        <QueryDepositRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDepositRequest {
    pub fn new() -> QueryDepositRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &QueryDepositRequest| { &m.proposal_id },
            |m: &mut QueryDepositRequest| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "depositor",
            |m: &QueryDepositRequest| { &m.depositor },
            |m: &mut QueryDepositRequest| { &mut m.depositor },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDepositRequest>(
            "QueryDepositRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDepositRequest {
    const NAME: &'static str = "QueryDepositRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    self.depositor = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.depositor);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.depositor.is_empty() {
            os.write_string(2, &self.depositor)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDepositRequest {
        QueryDepositRequest::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.depositor.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDepositRequest {
        static instance: QueryDepositRequest = QueryDepositRequest {
            proposal_id: 0,
            depositor: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDepositRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDepositRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDepositRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDepositRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDepositResponse is the response type for the Query/Deposit RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryDepositResponse)
pub struct QueryDepositResponse {
    // message fields
    ///  deposit defines the requested deposit.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryDepositResponse.deposit)
    pub deposit: ::protobuf::MessageField<super::gov::Deposit>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryDepositResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDepositResponse {
    fn default() -> &'a QueryDepositResponse {
        <QueryDepositResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDepositResponse {
    pub fn new() -> QueryDepositResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::Deposit>(
            "deposit",
            |m: &QueryDepositResponse| { &m.deposit },
            |m: &mut QueryDepositResponse| { &mut m.deposit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDepositResponse>(
            "QueryDepositResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDepositResponse {
    const NAME: &'static str = "QueryDepositResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deposit)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.deposit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.deposit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDepositResponse {
        QueryDepositResponse::new()
    }

    fn clear(&mut self) {
        self.deposit.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDepositResponse {
        static instance: QueryDepositResponse = QueryDepositResponse {
            deposit: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDepositResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDepositResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDepositResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDepositResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDepositsRequest is the request type for the Query/Deposits RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryDepositsRequest)
pub struct QueryDepositsRequest {
    // message fields
    ///  proposal_id defines the unique id of the proposal.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryDepositsRequest.proposal_id)
    pub proposal_id: u64,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryDepositsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryDepositsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDepositsRequest {
    fn default() -> &'a QueryDepositsRequest {
        <QueryDepositsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDepositsRequest {
    pub fn new() -> QueryDepositsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &QueryDepositsRequest| { &m.proposal_id },
            |m: &mut QueryDepositsRequest| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryDepositsRequest| { &m.pagination },
            |m: &mut QueryDepositsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDepositsRequest>(
            "QueryDepositsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDepositsRequest {
    const NAME: &'static str = "QueryDepositsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDepositsRequest {
        QueryDepositsRequest::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDepositsRequest {
        static instance: QueryDepositsRequest = QueryDepositsRequest {
            proposal_id: 0,
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDepositsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDepositsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDepositsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDepositsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDepositsResponse is the response type for the Query/Deposits RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryDepositsResponse)
pub struct QueryDepositsResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryDepositsResponse.deposits)
    pub deposits: ::std::vec::Vec<super::gov::Deposit>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryDepositsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryDepositsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDepositsResponse {
    fn default() -> &'a QueryDepositsResponse {
        <QueryDepositsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDepositsResponse {
    pub fn new() -> QueryDepositsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "deposits",
            |m: &QueryDepositsResponse| { &m.deposits },
            |m: &mut QueryDepositsResponse| { &mut m.deposits },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryDepositsResponse| { &m.pagination },
            |m: &mut QueryDepositsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDepositsResponse>(
            "QueryDepositsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDepositsResponse {
    const NAME: &'static str = "QueryDepositsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.deposits.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.deposits {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.deposits {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDepositsResponse {
        QueryDepositsResponse::new()
    }

    fn clear(&mut self) {
        self.deposits.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDepositsResponse {
        static instance: QueryDepositsResponse = QueryDepositsResponse {
            deposits: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDepositsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDepositsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDepositsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDepositsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryTallyResultRequest is the request type for the Query/Tally RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryTallyResultRequest)
pub struct QueryTallyResultRequest {
    // message fields
    ///  proposal_id defines the unique id of the proposal.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryTallyResultRequest.proposal_id)
    pub proposal_id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryTallyResultRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryTallyResultRequest {
    fn default() -> &'a QueryTallyResultRequest {
        <QueryTallyResultRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryTallyResultRequest {
    pub fn new() -> QueryTallyResultRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &QueryTallyResultRequest| { &m.proposal_id },
            |m: &mut QueryTallyResultRequest| { &mut m.proposal_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryTallyResultRequest>(
            "QueryTallyResultRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryTallyResultRequest {
    const NAME: &'static str = "QueryTallyResultRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryTallyResultRequest {
        QueryTallyResultRequest::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryTallyResultRequest {
        static instance: QueryTallyResultRequest = QueryTallyResultRequest {
            proposal_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryTallyResultRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryTallyResultRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryTallyResultRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTallyResultRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryTallyResultResponse is the response type for the Query/Tally RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.QueryTallyResultResponse)
pub struct QueryTallyResultResponse {
    // message fields
    ///  tally defines the requested tally.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.QueryTallyResultResponse.tally)
    pub tally: ::protobuf::MessageField<super::gov::TallyResult>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.QueryTallyResultResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryTallyResultResponse {
    fn default() -> &'a QueryTallyResultResponse {
        <QueryTallyResultResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryTallyResultResponse {
    pub fn new() -> QueryTallyResultResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::TallyResult>(
            "tally",
            |m: &QueryTallyResultResponse| { &m.tally },
            |m: &mut QueryTallyResultResponse| { &mut m.tally },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryTallyResultResponse>(
            "QueryTallyResultResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryTallyResultResponse {
    const NAME: &'static str = "QueryTallyResultResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tally)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tally.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tally.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryTallyResultResponse {
        QueryTallyResultResponse::new()
    }

    fn clear(&mut self) {
        self.tally.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryTallyResultResponse {
        static instance: QueryTallyResultResponse = QueryTallyResultResponse {
            tally: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryTallyResultResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryTallyResultResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryTallyResultResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTallyResultResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecosmos/gov/v1beta1/query.proto\x12\x12cosmos.gov.v1beta1\x1a*cosmo\
    s/base/query/v1beta1/pagination.proto\x1a\x14gogoproto/gogo.proto\x1a\
    \x1cgoogle/api/annotations.proto\x1a\x1ccosmos/gov/v1beta1/gov.proto\"7\
    \n\x14QueryProposalRequest\x12\x1f\n\x0bproposal_id\x18\x01\x20\x01(\x04\
    R\nproposalId\"W\n\x15QueryProposalResponse\x12>\n\x08proposal\x18\x01\
    \x20\x01(\x0b2\x1c.cosmos.gov.v1beta1.ProposalR\x08proposalB\x04\xc8\xde\
    \x1f\0\"\xea\x01\n\x15QueryProposalsRequest\x12K\n\x0fproposal_status\
    \x18\x01\x20\x01(\x0e2\".cosmos.gov.v1beta1.ProposalStatusR\x0eproposalS\
    tatus\x12\x14\n\x05voter\x18\x02\x20\x01(\tR\x05voter\x12\x1c\n\tdeposit\
    or\x18\x03\x20\x01(\tR\tdepositor\x12F\n\npagination\x18\x04\x20\x01(\
    \x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagination:\x08\x88\xa0\
    \x1f\0\xe8\xa0\x1f\0\"\xa3\x01\n\x16QueryProposalsResponse\x12@\n\tpropo\
    sals\x18\x01\x20\x03(\x0b2\x1c.cosmos.gov.v1beta1.ProposalR\tproposalsB\
    \x04\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cosmos.base\
    .query.v1beta1.PageResponseR\npagination\"S\n\x10QueryVoteRequest\x12\
    \x1f\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalId\x12\x14\n\x05vot\
    er\x18\x02\x20\x01(\tR\x05voter:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"G\n\
    \x11QueryVoteResponse\x122\n\x04vote\x18\x01\x20\x01(\x0b2\x18.cosmos.go\
    v.v1beta1.VoteR\x04voteB\x04\xc8\xde\x1f\0\"|\n\x11QueryVotesRequest\x12\
    \x1f\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalId\x12F\n\npaginati\
    on\x18\x02\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagina\
    tion\"\x93\x01\n\x12QueryVotesResponse\x124\n\x05votes\x18\x01\x20\x03(\
    \x0b2\x18.cosmos.gov.v1beta1.VoteR\x05votesB\x04\xc8\xde\x1f\0\x12G\n\np\
    agination\x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\
    \npagination\"5\n\x12QueryParamsRequest\x12\x1f\n\x0bparams_type\x18\x01\
    \x20\x01(\tR\nparamsType\"\xfc\x01\n\x13QueryParamsResponse\x12K\n\rvoti\
    ng_params\x18\x01\x20\x01(\x0b2\x20.cosmos.gov.v1beta1.VotingParamsR\x0c\
    votingParamsB\x04\xc8\xde\x1f\0\x12N\n\x0edeposit_params\x18\x02\x20\x01\
    (\x0b2!.cosmos.gov.v1beta1.DepositParamsR\rdepositParamsB\x04\xc8\xde\
    \x1f\0\x12H\n\x0ctally_params\x18\x03\x20\x01(\x0b2\x1f.cosmos.gov.v1bet\
    a1.TallyParamsR\x0btallyParamsB\x04\xc8\xde\x1f\0\"^\n\x13QueryDepositRe\
    quest\x12\x1f\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalId\x12\x1c\
    \n\tdepositor\x18\x02\x20\x01(\tR\tdepositor:\x08\x88\xa0\x1f\0\xe8\xa0\
    \x1f\0\"S\n\x14QueryDepositResponse\x12;\n\x07deposit\x18\x01\x20\x01(\
    \x0b2\x1b.cosmos.gov.v1beta1.DepositR\x07depositB\x04\xc8\xde\x1f\0\"\
    \x7f\n\x14QueryDepositsRequest\x12\x1f\n\x0bproposal_id\x18\x01\x20\x01(\
    \x04R\nproposalId\x12F\n\npagination\x18\x02\x20\x01(\x0b2&.cosmos.base.\
    query.v1beta1.PageRequestR\npagination\"\x9f\x01\n\x15QueryDepositsRespo\
    nse\x12=\n\x08deposits\x18\x01\x20\x03(\x0b2\x1b.cosmos.gov.v1beta1.Depo\
    sitR\x08depositsB\x04\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\x01(\
    \x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination\":\n\x17Query\
    TallyResultRequest\x12\x1f\n\x0bproposal_id\x18\x01\x20\x01(\x04R\npropo\
    salId\"W\n\x18QueryTallyResultResponse\x12;\n\x05tally\x18\x01\x20\x01(\
    \x0b2\x1f.cosmos.gov.v1beta1.TallyResultR\x05tallyB\x04\xc8\xde\x1f\02\
    \xd4\t\n\x05Query\x12\x94\x01\n\x08Proposal\x12(.cosmos.gov.v1beta1.Quer\
    yProposalRequest\x1a).cosmos.gov.v1beta1.QueryProposalResponse\"3\x82\
    \xd3\xe4\x93\x02-\x12+/cosmos/gov/v1beta1/proposals/{proposal_id}\x12\
    \x89\x01\n\tProposals\x12).cosmos.gov.v1beta1.QueryProposalsRequest\x1a*\
    .cosmos.gov.v1beta1.QueryProposalsResponse\"%\x82\xd3\xe4\x93\x02\x1f\
    \x12\x1d/cosmos/gov/v1beta1/proposals\x12\x96\x01\n\x04Vote\x12$.cosmos.\
    gov.v1beta1.QueryVoteRequest\x1a%.cosmos.gov.v1beta1.QueryVoteResponse\"\
    A\x82\xd3\xe4\x93\x02;\x129/cosmos/gov/v1beta1/proposals/{proposal_id}/v\
    otes/{voter}\x12\x91\x01\n\x05Votes\x12%.cosmos.gov.v1beta1.QueryVotesRe\
    quest\x1a&.cosmos.gov.v1beta1.QueryVotesResponse\"9\x82\xd3\xe4\x93\x023\
    \x121/cosmos/gov/v1beta1/proposals/{proposal_id}/votes\x12\x8b\x01\n\x06\
    Params\x12&.cosmos.gov.v1beta1.QueryParamsRequest\x1a'.cosmos.gov.v1beta\
    1.QueryParamsResponse\"0\x82\xd3\xe4\x93\x02*\x12(/cosmos/gov/v1beta1/pa\
    rams/{params_type}\x12\xa6\x01\n\x07Deposit\x12'.cosmos.gov.v1beta1.Quer\
    yDepositRequest\x1a(.cosmos.gov.v1beta1.QueryDepositResponse\"H\x82\xd3\
    \xe4\x93\x02B\x12@/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{\
    depositor}\x12\x9d\x01\n\x08Deposits\x12(.cosmos.gov.v1beta1.QueryDeposi\
    tsRequest\x1a).cosmos.gov.v1beta1.QueryDepositsResponse\"<\x82\xd3\xe4\
    \x93\x026\x124/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits\x12\
    \xa3\x01\n\x0bTallyResult\x12+.cosmos.gov.v1beta1.QueryTallyResultReques\
    t\x1a,.cosmos.gov.v1beta1.QueryTallyResultResponse\"9\x82\xd3\xe4\x93\
    \x023\x121/cosmos/gov/v1beta1/proposals/{proposal_id}/tallyB*Z(github.co\
    m/cosmos/cosmos-sdk/x/gov/typesJ\xf62\n\x07\x12\x05\0\0\xbd\x01\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1b\n\t\n\
    \x02\x03\0\x12\x03\x03\04\n\t\n\x02\x03\x01\x12\x03\x04\0\x1e\n\t\n\x02\
    \x03\x02\x12\x03\x05\0&\n\t\n\x02\x03\x03\x12\x03\x06\0&\n\x08\n\x01\x08\
    \x12\x03\x08\0?\n\t\n\x02\x08\x0b\x12\x03\x08\0?\nC\n\x02\x06\0\x12\x04\
    \x0b\03\x01\x1a7\x20Query\x20defines\x20the\x20gRPC\x20querier\x20servic\
    e\x20for\x20gov\x20module\n\n\n\n\x03\x06\0\x01\x12\x03\x0b\x08\r\nF\n\
    \x04\x06\0\x02\0\x12\x04\r\x02\x0f\x03\x1a8\x20Proposal\x20queries\x20pr\
    oposal\x20details\x20based\x20on\x20ProposalID.\n\n\x0c\n\x05\x06\0\x02\
    \0\x01\x12\x03\r\x06\x0e\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\r\x0f#\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03\r.C\n\x0c\n\x05\x06\0\x02\0\x04\x12\
    \x03\x0e\x04Q\n\x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x0e\
    \x04Q\nF\n\x04\x06\0\x02\x01\x12\x04\x12\x02\x14\x03\x1a8\x20Proposals\
    \x20queries\x20all\x20proposals\x20based\x20on\x20given\x20status.\n\n\
    \x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x12\x06\x0f\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x03\x12\x10%\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x120F\n\
    \x0c\n\x05\x06\0\x02\x01\x04\x12\x03\x13\x04C\n\x11\n\n\x06\0\x02\x01\
    \x04\xb0\xca\xbc\"\x02\x12\x03\x13\x04C\nN\n\x04\x06\0\x02\x02\x12\x04\
    \x17\x02\x19\x03\x1a@\x20Vote\x20queries\x20voted\x20information\x20base\
    d\x20on\x20proposalID,\x20voterAddr.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03\x17\x06\n\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x17\x0b\x1b\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x17&7\n\x0c\n\x05\x06\0\x02\x02\x04\x12\
    \x03\x18\x04_\n\x11\n\n\x06\0\x02\x02\x04\xb0\xca\xbc\"\x02\x12\x03\x18\
    \x04_\n8\n\x04\x06\0\x02\x03\x12\x04\x1c\x02\x1e\x03\x1a*\x20Votes\x20qu\
    eries\x20votes\x20of\x20a\x20given\x20proposal.\n\n\x0c\n\x05\x06\0\x02\
    \x03\x01\x12\x03\x1c\x06\x0b\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x1c\
    \x0c\x1d\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x1c(:\n\x0c\n\x05\x06\0\
    \x02\x03\x04\x12\x03\x1d\x04W\n\x11\n\n\x06\0\x02\x03\x04\xb0\xca\xbc\"\
    \x02\x12\x03\x1d\x04W\n@\n\x04\x06\0\x02\x04\x12\x04!\x02#\x03\x1a2\x20P\
    arams\x20queries\x20all\x20parameters\x20of\x20the\x20gov\x20module.\n\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03!\x06\x0c\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03!\r\x1f\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03!*=\n\x0c\n\x05\
    \x06\0\x02\x04\x04\x12\x03\"\x04N\n\x11\n\n\x06\0\x02\x04\x04\xb0\xca\
    \xbc\"\x02\x12\x03\"\x04N\nY\n\x04\x06\0\x02\x05\x12\x04&\x02(\x03\x1aK\
    \x20Deposit\x20queries\x20single\x20deposit\x20information\x20based\x20p\
    roposalID,\x20depositAddr.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03&\x06\
    \r\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03&\x0e!\n\x0c\n\x05\x06\0\x02\x05\
    \x03\x12\x03&,@\n\x0c\n\x05\x06\0\x02\x05\x04\x12\x03'\x04f\n\x11\n\n\
    \x06\0\x02\x05\x04\xb0\xca\xbc\"\x02\x12\x03'\x04f\nC\n\x04\x06\0\x02\
    \x06\x12\x04+\x02-\x03\x1a5\x20Deposits\x20queries\x20all\x20deposits\
    \x20of\x20a\x20single\x20proposal.\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\
    \x03+\x06\x0e\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03+\x0f#\n\x0c\n\x05\
    \x06\0\x02\x06\x03\x12\x03+.C\n\x0c\n\x05\x06\0\x02\x06\x04\x12\x03,\x04\
    Z\n\x11\n\n\x06\0\x02\x06\x04\xb0\xca\xbc\"\x02\x12\x03,\x04Z\nA\n\x04\
    \x06\0\x02\x07\x12\x040\x022\x03\x1a3\x20TallyResult\x20queries\x20the\
    \x20tally\x20of\x20a\x20proposal\x20vote.\n\n\x0c\n\x05\x06\0\x02\x07\
    \x01\x12\x030\x06\x11\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x030\x12)\n\x0c\
    \n\x05\x06\0\x02\x07\x03\x12\x0304L\n\x0c\n\x05\x06\0\x02\x07\x04\x12\
    \x031\x04W\n\x11\n\n\x06\0\x02\x07\x04\xb0\xca\xbc\"\x02\x12\x031\x04W\n\
    Y\n\x02\x04\0\x12\x046\09\x01\x1aM\x20QueryProposalRequest\x20is\x20the\
    \x20request\x20type\x20for\x20the\x20Query/Proposal\x20RPC\x20method.\n\
    \n\n\n\x03\x04\0\x01\x12\x036\x08\x1c\nA\n\x04\x04\0\x02\0\x12\x038\x02\
    \x19\x1a4\x20proposal_id\x20defines\x20the\x20unique\x20id\x20of\x20the\
    \x20proposal.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x038\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x038\t\x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x038\x17\
    \x18\n[\n\x02\x04\x01\x12\x04<\0>\x01\x1aO\x20QueryProposalResponse\x20i\
    s\x20the\x20response\x20type\x20for\x20the\x20Query/Proposal\x20RPC\x20m\
    ethod.\n\n\n\n\x03\x04\x01\x01\x12\x03<\x08\x1d\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03=\x027\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03=\x02\n\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03=\x0b\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03=\x16\x17\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03=\x186\n\x0f\n\
    \x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03=\x195\n[\n\x02\x04\x02\x12\
    \x04A\0P\x01\x1aO\x20QueryProposalsRequest\x20is\x20the\x20request\x20ty\
    pe\x20for\x20the\x20Query/Proposals\x20RPC\x20method.\n\n\n\n\x03\x04\
    \x02\x01\x12\x03A\x08\x1d\n\n\n\x03\x04\x02\x07\x12\x03B\x02-\n\r\n\x06\
    \x04\x02\x07\x8d\xf4\x03\x12\x03B\x02-\n\n\n\x03\x04\x02\x07\x12\x03C\
    \x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x03C\x02-\nC\n\x04\x04\x02\
    \x02\0\x12\x03F\x02%\x1a6\x20proposal_status\x20defines\x20the\x20status\
    \x20of\x20the\x20proposals.\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03F\x02\
    \x10\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03F\x11\x20\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03F#$\nA\n\x04\x04\x02\x02\x01\x12\x03I\x02\x13\x1a4\x20\
    voter\x20defines\x20the\x20voter\x20address\x20for\x20the\x20proposals.\
    \n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03I\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03I\t\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03I\x11\
    \x12\nJ\n\x04\x04\x02\x02\x02\x12\x03L\x02\x17\x1a=\x20depositor\x20defi\
    nes\x20the\x20deposit\x20addresses\x20from\x20the\x20proposals.\n\n\x0c\
    \n\x05\x04\x02\x02\x02\x05\x12\x03L\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03L\t\x12\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03L\x15\x16\nI\
    \n\x04\x04\x02\x02\x03\x12\x03O\x027\x1a<\x20pagination\x20defines\x20an\
    \x20optional\x20pagination\x20for\x20the\x20request.\n\n\x0c\n\x05\x04\
    \x02\x02\x03\x06\x12\x03O\x02'\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03O(\
    2\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03O56\n^\n\x02\x04\x03\x12\x04T\0\
    Y\x01\x1aR\x20QueryProposalsResponse\x20is\x20the\x20response\x20type\
    \x20for\x20the\x20Query/Proposals\x20RPC\n\x20method.\n\n\n\n\x03\x04\
    \x03\x01\x12\x03T\x08\x1e\n\x0b\n\x04\x04\x03\x02\0\x12\x03U\x02A\n\x0c\
    \n\x05\x04\x03\x02\0\x04\x12\x03U\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x03U\x0b\x13\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03U\x14\x1d\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03U\x20!\n\x0c\n\x05\x04\x03\x02\0\x08\x12\
    \x03U\"@\n\x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03U#?\nA\n\x04\
    \x04\x03\x02\x01\x12\x03X\x028\x1a4\x20pagination\x20defines\x20the\x20p\
    agination\x20in\x20the\x20response.\n\n\x0c\n\x05\x04\x03\x02\x01\x06\
    \x12\x03X\x02(\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03X)3\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03X67\nQ\n\x02\x04\x04\x12\x04\\\0e\x01\x1aE\
    \x20QueryVoteRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Qu\
    ery/Vote\x20RPC\x20method.\n\n\n\n\x03\x04\x04\x01\x12\x03\\\x08\x18\n\n\
    \n\x03\x04\x04\x07\x12\x03]\x02-\n\r\n\x06\x04\x04\x07\x8d\xf4\x03\x12\
    \x03]\x02-\n\n\n\x03\x04\x04\x07\x12\x03^\x02-\n\r\n\x06\x04\x04\x07\x81\
    \xf4\x03\x12\x03^\x02-\nA\n\x04\x04\x04\x02\0\x12\x03a\x02\x19\x1a4\x20p\
    roposal_id\x20defines\x20the\x20unique\x20id\x20of\x20the\x20proposal.\n\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03a\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03a\t\x14\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03a\x17\x18\n@\
    \n\x04\x04\x04\x02\x01\x12\x03d\x02\x13\x1a3\x20voter\x20defines\x20the\
    \x20oter\x20address\x20for\x20the\x20proposals.\n\n\x0c\n\x05\x04\x04\
    \x02\x01\x05\x12\x03d\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03d\t\
    \x0e\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03d\x11\x12\nS\n\x02\x04\x05\
    \x12\x04h\0k\x01\x1aG\x20QueryVoteResponse\x20is\x20the\x20response\x20t\
    ype\x20for\x20the\x20Query/Vote\x20RPC\x20method.\n\n\n\n\x03\x04\x05\
    \x01\x12\x03h\x08\x19\n-\n\x04\x04\x05\x02\0\x12\x03j\x02/\x1a\x20\x20vo\
    te\x20defined\x20the\x20queried\x20vote.\n\n\x0c\n\x05\x04\x05\x02\0\x06\
    \x12\x03j\x02\x06\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03j\x07\x0b\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03j\x0e\x0f\n\x0c\n\x05\x04\x05\x02\0\x08\
    \x12\x03j\x10.\n\x0f\n\x08\x04\x05\x02\0\x08\xe9\xfb\x03\x12\x03j\x11-\n\
    S\n\x02\x04\x06\x12\x04n\0t\x01\x1aG\x20QueryVotesRequest\x20is\x20the\
    \x20request\x20type\x20for\x20the\x20Query/Votes\x20RPC\x20method.\n\n\n\
    \n\x03\x04\x06\x01\x12\x03n\x08\x19\nA\n\x04\x04\x06\x02\0\x12\x03p\x02\
    \x19\x1a4\x20proposal_id\x20defines\x20the\x20unique\x20id\x20of\x20the\
    \x20proposal.\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03p\x02\x08\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03p\t\x14\n\x0c\n\x05\x04\x06\x02\0\x03\x12\
    \x03p\x17\x18\nI\n\x04\x04\x06\x02\x01\x12\x03s\x027\x1a<\x20pagination\
    \x20defines\x20an\x20optional\x20pagination\x20for\x20the\x20request.\n\
    \n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03s\x02'\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03s(2\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03s56\nU\n\x02\
    \x04\x07\x12\x04w\0}\x01\x1aI\x20QueryVotesResponse\x20is\x20the\x20resp\
    onse\x20type\x20for\x20the\x20Query/Votes\x20RPC\x20method.\n\n\n\n\x03\
    \x04\x07\x01\x12\x03w\x08\x1a\n/\n\x04\x04\x07\x02\0\x12\x03y\x029\x1a\"\
    \x20votes\x20defined\x20the\x20queried\x20votes.\n\n\x0c\n\x05\x04\x07\
    \x02\0\x04\x12\x03y\x02\n\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03y\x0b\x0f\
    \n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03y\x10\x15\n\x0c\n\x05\x04\x07\x02\
    \0\x03\x12\x03y\x18\x19\n\x0c\n\x05\x04\x07\x02\0\x08\x12\x03y\x1a8\n\
    \x0f\n\x08\x04\x07\x02\0\x08\xe9\xfb\x03\x12\x03y\x1b7\nA\n\x04\x04\x07\
    \x02\x01\x12\x03|\x028\x1a4\x20pagination\x20defines\x20the\x20paginatio\
    n\x20in\x20the\x20response.\n\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03|\
    \x02(\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03|)3\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03|67\nW\n\x02\x04\x08\x12\x06\x80\x01\0\x84\x01\x01\x1aI\
    \x20QueryParamsRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20\
    Query/Params\x20RPC\x20method.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\x80\x01\
    \x08\x1a\nt\n\x04\x04\x08\x02\0\x12\x04\x83\x01\x02\x19\x1af\x20params_t\
    ype\x20defines\x20which\x20parameters\x20to\x20query\x20for,\x20can\x20b\
    e\x20one\x20of\x20\"voting\",\n\x20\"tallying\"\x20or\x20\"deposit\".\n\
    \n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x83\x01\x02\x08\n\r\n\x05\x04\x08\
    \x02\0\x01\x12\x04\x83\x01\t\x14\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\x83\
    \x01\x17\x18\nY\n\x02\x04\t\x12\x06\x87\x01\0\x8e\x01\x01\x1aK\x20QueryP\
    aramsResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Pa\
    rams\x20RPC\x20method.\n\n\x0b\n\x03\x04\t\x01\x12\x04\x87\x01\x08\x1b\n\
    G\n\x04\x04\t\x02\0\x12\x04\x89\x01\x02@\x1a9\x20voting_params\x20define\
    s\x20the\x20parameters\x20related\x20to\x20voting.\n\n\r\n\x05\x04\t\x02\
    \0\x06\x12\x04\x89\x01\x02\x0e\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x89\x01\
    \x0f\x1c\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x89\x01\x1f\x20\n\r\n\x05\x04\
    \t\x02\0\x08\x12\x04\x89\x01!?\n\x10\n\x08\x04\t\x02\0\x08\xe9\xfb\x03\
    \x12\x04\x89\x01\">\nI\n\x04\x04\t\x02\x01\x12\x04\x8b\x01\x02B\x1a;\x20\
    deposit_params\x20defines\x20the\x20parameters\x20related\x20to\x20depos\
    it.\n\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\x8b\x01\x02\x0f\n\r\n\x05\x04\
    \t\x02\x01\x01\x12\x04\x8b\x01\x10\x1e\n\r\n\x05\x04\t\x02\x01\x03\x12\
    \x04\x8b\x01!\"\n\r\n\x05\x04\t\x02\x01\x08\x12\x04\x8b\x01#A\n\x10\n\
    \x08\x04\t\x02\x01\x08\xe9\xfb\x03\x12\x04\x8b\x01$@\nE\n\x04\x04\t\x02\
    \x02\x12\x04\x8d\x01\x02>\x1a7\x20tally_params\x20defines\x20the\x20para\
    meters\x20related\x20to\x20tally.\n\n\r\n\x05\x04\t\x02\x02\x06\x12\x04\
    \x8d\x01\x02\r\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\x8d\x01\x0e\x1a\n\r\n\
    \x05\x04\t\x02\x02\x03\x12\x04\x8d\x01\x1d\x1e\n\r\n\x05\x04\t\x02\x02\
    \x08\x12\x04\x8d\x01\x1f=\n\x10\n\x08\x04\t\x02\x02\x08\xe9\xfb\x03\x12\
    \x04\x8d\x01\x20<\nY\n\x02\x04\n\x12\x06\x91\x01\0\x9a\x01\x01\x1aK\x20Q\
    ueryDepositRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Quer\
    y/Deposit\x20RPC\x20method.\n\n\x0b\n\x03\x04\n\x01\x12\x04\x91\x01\x08\
    \x1b\n\x0b\n\x03\x04\n\x07\x12\x04\x92\x01\x02-\n\x0e\n\x06\x04\n\x07\
    \x81\xf4\x03\x12\x04\x92\x01\x02-\n\x0b\n\x03\x04\n\x07\x12\x04\x93\x01\
    \x02-\n\x0e\n\x06\x04\n\x07\x8d\xf4\x03\x12\x04\x93\x01\x02-\nB\n\x04\
    \x04\n\x02\0\x12\x04\x96\x01\x02\x19\x1a4\x20proposal_id\x20defines\x20t\
    he\x20unique\x20id\x20of\x20the\x20proposal.\n\n\r\n\x05\x04\n\x02\0\x05\
    \x12\x04\x96\x01\x02\x08\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x96\x01\t\x14\
    \n\r\n\x05\x04\n\x02\0\x03\x12\x04\x96\x01\x17\x18\nK\n\x04\x04\n\x02\
    \x01\x12\x04\x99\x01\x02\x17\x1a=\x20depositor\x20defines\x20the\x20depo\
    sit\x20addresses\x20from\x20the\x20proposals.\n\n\r\n\x05\x04\n\x02\x01\
    \x05\x12\x04\x99\x01\x02\x08\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x99\x01\
    \t\x12\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\x99\x01\x15\x16\n[\n\x02\x04\
    \x0b\x12\x06\x9d\x01\0\xa0\x01\x01\x1aM\x20QueryDepositResponse\x20is\
    \x20the\x20response\x20type\x20for\x20the\x20Query/Deposit\x20RPC\x20met\
    hod.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\x9d\x01\x08\x1c\n6\n\x04\x04\x0b\
    \x02\0\x12\x04\x9f\x01\x025\x1a(\x20deposit\x20defines\x20the\x20request\
    ed\x20deposit.\n\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\x9f\x01\x02\t\n\r\n\
    \x05\x04\x0b\x02\0\x01\x12\x04\x9f\x01\n\x11\n\r\n\x05\x04\x0b\x02\0\x03\
    \x12\x04\x9f\x01\x14\x15\n\r\n\x05\x04\x0b\x02\0\x08\x12\x04\x9f\x01\x16\
    4\n\x10\n\x08\x04\x0b\x02\0\x08\xe9\xfb\x03\x12\x04\x9f\x01\x173\n[\n\
    \x02\x04\x0c\x12\x06\xa3\x01\0\xa9\x01\x01\x1aM\x20QueryDepositsRequest\
    \x20is\x20the\x20request\x20type\x20for\x20the\x20Query/Deposits\x20RPC\
    \x20method.\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xa3\x01\x08\x1c\nB\n\x04\
    \x04\x0c\x02\0\x12\x04\xa5\x01\x02\x19\x1a4\x20proposal_id\x20defines\
    \x20the\x20unique\x20id\x20of\x20the\x20proposal.\n\n\r\n\x05\x04\x0c\
    \x02\0\x05\x12\x04\xa5\x01\x02\x08\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\
    \xa5\x01\t\x14\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xa5\x01\x17\x18\nJ\n\
    \x04\x04\x0c\x02\x01\x12\x04\xa8\x01\x027\x1a<\x20pagination\x20defines\
    \x20an\x20optional\x20pagination\x20for\x20the\x20request.\n\n\r\n\x05\
    \x04\x0c\x02\x01\x06\x12\x04\xa8\x01\x02'\n\r\n\x05\x04\x0c\x02\x01\x01\
    \x12\x04\xa8\x01(2\n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\xa8\x0156\n]\n\
    \x02\x04\r\x12\x06\xac\x01\0\xb1\x01\x01\x1aO\x20QueryDepositsResponse\
    \x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Deposits\x20RPC\
    \x20method.\n\n\x0b\n\x03\x04\r\x01\x12\x04\xac\x01\x08\x1d\n\x0c\n\x04\
    \x04\r\x02\0\x12\x04\xad\x01\x02?\n\r\n\x05\x04\r\x02\0\x04\x12\x04\xad\
    \x01\x02\n\n\r\n\x05\x04\r\x02\0\x06\x12\x04\xad\x01\x0b\x12\n\r\n\x05\
    \x04\r\x02\0\x01\x12\x04\xad\x01\x13\x1b\n\r\n\x05\x04\r\x02\0\x03\x12\
    \x04\xad\x01\x1e\x1f\n\r\n\x05\x04\r\x02\0\x08\x12\x04\xad\x01\x20>\n\
    \x10\n\x08\x04\r\x02\0\x08\xe9\xfb\x03\x12\x04\xad\x01!=\nB\n\x04\x04\r\
    \x02\x01\x12\x04\xb0\x01\x028\x1a4\x20pagination\x20defines\x20the\x20pa\
    gination\x20in\x20the\x20response.\n\n\r\n\x05\x04\r\x02\x01\x06\x12\x04\
    \xb0\x01\x02(\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\xb0\x01)3\n\r\n\x05\
    \x04\r\x02\x01\x03\x12\x04\xb0\x0167\n[\n\x02\x04\x0e\x12\x06\xb4\x01\0\
    \xb7\x01\x01\x1aM\x20QueryTallyResultRequest\x20is\x20the\x20request\x20\
    type\x20for\x20the\x20Query/Tally\x20RPC\x20method.\n\n\x0b\n\x03\x04\
    \x0e\x01\x12\x04\xb4\x01\x08\x1f\nB\n\x04\x04\x0e\x02\0\x12\x04\xb6\x01\
    \x02\x19\x1a4\x20proposal_id\x20defines\x20the\x20unique\x20id\x20of\x20\
    the\x20proposal.\n\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\xb6\x01\x02\x08\n\
    \r\n\x05\x04\x0e\x02\0\x01\x12\x04\xb6\x01\t\x14\n\r\n\x05\x04\x0e\x02\0\
    \x03\x12\x04\xb6\x01\x17\x18\n]\n\x02\x04\x0f\x12\x06\xba\x01\0\xbd\x01\
    \x01\x1aO\x20QueryTallyResultResponse\x20is\x20the\x20response\x20type\
    \x20for\x20the\x20Query/Tally\x20RPC\x20method.\n\n\x0b\n\x03\x04\x0f\
    \x01\x12\x04\xba\x01\x08\x20\n2\n\x04\x04\x0f\x02\0\x12\x04\xbc\x01\x027\
    \x1a$\x20tally\x20defines\x20the\x20requested\x20tally.\n\n\r\n\x05\x04\
    \x0f\x02\0\x06\x12\x04\xbc\x01\x02\r\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\
    \xbc\x01\x0e\x13\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xbc\x01\x16\x17\n\r\
    \n\x05\x04\x0f\x02\0\x08\x12\x04\xbc\x01\x186\n\x10\n\x08\x04\x0f\x02\0\
    \x08\xe9\xfb\x03\x12\x04\xbc\x01\x195b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::gov::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(QueryProposalRequest::generated_message_descriptor_data());
            messages.push(QueryProposalResponse::generated_message_descriptor_data());
            messages.push(QueryProposalsRequest::generated_message_descriptor_data());
            messages.push(QueryProposalsResponse::generated_message_descriptor_data());
            messages.push(QueryVoteRequest::generated_message_descriptor_data());
            messages.push(QueryVoteResponse::generated_message_descriptor_data());
            messages.push(QueryVotesRequest::generated_message_descriptor_data());
            messages.push(QueryVotesResponse::generated_message_descriptor_data());
            messages.push(QueryParamsRequest::generated_message_descriptor_data());
            messages.push(QueryParamsResponse::generated_message_descriptor_data());
            messages.push(QueryDepositRequest::generated_message_descriptor_data());
            messages.push(QueryDepositResponse::generated_message_descriptor_data());
            messages.push(QueryDepositsRequest::generated_message_descriptor_data());
            messages.push(QueryDepositsResponse::generated_message_descriptor_data());
            messages.push(QueryTallyResultRequest::generated_message_descriptor_data());
            messages.push(QueryTallyResultResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
