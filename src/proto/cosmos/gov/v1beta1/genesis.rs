// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/gov/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState defines the gov module's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.GenesisState)
pub struct GenesisState {
    // message fields
    ///  starting_proposal_id is the ID of the starting proposal.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.GenesisState.starting_proposal_id)
    pub starting_proposal_id: u64,
    ///  deposits defines all the deposits present at genesis.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.GenesisState.deposits)
    pub deposits: ::std::vec::Vec<super::gov::Deposit>,
    ///  votes defines all the votes present at genesis.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.GenesisState.votes)
    pub votes: ::std::vec::Vec<super::gov::Vote>,
    ///  proposals defines all the proposals present at genesis.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.GenesisState.proposals)
    pub proposals: ::std::vec::Vec<super::gov::Proposal>,
    ///  params defines all the paramaters of related to deposit.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.GenesisState.deposit_params)
    pub deposit_params: ::protobuf::MessageField<super::gov::DepositParams>,
    ///  params defines all the paramaters of related to voting.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.GenesisState.voting_params)
    pub voting_params: ::protobuf::MessageField<super::gov::VotingParams>,
    ///  params defines all the paramaters of related to tally.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.GenesisState.tally_params)
    pub tally_params: ::protobuf::MessageField<super::gov::TallyParams>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "starting_proposal_id",
            |m: &GenesisState| { &m.starting_proposal_id },
            |m: &mut GenesisState| { &mut m.starting_proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "deposits",
            |m: &GenesisState| { &m.deposits },
            |m: &mut GenesisState| { &mut m.deposits },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "votes",
            |m: &GenesisState| { &m.votes },
            |m: &mut GenesisState| { &mut m.votes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "proposals",
            |m: &GenesisState| { &m.proposals },
            |m: &mut GenesisState| { &mut m.proposals },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::DepositParams>(
            "deposit_params",
            |m: &GenesisState| { &m.deposit_params },
            |m: &mut GenesisState| { &mut m.deposit_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::VotingParams>(
            "voting_params",
            |m: &GenesisState| { &m.voting_params },
            |m: &mut GenesisState| { &mut m.voting_params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::gov::TallyParams>(
            "tally_params",
            |m: &GenesisState| { &m.tally_params },
            |m: &mut GenesisState| { &mut m.tally_params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.starting_proposal_id = is.read_uint64()?;
                },
                18 => {
                    self.deposits.push(is.read_message()?);
                },
                26 => {
                    self.votes.push(is.read_message()?);
                },
                34 => {
                    self.proposals.push(is.read_message()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deposit_params)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.voting_params)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tally_params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.starting_proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.starting_proposal_id);
        }
        for value in &self.deposits {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.votes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.proposals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.deposit_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.voting_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tally_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.starting_proposal_id != 0 {
            os.write_uint64(1, self.starting_proposal_id)?;
        }
        for v in &self.deposits {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.votes {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.proposals {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.deposit_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.voting_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.tally_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.starting_proposal_id = 0;
        self.deposits.clear();
        self.votes.clear();
        self.proposals.clear();
        self.deposit_params.clear();
        self.voting_params.clear();
        self.tally_params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            starting_proposal_id: 0,
            deposits: ::std::vec::Vec::new(),
            votes: ::std::vec::Vec::new(),
            proposals: ::std::vec::Vec::new(),
            deposit_params: ::protobuf::MessageField::none(),
            voting_params: ::protobuf::MessageField::none(),
            tally_params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20cosmos/gov/v1beta1/genesis.proto\x12\x12cosmos.gov.v1beta1\x1a\x14\
    gogoproto/gogo.proto\x1a\x1ccosmos/gov/v1beta1/gov.proto\"\xe9\x04\n\x0c\
    GenesisState\x12Q\n\x14starting_proposal_id\x18\x01\x20\x01(\x04R\x12sta\
    rtingProposalIdB\x1f\xf2\xde\x1f\x1byaml:\"starting_proposal_id\"\x12I\n\
    \x08deposits\x18\x02\x20\x03(\x0b2\x1b.cosmos.gov.v1beta1.DepositR\x08de\
    positsB\x10\xaa\xdf\x1f\x08Deposits\xc8\xde\x1f\0\x12=\n\x05votes\x18\
    \x03\x20\x03(\x0b2\x18.cosmos.gov.v1beta1.VoteR\x05votesB\r\xaa\xdf\x1f\
    \x05Votes\xc8\xde\x1f\0\x12M\n\tproposals\x18\x04\x20\x03(\x0b2\x1c.cosm\
    os.gov.v1beta1.ProposalR\tproposalsB\x11\xaa\xdf\x1f\tProposals\xc8\xde\
    \x1f\0\x12g\n\x0edeposit_params\x18\x05\x20\x01(\x0b2!.cosmos.gov.v1beta\
    1.DepositParamsR\rdepositParamsB\x1d\xf2\xde\x1f\x15yaml:\"deposit_param\
    s\"\xc8\xde\x1f\0\x12c\n\rvoting_params\x18\x06\x20\x01(\x0b2\x20.cosmos\
    .gov.v1beta1.VotingParamsR\x0cvotingParamsB\x1c\xf2\xde\x1f\x14yaml:\"vo\
    ting_params\"\xc8\xde\x1f\0\x12_\n\x0ctally_params\x18\x07\x20\x01(\x0b2\
    \x1f.cosmos.gov.v1beta1.TallyParamsR\x0btallyParamsB\x1b\xf2\xde\x1f\x13\
    yaml:\"tally_params\"\xc8\xde\x1f\0B*Z(github.com/cosmos/cosmos-sdk/x/go\
    v/typesJ\x95\n\n\x06\x12\x04\0\0\x19\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x02\0\x1b\n\t\n\x02\x03\0\x12\x03\x04\0\x1e\n\t\
    \n\x02\x03\x01\x12\x03\x05\0&\n\x08\n\x01\x08\x12\x03\x07\0?\n\t\n\x02\
    \x08\x0b\x12\x03\x07\0?\nB\n\x02\x04\0\x12\x04\n\0\x19\x01\x1a6\x20Genes\
    isState\x20defines\x20the\x20gov\x20module's\x20genesis\x20state.\n\n\n\
    \n\x03\x04\0\x01\x12\x03\n\x08\x14\nG\n\x04\x04\0\x02\0\x12\x03\x0c\x02[\
    \x1a:\x20starting_proposal_id\x20is\x20the\x20ID\x20of\x20the\x20startin\
    g\x20proposal.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x0c\t\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0c\x20!\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0c\"Z\n\x0f\n\x08\x04\
    \0\x02\0\x08\xee\xfb\x03\x12\x03\x0c#Y\nD\n\x04\x04\0\x02\x01\x12\x03\
    \x0e\x02f\x1a7\x20deposits\x20defines\x20all\x20the\x20deposits\x20prese\
    nt\x20at\x20genesis.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0e\x02\n\n\
    \x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0e\x0b\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x0e\x13\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\
    \x1e\x1f\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x0e\x20e\n\x0f\n\x08\x04\
    \0\x02\x01\x08\xf5\xfb\x03\x12\x03\x0e!F\n\x0f\n\x08\x04\0\x02\x01\x08\
    \xe9\xfb\x03\x12\x03\x0eHd\n>\n\x04\x04\0\x02\x02\x12\x03\x10\x02]\x1a1\
    \x20votes\x20defines\x20all\x20the\x20votes\x20present\x20at\x20genesis.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03\x10\x0b\x0f\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x10\
    \x10\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x10\x18\x19\n\x0c\n\x05\
    \x04\0\x02\x02\x08\x12\x03\x10\x1a\\\n\x0f\n\x08\x04\0\x02\x02\x08\xf5\
    \xfb\x03\x12\x03\x10\x1b=\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\xfb\x03\x12\
    \x03\x10?[\nF\n\x04\x04\0\x02\x03\x12\x03\x12\x02i\x1a9\x20proposals\x20\
    defines\x20all\x20the\x20proposals\x20present\x20at\x20genesis.\n\n\x0c\
    \n\x05\x04\0\x02\x03\x04\x12\x03\x12\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03\x12\x0b\x13\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x12\x14\x1d\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x12\x20!\n\x0c\n\x05\x04\0\x02\x03\
    \x08\x12\x03\x12\"h\n\x0f\n\x08\x04\0\x02\x03\x08\xf5\xfb\x03\x12\x03\
    \x12#I\n\x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\x03\x12\x03\x12Kg\nG\n\x04\
    \x04\0\x02\x04\x12\x03\x14\x02t\x1a:\x20params\x20defines\x20all\x20the\
    \x20paramaters\x20of\x20related\x20to\x20deposit.\n\n\x0c\n\x05\x04\0\
    \x02\x04\x06\x12\x03\x14\x02\x0f\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x14\x10\x1e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x14!\"\n\x0c\n\x05\
    \x04\0\x02\x04\x08\x12\x03\x14#s\n\x0f\n\x08\x04\0\x02\x04\x08\xe9\xfb\
    \x03\x12\x03\x14$@\n\x0f\n\x08\x04\0\x02\x04\x08\xee\xfb\x03\x12\x03\x14\
    Br\nF\n\x04\x04\0\x02\x05\x12\x03\x16\x02q\x1a9\x20params\x20defines\x20\
    all\x20the\x20paramaters\x20of\x20related\x20to\x20voting.\n\n\x0c\n\x05\
    \x04\0\x02\x05\x06\x12\x03\x16\x02\x0e\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\x16\x0f\x1c\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x16\x1f\x20\n\x0c\
    \n\x05\x04\0\x02\x05\x08\x12\x03\x16!p\n\x0f\n\x08\x04\0\x02\x05\x08\xe9\
    \xfb\x03\x12\x03\x16\">\n\x0f\n\x08\x04\0\x02\x05\x08\xee\xfb\x03\x12\
    \x03\x16@o\nE\n\x04\x04\0\x02\x06\x12\x03\x18\x02n\x1a8\x20params\x20def\
    ines\x20all\x20the\x20paramaters\x20of\x20related\x20to\x20tally.\n\n\
    \x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x18\x02\r\n\x0c\n\x05\x04\0\x02\x06\
    \x01\x12\x03\x18\x0e\x1a\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x18\x1d\
    \x1e\n\x0c\n\x05\x04\0\x02\x06\x08\x12\x03\x18\x1fm\n\x0f\n\x08\x04\0\
    \x02\x06\x08\xe9\xfb\x03\x12\x03\x18\x20<\n\x0f\n\x08\x04\0\x02\x06\x08\
    \xee\xfb\x03\x12\x03\x18>lb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::gov::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GenesisState::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
