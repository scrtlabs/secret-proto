// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/gov/v1beta1/gov.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  WeightedVoteOption defines a unit of vote for vote split.
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.WeightedVoteOption)
pub struct WeightedVoteOption {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.WeightedVoteOption.option)
    pub option: ::protobuf::EnumOrUnknown<VoteOption>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.WeightedVoteOption.weight)
    pub weight: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.WeightedVoteOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WeightedVoteOption {
    fn default() -> &'a WeightedVoteOption {
        <WeightedVoteOption as ::protobuf::Message>::default_instance()
    }
}

impl WeightedVoteOption {
    pub fn new() -> WeightedVoteOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "option",
            |m: &WeightedVoteOption| { &m.option },
            |m: &mut WeightedVoteOption| { &mut m.option },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weight",
            |m: &WeightedVoteOption| { &m.weight },
            |m: &mut WeightedVoteOption| { &mut m.weight },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WeightedVoteOption>(
            "WeightedVoteOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WeightedVoteOption {
    const NAME: &'static str = "WeightedVoteOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.option = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.weight = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.option != ::protobuf::EnumOrUnknown::new(VoteOption::VOTE_OPTION_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.option.value());
        }
        if !self.weight.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.weight);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.option != ::protobuf::EnumOrUnknown::new(VoteOption::VOTE_OPTION_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.option))?;
        }
        if !self.weight.is_empty() {
            os.write_string(2, &self.weight)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WeightedVoteOption {
        WeightedVoteOption::new()
    }

    fn clear(&mut self) {
        self.option = ::protobuf::EnumOrUnknown::new(VoteOption::VOTE_OPTION_UNSPECIFIED);
        self.weight.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WeightedVoteOption {
        static instance: WeightedVoteOption = WeightedVoteOption {
            option: ::protobuf::EnumOrUnknown::from_i32(0),
            weight: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WeightedVoteOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WeightedVoteOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WeightedVoteOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WeightedVoteOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TextProposal defines a standard text proposal whose changes need to be
///  manually updated in case of approval.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.TextProposal)
pub struct TextProposal {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TextProposal.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TextProposal.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.TextProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TextProposal {
    fn default() -> &'a TextProposal {
        <TextProposal as ::protobuf::Message>::default_instance()
    }
}

impl TextProposal {
    pub fn new() -> TextProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &TextProposal| { &m.title },
            |m: &mut TextProposal| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &TextProposal| { &m.description },
            |m: &mut TextProposal| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TextProposal>(
            "TextProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TextProposal {
    const NAME: &'static str = "TextProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.title = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TextProposal {
        TextProposal::new()
    }

    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TextProposal {
        static instance: TextProposal = TextProposal {
            title: ::std::string::String::new(),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TextProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TextProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TextProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Deposit defines an amount deposited by an account address to an active
///  proposal.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.Deposit)
pub struct Deposit {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Deposit.proposal_id)
    pub proposal_id: u64,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Deposit.depositor)
    pub depositor: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Deposit.amount)
    pub amount: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.Deposit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Deposit {
    fn default() -> &'a Deposit {
        <Deposit as ::protobuf::Message>::default_instance()
    }
}

impl Deposit {
    pub fn new() -> Deposit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &Deposit| { &m.proposal_id },
            |m: &mut Deposit| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "depositor",
            |m: &Deposit| { &m.depositor },
            |m: &mut Deposit| { &mut m.depositor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &Deposit| { &m.amount },
            |m: &mut Deposit| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Deposit>(
            "Deposit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Deposit {
    const NAME: &'static str = "Deposit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    self.depositor = is.read_string()?;
                },
                26 => {
                    self.amount.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.depositor);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.depositor.is_empty() {
            os.write_string(2, &self.depositor)?;
        }
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Deposit {
        Deposit::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.depositor.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Deposit {
        static instance: Deposit = Deposit {
            proposal_id: 0,
            depositor: ::std::string::String::new(),
            amount: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Deposit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Deposit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Deposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Deposit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Proposal defines the core field members of a governance proposal.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.Proposal)
pub struct Proposal {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.proposal_id)
    pub proposal_id: u64,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.content)
    pub content: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.status)
    pub status: ::protobuf::EnumOrUnknown<ProposalStatus>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.final_tally_result)
    pub final_tally_result: ::protobuf::MessageField<TallyResult>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.submit_time)
    pub submit_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.deposit_end_time)
    pub deposit_end_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.total_deposit)
    pub total_deposit: ::std::vec::Vec<super::coin::Coin>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.voting_start_time)
    pub voting_start_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Proposal.voting_end_time)
    pub voting_end_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.Proposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proposal {
    fn default() -> &'a Proposal {
        <Proposal as ::protobuf::Message>::default_instance()
    }
}

impl Proposal {
    pub fn new() -> Proposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &Proposal| { &m.proposal_id },
            |m: &mut Proposal| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "content",
            |m: &Proposal| { &m.content },
            |m: &mut Proposal| { &mut m.content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Proposal| { &m.status },
            |m: &mut Proposal| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TallyResult>(
            "final_tally_result",
            |m: &Proposal| { &m.final_tally_result },
            |m: &mut Proposal| { &mut m.final_tally_result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "submit_time",
            |m: &Proposal| { &m.submit_time },
            |m: &mut Proposal| { &mut m.submit_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "deposit_end_time",
            |m: &Proposal| { &m.deposit_end_time },
            |m: &mut Proposal| { &mut m.deposit_end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "total_deposit",
            |m: &Proposal| { &m.total_deposit },
            |m: &mut Proposal| { &mut m.total_deposit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "voting_start_time",
            |m: &Proposal| { &m.voting_start_time },
            |m: &mut Proposal| { &mut m.voting_start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "voting_end_time",
            |m: &Proposal| { &m.voting_end_time },
            |m: &mut Proposal| { &mut m.voting_end_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proposal>(
            "Proposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proposal {
    const NAME: &'static str = "Proposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.content)?;
                },
                24 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.final_tally_result)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.submit_time)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deposit_end_time)?;
                },
                58 => {
                    self.total_deposit.push(is.read_message()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.voting_start_time)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.voting_end_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if let Some(v) = self.content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.status.value());
        }
        if let Some(v) = self.final_tally_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.submit_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.deposit_end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.total_deposit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.voting_start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.voting_end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if let Some(v) = self.content.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if let Some(v) = self.final_tally_result.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.submit_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.deposit_end_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.total_deposit {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.voting_start_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.voting_end_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proposal {
        Proposal::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.content.clear();
        self.status = ::protobuf::EnumOrUnknown::new(ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED);
        self.final_tally_result.clear();
        self.submit_time.clear();
        self.deposit_end_time.clear();
        self.total_deposit.clear();
        self.voting_start_time.clear();
        self.voting_end_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proposal {
        static instance: Proposal = Proposal {
            proposal_id: 0,
            content: ::protobuf::MessageField::none(),
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            final_tally_result: ::protobuf::MessageField::none(),
            submit_time: ::protobuf::MessageField::none(),
            deposit_end_time: ::protobuf::MessageField::none(),
            total_deposit: ::std::vec::Vec::new(),
            voting_start_time: ::protobuf::MessageField::none(),
            voting_end_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Proposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TallyResult defines a standard tally for a governance proposal.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.TallyResult)
pub struct TallyResult {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TallyResult.yes)
    pub yes: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TallyResult.abstain)
    pub abstain: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TallyResult.no)
    pub no: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TallyResult.no_with_veto)
    pub no_with_veto: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.TallyResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TallyResult {
    fn default() -> &'a TallyResult {
        <TallyResult as ::protobuf::Message>::default_instance()
    }
}

impl TallyResult {
    pub fn new() -> TallyResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "yes",
            |m: &TallyResult| { &m.yes },
            |m: &mut TallyResult| { &mut m.yes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "abstain",
            |m: &TallyResult| { &m.abstain },
            |m: &mut TallyResult| { &mut m.abstain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "no",
            |m: &TallyResult| { &m.no },
            |m: &mut TallyResult| { &mut m.no },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "no_with_veto",
            |m: &TallyResult| { &m.no_with_veto },
            |m: &mut TallyResult| { &mut m.no_with_veto },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TallyResult>(
            "TallyResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TallyResult {
    const NAME: &'static str = "TallyResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.yes = is.read_string()?;
                },
                18 => {
                    self.abstain = is.read_string()?;
                },
                26 => {
                    self.no = is.read_string()?;
                },
                34 => {
                    self.no_with_veto = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.yes.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.yes);
        }
        if !self.abstain.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.abstain);
        }
        if !self.no.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.no);
        }
        if !self.no_with_veto.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.no_with_veto);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.yes.is_empty() {
            os.write_string(1, &self.yes)?;
        }
        if !self.abstain.is_empty() {
            os.write_string(2, &self.abstain)?;
        }
        if !self.no.is_empty() {
            os.write_string(3, &self.no)?;
        }
        if !self.no_with_veto.is_empty() {
            os.write_string(4, &self.no_with_veto)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TallyResult {
        TallyResult::new()
    }

    fn clear(&mut self) {
        self.yes.clear();
        self.abstain.clear();
        self.no.clear();
        self.no_with_veto.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TallyResult {
        static instance: TallyResult = TallyResult {
            yes: ::std::string::String::new(),
            abstain: ::std::string::String::new(),
            no: ::std::string::String::new(),
            no_with_veto: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TallyResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TallyResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TallyResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TallyResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Vote defines a vote on a governance proposal.
///  A Vote consists of a proposal ID, the voter, and the vote option.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.Vote)
pub struct Vote {
    // message fields
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Vote.proposal_id)
    pub proposal_id: u64,
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Vote.voter)
    pub voter: ::std::string::String,
    ///  Deprecated: Prefer to use `options` instead. This field is set in queries
    ///  if and only if `len(options) == 1` and that option has weight 1. In all
    ///  other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Vote.option)
    pub option: ::protobuf::EnumOrUnknown<VoteOption>,
    ///  Since: cosmos-sdk 0.43
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.Vote.options)
    pub options: ::std::vec::Vec<WeightedVoteOption>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.Vote.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vote {
    fn default() -> &'a Vote {
        <Vote as ::protobuf::Message>::default_instance()
    }
}

impl Vote {
    pub fn new() -> Vote {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal_id",
            |m: &Vote| { &m.proposal_id },
            |m: &mut Vote| { &mut m.proposal_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "voter",
            |m: &Vote| { &m.voter },
            |m: &mut Vote| { &mut m.voter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "option",
            |m: &Vote| { &m.option },
            |m: &mut Vote| { &mut m.option },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &Vote| { &m.options },
            |m: &mut Vote| { &mut m.options },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vote>(
            "Vote",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vote {
    const NAME: &'static str = "Vote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.proposal_id = is.read_uint64()?;
                },
                18 => {
                    self.voter = is.read_string()?;
                },
                24 => {
                    self.option = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.options.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.proposal_id);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        if self.option != ::protobuf::EnumOrUnknown::new(VoteOption::VOTE_OPTION_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.option.value());
        }
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        if self.option != ::protobuf::EnumOrUnknown::new(VoteOption::VOTE_OPTION_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.option))?;
        }
        for v in &self.options {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vote {
        Vote::new()
    }

    fn clear(&mut self) {
        self.proposal_id = 0;
        self.voter.clear();
        self.option = ::protobuf::EnumOrUnknown::new(VoteOption::VOTE_OPTION_UNSPECIFIED);
        self.options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vote {
        static instance: Vote = Vote {
            proposal_id: 0,
            voter: ::std::string::String::new(),
            option: ::protobuf::EnumOrUnknown::from_i32(0),
            options: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vote {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vote").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vote {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  DepositParams defines the params for deposits on governance proposals.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.DepositParams)
pub struct DepositParams {
    // message fields
    ///   Minimum deposit for a proposal to enter voting period.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.DepositParams.min_deposit)
    pub min_deposit: ::std::vec::Vec<super::coin::Coin>,
    ///   Maximum period for Atom holders to deposit on a proposal. Initial value: 2
    ///   months.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.DepositParams.max_deposit_period)
    pub max_deposit_period: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.DepositParams.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DepositParams {
    fn default() -> &'a DepositParams {
        <DepositParams as ::protobuf::Message>::default_instance()
    }
}

impl DepositParams {
    pub fn new() -> DepositParams {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "min_deposit",
            |m: &DepositParams| { &m.min_deposit },
            |m: &mut DepositParams| { &mut m.min_deposit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "max_deposit_period",
            |m: &DepositParams| { &m.max_deposit_period },
            |m: &mut DepositParams| { &mut m.max_deposit_period },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DepositParams>(
            "DepositParams",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DepositParams {
    const NAME: &'static str = "DepositParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.min_deposit.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.max_deposit_period)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.min_deposit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.max_deposit_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.min_deposit {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.max_deposit_period.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DepositParams {
        DepositParams::new()
    }

    fn clear(&mut self) {
        self.min_deposit.clear();
        self.max_deposit_period.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DepositParams {
        static instance: DepositParams = DepositParams {
            min_deposit: ::std::vec::Vec::new(),
            max_deposit_period: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DepositParams {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DepositParams").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DepositParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DepositParams {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  VotingParams defines the params for voting on governance proposals.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.VotingParams)
pub struct VotingParams {
    // message fields
    ///   Length of the voting period.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.VotingParams.voting_period)
    pub voting_period: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.VotingParams.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VotingParams {
    fn default() -> &'a VotingParams {
        <VotingParams as ::protobuf::Message>::default_instance()
    }
}

impl VotingParams {
    pub fn new() -> VotingParams {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "voting_period",
            |m: &VotingParams| { &m.voting_period },
            |m: &mut VotingParams| { &mut m.voting_period },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VotingParams>(
            "VotingParams",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VotingParams {
    const NAME: &'static str = "VotingParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.voting_period)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.voting_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.voting_period.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VotingParams {
        VotingParams::new()
    }

    fn clear(&mut self) {
        self.voting_period.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VotingParams {
        static instance: VotingParams = VotingParams {
            voting_period: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VotingParams {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VotingParams").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VotingParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VotingParams {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TallyParams defines the params for tallying votes on governance proposals.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.gov.v1beta1.TallyParams)
pub struct TallyParams {
    // message fields
    ///   Minimum percentage of total stake needed to vote for a result to be
    ///   considered valid.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TallyParams.quorum)
    pub quorum: ::std::vec::Vec<u8>,
    ///   Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TallyParams.threshold)
    pub threshold: ::std::vec::Vec<u8>,
    ///   Minimum value of Veto votes to Total votes ratio for proposal to be
    ///   vetoed. Default value: 1/3.
    // @@protoc_insertion_point(field:cosmos.gov.v1beta1.TallyParams.veto_threshold)
    pub veto_threshold: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.gov.v1beta1.TallyParams.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TallyParams {
    fn default() -> &'a TallyParams {
        <TallyParams as ::protobuf::Message>::default_instance()
    }
}

impl TallyParams {
    pub fn new() -> TallyParams {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quorum",
            |m: &TallyParams| { &m.quorum },
            |m: &mut TallyParams| { &mut m.quorum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "threshold",
            |m: &TallyParams| { &m.threshold },
            |m: &mut TallyParams| { &mut m.threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "veto_threshold",
            |m: &TallyParams| { &m.veto_threshold },
            |m: &mut TallyParams| { &mut m.veto_threshold },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TallyParams>(
            "TallyParams",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TallyParams {
    const NAME: &'static str = "TallyParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.quorum = is.read_bytes()?;
                },
                18 => {
                    self.threshold = is.read_bytes()?;
                },
                26 => {
                    self.veto_threshold = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.quorum.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.quorum);
        }
        if !self.threshold.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.threshold);
        }
        if !self.veto_threshold.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.veto_threshold);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.quorum.is_empty() {
            os.write_bytes(1, &self.quorum)?;
        }
        if !self.threshold.is_empty() {
            os.write_bytes(2, &self.threshold)?;
        }
        if !self.veto_threshold.is_empty() {
            os.write_bytes(3, &self.veto_threshold)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TallyParams {
        TallyParams::new()
    }

    fn clear(&mut self) {
        self.quorum.clear();
        self.threshold.clear();
        self.veto_threshold.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TallyParams {
        static instance: TallyParams = TallyParams {
            quorum: ::std::vec::Vec::new(),
            threshold: ::std::vec::Vec::new(),
            veto_threshold: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TallyParams {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TallyParams").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TallyParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TallyParams {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  VoteOption enumerates the valid vote options for a given governance proposal.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:cosmos.gov.v1beta1.VoteOption)
pub enum VoteOption {
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.VoteOption.VOTE_OPTION_UNSPECIFIED)
    VOTE_OPTION_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.VoteOption.VOTE_OPTION_YES)
    VOTE_OPTION_YES = 1,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.VoteOption.VOTE_OPTION_ABSTAIN)
    VOTE_OPTION_ABSTAIN = 2,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.VoteOption.VOTE_OPTION_NO)
    VOTE_OPTION_NO = 3,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.VoteOption.VOTE_OPTION_NO_WITH_VETO)
    VOTE_OPTION_NO_WITH_VETO = 4,
}

impl ::protobuf::Enum for VoteOption {
    const NAME: &'static str = "VoteOption";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VoteOption> {
        match value {
            0 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_UNSPECIFIED),
            1 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_YES),
            2 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_ABSTAIN),
            3 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_NO),
            4 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_NO_WITH_VETO),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [VoteOption] = &[
        VoteOption::VOTE_OPTION_UNSPECIFIED,
        VoteOption::VOTE_OPTION_YES,
        VoteOption::VOTE_OPTION_ABSTAIN,
        VoteOption::VOTE_OPTION_NO,
        VoteOption::VOTE_OPTION_NO_WITH_VETO,
    ];
}

impl ::protobuf::EnumFull for VoteOption {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("VoteOption").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for VoteOption {
    fn default() -> Self {
        VoteOption::VOTE_OPTION_UNSPECIFIED
    }
}

impl VoteOption {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<VoteOption>("VoteOption")
    }
}

///  ProposalStatus enumerates the valid statuses of a proposal.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:cosmos.gov.v1beta1.ProposalStatus)
pub enum ProposalStatus {
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED)
    PROPOSAL_STATUS_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD)
    PROPOSAL_STATUS_DEPOSIT_PERIOD = 1,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD)
    PROPOSAL_STATUS_VOTING_PERIOD = 2,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.ProposalStatus.PROPOSAL_STATUS_PASSED)
    PROPOSAL_STATUS_PASSED = 3,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.ProposalStatus.PROPOSAL_STATUS_REJECTED)
    PROPOSAL_STATUS_REJECTED = 4,
    // @@protoc_insertion_point(enum_value:cosmos.gov.v1beta1.ProposalStatus.PROPOSAL_STATUS_FAILED)
    PROPOSAL_STATUS_FAILED = 5,
}

impl ::protobuf::Enum for ProposalStatus {
    const NAME: &'static str = "ProposalStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProposalStatus> {
        match value {
            0 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED),
            1 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_DEPOSIT_PERIOD),
            2 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_VOTING_PERIOD),
            3 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_PASSED),
            4 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_REJECTED),
            5 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_FAILED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ProposalStatus] = &[
        ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED,
        ProposalStatus::PROPOSAL_STATUS_DEPOSIT_PERIOD,
        ProposalStatus::PROPOSAL_STATUS_VOTING_PERIOD,
        ProposalStatus::PROPOSAL_STATUS_PASSED,
        ProposalStatus::PROPOSAL_STATUS_REJECTED,
        ProposalStatus::PROPOSAL_STATUS_FAILED,
    ];
}

impl ::protobuf::EnumFull for ProposalStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ProposalStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ProposalStatus {
    fn default() -> Self {
        ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED
    }
}

impl ProposalStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ProposalStatus>("ProposalStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ccosmos/gov/v1beta1/gov.proto\x12\x12cosmos.gov.v1beta1\x1a\x1ecosm\
    os/base/v1beta1/coin.proto\x1a\x14gogoproto/gogo.proto\x1a\x19cosmos_pro\
    to/cosmos.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/pro\
    tobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\"\xa5\x01\n\x12Wei\
    ghtedVoteOption\x126\n\x06option\x18\x01\x20\x01(\x0e2\x1e.cosmos.gov.v1\
    beta1.VoteOptionR\x06option\x12W\n\x06weight\x18\x02\x20\x01(\tR\x06weig\
    htB?\xf2\xde\x1f\ryaml:\"weight\"\xda\xde\x1f&github.com/cosmos/cosmos-s\
    dk/types.Dec\xc8\xde\x1f\0\"W\n\x0cTextProposal\x12\x14\n\x05title\x18\
    \x01\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\
    \x0bdescription:\x0f\xd2\xb4-\x07Content\xe8\xa0\x1f\x01\"\xcf\x01\n\x07\
    Deposit\x127\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalIdB\x16\xf2\
    \xde\x1f\x12yaml:\"proposal_id\"\x12\x1c\n\tdepositor\x18\x02\x20\x01(\t\
    R\tdepositor\x12c\n\x06amount\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1be\
    ta1.CoinR\x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coi\
    ns\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xf6\x06\n\x08Proposa\
    l\x124\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalIdB\x13\xf2\xde\
    \x1f\tyaml:\"id\"\xea\xde\x1f\x02id\x12;\n\x07content\x18\x02\x20\x01(\
    \x0b2\x14.google.protobuf.AnyR\x07contentB\x0b\xca\xb4-\x07Content\x12V\
    \n\x06status\x18\x03\x20\x01(\x0e2\".cosmos.gov.v1beta1.ProposalStatusR\
    \x06statusB\x1a\xf2\xde\x1f\x16yaml:\"proposal_status\"\x12p\n\x12final_\
    tally_result\x18\x04\x20\x01(\x0b2\x1f.cosmos.gov.v1beta1.TallyResultR\
    \x10finalTallyResultB!\xf2\xde\x1f\x19yaml:\"final_tally_result\"\xc8\
    \xde\x1f\0\x12[\n\x0bsubmit_time\x18\x05\x20\x01(\x0b2\x1a.google.protob\
    uf.TimestampR\nsubmitTimeB\x1e\xf2\xde\x1f\x12yaml:\"submit_time\"\x90\
    \xdf\x1f\x01\xc8\xde\x1f\0\x12i\n\x10deposit_end_time\x18\x06\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\x0edepositEndTimeB#\xf2\xde\x1f\x17\
    yaml:\"deposit_end_time\"\x90\xdf\x1f\x01\xc8\xde\x1f\0\x12\x88\x01\n\rt\
    otal_deposit\x18\x07\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x0ctota\
    lDepositBH\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\
    \x1f\0\xf2\xde\x1f\x14yaml:\"total_deposit\"\x12l\n\x11voting_start_time\
    \x18\x08\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0fvotingStartTime\
    B$\xf2\xde\x1f\x18yaml:\"voting_start_time\"\x90\xdf\x1f\x01\xc8\xde\x1f\
    \0\x12f\n\x0fvoting_end_time\x18\t\x20\x01(\x0b2\x1a.google.protobuf.Tim\
    estampR\rvotingEndTimeB\"\xf2\xde\x1f\x16yaml:\"voting_end_time\"\x90\
    \xdf\x1f\x01\xc8\xde\x1f\0:\x04\xe8\xa0\x1f\x01\"\xc8\x02\n\x0bTallyResu\
    lt\x12@\n\x03yes\x18\x01\x20\x01(\tR\x03yesB.\xda\xde\x1f&github.com/cos\
    mos/cosmos-sdk/types.Int\xc8\xde\x1f\0\x12H\n\x07abstain\x18\x02\x20\x01\
    (\tR\x07abstainB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\
    \xde\x1f\0\x12>\n\x02no\x18\x03\x20\x01(\tR\x02noB.\xda\xde\x1f&github.c\
    om/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0\x12g\n\x0cno_with_veto\x18\
    \x04\x20\x01(\tR\nnoWithVetoBE\xf2\xde\x1f\x13yaml:\"no_with_veto\"\xda\
    \xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0:\x04\xe8\
    \xa0\x1f\x01\"\xe3\x01\n\x04Vote\x127\n\x0bproposal_id\x18\x01\x20\x01(\
    \x04R\nproposalIdB\x16\xf2\xde\x1f\x12yaml:\"proposal_id\"\x12\x14\n\x05\
    voter\x18\x02\x20\x01(\tR\x05voter\x12:\n\x06option\x18\x03\x20\x01(\x0e\
    2\x1e.cosmos.gov.v1beta1.VoteOptionR\x06optionB\x02\x18\x01\x12F\n\x07op\
    tions\x18\x04\x20\x03(\x0b2&.cosmos.gov.v1beta1.WeightedVoteOptionR\x07o\
    ptionsB\x04\xc8\xde\x1f\0:\x08\x98\xa0\x1f\0\xe8\xa0\x1f\0\"\xbe\x02\n\r\
    DepositParams\x12\x9b\x01\n\x0bmin_deposit\x18\x01\x20\x03(\x0b2\x19.cos\
    mos.base.v1beta1.CoinR\nminDepositB_\xf2\xde\x1f\x12yaml:\"min_deposit\"\
    \xc8\xde\x1f\0\xea\xde\x1f\x15min_deposit,omitempty\xaa\xdf\x1f(github.c\
    om/cosmos/cosmos-sdk/types.Coins\x12\x8e\x01\n\x12max_deposit_period\x18\
    \x02\x20\x01(\x0b2\x19.google.protobuf.DurationR\x10maxDepositPeriodBE\
    \xf2\xde\x1f\x19yaml:\"max_deposit_period\"\xc8\xde\x1f\0\x98\xdf\x1f\
    \x01\xea\xde\x1f\x1cmax_deposit_period,omitempty\"\x8b\x01\n\x0cVotingPa\
    rams\x12{\n\rvoting_period\x18\x01\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationR\x0cvotingPeriodB;\xf2\xde\x1f\x14yaml:\"voting_period\"\xc8\xde\
    \x1f\0\x98\xdf\x1f\x01\xea\xde\x1f\x17voting_period,omitempty\"\xdb\x02\
    \n\x0bTallyParams\x12Z\n\x06quorum\x18\x01\x20\x01(\x0cR\x06quorumBB\xda\
    \xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\xea\xde\
    \x1f\x10quorum,omitempty\x12c\n\tthreshold\x18\x02\x20\x01(\x0cR\tthresh\
    oldBE\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\
    \xea\xde\x1f\x13threshold,omitempty\x12\x8a\x01\n\x0eveto_threshold\x18\
    \x03\x20\x01(\x0cR\rvetoThresholdBc\xf2\xde\x1f\x15yaml:\"veto_threshold\
    \"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\xea\
    \xde\x1f\x18veto_threshold,omitempty*\xe6\x01\n\nVoteOption\x12,\n\x17VO\
    TE_OPTION_UNSPECIFIED\x10\0\x1a\x0f\x8a\x9d\x20\x0bOptionEmpty\x12\"\n\
    \x0fVOTE_OPTION_YES\x10\x01\x1a\r\x8a\x9d\x20\tOptionYes\x12*\n\x13VOTE_\
    OPTION_ABSTAIN\x10\x02\x1a\x11\x8a\x9d\x20\rOptionAbstain\x12\x20\n\x0eV\
    OTE_OPTION_NO\x10\x03\x1a\x0c\x8a\x9d\x20\x08OptionNo\x122\n\x18VOTE_OPT\
    ION_NO_WITH_VETO\x10\x04\x1a\x14\x8a\x9d\x20\x10OptionNoWithVeto\x1a\x04\
    \x88\xa3\x1e\0*\xcc\x02\n\x0eProposalStatus\x12.\n\x1bPROPOSAL_STATUS_UN\
    SPECIFIED\x10\0\x1a\r\x8a\x9d\x20\tStatusNil\x12;\n\x1ePROPOSAL_STATUS_D\
    EPOSIT_PERIOD\x10\x01\x1a\x17\x8a\x9d\x20\x13StatusDepositPeriod\x129\n\
    \x1dPROPOSAL_STATUS_VOTING_PERIOD\x10\x02\x1a\x16\x8a\x9d\x20\x12StatusV\
    otingPeriod\x12,\n\x16PROPOSAL_STATUS_PASSED\x10\x03\x1a\x10\x8a\x9d\x20\
    \x0cStatusPassed\x120\n\x18PROPOSAL_STATUS_REJECTED\x10\x04\x1a\x12\x8a\
    \x9d\x20\x0eStatusRejected\x12,\n\x16PROPOSAL_STATUS_FAILED\x10\x05\x1a\
    \x10\x8a\x9d\x20\x0cStatusFailed\x1a\x04\x88\xa3\x1e\0B6Z(github.com/cos\
    mos/cosmos-sdk/x/gov/types\xd8\xe1\x1e\0\xc8\xe1\x1e\0\x80\xe2\x1e\0J\
    \xbc7\n\x07\x12\x05\0\0\xc7\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x1b\n\t\n\x02\x03\0\x12\x03\x03\0(\n\t\n\
    \x02\x03\x01\x12\x03\x04\0\x1e\n\t\n\x02\x03\x02\x12\x03\x05\0#\n\t\n\
    \x02\x03\x03\x12\x03\x06\0)\n\t\n\x02\x03\x04\x12\x03\x07\0#\n\t\n\x02\
    \x03\x05\x12\x03\x08\0(\n\x08\n\x01\x08\x12\x03\n\0U\n\t\n\x02\x08\x0b\
    \x12\x03\n\0U\n\x08\n\x01\x08\x12\x03\x0b\00\n\x0b\n\x04\x08\x9b\xec\x03\
    \x12\x03\x0b\00\n\x08\n\x01\x08\x12\x03\x0c\00\n\x0b\n\x04\x08\xa0\xec\
    \x03\x12\x03\x0c\00\n\x08\n\x01\x08\x12\x03\r\00\n\x0b\n\x04\x08\x99\xec\
    \x03\x12\x03\r\00\n[\n\x02\x05\0\x12\x04\x10\0\x1d\x01\x1aO\x20VoteOptio\
    n\x20enumerates\x20the\x20valid\x20vote\x20options\x20for\x20a\x20given\
    \x20governance\x20proposal.\n\n\n\n\x03\x05\0\x01\x12\x03\x10\x05\x0f\n\
    \n\n\x03\x05\0\x03\x12\x03\x11\x021\n\r\n\x06\x05\0\x03\xb1\xe4\x03\x12\
    \x03\x11\x021\nC\n\x04\x05\0\x02\0\x12\x03\x14\x02Q\x1a6\x20VOTE_OPTION_\
    UNSPECIFIED\x20defines\x20a\x20no-op\x20vote\x20option.\n\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\x14\x02\x19\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    \x14\x1c\x1d\n\x0c\n\x05\x05\0\x02\0\x03\x12\x03\x14\x1eP\n\x0f\n\x08\
    \x05\0\x02\0\x03\xd1\x83\x04\x12\x03\x14\x1fO\n9\n\x04\x05\0\x02\x01\x12\
    \x03\x16\x02G\x1a,\x20VOTE_OPTION_YES\x20defines\x20a\x20yes\x20vote\x20\
    option.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x16\x02\x11\n\x0c\n\x05\
    \x05\0\x02\x01\x02\x12\x03\x16\x14\x15\n\x0c\n\x05\x05\0\x02\x01\x03\x12\
    \x03\x16\x16F\n\x0f\n\x08\x05\0\x02\x01\x03\xd1\x83\x04\x12\x03\x16\x17E\
    \nB\n\x04\x05\0\x02\x02\x12\x03\x18\x02O\x1a5\x20VOTE_OPTION_ABSTAIN\x20\
    defines\x20an\x20abstain\x20vote\x20option.\n\n\x0c\n\x05\x05\0\x02\x02\
    \x01\x12\x03\x18\x02\x15\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x18\x18\
    \x19\n\x0c\n\x05\x05\0\x02\x02\x03\x12\x03\x18\x1aN\n\x0f\n\x08\x05\0\
    \x02\x02\x03\xd1\x83\x04\x12\x03\x18\x1bM\n7\n\x04\x05\0\x02\x03\x12\x03\
    \x1a\x02E\x1a*\x20VOTE_OPTION_NO\x20defines\x20a\x20no\x20vote\x20option\
    .\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x1a\x02\x10\n\x0c\n\x05\x05\0\
    \x02\x03\x02\x12\x03\x1a\x13\x14\n\x0c\n\x05\x05\0\x02\x03\x03\x12\x03\
    \x1a\x15D\n\x0f\n\x08\x05\0\x02\x03\x03\xd1\x83\x04\x12\x03\x1a\x16C\nK\
    \n\x04\x05\0\x02\x04\x12\x03\x1c\x02W\x1a>\x20VOTE_OPTION_NO_WITH_VETO\
    \x20defines\x20a\x20no\x20with\x20veto\x20vote\x20option.\n\n\x0c\n\x05\
    \x05\0\x02\x04\x01\x12\x03\x1c\x02\x1a\n\x0c\n\x05\x05\0\x02\x04\x02\x12\
    \x03\x1c\x1d\x1e\n\x0c\n\x05\x05\0\x02\x04\x03\x12\x03\x1c\x1fV\n\x0f\n\
    \x08\x05\0\x02\x04\x03\xd1\x83\x04\x12\x03\x1c\x20U\n`\n\x02\x04\0\x12\
    \x04\"\0)\x01\x1aT\x20WeightedVoteOption\x20defines\x20a\x20unit\x20of\
    \x20vote\x20for\x20vote\x20split.\n\n\x20Since:\x20cosmos-sdk\x200.43\n\
    \n\n\n\x03\x04\0\x01\x12\x03\"\x08\x1a\n\x0b\n\x04\x04\0\x02\0\x12\x03#\
    \x02\x18\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03#\x02\x0c\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03#\r\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03#\x16\x17\n\
    \x0c\n\x04\x04\0\x02\x01\x12\x04$\x02(\x04\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03$\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03$\r\x13\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03$\x16\x17\n\r\n\x05\x04\0\x02\x01\x08\x12\
    \x04$\x18(\x03\n\x0f\n\x08\x04\0\x02\x01\x08\xeb\xfb\x03\x12\x03%\x04E\n\
    \x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03&\x04\"\n\x0f\n\x08\x04\
    \0\x02\x01\x08\xee\xfb\x03\x12\x03'\x04.\n{\n\x02\x04\x01\x12\x04-\04\
    \x01\x1ao\x20TextProposal\x20defines\x20a\x20standard\x20text\x20proposa\
    l\x20whose\x20changes\x20need\x20to\x20be\n\x20manually\x20updated\x20in\
    \x20case\x20of\x20approval.\n\n\n\n\x03\x04\x01\x01\x12\x03-\x08\x14\n\n\
    \n\x03\x04\x01\x07\x12\x03.\x029\n\r\n\x06\x04\x01\x07\xca\xd6\x05\x12\
    \x03.\x029\n\n\n\x03\x04\x01\x07\x12\x030\x02\"\n\r\n\x06\x04\x01\x07\
    \x8d\xf4\x03\x12\x030\x02\"\n\x0b\n\x04\x04\x01\x02\0\x12\x032\x02\x19\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x032\t\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x032\x17\x18\n\x0b\
    \n\x04\x04\x01\x02\x01\x12\x033\x02\x19\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x033\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x033\t\x14\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x033\x17\x18\n_\n\x02\x04\x02\x12\x048\0@\
    \x01\x1aS\x20Deposit\x20defines\x20an\x20amount\x20deposited\x20by\x20an\
    \x20account\x20address\x20to\x20an\x20active\n\x20proposal.\n\n\n\n\x03\
    \x04\x02\x01\x12\x038\x08\x0f\n\n\n\x03\x04\x02\x07\x12\x039\x02-\n\r\n\
    \x06\x04\x02\x07\x81\xf4\x03\x12\x039\x02-\n\n\n\x03\x04\x02\x07\x12\x03\
    :\x02-\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x03:\x02-\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03<\x02_\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03<\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03<\x0b\x16\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03<-.\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03</^\n\x0f\n\x08\
    \x04\x02\x02\0\x08\xee\xfb\x03\x12\x03<0]\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03=\x02/\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03=\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03=\x0b\x14\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03=-.\n\x0c\n\x04\x04\x02\x02\x02\x12\x04>\x02?l\n\x0c\n\x05\
    \x04\x02\x02\x02\x04\x12\x03>\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\
    \x03>\x0b#\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03>$*\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03>-.\n\x0c\n\x05\x04\x02\x02\x02\x08\x12\x03?\x06\
    k\n\x0f\n\x08\x04\x02\x02\x02\x08\xe9\xfb\x03\x12\x03?\x07#\n\x0f\n\x08\
    \x04\x02\x02\x02\x08\xf5\xfb\x03\x12\x03?%j\nO\n\x02\x04\x03\x12\x04C\0X\
    \x01\x1aC\x20Proposal\x20defines\x20the\x20core\x20field\x20members\x20o\
    f\x20a\x20governance\x20proposal.\n\n\n\n\x03\x04\x03\x01\x12\x03C\x08\
    \x10\n\n\n\x03\x04\x03\x07\x12\x03D\x02\"\n\r\n\x06\x04\x03\x07\x8d\xf4\
    \x03\x12\x03D\x02\"\n\x0b\n\x04\x04\x03\x02\0\x12\x03F\x02p\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03F\x16!\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03F+,\n\x0c\n\x05\x04\x03\
    \x02\0\x08\x12\x03F-o\n\x0f\n\x08\x04\x03\x02\0\x08\xed\xfb\x03\x12\x03F\
    .H\n\x0f\n\x08\x04\x03\x02\0\x08\xee\xfb\x03\x12\x03FJn\n\x0b\n\x04\x04\
    \x03\x02\x01\x12\x03G\x02\\\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03G\x02\
    \x15\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03G\x16\x1d\n\x0c\n\x05\x04\
    \x03\x02\x01\x03\x12\x03G+,\n\x0c\n\x05\x04\x03\x02\x01\x08\x12\x03G-[\n\
    \x0f\n\x08\x04\x03\x02\x01\x08\xc9\xd6\x05\x12\x03G.Z\n\x0b\n\x04\x04\
    \x03\x02\x02\x12\x03H\x02a\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03H\x02\
    \x10\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03H\x16\x1c\n\x0c\n\x05\x04\
    \x03\x02\x02\x03\x12\x03H+,\n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x03H-`\n\
    \x0f\n\x08\x04\x03\x02\x02\x08\xee\xfb\x03\x12\x03H._\n\x0c\n\x04\x04\
    \x03\x02\x03\x12\x04I\x02J[\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03I\x02\
    \r\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03I\x16(\n\x0c\n\x05\x04\x03\x02\
    \x03\x03\x12\x03I+,\n\x0c\n\x05\x04\x03\x02\x03\x08\x12\x03J\x06Z\n\x0f\
    \n\x08\x04\x03\x02\x03\x08\xe9\xfb\x03\x12\x03J\x07#\n\x0f\n\x08\x04\x03\
    \x02\x03\x08\xee\xfb\x03\x12\x03J%Y\n\x0c\n\x04\x04\x03\x02\x04\x12\x04K\
    \x02Lp\n\x0c\n\x05\x04\x03\x02\x04\x06\x12\x03K\x02\x1b\n\x0c\n\x05\x04\
    \x03\x02\x04\x01\x12\x03K\x1c'\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03K*\
    +\n\x0c\n\x05\x04\x03\x02\x04\x08\x12\x03L\x06o\n\x0f\n\x08\x04\x03\x02\
    \x04\x08\xf2\xfb\x03\x12\x03L\x07!\n\x0f\n\x08\x04\x03\x02\x04\x08\xe9\
    \xfb\x03\x12\x03L#?\n\x0f\n\x08\x04\x03\x02\x04\x08\xee\xfb\x03\x12\x03L\
    An\n\x0c\n\x04\x04\x03\x02\x05\x12\x04M\x02Nu\n\x0c\n\x05\x04\x03\x02\
    \x05\x06\x12\x03M\x02\x1b\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03M\x1c,\
    \n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03M/0\n\x0c\n\x05\x04\x03\x02\x05\
    \x08\x12\x03N\x06t\n\x0f\n\x08\x04\x03\x02\x05\x08\xf2\xfb\x03\x12\x03N\
    \x07!\n\x0f\n\x08\x04\x03\x02\x05\x08\xe9\xfb\x03\x12\x03N#?\n\x0f\n\x08\
    \x04\x03\x02\x05\x08\xee\xfb\x03\x12\x03NAs\n\x0c\n\x04\x04\x03\x02\x06\
    \x12\x04O\x02S\x04\n\x0c\n\x05\x04\x03\x02\x06\x04\x12\x03O\x02\n\n\x0c\
    \n\x05\x04\x03\x02\x06\x06\x12\x03O\x0b#\n\x0c\n\x05\x04\x03\x02\x06\x01\
    \x12\x03O$1\n\x0c\n\x05\x04\x03\x02\x06\x03\x12\x03O45\n\r\n\x05\x04\x03\
    \x02\x06\x08\x12\x04O6S\x03\n\x0f\n\x08\x04\x03\x02\x06\x08\xe9\xfb\x03\
    \x12\x03P\x04$\n\x0f\n\x08\x04\x03\x02\x06\x08\xf5\xfb\x03\x12\x03Q\x04I\
    \n\x0f\n\x08\x04\x03\x02\x06\x08\xee\xfb\x03\x12\x03R\x047\n\x0c\n\x04\
    \x04\x03\x02\x07\x12\x04T\x02Uv\n\x0c\n\x05\x04\x03\x02\x07\x06\x12\x03T\
    \x02\x1b\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x03T\x1c-\n\x0c\n\x05\x04\
    \x03\x02\x07\x03\x12\x03T01\n\x0c\n\x05\x04\x03\x02\x07\x08\x12\x03U\x06\
    u\n\x0f\n\x08\x04\x03\x02\x07\x08\xf2\xfb\x03\x12\x03U\x07!\n\x0f\n\x08\
    \x04\x03\x02\x07\x08\xe9\xfb\x03\x12\x03U#?\n\x0f\n\x08\x04\x03\x02\x07\
    \x08\xee\xfb\x03\x12\x03UAt\n\x0c\n\x04\x04\x03\x02\x08\x12\x04V\x02Wt\n\
    \x0c\n\x05\x04\x03\x02\x08\x06\x12\x03V\x02\x1b\n\x0c\n\x05\x04\x03\x02\
    \x08\x01\x12\x03V\x1c+\n\x0c\n\x05\x04\x03\x02\x08\x03\x12\x03V./\n\x0c\
    \n\x05\x04\x03\x02\x08\x08\x12\x03W\x06s\n\x0f\n\x08\x04\x03\x02\x08\x08\
    \xf2\xfb\x03\x12\x03W\x07!\n\x0f\n\x08\x04\x03\x02\x08\x08\xe9\xfb\x03\
    \x12\x03W#?\n\x0f\n\x08\x04\x03\x02\x08\x08\xee\xfb\x03\x12\x03WAr\nI\n\
    \x02\x05\x01\x12\x04[\0o\x01\x1a=\x20ProposalStatus\x20enumerates\x20the\
    \x20valid\x20statuses\x20of\x20a\x20proposal.\n\n\n\n\x03\x05\x01\x01\
    \x12\x03[\x05\x13\n\n\n\x03\x05\x01\x03\x12\x03\\\x021\n\r\n\x06\x05\x01\
    \x03\xb1\xe4\x03\x12\x03\\\x021\nP\n\x04\x05\x01\x02\0\x12\x03_\x02S\x1a\
    C\x20PROPOSAL_STATUS_UNSPECIFIED\x20defines\x20the\x20default\x20propops\
    al\x20status.\n\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03_\x02\x1d\n\x0c\n\
    \x05\x05\x01\x02\0\x02\x12\x03_\x20!\n\x0c\n\x05\x05\x01\x02\0\x03\x12\
    \x03_\"R\n\x0f\n\x08\x05\x01\x02\0\x03\xd1\x83\x04\x12\x03_#Q\nc\n\x04\
    \x05\x01\x02\x01\x12\x03b\x02`\x1aV\x20PROPOSAL_STATUS_DEPOSIT_PERIOD\
    \x20defines\x20a\x20proposal\x20status\x20during\x20the\x20deposit\n\x20\
    period.\n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03b\x02\x20\n\x0c\n\x05\
    \x05\x01\x02\x01\x02\x12\x03b#$\n\x0c\n\x05\x05\x01\x02\x01\x03\x12\x03b\
    %_\n\x0f\n\x08\x05\x01\x02\x01\x03\xd1\x83\x04\x12\x03b&^\na\n\x04\x05\
    \x01\x02\x02\x12\x03e\x02^\x1aT\x20PROPOSAL_STATUS_VOTING_PERIOD\x20defi\
    nes\x20a\x20proposal\x20status\x20during\x20the\x20voting\n\x20period.\n\
    \n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03e\x02\x1f\n\x0c\n\x05\x05\x01\
    \x02\x02\x02\x12\x03e\"#\n\x0c\n\x05\x05\x01\x02\x02\x03\x12\x03e$]\n\
    \x0f\n\x08\x05\x01\x02\x02\x03\xd1\x83\x04\x12\x03e%\\\n_\n\x04\x05\x01\
    \x02\x03\x12\x03h\x02Q\x1aR\x20PROPOSAL_STATUS_PASSED\x20defines\x20a\
    \x20proposal\x20status\x20of\x20a\x20proposal\x20that\x20has\n\x20passed\
    .\n\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03h\x02\x18\n\x0c\n\x05\x05\x01\
    \x02\x03\x02\x12\x03h\x1b\x1c\n\x0c\n\x05\x05\x01\x02\x03\x03\x12\x03h\
    \x1dP\n\x0f\n\x08\x05\x01\x02\x03\x03\xd1\x83\x04\x12\x03h\x1eO\nh\n\x04\
    \x05\x01\x02\x04\x12\x03k\x02U\x1a[\x20PROPOSAL_STATUS_REJECTED\x20defin\
    es\x20a\x20proposal\x20status\x20of\x20a\x20proposal\x20that\x20has\n\
    \x20been\x20rejected.\n\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03k\x02\x1a\
    \n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03k\x1d\x1e\n\x0c\n\x05\x05\x01\
    \x02\x04\x03\x12\x03k\x1fT\n\x0f\n\x08\x05\x01\x02\x04\x03\xd1\x83\x04\
    \x12\x03k\x20S\n_\n\x04\x05\x01\x02\x05\x12\x03n\x02Q\x1aR\x20PROPOSAL_S\
    TATUS_FAILED\x20defines\x20a\x20proposal\x20status\x20of\x20a\x20proposa\
    l\x20that\x20has\n\x20failed.\n\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03n\
    \x02\x18\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03n\x1b\x1c\n\x0c\n\x05\
    \x05\x01\x02\x05\x03\x12\x03n\x1dP\n\x0f\n\x08\x05\x01\x02\x05\x03\xd1\
    \x83\x04\x12\x03n\x1eO\nM\n\x02\x04\x04\x12\x04r\0}\x01\x1aA\x20TallyRes\
    ult\x20defines\x20a\x20standard\x20tally\x20for\x20a\x20governance\x20pr\
    oposal.\n\n\n\n\x03\x04\x04\x01\x12\x03r\x08\x13\n\n\n\x03\x04\x04\x07\
    \x12\x03s\x02\"\n\r\n\x06\x04\x04\x07\x8d\xf4\x03\x12\x03s\x02\"\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x03u\x02w\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03u\
    \x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03u\t\x0c\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03u\x13\x14\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03u\
    \x15v\n\x0f\n\x08\x04\x04\x02\0\x08\xeb\xfb\x03\x12\x03u\x16W\n\x0f\n\
    \x08\x04\x04\x02\0\x08\xe9\xfb\x03\x12\x03uYu\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03v\x02w\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03v\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03v\t\x10\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03v\x13\x14\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03v\x15v\
    \n\x0f\n\x08\x04\x04\x02\x01\x08\xeb\xfb\x03\x12\x03v\x16W\n\x0f\n\x08\
    \x04\x04\x02\x01\x08\xe9\xfb\x03\x12\x03vYu\n\x0b\n\x04\x04\x04\x02\x02\
    \x12\x03w\x02w\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03w\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x03w\t\x0b\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x03w\x13\x14\n\x0c\n\x05\x04\x04\x02\x02\x08\x12\x03w\x15v\n\x0f\n\
    \x08\x04\x04\x02\x02\x08\xeb\xfb\x03\x12\x03w\x16W\n\x0f\n\x08\x04\x04\
    \x02\x02\x08\xe9\xfb\x03\x12\x03wYu\n\x0c\n\x04\x04\x04\x02\x03\x12\x04x\
    \x02|\x04\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03x\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\x03\x01\x12\x03x\t\x15\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\
    \x03x\x18\x19\n\r\n\x05\x04\x04\x02\x03\x08\x12\x04x\x1a|\x03\n\x0f\n\
    \x08\x04\x04\x02\x03\x08\xeb\xfb\x03\x12\x03y\x04E\n\x0f\n\x08\x04\x04\
    \x02\x03\x08\xe9\xfb\x03\x12\x03z\x04\"\n\x0f\n\x08\x04\x04\x02\x03\x08\
    \xee\xfb\x03\x12\x03{\x044\n\x80\x01\n\x02\x04\x05\x12\x06\x81\x01\0\x8d\
    \x01\x01\x1ar\x20Vote\x20defines\x20a\x20vote\x20on\x20a\x20governance\
    \x20proposal.\n\x20A\x20Vote\x20consists\x20of\x20a\x20proposal\x20ID,\
    \x20the\x20voter,\x20and\x20the\x20vote\x20option.\n\n\x0b\n\x03\x04\x05\
    \x01\x12\x04\x81\x01\x08\x0c\n\x0b\n\x03\x04\x05\x07\x12\x04\x82\x01\x02\
    .\n\x0e\n\x06\x04\x05\x07\x83\xf4\x03\x12\x04\x82\x01\x02.\n\x0b\n\x03\
    \x04\x05\x07\x12\x04\x83\x01\x02.\n\x0e\n\x06\x04\x05\x07\x8d\xf4\x03\
    \x12\x04\x83\x01\x02.\n\x0c\n\x04\x04\x05\x02\0\x12\x04\x85\x01\x02I\n\r\
    \n\x05\x04\x05\x02\0\x05\x12\x04\x85\x01\x02\x08\n\r\n\x05\x04\x05\x02\0\
    \x01\x12\x04\x85\x01\t\x14\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x85\x01\
    \x17\x18\n\r\n\x05\x04\x05\x02\0\x08\x12\x04\x85\x01\x19H\n\x10\n\x08\
    \x04\x05\x02\0\x08\xee\xfb\x03\x12\x04\x85\x01\x1aG\n\x0c\n\x04\x04\x05\
    \x02\x01\x12\x04\x86\x01\x02\x19\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\
    \x86\x01\x02\x08\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x86\x01\t\x0e\n\r\
    \n\x05\x04\x05\x02\x01\x03\x12\x04\x86\x01\x17\x18\n\xe5\x01\n\x04\x04\
    \x05\x02\x02\x12\x04\x8a\x01\x02>\x1a\xd6\x01\x20Deprecated:\x20Prefer\
    \x20to\x20use\x20`options`\x20instead.\x20This\x20field\x20is\x20set\x20\
    in\x20queries\n\x20if\x20and\x20only\x20if\x20`len(options)\x20==\x201`\
    \x20and\x20that\x20option\x20has\x20weight\x201.\x20In\x20all\n\x20other\
    \x20cases,\x20this\x20field\x20will\x20default\x20to\x20VOTE_OPTION_UNSP\
    ECIFIED.\n\n\r\n\x05\x04\x05\x02\x02\x06\x12\x04\x8a\x01\x02\x0c\n\r\n\
    \x05\x04\x05\x02\x02\x01\x12\x04\x8a\x01\x1e$\n\r\n\x05\x04\x05\x02\x02\
    \x03\x12\x04\x8a\x01()\n\r\n\x05\x04\x05\x02\x02\x08\x12\x04\x8a\x01*=\n\
    \x0e\n\x06\x04\x05\x02\x02\x08\x03\x12\x04\x8a\x01+<\n&\n\x04\x04\x05\
    \x02\x03\x12\x04\x8c\x01\x02I\x1a\x18\x20Since:\x20cosmos-sdk\x200.43\n\
    \n\r\n\x05\x04\x05\x02\x03\x04\x12\x04\x8c\x01\x02\n\n\r\n\x05\x04\x05\
    \x02\x03\x06\x12\x04\x8c\x01\x0b\x1d\n\r\n\x05\x04\x05\x02\x03\x01\x12\
    \x04\x8c\x01\x1e%\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\x8c\x01()\n\r\n\
    \x05\x04\x05\x02\x03\x08\x12\x04\x8c\x01*H\n\x10\n\x08\x04\x05\x02\x03\
    \x08\xe9\xfb\x03\x12\x04\x8c\x01+G\nV\n\x02\x04\x06\x12\x06\x90\x01\0\
    \xa1\x01\x01\x1aH\x20DepositParams\x20defines\x20the\x20params\x20for\
    \x20deposits\x20on\x20governance\x20proposals.\n\n\x0b\n\x03\x04\x06\x01\
    \x12\x04\x90\x01\x08\x15\nI\n\x04\x04\x06\x02\0\x12\x06\x92\x01\x02\x97\
    \x01\x04\x1a9\x20\x20Minimum\x20deposit\x20for\x20a\x20proposal\x20to\
    \x20enter\x20voting\x20period.\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04\x92\
    \x01\x02\n\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\x92\x01\x0b#\n\r\n\x05\
    \x04\x06\x02\0\x01\x12\x04\x92\x01$/\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\
    \x92\x0123\n\x0f\n\x05\x04\x06\x02\0\x08\x12\x06\x92\x014\x97\x01\x03\n\
    \x10\n\x08\x04\x06\x02\0\x08\xe9\xfb\x03\x12\x04\x93\x01\x04$\n\x10\n\
    \x08\x04\x06\x02\0\x08\xf5\xfb\x03\x12\x04\x94\x01\x04I\n\x10\n\x08\x04\
    \x06\x02\0\x08\xee\xfb\x03\x12\x04\x95\x01\x045\n\x10\n\x08\x04\x06\x02\
    \0\x08\xed\xfb\x03\x12\x04\x96\x01\x046\ng\n\x04\x04\x06\x02\x01\x12\x06\
    \x9b\x01\x02\xa0\x01\x04\x1aW\x20\x20Maximum\x20period\x20for\x20Atom\
    \x20holders\x20to\x20deposit\x20on\x20a\x20proposal.\x20Initial\x20value\
    :\x202\n\x20\x20months.\n\n\r\n\x05\x04\x06\x02\x01\x06\x12\x04\x9b\x01\
    \x02\x1a\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x9b\x01\x1b-\n\r\n\x05\
    \x04\x06\x02\x01\x03\x12\x04\x9b\x0101\n\x0f\n\x05\x04\x06\x02\x01\x08\
    \x12\x06\x9b\x012\xa0\x01\x03\n\x10\n\x08\x04\x06\x02\x01\x08\xe9\xfb\
    \x03\x12\x04\x9c\x01\x04#\n\x10\n\x08\x04\x06\x02\x01\x08\xf3\xfb\x03\
    \x12\x04\x9d\x01\x04\"\n\x10\n\x08\x04\x06\x02\x01\x08\xed\xfb\x03\x12\
    \x04\x9e\x01\x04<\n\x10\n\x08\x04\x06\x02\x01\x08\xee\xfb\x03\x12\x04\
    \x9f\x01\x04;\nS\n\x02\x04\x07\x12\x06\xa4\x01\0\xac\x01\x01\x1aE\x20Vot\
    ingParams\x20defines\x20the\x20params\x20for\x20voting\x20on\x20governan\
    ce\x20proposals.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xa4\x01\x08\x14\n/\n\
    \x04\x04\x07\x02\0\x12\x06\xa6\x01\x02\xab\x01\x04\x1a\x1f\x20\x20Length\
    \x20of\x20the\x20voting\x20period.\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\
    \xa6\x01\x02\x1a\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xa6\x01\x1b(\n\r\n\
    \x05\x04\x07\x02\0\x03\x12\x04\xa6\x01+,\n\x0f\n\x05\x04\x07\x02\0\x08\
    \x12\x06\xa6\x01-\xab\x01\x03\n\x10\n\x08\x04\x07\x02\0\x08\xe9\xfb\x03\
    \x12\x04\xa7\x01\x04#\n\x10\n\x08\x04\x07\x02\0\x08\xf3\xfb\x03\x12\x04\
    \xa8\x01\x04\"\n\x10\n\x08\x04\x07\x02\0\x08\xed\xfb\x03\x12\x04\xa9\x01\
    \x047\n\x10\n\x08\x04\x07\x02\0\x08\xee\xfb\x03\x12\x04\xaa\x01\x046\nZ\
    \n\x02\x04\x08\x12\x06\xaf\x01\0\xc7\x01\x01\x1aL\x20TallyParams\x20defi\
    nes\x20the\x20params\x20for\x20tallying\x20votes\x20on\x20governance\x20\
    proposals.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xaf\x01\x08\x13\nj\n\x04\
    \x04\x08\x02\0\x12\x06\xb2\x01\x02\xb6\x01\x04\x1aZ\x20\x20Minimum\x20pe\
    rcentage\x20of\x20total\x20stake\x20needed\x20to\x20vote\x20for\x20a\x20\
    result\x20to\x20be\n\x20\x20considered\x20valid.\n\n\r\n\x05\x04\x08\x02\
    \0\x05\x12\x04\xb2\x01\x02\x07\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xb2\
    \x01\x08\x0e\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xb2\x01\x11\x12\n\x0f\n\
    \x05\x04\x08\x02\0\x08\x12\x06\xb2\x01\x13\xb6\x01\x03\n\x10\n\x08\x04\
    \x08\x02\0\x08\xeb\xfb\x03\x12\x04\xb3\x01\x04E\n\x10\n\x08\x04\x08\x02\
    \0\x08\xe9\xfb\x03\x12\x04\xb4\x01\x04\"\n\x10\n\x08\x04\x08\x02\0\x08\
    \xed\xfb\x03\x12\x04\xb5\x01\x04/\n\\\n\x04\x04\x08\x02\x01\x12\x06\xb9\
    \x01\x02\xbd\x01\x04\x1aL\x20\x20Minimum\x20proportion\x20of\x20Yes\x20v\
    otes\x20for\x20proposal\x20to\x20pass.\x20Default\x20value:\x200.5.\n\n\
    \r\n\x05\x04\x08\x02\x01\x05\x12\x04\xb9\x01\x02\x07\n\r\n\x05\x04\x08\
    \x02\x01\x01\x12\x04\xb9\x01\x08\x11\n\r\n\x05\x04\x08\x02\x01\x03\x12\
    \x04\xb9\x01\x14\x15\n\x0f\n\x05\x04\x08\x02\x01\x08\x12\x06\xb9\x01\x16\
    \xbd\x01\x03\n\x10\n\x08\x04\x08\x02\x01\x08\xeb\xfb\x03\x12\x04\xba\x01\
    \x04E\n\x10\n\x08\x04\x08\x02\x01\x08\xe9\xfb\x03\x12\x04\xbb\x01\x04\"\
    \n\x10\n\x08\x04\x08\x02\x01\x08\xed\xfb\x03\x12\x04\xbc\x01\x042\nt\n\
    \x04\x04\x08\x02\x02\x12\x06\xc1\x01\x02\xc6\x01\x04\x1ad\x20\x20Minimum\
    \x20value\x20of\x20Veto\x20votes\x20to\x20Total\x20votes\x20ratio\x20for\
    \x20proposal\x20to\x20be\n\x20\x20vetoed.\x20Default\x20value:\x201/3.\n\
    \n\r\n\x05\x04\x08\x02\x02\x05\x12\x04\xc1\x01\x02\x07\n\r\n\x05\x04\x08\
    \x02\x02\x01\x12\x04\xc1\x01\x08\x16\n\r\n\x05\x04\x08\x02\x02\x03\x12\
    \x04\xc1\x01\x19\x1a\n\x0f\n\x05\x04\x08\x02\x02\x08\x12\x06\xc1\x01\x1b\
    \xc6\x01\x03\n\x10\n\x08\x04\x08\x02\x02\x08\xeb\xfb\x03\x12\x04\xc2\x01\
    \x04E\n\x10\n\x08\x04\x08\x02\x02\x08\xe9\xfb\x03\x12\x04\xc3\x01\x04\"\
    \n\x10\n\x08\x04\x08\x02\x02\x08\xed\xfb\x03\x12\x04\xc4\x01\x047\n\x10\
    \n\x08\x04\x08\x02\x02\x08\xee\xfb\x03\x12\x04\xc5\x01\x046b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(WeightedVoteOption::generated_message_descriptor_data());
            messages.push(TextProposal::generated_message_descriptor_data());
            messages.push(Deposit::generated_message_descriptor_data());
            messages.push(Proposal::generated_message_descriptor_data());
            messages.push(TallyResult::generated_message_descriptor_data());
            messages.push(Vote::generated_message_descriptor_data());
            messages.push(DepositParams::generated_message_descriptor_data());
            messages.push(VotingParams::generated_message_descriptor_data());
            messages.push(TallyParams::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(VoteOption::generated_enum_descriptor_data());
            enums.push(ProposalStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
