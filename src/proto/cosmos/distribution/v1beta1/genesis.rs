// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/distribution/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  DelegatorWithdrawInfo is the address for where distributions rewards are
///  withdrawn to by default this struct is only used at genesis to feed in
///  default withdraw addresses.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
pub struct DelegatorWithdrawInfo {
    // message fields
    ///  delegator_address is the address of the delegator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.DelegatorWithdrawInfo.delegator_address)
    pub delegator_address: ::std::string::String,
    ///  withdraw_address is the address to withdraw the delegation rewards to.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.DelegatorWithdrawInfo.withdraw_address)
    pub withdraw_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.DelegatorWithdrawInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DelegatorWithdrawInfo {
    fn default() -> &'a DelegatorWithdrawInfo {
        <DelegatorWithdrawInfo as ::protobuf::Message>::default_instance()
    }
}

impl DelegatorWithdrawInfo {
    pub fn new() -> DelegatorWithdrawInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &DelegatorWithdrawInfo| { &m.delegator_address },
            |m: &mut DelegatorWithdrawInfo| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "withdraw_address",
            |m: &DelegatorWithdrawInfo| { &m.withdraw_address },
            |m: &mut DelegatorWithdrawInfo| { &mut m.withdraw_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DelegatorWithdrawInfo>(
            "DelegatorWithdrawInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DelegatorWithdrawInfo {
    const NAME: &'static str = "DelegatorWithdrawInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.withdraw_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.withdraw_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.withdraw_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.withdraw_address.is_empty() {
            os.write_string(2, &self.withdraw_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DelegatorWithdrawInfo {
        DelegatorWithdrawInfo::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.withdraw_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DelegatorWithdrawInfo {
        static instance: DelegatorWithdrawInfo = DelegatorWithdrawInfo {
            delegator_address: ::std::string::String::new(),
            withdraw_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DelegatorWithdrawInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DelegatorWithdrawInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DelegatorWithdrawInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelegatorWithdrawInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ValidatorOutstandingRewardsRecord is used for import/export via genesis json.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
pub struct ValidatorOutstandingRewardsRecord {
    // message fields
    ///  validator_address is the address of the validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord.validator_address)
    pub validator_address: ::std::string::String,
    ///  outstanding_rewards represents the oustanding rewards of a validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord.outstanding_rewards)
    pub outstanding_rewards: ::std::vec::Vec<super::coin::DecCoin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorOutstandingRewardsRecord {
    fn default() -> &'a ValidatorOutstandingRewardsRecord {
        <ValidatorOutstandingRewardsRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorOutstandingRewardsRecord {
    pub fn new() -> ValidatorOutstandingRewardsRecord {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &ValidatorOutstandingRewardsRecord| { &m.validator_address },
            |m: &mut ValidatorOutstandingRewardsRecord| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outstanding_rewards",
            |m: &ValidatorOutstandingRewardsRecord| { &m.outstanding_rewards },
            |m: &mut ValidatorOutstandingRewardsRecord| { &mut m.outstanding_rewards },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorOutstandingRewardsRecord>(
            "ValidatorOutstandingRewardsRecord",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorOutstandingRewardsRecord {
    const NAME: &'static str = "ValidatorOutstandingRewardsRecord";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_address = is.read_string()?;
                },
                18 => {
                    self.outstanding_rewards.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        for value in &self.outstanding_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        for v in &self.outstanding_rewards {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorOutstandingRewardsRecord {
        ValidatorOutstandingRewardsRecord::new()
    }

    fn clear(&mut self) {
        self.validator_address.clear();
        self.outstanding_rewards.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorOutstandingRewardsRecord {
        static instance: ValidatorOutstandingRewardsRecord = ValidatorOutstandingRewardsRecord {
            validator_address: ::std::string::String::new(),
            outstanding_rewards: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorOutstandingRewardsRecord {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorOutstandingRewardsRecord").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorOutstandingRewardsRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorOutstandingRewardsRecord {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ValidatorAccumulatedCommissionRecord is used for import / export via genesis
///  json.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
pub struct ValidatorAccumulatedCommissionRecord {
    // message fields
    ///  validator_address is the address of the validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord.validator_address)
    pub validator_address: ::std::string::String,
    ///  accumulated is the accumulated commission of a validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord.accumulated)
    pub accumulated: ::protobuf::MessageField<super::distribution::ValidatorAccumulatedCommission>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorAccumulatedCommissionRecord {
    fn default() -> &'a ValidatorAccumulatedCommissionRecord {
        <ValidatorAccumulatedCommissionRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorAccumulatedCommissionRecord {
    pub fn new() -> ValidatorAccumulatedCommissionRecord {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &ValidatorAccumulatedCommissionRecord| { &m.validator_address },
            |m: &mut ValidatorAccumulatedCommissionRecord| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::distribution::ValidatorAccumulatedCommission>(
            "accumulated",
            |m: &ValidatorAccumulatedCommissionRecord| { &m.accumulated },
            |m: &mut ValidatorAccumulatedCommissionRecord| { &mut m.accumulated },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorAccumulatedCommissionRecord>(
            "ValidatorAccumulatedCommissionRecord",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorAccumulatedCommissionRecord {
    const NAME: &'static str = "ValidatorAccumulatedCommissionRecord";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_address = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.accumulated)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if let Some(v) = self.accumulated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if let Some(v) = self.accumulated.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorAccumulatedCommissionRecord {
        ValidatorAccumulatedCommissionRecord::new()
    }

    fn clear(&mut self) {
        self.validator_address.clear();
        self.accumulated.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorAccumulatedCommissionRecord {
        static instance: ValidatorAccumulatedCommissionRecord = ValidatorAccumulatedCommissionRecord {
            validator_address: ::std::string::String::new(),
            accumulated: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorAccumulatedCommissionRecord {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorAccumulatedCommissionRecord").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorAccumulatedCommissionRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorAccumulatedCommissionRecord {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ValidatorHistoricalRewardsRecord is used for import / export via genesis
///  json.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
pub struct ValidatorHistoricalRewardsRecord {
    // message fields
    ///  validator_address is the address of the validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.validator_address)
    pub validator_address: ::std::string::String,
    ///  period defines the period the historical rewards apply to.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.period)
    pub period: u64,
    ///  rewards defines the historical rewards of a validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.rewards)
    pub rewards: ::protobuf::MessageField<super::distribution::ValidatorHistoricalRewards>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorHistoricalRewardsRecord {
    fn default() -> &'a ValidatorHistoricalRewardsRecord {
        <ValidatorHistoricalRewardsRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorHistoricalRewardsRecord {
    pub fn new() -> ValidatorHistoricalRewardsRecord {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &ValidatorHistoricalRewardsRecord| { &m.validator_address },
            |m: &mut ValidatorHistoricalRewardsRecord| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "period",
            |m: &ValidatorHistoricalRewardsRecord| { &m.period },
            |m: &mut ValidatorHistoricalRewardsRecord| { &mut m.period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::distribution::ValidatorHistoricalRewards>(
            "rewards",
            |m: &ValidatorHistoricalRewardsRecord| { &m.rewards },
            |m: &mut ValidatorHistoricalRewardsRecord| { &mut m.rewards },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorHistoricalRewardsRecord>(
            "ValidatorHistoricalRewardsRecord",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorHistoricalRewardsRecord {
    const NAME: &'static str = "ValidatorHistoricalRewardsRecord";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_address = is.read_string()?;
                },
                16 => {
                    self.period = is.read_uint64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rewards)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if self.period != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.period);
        }
        if let Some(v) = self.rewards.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if self.period != 0 {
            os.write_uint64(2, self.period)?;
        }
        if let Some(v) = self.rewards.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorHistoricalRewardsRecord {
        ValidatorHistoricalRewardsRecord::new()
    }

    fn clear(&mut self) {
        self.validator_address.clear();
        self.period = 0;
        self.rewards.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorHistoricalRewardsRecord {
        static instance: ValidatorHistoricalRewardsRecord = ValidatorHistoricalRewardsRecord {
            validator_address: ::std::string::String::new(),
            period: 0,
            rewards: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorHistoricalRewardsRecord {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorHistoricalRewardsRecord").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorHistoricalRewardsRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorHistoricalRewardsRecord {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ValidatorCurrentRewardsRecord is used for import / export via genesis json.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
pub struct ValidatorCurrentRewardsRecord {
    // message fields
    ///  validator_address is the address of the validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord.validator_address)
    pub validator_address: ::std::string::String,
    ///  rewards defines the current rewards of a validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord.rewards)
    pub rewards: ::protobuf::MessageField<super::distribution::ValidatorCurrentRewards>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorCurrentRewardsRecord {
    fn default() -> &'a ValidatorCurrentRewardsRecord {
        <ValidatorCurrentRewardsRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorCurrentRewardsRecord {
    pub fn new() -> ValidatorCurrentRewardsRecord {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &ValidatorCurrentRewardsRecord| { &m.validator_address },
            |m: &mut ValidatorCurrentRewardsRecord| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::distribution::ValidatorCurrentRewards>(
            "rewards",
            |m: &ValidatorCurrentRewardsRecord| { &m.rewards },
            |m: &mut ValidatorCurrentRewardsRecord| { &mut m.rewards },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorCurrentRewardsRecord>(
            "ValidatorCurrentRewardsRecord",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorCurrentRewardsRecord {
    const NAME: &'static str = "ValidatorCurrentRewardsRecord";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_address = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rewards)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if let Some(v) = self.rewards.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if let Some(v) = self.rewards.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorCurrentRewardsRecord {
        ValidatorCurrentRewardsRecord::new()
    }

    fn clear(&mut self) {
        self.validator_address.clear();
        self.rewards.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorCurrentRewardsRecord {
        static instance: ValidatorCurrentRewardsRecord = ValidatorCurrentRewardsRecord {
            validator_address: ::std::string::String::new(),
            rewards: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorCurrentRewardsRecord {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorCurrentRewardsRecord").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorCurrentRewardsRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorCurrentRewardsRecord {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  DelegatorStartingInfoRecord used for import / export via genesis json.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
pub struct DelegatorStartingInfoRecord {
    // message fields
    ///  delegator_address is the address of the delegator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.delegator_address)
    pub delegator_address: ::std::string::String,
    ///  validator_address is the address of the validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.validator_address)
    pub validator_address: ::std::string::String,
    ///  starting_info defines the starting info of a delegator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.starting_info)
    pub starting_info: ::protobuf::MessageField<super::distribution::DelegatorStartingInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DelegatorStartingInfoRecord {
    fn default() -> &'a DelegatorStartingInfoRecord {
        <DelegatorStartingInfoRecord as ::protobuf::Message>::default_instance()
    }
}

impl DelegatorStartingInfoRecord {
    pub fn new() -> DelegatorStartingInfoRecord {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &DelegatorStartingInfoRecord| { &m.delegator_address },
            |m: &mut DelegatorStartingInfoRecord| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &DelegatorStartingInfoRecord| { &m.validator_address },
            |m: &mut DelegatorStartingInfoRecord| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::distribution::DelegatorStartingInfo>(
            "starting_info",
            |m: &DelegatorStartingInfoRecord| { &m.starting_info },
            |m: &mut DelegatorStartingInfoRecord| { &mut m.starting_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DelegatorStartingInfoRecord>(
            "DelegatorStartingInfoRecord",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DelegatorStartingInfoRecord {
    const NAME: &'static str = "DelegatorStartingInfoRecord";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.validator_address = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.starting_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if let Some(v) = self.starting_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if let Some(v) = self.starting_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DelegatorStartingInfoRecord {
        DelegatorStartingInfoRecord::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.starting_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DelegatorStartingInfoRecord {
        static instance: DelegatorStartingInfoRecord = DelegatorStartingInfoRecord {
            delegator_address: ::std::string::String::new(),
            validator_address: ::std::string::String::new(),
            starting_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DelegatorStartingInfoRecord {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DelegatorStartingInfoRecord").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DelegatorStartingInfoRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelegatorStartingInfoRecord {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ValidatorSlashEventRecord is used for import / export via genesis json.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
pub struct ValidatorSlashEventRecord {
    // message fields
    ///  validator_address is the address of the validator.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorSlashEventRecord.validator_address)
    pub validator_address: ::std::string::String,
    ///  height defines the block height at which the slash event occured.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorSlashEventRecord.height)
    pub height: u64,
    ///  period is the period of the slash event.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorSlashEventRecord.period)
    pub period: u64,
    ///  validator_slash_event describes the slash event.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.ValidatorSlashEventRecord.validator_slash_event)
    pub validator_slash_event: ::protobuf::MessageField<super::distribution::ValidatorSlashEvent>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.ValidatorSlashEventRecord.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorSlashEventRecord {
    fn default() -> &'a ValidatorSlashEventRecord {
        <ValidatorSlashEventRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSlashEventRecord {
    pub fn new() -> ValidatorSlashEventRecord {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &ValidatorSlashEventRecord| { &m.validator_address },
            |m: &mut ValidatorSlashEventRecord| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &ValidatorSlashEventRecord| { &m.height },
            |m: &mut ValidatorSlashEventRecord| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "period",
            |m: &ValidatorSlashEventRecord| { &m.period },
            |m: &mut ValidatorSlashEventRecord| { &mut m.period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::distribution::ValidatorSlashEvent>(
            "validator_slash_event",
            |m: &ValidatorSlashEventRecord| { &m.validator_slash_event },
            |m: &mut ValidatorSlashEventRecord| { &mut m.validator_slash_event },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorSlashEventRecord>(
            "ValidatorSlashEventRecord",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorSlashEventRecord {
    const NAME: &'static str = "ValidatorSlashEventRecord";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_address = is.read_string()?;
                },
                16 => {
                    self.height = is.read_uint64()?;
                },
                24 => {
                    self.period = is.read_uint64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.validator_slash_event)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.height);
        }
        if self.period != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.period);
        }
        if let Some(v) = self.validator_slash_event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        if self.period != 0 {
            os.write_uint64(3, self.period)?;
        }
        if let Some(v) = self.validator_slash_event.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorSlashEventRecord {
        ValidatorSlashEventRecord::new()
    }

    fn clear(&mut self) {
        self.validator_address.clear();
        self.height = 0;
        self.period = 0;
        self.validator_slash_event.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorSlashEventRecord {
        static instance: ValidatorSlashEventRecord = ValidatorSlashEventRecord {
            validator_address: ::std::string::String::new(),
            height: 0,
            period: 0,
            validator_slash_event: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorSlashEventRecord {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorSlashEventRecord").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorSlashEventRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSlashEventRecord {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GenesisState defines the distribution module's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.GenesisState)
pub struct GenesisState {
    // message fields
    ///  params defines all the paramaters of the module.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.params)
    pub params: ::protobuf::MessageField<super::distribution::Params>,
    ///  fee_pool defines the fee pool at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.fee_pool)
    pub fee_pool: ::protobuf::MessageField<super::distribution::FeePool>,
    ///  fee_pool defines the delegator withdraw infos at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.delegator_withdraw_infos)
    pub delegator_withdraw_infos: ::std::vec::Vec<DelegatorWithdrawInfo>,
    ///  fee_pool defines the previous proposer at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.previous_proposer)
    pub previous_proposer: ::std::string::String,
    ///  fee_pool defines the outstanding rewards of all validators at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.outstanding_rewards)
    pub outstanding_rewards: ::std::vec::Vec<ValidatorOutstandingRewardsRecord>,
    ///  fee_pool defines the accumulated commisions of all validators at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.validator_accumulated_commissions)
    pub validator_accumulated_commissions: ::std::vec::Vec<ValidatorAccumulatedCommissionRecord>,
    ///  fee_pool defines the historical rewards of all validators at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.validator_historical_rewards)
    pub validator_historical_rewards: ::std::vec::Vec<ValidatorHistoricalRewardsRecord>,
    ///  fee_pool defines the current rewards of all validators at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.validator_current_rewards)
    pub validator_current_rewards: ::std::vec::Vec<ValidatorCurrentRewardsRecord>,
    ///  fee_pool defines the delegator starting infos at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.delegator_starting_infos)
    pub delegator_starting_infos: ::std::vec::Vec<DelegatorStartingInfoRecord>,
    ///  fee_pool defines the validator slash events at genesis.
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.GenesisState.validator_slash_events)
    pub validator_slash_events: ::std::vec::Vec<ValidatorSlashEventRecord>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::distribution::Params>(
            "params",
            |m: &GenesisState| { &m.params },
            |m: &mut GenesisState| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::distribution::FeePool>(
            "fee_pool",
            |m: &GenesisState| { &m.fee_pool },
            |m: &mut GenesisState| { &mut m.fee_pool },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegator_withdraw_infos",
            |m: &GenesisState| { &m.delegator_withdraw_infos },
            |m: &mut GenesisState| { &mut m.delegator_withdraw_infos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "previous_proposer",
            |m: &GenesisState| { &m.previous_proposer },
            |m: &mut GenesisState| { &mut m.previous_proposer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outstanding_rewards",
            |m: &GenesisState| { &m.outstanding_rewards },
            |m: &mut GenesisState| { &mut m.outstanding_rewards },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validator_accumulated_commissions",
            |m: &GenesisState| { &m.validator_accumulated_commissions },
            |m: &mut GenesisState| { &mut m.validator_accumulated_commissions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validator_historical_rewards",
            |m: &GenesisState| { &m.validator_historical_rewards },
            |m: &mut GenesisState| { &mut m.validator_historical_rewards },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validator_current_rewards",
            |m: &GenesisState| { &m.validator_current_rewards },
            |m: &mut GenesisState| { &mut m.validator_current_rewards },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegator_starting_infos",
            |m: &GenesisState| { &m.delegator_starting_infos },
            |m: &mut GenesisState| { &mut m.delegator_starting_infos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validator_slash_events",
            |m: &GenesisState| { &m.validator_slash_events },
            |m: &mut GenesisState| { &mut m.validator_slash_events },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.fee_pool)?;
                },
                26 => {
                    self.delegator_withdraw_infos.push(is.read_message()?);
                },
                34 => {
                    self.previous_proposer = is.read_string()?;
                },
                42 => {
                    self.outstanding_rewards.push(is.read_message()?);
                },
                50 => {
                    self.validator_accumulated_commissions.push(is.read_message()?);
                },
                58 => {
                    self.validator_historical_rewards.push(is.read_message()?);
                },
                66 => {
                    self.validator_current_rewards.push(is.read_message()?);
                },
                74 => {
                    self.delegator_starting_infos.push(is.read_message()?);
                },
                82 => {
                    self.validator_slash_events.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.fee_pool.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.delegator_withdraw_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.previous_proposer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.previous_proposer);
        }
        for value in &self.outstanding_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.validator_accumulated_commissions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.validator_historical_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.validator_current_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.delegator_starting_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.validator_slash_events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.fee_pool.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.delegator_withdraw_infos {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if !self.previous_proposer.is_empty() {
            os.write_string(4, &self.previous_proposer)?;
        }
        for v in &self.outstanding_rewards {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.validator_accumulated_commissions {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.validator_historical_rewards {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.validator_current_rewards {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.delegator_starting_infos {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.validator_slash_events {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.fee_pool.clear();
        self.delegator_withdraw_infos.clear();
        self.previous_proposer.clear();
        self.outstanding_rewards.clear();
        self.validator_accumulated_commissions.clear();
        self.validator_historical_rewards.clear();
        self.validator_current_rewards.clear();
        self.delegator_starting_infos.clear();
        self.validator_slash_events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            params: ::protobuf::MessageField::none(),
            fee_pool: ::protobuf::MessageField::none(),
            delegator_withdraw_infos: ::std::vec::Vec::new(),
            previous_proposer: ::std::string::String::new(),
            outstanding_rewards: ::std::vec::Vec::new(),
            validator_accumulated_commissions: ::std::vec::Vec::new(),
            validator_historical_rewards: ::std::vec::Vec::new(),
            validator_current_rewards: ::std::vec::Vec::new(),
            delegator_starting_infos: ::std::vec::Vec::new(),
            validator_slash_events: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)cosmos/distribution/v1beta1/genesis.proto\x12\x1bcosmos.distribution.\
    v1beta1\x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.prot\
    o\x1a.cosmos/distribution/v1beta1/distribution.proto\"\xb4\x01\n\x15Dele\
    gatorWithdrawInfo\x12I\n\x11delegator_address\x18\x01\x20\x01(\tR\x10del\
    egatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12F\n\x10w\
    ithdraw_address\x18\x02\x20\x01(\tR\x0fwithdrawAddressB\x1b\xf2\xde\x1f\
    \x17yaml:\"withdraw_address\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x9b\x02\
    \n!ValidatorOutstandingRewardsRecord\x12I\n\x11validator_address\x18\x01\
    \x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_ad\
    dress\"\x12\xa0\x01\n\x13outstanding_rewards\x18\x02\x20\x03(\x0b2\x1c.c\
    osmos.base.v1beta1.DecCoinR\x12outstandingRewardsBQ\xaa\xdf\x1f+github.c\
    om/cosmos/cosmos-sdk/types.DecCoins\xc8\xde\x1f\0\xf2\xde\x1f\x1ayaml:\"\
    outstanding_rewards\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xf6\x01\n$Valid\
    atorAccumulatedCommissionRecord\x12I\n\x11validator_address\x18\x01\x20\
    \x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_addres\
    s\"\x12y\n\x0baccumulated\x18\x02\x20\x01(\x0b2;.cosmos.distribution.v1b\
    eta1.ValidatorAccumulatedCommissionR\x0baccumulatedB\x1a\xf2\xde\x1f\x12\
    yaml:\"accumulated\"\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\
    \xfa\x01\n\x20ValidatorHistoricalRewardsRecord\x12I\n\x11validator_addre\
    ss\x18\x01\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"va\
    lidator_address\"\x12\x16\n\x06period\x18\x02\x20\x01(\x04R\x06period\
    \x12i\n\x07rewards\x18\x03\x20\x01(\x0b27.cosmos.distribution.v1beta1.Va\
    lidatorHistoricalRewardsR\x07rewardsB\x16\xf2\xde\x1f\x0eyaml:\"rewards\
    \"\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xdc\x01\n\x1dValidat\
    orCurrentRewardsRecord\x12I\n\x11validator_address\x18\x01\x20\x01(\tR\
    \x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_address\"\x12f\
    \n\x07rewards\x18\x02\x20\x01(\x0b24.cosmos.distribution.v1beta1.Validat\
    orCurrentRewardsR\x07rewardsB\x16\xf2\xde\x1f\x0eyaml:\"rewards\"\xc8\
    \xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xb4\x02\n\x1bDelegatorStar\
    tingInfoRecord\x12I\n\x11delegator_address\x18\x01\x20\x01(\tR\x10delega\
    torAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12I\n\x11vali\
    dator_address\x18\x02\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\
    \x18yaml:\"validator_address\"\x12u\n\rstarting_info\x18\x03\x20\x01(\
    \x0b22.cosmos.distribution.v1beta1.DelegatorStartingInfoR\x0cstartingInf\
    oB\x1c\xf2\xde\x1f\x14yaml:\"starting_info\"\xc8\xde\x1f\0:\x08\x88\xa0\
    \x1f\0\xe8\xa0\x1f\0\"\x9c\x02\n\x19ValidatorSlashEventRecord\x12I\n\x11\
    validator_address\x18\x01\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\
    \x1f\x18yaml:\"validator_address\"\x12\x16\n\x06height\x18\x02\x20\x01(\
    \x04R\x06height\x12\x16\n\x06period\x18\x03\x20\x01(\x04R\x06period\x12z\
    \n\x15validator_slash_event\x18\x04\x20\x01(\x0b20.cosmos.distribution.v\
    1beta1.ValidatorSlashEventR\x13validatorSlashEventB\x14\xf2\xde\x1f\x0cy\
    aml:\"event\"\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x87\x0b\n\
    \x0cGenesisState\x12R\n\x06params\x18\x01\x20\x01(\x0b2#.cosmos.distribu\
    tion.v1beta1.ParamsR\x06paramsB\x15\xf2\xde\x1f\ryaml:\"params\"\xc8\xde\
    \x1f\0\x12X\n\x08fee_pool\x18\x02\x20\x01(\x0b2$.cosmos.distribution.v1b\
    eta1.FeePoolR\x07feePoolB\x17\xf2\xde\x1f\x0fyaml:\"fee_pool\"\xc8\xde\
    \x1f\0\x12\x95\x01\n\x18delegator_withdraw_infos\x18\x03\x20\x03(\x0b22.\
    cosmos.distribution.v1beta1.DelegatorWithdrawInfoR\x16delegatorWithdrawI\
    nfosB'\xf2\xde\x1f\x1fyaml:\"delegator_withdraw_infos\"\xc8\xde\x1f\0\
    \x12I\n\x11previous_proposer\x18\x04\x20\x01(\tR\x10previousProposerB\
    \x1c\xf2\xde\x1f\x18yaml:\"previous_proposer\"\x12\x93\x01\n\x13outstand\
    ing_rewards\x18\x05\x20\x03(\x0b2>.cosmos.distribution.v1beta1.Validator\
    OutstandingRewardsRecordR\x12outstandingRewardsB\"\xf2\xde\x1f\x1ayaml:\
    \"outstanding_rewards\"\xc8\xde\x1f\0\x12\xbf\x01\n!validator_accumulate\
    d_commissions\x18\x06\x20\x03(\x0b2A.cosmos.distribution.v1beta1.Validat\
    orAccumulatedCommissionRecordR\x1fvalidatorAccumulatedCommissionsB0\xf2\
    \xde\x1f(yaml:\"validator_accumulated_commissions\"\xc8\xde\x1f\0\x12\
    \xac\x01\n\x1cvalidator_historical_rewards\x18\x07\x20\x03(\x0b2=.cosmos\
    .distribution.v1beta1.ValidatorHistoricalRewardsRecordR\x1avalidatorHist\
    oricalRewardsB+\xf2\xde\x1f#yaml:\"validator_historical_rewards\"\xc8\
    \xde\x1f\0\x12\xa0\x01\n\x19validator_current_rewards\x18\x08\x20\x03(\
    \x0b2:.cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecordR\x17val\
    idatorCurrentRewardsB(\xf2\xde\x1f\x20yaml:\"validator_current_rewards\"\
    \xc8\xde\x1f\0\x12\x9b\x01\n\x18delegator_starting_infos\x18\t\x20\x03(\
    \x0b28.cosmos.distribution.v1beta1.DelegatorStartingInfoRecordR\x16deleg\
    atorStartingInfosB'\xf2\xde\x1f\x1fyaml:\"delegator_starting_infos\"\xc8\
    \xde\x1f\0\x12\x93\x01\n\x16validator_slash_events\x18\n\x20\x03(\x0b26.\
    cosmos.distribution.v1beta1.ValidatorSlashEventRecordR\x14validatorSlash\
    EventsB%\xf2\xde\x1f\x1dyaml:\"validator_slash_events\"\xc8\xde\x1f\0:\
    \x08\x88\xa0\x1f\0\xe8\xa0\x1f\0B7Z1github.com/cosmos/cosmos-sdk/x/distr\
    ibution/types\xa8\xe2\x1e\x01J\x81.\n\x07\x12\x05\0\0\x9a\x01\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0$\n\x08\n\x01\
    \x08\x12\x03\x03\0S\n\t\n\x02\x08\x0b\x12\x03\x03\0S\n\x08\n\x01\x08\x12\
    \x03\x04\0$\n\x0b\n\x04\x08\xa5\xec\x03\x12\x03\x04\0$\n\t\n\x02\x03\0\
    \x12\x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\x03\x07\0(\n\t\n\x02\x03\x02\
    \x12\x03\x08\08\n\xbc\x01\n\x02\x04\0\x12\x04\r\0\x16\x01\x1a\xaf\x01\
    \x20DelegatorWithdrawInfo\x20is\x20the\x20address\x20for\x20where\x20dis\
    tributions\x20rewards\x20are\n\x20withdrawn\x20to\x20by\x20default\x20th\
    is\x20struct\x20is\x20only\x20used\x20at\x20genesis\x20to\x20feed\x20in\
    \n\x20default\x20withdraw\x20addresses.\n\n\n\n\x03\x04\0\x01\x12\x03\r\
    \x08\x1d\n\n\n\x03\x04\0\x07\x12\x03\x0e\x02-\n\r\n\x06\x04\0\x07\x8d\
    \xf4\x03\x12\x03\x0e\x02-\n\n\n\x03\x04\0\x07\x12\x03\x0f\x02-\n\r\n\x06\
    \x04\0\x07\x81\xf4\x03\x12\x03\x0f\x02-\nA\n\x04\x04\0\x02\0\x12\x03\x12\
    \x02U\x1a4\x20delegator_address\x20is\x20the\x20address\x20of\x20the\x20\
    delegator.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x12\t\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x12\x1d\x1e\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x12\x1fT\n\x0f\n\x08\
    \x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x12\x20S\nU\n\x04\x04\0\x02\x01\x12\
    \x03\x15\x02S\x1aH\x20withdraw_address\x20is\x20the\x20address\x20to\x20\
    withdraw\x20the\x20delegation\x20rewards\x20to.\n\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x15\t\
    \x19\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x15\x1c\x1d\n\x0c\n\x05\x04\0\
    \x02\x01\x08\x12\x03\x15\x1eR\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\
    \x12\x03\x15\x1fQ\n[\n\x02\x04\x01\x12\x04\x19\0&\x01\x1aO\x20ValidatorO\
    utstandingRewardsRecord\x20is\x20used\x20for\x20import/export\x20via\x20\
    genesis\x20json.\n\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08)\n\n\n\x03\x04\
    \x01\x07\x12\x03\x1a\x02-\n\r\n\x06\x04\x01\x07\x8d\xf4\x03\x12\x03\x1a\
    \x02-\n\n\n\x03\x04\x01\x07\x12\x03\x1b\x02-\n\r\n\x06\x04\x01\x07\x81\
    \xf4\x03\x12\x03\x1b\x02-\nA\n\x04\x04\x01\x02\0\x12\x03\x1e\x02U\x1a4\
    \x20validator_address\x20is\x20the\x20address\x20of\x20the\x20validator.\
    \n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\x1e\t\x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1e\
    \x1d\x1e\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x1e\x1fT\n\x0f\n\x08\x04\
    \x01\x02\0\x08\xee\xfb\x03\x12\x03\x1e\x20S\nU\n\x04\x04\x01\x02\x01\x12\
    \x04!\x02%\x04\x1aG\x20outstanding_rewards\x20represents\x20the\x20ousta\
    nding\x20rewards\x20of\x20a\x20validator.\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03!\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03!\x0b&\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03!':\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03!=>\n\r\n\x05\x04\x01\x02\x01\x08\x12\x04!?%\x03\n\x0f\n\x08\x04\
    \x01\x02\x01\x08\xf5\xfb\x03\x12\x03\"\x04L\n\x0f\n\x08\x04\x01\x02\x01\
    \x08\xe9\xfb\x03\x12\x03#\x04$\n\x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\
    \x03\x12\x03$\x04=\na\n\x02\x04\x02\x12\x04*\04\x01\x1aU\x20ValidatorAcc\
    umulatedCommissionRecord\x20is\x20used\x20for\x20import\x20/\x20export\
    \x20via\x20genesis\n\x20json.\n\n\n\n\x03\x04\x02\x01\x12\x03*\x08,\n\n\
    \n\x03\x04\x02\x07\x12\x03+\x02-\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\
    \x03+\x02-\n\n\n\x03\x04\x02\x07\x12\x03,\x02-\n\r\n\x06\x04\x02\x07\x81\
    \xf4\x03\x12\x03,\x02-\nA\n\x04\x04\x02\x02\0\x12\x03/\x02U\x1a4\x20vali\
    dator_address\x20is\x20the\x20address\x20of\x20the\x20validator.\n\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03/\t\x1a\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03/\x1d\x1e\n\x0c\n\
    \x05\x04\x02\x02\0\x08\x12\x03/\x1fT\n\x0f\n\x08\x04\x02\x02\0\x08\xee\
    \xfb\x03\x12\x03/\x20S\nI\n\x04\x04\x02\x02\x01\x12\x042\x023T\x1a;\x20a\
    ccumulated\x20is\x20the\x20accumulated\x20commission\x20of\x20a\x20valid\
    ator.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x032\x02\x20\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x032!,\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x032/0\n\
    \x0c\n\x05\x04\x02\x02\x01\x08\x12\x033\x06S\n\x0f\n\x08\x04\x02\x02\x01\
    \x08\xe9\xfb\x03\x12\x033\x07#\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\
    \x03\x12\x033%R\n]\n\x02\x04\x03\x12\x048\0D\x01\x1aQ\x20ValidatorHistor\
    icalRewardsRecord\x20is\x20used\x20for\x20import\x20/\x20export\x20via\
    \x20genesis\n\x20json.\n\n\n\n\x03\x04\x03\x01\x12\x038\x08(\n\n\n\x03\
    \x04\x03\x07\x12\x039\x02-\n\r\n\x06\x04\x03\x07\x8d\xf4\x03\x12\x039\
    \x02-\n\n\n\x03\x04\x03\x07\x12\x03:\x02-\n\r\n\x06\x04\x03\x07\x81\xf4\
    \x03\x12\x03:\x02-\nA\n\x04\x04\x03\x02\0\x12\x03=\x02U\x1a4\x20validato\
    r_address\x20is\x20the\x20address\x20of\x20the\x20validator.\n\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03=\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03=\t\x1a\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03=\x1d\x1e\n\x0c\n\
    \x05\x04\x03\x02\0\x08\x12\x03=\x1fT\n\x0f\n\x08\x04\x03\x02\0\x08\xee\
    \xfb\x03\x12\x03=\x20S\nI\n\x04\x04\x03\x02\x01\x12\x03@\x02\x14\x1a<\
    \x20period\x20defines\x20the\x20period\x20the\x20historical\x20rewards\
    \x20apply\x20to.\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03@\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03@\t\x0f\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03@\x12\x13\nE\n\x04\x04\x03\x02\x02\x12\x03C\x02s\x1a8\
    \x20rewards\x20defines\x20the\x20historical\x20rewards\x20of\x20a\x20val\
    idator.\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03C\x02\x1c\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03C\x1d$\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03C'(\n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x03C)r\n\x0f\n\x08\x04\x03\
    \x02\x02\x08\xe9\xfb\x03\x12\x03C*F\n\x0f\n\x08\x04\x03\x02\x02\x08\xee\
    \xfb\x03\x12\x03CHq\nY\n\x02\x04\x04\x12\x04G\0P\x01\x1aM\x20ValidatorCu\
    rrentRewardsRecord\x20is\x20used\x20for\x20import\x20/\x20export\x20via\
    \x20genesis\x20json.\n\n\n\n\x03\x04\x04\x01\x12\x03G\x08%\n\n\n\x03\x04\
    \x04\x07\x12\x03H\x02-\n\r\n\x06\x04\x04\x07\x8d\xf4\x03\x12\x03H\x02-\n\
    \n\n\x03\x04\x04\x07\x12\x03I\x02-\n\r\n\x06\x04\x04\x07\x81\xf4\x03\x12\
    \x03I\x02-\nA\n\x04\x04\x04\x02\0\x12\x03L\x02U\x1a4\x20validator_addres\
    s\x20is\x20the\x20address\x20of\x20the\x20validator.\n\n\x0c\n\x05\x04\
    \x04\x02\0\x05\x12\x03L\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03L\t\
    \x1a\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03L\x1d\x1e\n\x0c\n\x05\x04\x04\
    \x02\0\x08\x12\x03L\x1fT\n\x0f\n\x08\x04\x04\x02\0\x08\xee\xfb\x03\x12\
    \x03L\x20S\nB\n\x04\x04\x04\x02\x01\x12\x03O\x02p\x1a5\x20rewards\x20def\
    ines\x20the\x20current\x20rewards\x20of\x20a\x20validator.\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x06\x12\x03O\x02\x19\n\x0c\n\x05\x04\x04\x02\x01\x01\
    \x12\x03O\x1a!\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03O$%\n\x0c\n\x05\
    \x04\x04\x02\x01\x08\x12\x03O&o\n\x0f\n\x08\x04\x04\x02\x01\x08\xe9\xfb\
    \x03\x12\x03O'C\n\x0f\n\x08\x04\x04\x02\x01\x08\xee\xfb\x03\x12\x03OEn\n\
    T\n\x02\x04\x05\x12\x04S\0`\x01\x1aH\x20DelegatorStartingInfoRecord\x20u\
    sed\x20for\x20import\x20/\x20export\x20via\x20genesis\x20json.\n\n\n\n\
    \x03\x04\x05\x01\x12\x03S\x08#\n\n\n\x03\x04\x05\x07\x12\x03T\x02-\n\r\n\
    \x06\x04\x05\x07\x8d\xf4\x03\x12\x03T\x02-\n\n\n\x03\x04\x05\x07\x12\x03\
    U\x02-\n\r\n\x06\x04\x05\x07\x81\xf4\x03\x12\x03U\x02-\nA\n\x04\x04\x05\
    \x02\0\x12\x03X\x02U\x1a4\x20delegator_address\x20is\x20the\x20address\
    \x20of\x20the\x20delegator.\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03X\x02\
    \x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03X\t\x1a\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03X\x1d\x1e\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x03X\x1fT\
    \n\x0f\n\x08\x04\x05\x02\0\x08\xee\xfb\x03\x12\x03X\x20S\nA\n\x04\x04\
    \x05\x02\x01\x12\x03[\x02U\x1a4\x20validator_address\x20is\x20the\x20add\
    ress\x20of\x20the\x20validator.\n\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\
    \x03[\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03[\t\x1a\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x03[\x1d\x1e\n\x0c\n\x05\x04\x05\x02\x01\x08\
    \x12\x03[\x1fT\n\x0f\n\x08\x04\x05\x02\x01\x08\xee\xfb\x03\x12\x03[\x20S\
    \nG\n\x04\x04\x05\x02\x02\x12\x04^\x02_V\x1a9\x20starting_info\x20define\
    s\x20the\x20starting\x20info\x20of\x20a\x20delegator.\n\n\x0c\n\x05\x04\
    \x05\x02\x02\x06\x12\x03^\x02\x17\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\
    \x03^\x18%\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03^()\n\x0c\n\x05\x04\
    \x05\x02\x02\x08\x12\x03_\x06U\n\x0f\n\x08\x04\x05\x02\x02\x08\xe9\xfb\
    \x03\x12\x03_\x07#\n\x0f\n\x08\x04\x05\x02\x02\x08\xee\xfb\x03\x12\x03_%\
    T\nU\n\x02\x04\x06\x12\x04c\0o\x01\x1aI\x20ValidatorSlashEventRecord\x20\
    is\x20used\x20for\x20import\x20/\x20export\x20via\x20genesis\x20json.\n\
    \n\n\n\x03\x04\x06\x01\x12\x03c\x08!\n\n\n\x03\x04\x06\x07\x12\x03d\x02-\
    \n\r\n\x06\x04\x06\x07\x8d\xf4\x03\x12\x03d\x02-\n\n\n\x03\x04\x06\x07\
    \x12\x03e\x02-\n\r\n\x06\x04\x06\x07\x81\xf4\x03\x12\x03e\x02-\nA\n\x04\
    \x04\x06\x02\0\x12\x03h\x02U\x1a4\x20validator_address\x20is\x20the\x20a\
    ddress\x20of\x20the\x20validator.\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\
    \x03h\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03h\t\x1a\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x03h\x1d\x1e\n\x0c\n\x05\x04\x06\x02\0\x08\x12\
    \x03h\x1fT\n\x0f\n\x08\x04\x06\x02\0\x08\xee\xfb\x03\x12\x03h\x20S\nP\n\
    \x04\x04\x06\x02\x01\x12\x03j\x02\x14\x1aC\x20height\x20defines\x20the\
    \x20block\x20height\x20at\x20which\x20the\x20slash\x20event\x20occured.\
    \n\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03j\x02\x08\n\x0c\n\x05\x04\x06\
    \x02\x01\x01\x12\x03j\t\x0f\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03j\x12\
    \x13\n7\n\x04\x04\x06\x02\x02\x12\x03l\x02\x14\x1a*\x20period\x20is\x20t\
    he\x20period\x20of\x20the\x20slash\x20event.\n\n\x0c\n\x05\x04\x06\x02\
    \x02\x05\x12\x03l\x02\x08\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03l\t\x0f\
    \n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03l\x12\x13\n?\n\x04\x04\x06\x02\
    \x03\x12\x03n\x02x\x1a2\x20validator_slash_event\x20describes\x20the\x20\
    slash\x20event.\n\n\x0c\n\x05\x04\x06\x02\x03\x06\x12\x03n\x02\x15\n\x0c\
    \n\x05\x04\x06\x02\x03\x01\x12\x03n\x16+\n\x0c\n\x05\x04\x06\x02\x03\x03\
    \x12\x03n./\n\x0c\n\x05\x04\x06\x02\x03\x08\x12\x03n0w\n\x0f\n\x08\x04\
    \x06\x02\x03\x08\xe9\xfb\x03\x12\x03n1M\n\x0f\n\x08\x04\x06\x02\x03\x08\
    \xee\xfb\x03\x12\x03nOv\nL\n\x02\x04\x07\x12\x05r\0\x9a\x01\x01\x1a?\x20\
    GenesisState\x20defines\x20the\x20distribution\x20module's\x20genesis\
    \x20state.\n\n\n\n\x03\x04\x07\x01\x12\x03r\x08\x14\n\n\n\x03\x04\x07\
    \x07\x12\x03s\x02-\n\r\n\x06\x04\x07\x07\x8d\xf4\x03\x12\x03s\x02-\n\n\n\
    \x03\x04\x07\x07\x12\x03t\x02-\n\r\n\x06\x04\x07\x07\x81\xf4\x03\x12\x03\
    t\x02-\n?\n\x04\x04\x07\x02\0\x12\x03w\x02]\x1a2\x20params\x20defines\
    \x20all\x20the\x20paramaters\x20of\x20the\x20module.\n\n\x0c\n\x05\x04\
    \x07\x02\0\x06\x12\x03w\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03w\t\
    \x0f\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03w\x12\x13\n\x0c\n\x05\x04\x07\
    \x02\0\x08\x12\x03w\x14\\\n\x0f\n\x08\x04\x07\x02\0\x08\xe9\xfb\x03\x12\
    \x03w\x151\n\x0f\n\x08\x04\x07\x02\0\x08\xee\xfb\x03\x12\x03w3[\n8\n\x04\
    \x04\x07\x02\x01\x12\x03z\x02b\x1a+\x20fee_pool\x20defines\x20the\x20fee\
    \x20pool\x20at\x20genesis.\n\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03z\
    \x02\t\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03z\n\x12\n\x0c\n\x05\x04\
    \x07\x02\x01\x03\x12\x03z\x15\x16\n\x0c\n\x05\x04\x07\x02\x01\x08\x12\
    \x03z\x17a\n\x0f\n\x08\x04\x07\x02\x01\x08\xe9\xfb\x03\x12\x03z\x184\n\
    \x0f\n\x08\x04\x07\x02\x01\x08\xee\xfb\x03\x12\x03z6`\nI\n\x04\x04\x07\
    \x02\x02\x12\x04}\x02~a\x1a;\x20fee_pool\x20defines\x20the\x20delegator\
    \x20withdraw\x20infos\x20at\x20genesis.\n\n\x0c\n\x05\x04\x07\x02\x02\
    \x04\x12\x03}\x02\n\n\x0c\n\x05\x04\x07\x02\x02\x06\x12\x03}\x0b\x20\n\
    \x0c\n\x05\x04\x07\x02\x02\x01\x12\x03}!9\n\x0c\n\x05\x04\x07\x02\x02\
    \x03\x12\x03}<=\n\x0c\n\x05\x04\x07\x02\x02\x08\x12\x03~\x06`\n\x0f\n\
    \x08\x04\x07\x02\x02\x08\xe9\xfb\x03\x12\x03~\x07#\n\x0f\n\x08\x04\x07\
    \x02\x02\x08\xee\xfb\x03\x12\x03~%_\nB\n\x04\x04\x07\x02\x03\x12\x04\x81\
    \x01\x02U\x1a4\x20fee_pool\x20defines\x20the\x20previous\x20proposer\x20\
    at\x20genesis.\n\n\r\n\x05\x04\x07\x02\x03\x05\x12\x04\x81\x01\x02\x08\n\
    \r\n\x05\x04\x07\x02\x03\x01\x12\x04\x81\x01\t\x1a\n\r\n\x05\x04\x07\x02\
    \x03\x03\x12\x04\x81\x01\x1d\x1e\n\r\n\x05\x04\x07\x02\x03\x08\x12\x04\
    \x81\x01\x1fT\n\x10\n\x08\x04\x07\x02\x03\x08\xee\xfb\x03\x12\x04\x81\
    \x01\x20S\nX\n\x04\x04\x07\x02\x04\x12\x06\x84\x01\x02\x85\x01\\\x1aH\
    \x20fee_pool\x20defines\x20the\x20outstanding\x20rewards\x20of\x20all\
    \x20validators\x20at\x20genesis.\n\n\r\n\x05\x04\x07\x02\x04\x04\x12\x04\
    \x84\x01\x02\n\n\r\n\x05\x04\x07\x02\x04\x06\x12\x04\x84\x01\x0b,\n\r\n\
    \x05\x04\x07\x02\x04\x01\x12\x04\x84\x01-@\n\r\n\x05\x04\x07\x02\x04\x03\
    \x12\x04\x84\x01CD\n\r\n\x05\x04\x07\x02\x04\x08\x12\x04\x85\x01\x06[\n\
    \x10\n\x08\x04\x07\x02\x04\x08\xe9\xfb\x03\x12\x04\x85\x01\x07#\n\x10\n\
    \x08\x04\x07\x02\x04\x08\xee\xfb\x03\x12\x04\x85\x01%Z\n[\n\x04\x04\x07\
    \x02\x05\x12\x06\x88\x01\x02\x89\x01j\x1aK\x20fee_pool\x20defines\x20the\
    \x20accumulated\x20commisions\x20of\x20all\x20validators\x20at\x20genesi\
    s.\n\n\r\n\x05\x04\x07\x02\x05\x04\x12\x04\x88\x01\x02\n\n\r\n\x05\x04\
    \x07\x02\x05\x06\x12\x04\x88\x01\x0b/\n\r\n\x05\x04\x07\x02\x05\x01\x12\
    \x04\x88\x010Q\n\r\n\x05\x04\x07\x02\x05\x03\x12\x04\x88\x01TU\n\r\n\x05\
    \x04\x07\x02\x05\x08\x12\x04\x89\x01\x06i\n\x10\n\x08\x04\x07\x02\x05\
    \x08\xe9\xfb\x03\x12\x04\x89\x01\x07#\n\x10\n\x08\x04\x07\x02\x05\x08\
    \xee\xfb\x03\x12\x04\x89\x01%h\nW\n\x04\x04\x07\x02\x06\x12\x06\x8c\x01\
    \x02\x8d\x01e\x1aG\x20fee_pool\x20defines\x20the\x20historical\x20reward\
    s\x20of\x20all\x20validators\x20at\x20genesis.\n\n\r\n\x05\x04\x07\x02\
    \x06\x04\x12\x04\x8c\x01\x02\n\n\r\n\x05\x04\x07\x02\x06\x06\x12\x04\x8c\
    \x01\x0b+\n\r\n\x05\x04\x07\x02\x06\x01\x12\x04\x8c\x01,H\n\r\n\x05\x04\
    \x07\x02\x06\x03\x12\x04\x8c\x01KL\n\r\n\x05\x04\x07\x02\x06\x08\x12\x04\
    \x8d\x01\x06d\n\x10\n\x08\x04\x07\x02\x06\x08\xe9\xfb\x03\x12\x04\x8d\
    \x01\x07#\n\x10\n\x08\x04\x07\x02\x06\x08\xee\xfb\x03\x12\x04\x8d\x01%c\
    \nT\n\x04\x04\x07\x02\x07\x12\x06\x90\x01\x02\x91\x01b\x1aD\x20fee_pool\
    \x20defines\x20the\x20current\x20rewards\x20of\x20all\x20validators\x20a\
    t\x20genesis.\n\n\r\n\x05\x04\x07\x02\x07\x04\x12\x04\x90\x01\x02\n\n\r\
    \n\x05\x04\x07\x02\x07\x06\x12\x04\x90\x01\x0b(\n\r\n\x05\x04\x07\x02\
    \x07\x01\x12\x04\x90\x01)B\n\r\n\x05\x04\x07\x02\x07\x03\x12\x04\x90\x01\
    EF\n\r\n\x05\x04\x07\x02\x07\x08\x12\x04\x91\x01\x06a\n\x10\n\x08\x04\
    \x07\x02\x07\x08\xe9\xfb\x03\x12\x04\x91\x01\x07#\n\x10\n\x08\x04\x07\
    \x02\x07\x08\xee\xfb\x03\x12\x04\x91\x01%`\nK\n\x04\x04\x07\x02\x08\x12\
    \x06\x94\x01\x02\x95\x01a\x1a;\x20fee_pool\x20defines\x20the\x20delegato\
    r\x20starting\x20infos\x20at\x20genesis.\n\n\r\n\x05\x04\x07\x02\x08\x04\
    \x12\x04\x94\x01\x02\n\n\r\n\x05\x04\x07\x02\x08\x06\x12\x04\x94\x01\x0b\
    &\n\r\n\x05\x04\x07\x02\x08\x01\x12\x04\x94\x01'?\n\r\n\x05\x04\x07\x02\
    \x08\x03\x12\x04\x94\x01BC\n\r\n\x05\x04\x07\x02\x08\x08\x12\x04\x95\x01\
    \x06`\n\x10\n\x08\x04\x07\x02\x08\x08\xe9\xfb\x03\x12\x04\x95\x01\x07#\n\
    \x10\n\x08\x04\x07\x02\x08\x08\xee\xfb\x03\x12\x04\x95\x01%_\nI\n\x04\
    \x04\x07\x02\t\x12\x06\x98\x01\x02\x99\x01_\x1a9\x20fee_pool\x20defines\
    \x20the\x20validator\x20slash\x20events\x20at\x20genesis.\n\n\r\n\x05\
    \x04\x07\x02\t\x04\x12\x04\x98\x01\x02\n\n\r\n\x05\x04\x07\x02\t\x06\x12\
    \x04\x98\x01\x0b$\n\r\n\x05\x04\x07\x02\t\x01\x12\x04\x98\x01%;\n\r\n\
    \x05\x04\x07\x02\t\x03\x12\x04\x98\x01>@\n\r\n\x05\x04\x07\x02\t\x08\x12\
    \x04\x99\x01\x06^\n\x10\n\x08\x04\x07\x02\t\x08\xe9\xfb\x03\x12\x04\x99\
    \x01\x07#\n\x10\n\x08\x04\x07\x02\t\x08\xee\xfb\x03\x12\x04\x99\x01%]b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::distribution::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(DelegatorWithdrawInfo::generated_message_descriptor_data());
            messages.push(ValidatorOutstandingRewardsRecord::generated_message_descriptor_data());
            messages.push(ValidatorAccumulatedCommissionRecord::generated_message_descriptor_data());
            messages.push(ValidatorHistoricalRewardsRecord::generated_message_descriptor_data());
            messages.push(ValidatorCurrentRewardsRecord::generated_message_descriptor_data());
            messages.push(DelegatorStartingInfoRecord::generated_message_descriptor_data());
            messages.push(ValidatorSlashEventRecord::generated_message_descriptor_data());
            messages.push(GenesisState::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
