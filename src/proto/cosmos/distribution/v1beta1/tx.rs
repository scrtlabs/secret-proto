// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/distribution/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgSetWithdrawAddress sets the withdraw address for
///  a delegator (or validator self-delegation).
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.MsgSetWithdrawAddress)
pub struct MsgSetWithdrawAddress {
    // message fields
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.withdraw_address)
    pub withdraw_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSetWithdrawAddress {
    fn default() -> &'a MsgSetWithdrawAddress {
        <MsgSetWithdrawAddress as ::protobuf::Message>::default_instance()
    }
}

impl MsgSetWithdrawAddress {
    pub fn new() -> MsgSetWithdrawAddress {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgSetWithdrawAddress| { &m.delegator_address },
            |m: &mut MsgSetWithdrawAddress| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "withdraw_address",
            |m: &MsgSetWithdrawAddress| { &m.withdraw_address },
            |m: &mut MsgSetWithdrawAddress| { &mut m.withdraw_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSetWithdrawAddress>(
            "MsgSetWithdrawAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSetWithdrawAddress {
    const NAME: &'static str = "MsgSetWithdrawAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.withdraw_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.withdraw_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.withdraw_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.withdraw_address.is_empty() {
            os.write_string(2, &self.withdraw_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSetWithdrawAddress {
        MsgSetWithdrawAddress::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.withdraw_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSetWithdrawAddress {
        static instance: MsgSetWithdrawAddress = MsgSetWithdrawAddress {
            delegator_address: ::std::string::String::new(),
            withdraw_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSetWithdrawAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSetWithdrawAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSetWithdrawAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSetWithdrawAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse)
pub struct MsgSetWithdrawAddressResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSetWithdrawAddressResponse {
    fn default() -> &'a MsgSetWithdrawAddressResponse {
        <MsgSetWithdrawAddressResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSetWithdrawAddressResponse {
    pub fn new() -> MsgSetWithdrawAddressResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSetWithdrawAddressResponse>(
            "MsgSetWithdrawAddressResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSetWithdrawAddressResponse {
    const NAME: &'static str = "MsgSetWithdrawAddressResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSetWithdrawAddressResponse {
        MsgSetWithdrawAddressResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSetWithdrawAddressResponse {
        static instance: MsgSetWithdrawAddressResponse = MsgSetWithdrawAddressResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSetWithdrawAddressResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSetWithdrawAddressResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSetWithdrawAddressResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSetWithdrawAddressResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
///  from a single validator.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward)
pub struct MsgWithdrawDelegatorReward {
    // message fields
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.validator_address)
    pub validator_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawDelegatorReward {
    fn default() -> &'a MsgWithdrawDelegatorReward {
        <MsgWithdrawDelegatorReward as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawDelegatorReward {
    pub fn new() -> MsgWithdrawDelegatorReward {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgWithdrawDelegatorReward| { &m.delegator_address },
            |m: &mut MsgWithdrawDelegatorReward| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &MsgWithdrawDelegatorReward| { &m.validator_address },
            |m: &mut MsgWithdrawDelegatorReward| { &mut m.validator_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgWithdrawDelegatorReward>(
            "MsgWithdrawDelegatorReward",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgWithdrawDelegatorReward {
    const NAME: &'static str = "MsgWithdrawDelegatorReward";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.validator_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgWithdrawDelegatorReward {
        MsgWithdrawDelegatorReward::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgWithdrawDelegatorReward {
        static instance: MsgWithdrawDelegatorReward = MsgWithdrawDelegatorReward {
            delegator_address: ::std::string::String::new(),
            validator_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgWithdrawDelegatorReward {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgWithdrawDelegatorReward").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgWithdrawDelegatorReward {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawDelegatorReward {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse)
pub struct MsgWithdrawDelegatorRewardResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawDelegatorRewardResponse {
    fn default() -> &'a MsgWithdrawDelegatorRewardResponse {
        <MsgWithdrawDelegatorRewardResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawDelegatorRewardResponse {
    pub fn new() -> MsgWithdrawDelegatorRewardResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgWithdrawDelegatorRewardResponse>(
            "MsgWithdrawDelegatorRewardResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgWithdrawDelegatorRewardResponse {
    const NAME: &'static str = "MsgWithdrawDelegatorRewardResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgWithdrawDelegatorRewardResponse {
        MsgWithdrawDelegatorRewardResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgWithdrawDelegatorRewardResponse {
        static instance: MsgWithdrawDelegatorRewardResponse = MsgWithdrawDelegatorRewardResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgWithdrawDelegatorRewardResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgWithdrawDelegatorRewardResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgWithdrawDelegatorRewardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawDelegatorRewardResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgWithdrawValidatorCommission withdraws the full commission to the validator
///  address.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission)
pub struct MsgWithdrawValidatorCommission {
    // message fields
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission.validator_address)
    pub validator_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawValidatorCommission {
    fn default() -> &'a MsgWithdrawValidatorCommission {
        <MsgWithdrawValidatorCommission as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawValidatorCommission {
    pub fn new() -> MsgWithdrawValidatorCommission {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &MsgWithdrawValidatorCommission| { &m.validator_address },
            |m: &mut MsgWithdrawValidatorCommission| { &mut m.validator_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgWithdrawValidatorCommission>(
            "MsgWithdrawValidatorCommission",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgWithdrawValidatorCommission {
    const NAME: &'static str = "MsgWithdrawValidatorCommission";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgWithdrawValidatorCommission {
        MsgWithdrawValidatorCommission::new()
    }

    fn clear(&mut self) {
        self.validator_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgWithdrawValidatorCommission {
        static instance: MsgWithdrawValidatorCommission = MsgWithdrawValidatorCommission {
            validator_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgWithdrawValidatorCommission {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgWithdrawValidatorCommission").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgWithdrawValidatorCommission {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawValidatorCommission {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgWithdrawValidatorCommissionResponse defines the Msg/WithdrawValidatorCommission response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse)
pub struct MsgWithdrawValidatorCommissionResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawValidatorCommissionResponse {
    fn default() -> &'a MsgWithdrawValidatorCommissionResponse {
        <MsgWithdrawValidatorCommissionResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawValidatorCommissionResponse {
    pub fn new() -> MsgWithdrawValidatorCommissionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgWithdrawValidatorCommissionResponse>(
            "MsgWithdrawValidatorCommissionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgWithdrawValidatorCommissionResponse {
    const NAME: &'static str = "MsgWithdrawValidatorCommissionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgWithdrawValidatorCommissionResponse {
        MsgWithdrawValidatorCommissionResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgWithdrawValidatorCommissionResponse {
        static instance: MsgWithdrawValidatorCommissionResponse = MsgWithdrawValidatorCommissionResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgWithdrawValidatorCommissionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgWithdrawValidatorCommissionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgWithdrawValidatorCommissionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawValidatorCommissionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgFundCommunityPool allows an account to directly
///  fund the community pool.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.MsgFundCommunityPool)
pub struct MsgFundCommunityPool {
    // message fields
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.MsgFundCommunityPool.amount)
    pub amount: ::std::vec::Vec<super::coin::Coin>,
    // @@protoc_insertion_point(field:cosmos.distribution.v1beta1.MsgFundCommunityPool.depositor)
    pub depositor: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.MsgFundCommunityPool.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgFundCommunityPool {
    fn default() -> &'a MsgFundCommunityPool {
        <MsgFundCommunityPool as ::protobuf::Message>::default_instance()
    }
}

impl MsgFundCommunityPool {
    pub fn new() -> MsgFundCommunityPool {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &MsgFundCommunityPool| { &m.amount },
            |m: &mut MsgFundCommunityPool| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "depositor",
            |m: &MsgFundCommunityPool| { &m.depositor },
            |m: &mut MsgFundCommunityPool| { &mut m.depositor },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgFundCommunityPool>(
            "MsgFundCommunityPool",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgFundCommunityPool {
    const NAME: &'static str = "MsgFundCommunityPool";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.amount.push(is.read_message()?);
                },
                18 => {
                    self.depositor = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.depositor);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.depositor.is_empty() {
            os.write_string(2, &self.depositor)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgFundCommunityPool {
        MsgFundCommunityPool::new()
    }

    fn clear(&mut self) {
        self.amount.clear();
        self.depositor.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgFundCommunityPool {
        static instance: MsgFundCommunityPool = MsgFundCommunityPool {
            amount: ::std::vec::Vec::new(),
            depositor: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgFundCommunityPool {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgFundCommunityPool").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgFundCommunityPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgFundCommunityPool {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse)
pub struct MsgFundCommunityPoolResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgFundCommunityPoolResponse {
    fn default() -> &'a MsgFundCommunityPoolResponse {
        <MsgFundCommunityPoolResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgFundCommunityPoolResponse {
    pub fn new() -> MsgFundCommunityPoolResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgFundCommunityPoolResponse>(
            "MsgFundCommunityPoolResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgFundCommunityPoolResponse {
    const NAME: &'static str = "MsgFundCommunityPoolResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgFundCommunityPoolResponse {
        MsgFundCommunityPoolResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgFundCommunityPoolResponse {
        static instance: MsgFundCommunityPoolResponse = MsgFundCommunityPoolResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgFundCommunityPoolResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgFundCommunityPoolResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgFundCommunityPoolResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgFundCommunityPoolResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$cosmos/distribution/v1beta1/tx.proto\x12\x1bcosmos.distribution.v1bet\
    a1\x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\
    \xb4\x01\n\x15MsgSetWithdrawAddress\x12I\n\x11delegator_address\x18\x01\
    \x20\x01(\tR\x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_ad\
    dress\"\x12F\n\x10withdraw_address\x18\x02\x20\x01(\tR\x0fwithdrawAddres\
    sB\x1b\xf2\xde\x1f\x17yaml:\"withdraw_address\":\x08\x88\xa0\x1f\0\xe8\
    \xa0\x1f\0\"\x1f\n\x1dMsgSetWithdrawAddressResponse\"\xbc\x01\n\x1aMsgWi\
    thdrawDelegatorReward\x12I\n\x11delegator_address\x18\x01\x20\x01(\tR\
    \x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12I\
    \n\x11validator_address\x18\x02\x20\x01(\tR\x10validatorAddressB\x1c\xf2\
    \xde\x1f\x18yaml:\"validator_address\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\
    \"$\n\"MsgWithdrawDelegatorRewardResponse\"u\n\x1eMsgWithdrawValidatorCo\
    mmission\x12I\n\x11validator_address\x18\x01\x20\x01(\tR\x10validatorAdd\
    ressB\x1c\xf2\xde\x1f\x18yaml:\"validator_address\":\x08\x88\xa0\x1f\0\
    \xe8\xa0\x1f\0\"(\n&MsgWithdrawValidatorCommissionResponse\"\xa3\x01\n\
    \x14MsgFundCommunityPool\x12c\n\x06amount\x18\x01\x20\x03(\x0b2\x19.cosm\
    os.base.v1beta1.CoinR\x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-s\
    dk/types.Coins\xc8\xde\x1f\0\x12\x1c\n\tdepositor\x18\x02\x20\x01(\tR\td\
    epositor:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x1e\n\x1cMsgFundCommunityPoo\
    lResponse2\xc8\x04\n\x03Msg\x12\x84\x01\n\x12SetWithdrawAddress\x122.cos\
    mos.distribution.v1beta1.MsgSetWithdrawAddress\x1a:.cosmos.distribution.\
    v1beta1.MsgSetWithdrawAddressResponse\x12\x93\x01\n\x17WithdrawDelegator\
    Reward\x127.cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\x1a?.\
    cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse\x12\x9f\
    \x01\n\x1bWithdrawValidatorCommission\x12;.cosmos.distribution.v1beta1.M\
    sgWithdrawValidatorCommission\x1aC.cosmos.distribution.v1beta1.MsgWithdr\
    awValidatorCommissionResponse\x12\x81\x01\n\x11FundCommunityPool\x121.co\
    smos.distribution.v1beta1.MsgFundCommunityPool\x1a9.cosmos.distribution.\
    v1beta1.MsgFundCommunityPoolResponseB7Z1github.com/cosmos/cosmos-sdk/x/d\
    istribution/types\xa8\xe2\x1e\x01J\xf5\x13\n\x06\x12\x04\0\0N'\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0$\n\x08\n\x01\x08\
    \x12\x03\x03\0S\n\t\n\x02\x08\x0b\x12\x03\x03\0S\n\x08\n\x01\x08\x12\x03\
    \x04\0$\n\x0b\n\x04\x08\xa5\xec\x03\x12\x03\x04\0$\n\t\n\x02\x03\0\x12\
    \x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\x03\x07\0(\n7\n\x02\x06\0\x12\x04\n\
    \0\x1a\x01\x1a+\x20Msg\x20defines\x20the\x20distribution\x20Msg\x20servi\
    ce.\n\n\n\n\x03\x06\0\x01\x12\x03\n\x08\x0b\n\x82\x01\n\x04\x06\0\x02\0\
    \x12\x03\r\x02X\x1au\x20SetWithdrawAddress\x20defines\x20a\x20method\x20\
    to\x20change\x20the\x20withdraw\x20address\n\x20for\x20a\x20delegator\
    \x20(or\x20validator\x20self-delegation).\n\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\r\x06\x18\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\r\x19.\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\r9V\nr\n\x04\x06\0\x02\x01\x12\x03\x11\x02g\
    \x1ae\x20WithdrawDelegatorReward\x20defines\x20a\x20method\x20to\x20with\
    draw\x20rewards\x20of\x20delegator\n\x20from\x20a\x20single\x20validator\
    .\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x11\x06\x1d\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x11\x1e8\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x11C\
    e\nv\n\x04\x06\0\x02\x02\x12\x03\x15\x02s\x1ai\x20WithdrawValidatorCommi\
    ssion\x20defines\x20a\x20method\x20to\x20withdraw\x20the\n\x20full\x20co\
    mmission\x20to\x20the\x20validator\x20address.\n\n\x0c\n\x05\x06\0\x02\
    \x02\x01\x12\x03\x15\x06!\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x15\"@\n\
    \x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x15Kq\nk\n\x04\x06\0\x02\x03\x12\
    \x03\x19\x02U\x1a^\x20FundCommunityPool\x20defines\x20a\x20method\x20to\
    \x20allow\x20an\x20account\x20to\x20directly\n\x20fund\x20the\x20communi\
    ty\x20pool.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x19\x06\x17\n\x0c\n\
    \x05\x06\0\x02\x03\x02\x12\x03\x19\x18,\n\x0c\n\x05\x06\0\x02\x03\x03\
    \x12\x03\x197S\nn\n\x02\x04\0\x12\x04\x1e\0$\x01\x1ab\x20MsgSetWithdrawA\
    ddress\x20sets\x20the\x20withdraw\x20address\x20for\n\x20a\x20delegator\
    \x20(or\x20validator\x20self-delegation).\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x1e\x08\x1d\n\n\n\x03\x04\0\x07\x12\x03\x1f\x02-\n\r\n\x06\x04\0\x07\
    \x8d\xf4\x03\x12\x03\x1f\x02-\n\n\n\x03\x04\0\x07\x12\x03\x20\x02-\n\r\n\
    \x06\x04\0\x07\x81\xf4\x03\x12\x03\x20\x02-\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\"\x02U\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\"\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\"\t\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\"\
    \x1d\x1e\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\"\x1fT\n\x0f\n\x08\x04\0\
    \x02\0\x08\xee\xfb\x03\x12\x03\"\x20S\n\x0b\n\x04\x04\0\x02\x01\x12\x03#\
    \x02T\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03#\t\x19\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03#\x1d\
    \x1e\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03#\x1fS\n\x0f\n\x08\x04\0\x02\
    \x01\x08\xee\xfb\x03\x12\x03#\x20R\n\\\n\x02\x04\x01\x12\x03'\0(\x1aQ\
    \x20MsgSetWithdrawAddressResponse\x20defines\x20the\x20Msg/SetWithdrawAd\
    dress\x20response\x20type.\n\n\n\n\x03\x04\x01\x01\x12\x03'\x08%\nr\n\
    \x02\x04\x02\x12\x04+\01\x01\x1af\x20MsgWithdrawDelegatorReward\x20repre\
    sents\x20delegation\x20withdrawal\x20to\x20a\x20delegator\n\x20from\x20a\
    \x20single\x20validator.\n\n\n\n\x03\x04\x02\x01\x12\x03+\x08\"\n\n\n\
    \x03\x04\x02\x07\x12\x03,\x02-\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x03\
    ,\x02-\n\n\n\x03\x04\x02\x07\x12\x03-\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\
    \x03\x12\x03-\x02-\n\x0b\n\x04\x04\x02\x02\0\x12\x03/\x02U\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03/\t\x1a\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03/\x1d\x1e\n\x0c\n\x05\
    \x04\x02\x02\0\x08\x12\x03/\x1fT\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\
    \x03\x12\x03/\x20S\n\x0b\n\x04\x04\x02\x02\x01\x12\x030\x02U\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x030\t\x1a\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x030\x1d\x1e\n\x0c\n\
    \x05\x04\x02\x02\x01\x08\x12\x030\x1fT\n\x0f\n\x08\x04\x02\x02\x01\x08\
    \xee\xfb\x03\x12\x030\x20S\nf\n\x02\x04\x03\x12\x034\0-\x1a[\x20MsgWithd\
    rawDelegatorRewardResponse\x20defines\x20the\x20Msg/WithdrawDelegatorRew\
    ard\x20response\x20type.\n\n\n\n\x03\x04\x03\x01\x12\x034\x08*\ne\n\x02\
    \x04\x04\x12\x048\0=\x01\x1aY\x20MsgWithdrawValidatorCommission\x20withd\
    raws\x20the\x20full\x20commission\x20to\x20the\x20validator\n\x20address\
    .\n\n\n\n\x03\x04\x04\x01\x12\x038\x08&\n\n\n\x03\x04\x04\x07\x12\x039\
    \x02-\n\r\n\x06\x04\x04\x07\x8d\xf4\x03\x12\x039\x02-\n\n\n\x03\x04\x04\
    \x07\x12\x03:\x02-\n\r\n\x06\x04\x04\x07\x81\xf4\x03\x12\x03:\x02-\n\x0b\
    \n\x04\x04\x04\x02\0\x12\x03<\x02U\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\
    <\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03<\t\x1a\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03<\x1d\x1e\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03<\
    \x1fT\n\x0f\n\x08\x04\x04\x02\0\x08\xee\xfb\x03\x12\x03<\x20S\nn\n\x02\
    \x04\x05\x12\x03@\01\x1ac\x20MsgWithdrawValidatorCommissionResponse\x20d\
    efines\x20the\x20Msg/WithdrawValidatorCommission\x20response\x20type.\n\
    \n\n\n\x03\x04\x05\x01\x12\x03@\x08.\nZ\n\x02\x04\x06\x12\x04D\0K\x01\
    \x1aN\x20MsgFundCommunityPool\x20allows\x20an\x20account\x20to\x20direct\
    ly\n\x20fund\x20the\x20community\x20pool.\n\n\n\n\x03\x04\x06\x01\x12\
    \x03D\x08\x1c\n\n\n\x03\x04\x06\x07\x12\x03E\x02-\n\r\n\x06\x04\x06\x07\
    \x8d\xf4\x03\x12\x03E\x02-\n\n\n\x03\x04\x06\x07\x12\x03F\x02-\n\r\n\x06\
    \x04\x06\x07\x81\xf4\x03\x12\x03F\x02-\n\x0c\n\x04\x04\x06\x02\0\x12\x04\
    H\x02Il\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03H\x02\n\n\x0c\n\x05\x04\x06\
    \x02\0\x06\x12\x03H\x0b#\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03H$*\n\x0c\
    \n\x05\x04\x06\x02\0\x03\x12\x03H-.\n\x0c\n\x05\x04\x06\x02\0\x08\x12\
    \x03I\x06k\n\x0f\n\x08\x04\x06\x02\0\x08\xe9\xfb\x03\x12\x03I\x07#\n\x0f\
    \n\x08\x04\x06\x02\0\x08\xf5\xfb\x03\x12\x03I%j\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03J\x02\x17\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03J\x02\x08\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03J\t\x12\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03J\x15\x16\nZ\n\x02\x04\x07\x12\x03N\0'\x1aO\x20MsgFundCo\
    mmunityPoolResponse\x20defines\x20the\x20Msg/FundCommunityPool\x20respon\
    se\x20type.\n\n\n\n\x03\x04\x07\x01\x12\x03N\x08$b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(MsgSetWithdrawAddress::generated_message_descriptor_data());
            messages.push(MsgSetWithdrawAddressResponse::generated_message_descriptor_data());
            messages.push(MsgWithdrawDelegatorReward::generated_message_descriptor_data());
            messages.push(MsgWithdrawDelegatorRewardResponse::generated_message_descriptor_data());
            messages.push(MsgWithdrawValidatorCommission::generated_message_descriptor_data());
            messages.push(MsgWithdrawValidatorCommissionResponse::generated_message_descriptor_data());
            messages.push(MsgFundCommunityPool::generated_message_descriptor_data());
            messages.push(MsgFundCommunityPoolResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
