// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/feegrant/v1beta1/feegrant.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  BasicAllowance implements Allowance with a one-time grant of tokens
///  that optionally expires. The grantee can use up to SpendLimit to cover fees.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.BasicAllowance)
pub struct BasicAllowance {
    // message fields
    ///  spend_limit specifies the maximum amount of tokens that can be spent
    ///  by this allowance and will be updated as tokens are spent. If it is
    ///  empty, there is no spend limit and any amount of coins can be spent.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
    pub spend_limit: ::std::vec::Vec<super::coin::Coin>,
    ///  expiration specifies an optional time when this allowance expires
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
    pub expiration: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.BasicAllowance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BasicAllowance {
    fn default() -> &'a BasicAllowance {
        <BasicAllowance as ::protobuf::Message>::default_instance()
    }
}

impl BasicAllowance {
    pub fn new() -> BasicAllowance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "spend_limit",
            |m: &BasicAllowance| { &m.spend_limit },
            |m: &mut BasicAllowance| { &mut m.spend_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "expiration",
            |m: &BasicAllowance| { &m.expiration },
            |m: &mut BasicAllowance| { &mut m.expiration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BasicAllowance>(
            "BasicAllowance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BasicAllowance {
    const NAME: &'static str = "BasicAllowance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.spend_limit.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.expiration)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.spend_limit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.expiration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.spend_limit {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.expiration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BasicAllowance {
        BasicAllowance::new()
    }

    fn clear(&mut self) {
        self.spend_limit.clear();
        self.expiration.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BasicAllowance {
        static instance: BasicAllowance = BasicAllowance {
            spend_limit: ::std::vec::Vec::new(),
            expiration: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BasicAllowance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BasicAllowance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BasicAllowance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BasicAllowance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PeriodicAllowance extends Allowance to allow for both a maximum cap,
///  as well as a limit per time period.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.PeriodicAllowance)
pub struct PeriodicAllowance {
    // message fields
    ///  basic specifies a struct of `BasicAllowance`
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
    pub basic: ::protobuf::MessageField<BasicAllowance>,
    ///  period specifies the time duration in which period_spend_limit coins can
    ///  be spent before that allowance is reset
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
    pub period: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    ///  period_spend_limit specifies the maximum number of coins that can be spent
    ///  in the period
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
    pub period_spend_limit: ::std::vec::Vec<super::coin::Coin>,
    ///  period_can_spend is the number of coins left to be spent before the period_reset time
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
    pub period_can_spend: ::std::vec::Vec<super::coin::Coin>,
    ///  period_reset is the time at which this period resets and a new one begins,
    ///  it is calculated from the start time of the first transaction after the
    ///  last period ended
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
    pub period_reset: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.PeriodicAllowance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PeriodicAllowance {
    fn default() -> &'a PeriodicAllowance {
        <PeriodicAllowance as ::protobuf::Message>::default_instance()
    }
}

impl PeriodicAllowance {
    pub fn new() -> PeriodicAllowance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BasicAllowance>(
            "basic",
            |m: &PeriodicAllowance| { &m.basic },
            |m: &mut PeriodicAllowance| { &mut m.basic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "period",
            |m: &PeriodicAllowance| { &m.period },
            |m: &mut PeriodicAllowance| { &mut m.period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "period_spend_limit",
            |m: &PeriodicAllowance| { &m.period_spend_limit },
            |m: &mut PeriodicAllowance| { &mut m.period_spend_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "period_can_spend",
            |m: &PeriodicAllowance| { &m.period_can_spend },
            |m: &mut PeriodicAllowance| { &mut m.period_can_spend },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "period_reset",
            |m: &PeriodicAllowance| { &m.period_reset },
            |m: &mut PeriodicAllowance| { &mut m.period_reset },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PeriodicAllowance>(
            "PeriodicAllowance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PeriodicAllowance {
    const NAME: &'static str = "PeriodicAllowance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.basic)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.period)?;
                },
                26 => {
                    self.period_spend_limit.push(is.read_message()?);
                },
                34 => {
                    self.period_can_spend.push(is.read_message()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.period_reset)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.basic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.period_spend_limit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.period_can_spend {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.period_reset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.basic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.period.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.period_spend_limit {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.period_can_spend {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.period_reset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PeriodicAllowance {
        PeriodicAllowance::new()
    }

    fn clear(&mut self) {
        self.basic.clear();
        self.period.clear();
        self.period_spend_limit.clear();
        self.period_can_spend.clear();
        self.period_reset.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PeriodicAllowance {
        static instance: PeriodicAllowance = PeriodicAllowance {
            basic: ::protobuf::MessageField::none(),
            period: ::protobuf::MessageField::none(),
            period_spend_limit: ::std::vec::Vec::new(),
            period_can_spend: ::std::vec::Vec::new(),
            period_reset: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PeriodicAllowance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PeriodicAllowance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PeriodicAllowance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeriodicAllowance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  AllowedMsgAllowance creates allowance only for specified message types.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
pub struct AllowedMsgAllowance {
    // message fields
    ///  allowance can be any of basic and filtered fee allowance.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
    pub allowance: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  allowed_messages are the messages for which the grantee has the access.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
    pub allowed_messages: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.AllowedMsgAllowance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AllowedMsgAllowance {
    fn default() -> &'a AllowedMsgAllowance {
        <AllowedMsgAllowance as ::protobuf::Message>::default_instance()
    }
}

impl AllowedMsgAllowance {
    pub fn new() -> AllowedMsgAllowance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "allowance",
            |m: &AllowedMsgAllowance| { &m.allowance },
            |m: &mut AllowedMsgAllowance| { &mut m.allowance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowed_messages",
            |m: &AllowedMsgAllowance| { &m.allowed_messages },
            |m: &mut AllowedMsgAllowance| { &mut m.allowed_messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AllowedMsgAllowance>(
            "AllowedMsgAllowance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AllowedMsgAllowance {
    const NAME: &'static str = "AllowedMsgAllowance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.allowance)?;
                },
                18 => {
                    self.allowed_messages.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.allowance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.allowed_messages {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.allowance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.allowed_messages {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AllowedMsgAllowance {
        AllowedMsgAllowance::new()
    }

    fn clear(&mut self) {
        self.allowance.clear();
        self.allowed_messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AllowedMsgAllowance {
        static instance: AllowedMsgAllowance = AllowedMsgAllowance {
            allowance: ::protobuf::MessageField::none(),
            allowed_messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AllowedMsgAllowance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AllowedMsgAllowance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AllowedMsgAllowance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllowedMsgAllowance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Grant is stored in the KVStore to record a grant with full context
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.Grant)
pub struct Grant {
    // message fields
    ///  granter is the address of the user granting an allowance of their funds.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.Grant.granter)
    pub granter: ::std::string::String,
    ///  grantee is the address of the user being granted an allowance of another user's funds.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.Grant.grantee)
    pub grantee: ::std::string::String,
    ///  allowance can be any of basic and filtered fee allowance.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.Grant.allowance)
    pub allowance: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.Grant.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Grant {
    fn default() -> &'a Grant {
        <Grant as ::protobuf::Message>::default_instance()
    }
}

impl Grant {
    pub fn new() -> Grant {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &Grant| { &m.granter },
            |m: &mut Grant| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &Grant| { &m.grantee },
            |m: &mut Grant| { &mut m.grantee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "allowance",
            |m: &Grant| { &m.allowance },
            |m: &mut Grant| { &mut m.allowance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Grant>(
            "Grant",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Grant {
    const NAME: &'static str = "Grant";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.granter = is.read_string()?;
                },
                18 => {
                    self.grantee = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.allowance)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grantee);
        }
        if let Some(v) = self.allowance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(2, &self.grantee)?;
        }
        if let Some(v) = self.allowance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Grant {
        Grant::new()
    }

    fn clear(&mut self) {
        self.granter.clear();
        self.grantee.clear();
        self.allowance.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Grant {
        static instance: Grant = Grant {
            granter: ::std::string::String::new(),
            grantee: ::std::string::String::new(),
            allowance: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Grant {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Grant").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Grant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Grant {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&cosmos/feegrant/v1beta1/feegrant.proto\x12\x17cosmos.feegrant.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\x1a\x19cos\
    mos_proto/cosmos.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a\x1fgoog\
    le/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\"\xd3\
    \x01\n\x0eBasicAllowance\x12l\n\x0bspend_limit\x18\x01\x20\x03(\x0b2\x19\
    .cosmos.base.v1beta1.CoinR\nspendLimitB0\xaa\xdf\x1f(github.com/cosmos/c\
    osmos-sdk/types.Coins\xc8\xde\x1f\0\x12@\n\nexpiration\x18\x02\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\nexpirationB\x04\x90\xdf\x1f\x01:\
    \x11\xd2\xb4-\rFeeAllowanceI\"\xe3\x03\n\x11PeriodicAllowance\x12C\n\x05\
    basic\x18\x01\x20\x01(\x0b2'.cosmos.feegrant.v1beta1.BasicAllowanceR\x05\
    basicB\x04\xc8\xde\x1f\0\x12;\n\x06period\x18\x02\x20\x01(\x0b2\x19.goog\
    le.protobuf.DurationR\x06periodB\x08\x98\xdf\x1f\x01\xc8\xde\x1f\0\x12y\
    \n\x12period_spend_limit\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.C\
    oinR\x10periodSpendLimitB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/type\
    s.Coins\xc8\xde\x1f\0\x12u\n\x10period_can_spend\x18\x04\x20\x03(\x0b2\
    \x19.cosmos.base.v1beta1.CoinR\x0eperiodCanSpendB0\xaa\xdf\x1f(github.co\
    m/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\x12G\n\x0cperiod_reset\x18\
    \x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0bperiodResetB\x08\
    \x90\xdf\x1f\x01\xc8\xde\x1f\0:\x11\xd2\xb4-\rFeeAllowanceI\"\x9e\x01\n\
    \x13AllowedMsgAllowance\x12E\n\tallowance\x18\x01\x20\x01(\x0b2\x14.goog\
    le.protobuf.AnyR\tallowanceB\x11\xca\xb4-\rFeeAllowanceI\x12)\n\x10allow\
    ed_messages\x18\x02\x20\x03(\tR\x0fallowedMessages:\x15\xd2\xb4-\rFeeAll\
    owanceI\x88\xa0\x1f\0\"\x82\x01\n\x05Grant\x12\x18\n\x07granter\x18\x01\
    \x20\x01(\tR\x07granter\x12\x18\n\x07grantee\x18\x02\x20\x01(\tR\x07gran\
    tee\x12E\n\tallowance\x18\x03\x20\x01(\x0b2\x14.google.protobuf.AnyR\tal\
    lowanceB\x11\xca\xb4-\rFeeAllowanceIB)Z'github.com/cosmos/cosmos-sdk/x/f\
    eegrantJ\xb6\x17\n\x06\x12\x04\x01\0M\x01\n\"\n\x01\x0c\x12\x03\x01\0\
    \x12\x1a\x18\x20Since:\x20cosmos-sdk\x200.43\n\n\x08\n\x01\x02\x12\x03\
    \x02\0\x20\n\t\n\x02\x03\0\x12\x03\x04\0\x1e\n\t\n\x02\x03\x01\x12\x03\
    \x05\0#\n\t\n\x02\x03\x02\x12\x03\x06\0#\n\t\n\x02\x03\x03\x12\x03\x07\0\
    (\n\t\n\x02\x03\x04\x12\x03\x08\0)\n\t\n\x02\x03\x05\x12\x03\t\0(\n\x08\
    \n\x01\x08\x12\x03\x0b\0>\n\t\n\x02\x08\x0b\x12\x03\x0b\0>\n\xa0\x01\n\
    \x02\x04\0\x12\x04\x0f\0\x1a\x01\x1a\x93\x01\x20BasicAllowance\x20implem\
    ents\x20Allowance\x20with\x20a\x20one-time\x20grant\x20of\x20tokens\n\
    \x20that\x20optionally\x20expires.\x20The\x20grantee\x20can\x20use\x20up\
    \x20to\x20SpendLimit\x20to\x20cover\x20fees.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x0f\x08\x16\n\n\n\x03\x04\0\x07\x12\x03\x10\x02?\n\r\n\x06\x04\0\
    \x07\xca\xd6\x05\x12\x03\x10\x02?\n\xe0\x01\n\x04\x04\0\x02\0\x12\x04\
    \x15\x02\x16l\x1a\xd1\x01\x20spend_limit\x20specifies\x20the\x20maximum\
    \x20amount\x20of\x20tokens\x20that\x20can\x20be\x20spent\n\x20by\x20this\
    \x20allowance\x20and\x20will\x20be\x20updated\x20as\x20tokens\x20are\x20\
    spent.\x20If\x20it\x20is\n\x20empty,\x20there\x20is\x20no\x20spend\x20li\
    mit\x20and\x20any\x20amount\x20of\x20coins\x20can\x20be\x20spent.\n\n\
    \x0c\n\x05\x04\0\x02\0\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03\x15\x0b#\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x15$/\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x1523\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x16\
    \x06k\n\x0f\n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\x16\x07#\n\x0f\n\
    \x08\x04\0\x02\0\x08\xf5\xfb\x03\x12\x03\x16%j\nP\n\x04\x04\0\x02\x01\
    \x12\x03\x19\x02H\x1aC\x20expiration\x20specifies\x20an\x20optional\x20t\
    ime\x20when\x20this\x20allowance\x20expires\n\n\x0c\n\x05\x04\0\x02\x01\
    \x06\x12\x03\x19\x02\x1b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x19\x1c&\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x19)*\n\x0c\n\x05\x04\0\x02\x01\
    \x08\x12\x03\x19+G\n\x0f\n\x08\x04\0\x02\x01\x08\xf2\xfb\x03\x12\x03\x19\
    ,F\nw\n\x02\x04\x01\x12\x04\x1e\05\x01\x1ak\x20PeriodicAllowance\x20exte\
    nds\x20Allowance\x20to\x20allow\x20for\x20both\x20a\x20maximum\x20cap,\n\
    \x20as\x20well\x20as\x20a\x20limit\x20per\x20time\x20period.\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x1e\x08\x19\n\n\n\x03\x04\x01\x07\x12\x03\x1f\x02?\
    \n\r\n\x06\x04\x01\x07\xca\xd6\x05\x12\x03\x1f\x02?\n;\n\x04\x04\x01\x02\
    \0\x12\x03\"\x02:\x1a.\x20basic\x20specifies\x20a\x20struct\x20of\x20`Ba\
    sicAllowance`\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\"\x02\x10\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\"\x11\x16\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\"\x19\x1a\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\"\x1b9\n\x0f\n\
    \x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03\"\x1c8\n\x80\x01\n\x04\x04\
    \x01\x02\x01\x12\x03&\x02e\x1as\x20period\x20specifies\x20the\x20time\
    \x20duration\x20in\x20which\x20period_spend_limit\x20coins\x20can\n\x20b\
    e\x20spent\x20before\x20that\x20allowance\x20is\x20reset\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x06\x12\x03&\x02\x1a\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03&\x1b!\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03&$%\n\x0c\n\x05\
    \x04\x01\x02\x01\x08\x12\x03&&d\n\x0f\n\x08\x04\x01\x02\x01\x08\xf3\xfb\
    \x03\x12\x03&'E\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\x03\x12\x03&Gc\n\
    i\n\x04\x04\x01\x02\x02\x12\x04*\x02+l\x1a[\x20period_spend_limit\x20spe\
    cifies\x20the\x20maximum\x20number\x20of\x20coins\x20that\x20can\x20be\
    \x20spent\n\x20in\x20the\x20period\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\
    \x03*\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03*\x0b#\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03*$6\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03*\
    9:\n\x0c\n\x05\x04\x01\x02\x02\x08\x12\x03+\x06k\n\x0f\n\x08\x04\x01\x02\
    \x02\x08\xe9\xfb\x03\x12\x03+\x07#\n\x0f\n\x08\x04\x01\x02\x02\x08\xf5\
    \xfb\x03\x12\x03+%j\ne\n\x04\x04\x01\x02\x03\x12\x04.\x02/l\x1aW\x20peri\
    od_can_spend\x20is\x20the\x20number\x20of\x20coins\x20left\x20to\x20be\
    \x20spent\x20before\x20the\x20period_reset\x20time\n\n\x0c\n\x05\x04\x01\
    \x02\x03\x04\x12\x03.\x02\n\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03.\x0b\
    #\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03.$4\n\x0c\n\x05\x04\x01\x02\x03\
    \x03\x12\x03.78\n\x0c\n\x05\x04\x01\x02\x03\x08\x12\x03/\x06k\n\x0f\n\
    \x08\x04\x01\x02\x03\x08\xe9\xfb\x03\x12\x03/\x07#\n\x0f\n\x08\x04\x01\
    \x02\x03\x08\xf5\xfb\x03\x12\x03/%j\n\xb6\x01\n\x04\x04\x01\x02\x04\x12\
    \x034\x02h\x1a\xa8\x01\x20period_reset\x20is\x20the\x20time\x20at\x20whi\
    ch\x20this\x20period\x20resets\x20and\x20a\x20new\x20one\x20begins,\n\
    \x20it\x20is\x20calculated\x20from\x20the\x20start\x20time\x20of\x20the\
    \x20first\x20transaction\x20after\x20the\n\x20last\x20period\x20ended\n\
    \n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x034\x02\x1b\n\x0c\n\x05\x04\x01\
    \x02\x04\x01\x12\x034\x1c(\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x034+,\n\
    \x0c\n\x05\x04\x01\x02\x04\x08\x12\x034-g\n\x0f\n\x08\x04\x01\x02\x04\
    \x08\xf2\xfb\x03\x12\x034.H\n\x0f\n\x08\x04\x01\x02\x04\x08\xe9\xfb\x03\
    \x12\x034Jf\nU\n\x02\x04\x02\x12\x048\0A\x01\x1aI\x20AllowedMsgAllowance\
    \x20creates\x20allowance\x20only\x20for\x20specified\x20message\x20types\
    .\n\n\n\n\x03\x04\x02\x01\x12\x038\x08\x1b\n\n\n\x03\x04\x02\x07\x12\x03\
    9\x025\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x039\x025\n\n\n\x03\x04\x02\
    \x07\x12\x03:\x02?\n\r\n\x06\x04\x02\x07\xca\xd6\x05\x12\x03:\x02?\nH\n\
    \x04\x04\x02\x02\0\x12\x03=\x02Y\x1a;\x20allowance\x20can\x20be\x20any\
    \x20of\x20basic\x20and\x20filtered\x20fee\x20allowance.\n\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x03=\x02\x15\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03=\x16\x1f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03=\"#\n\x0c\n\x05\x04\
    \x02\x02\0\x08\x12\x03=$X\n\x0f\n\x08\x04\x02\x02\0\x08\xc9\xd6\x05\x12\
    \x03=%W\nV\n\x04\x04\x02\x02\x01\x12\x03@\x02'\x1aI\x20allowed_messages\
    \x20are\x20the\x20messages\x20for\x20which\x20the\x20grantee\x20has\x20t\
    he\x20access.\n\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03@\x02\n\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03@\x0b\x11\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03@\x12\"\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03@%&\nP\n\x02\
    \x04\x03\x12\x04D\0M\x01\x1aD\x20Grant\x20is\x20stored\x20in\x20the\x20K\
    VStore\x20to\x20record\x20a\x20grant\x20with\x20full\x20context\n\n\n\n\
    \x03\x04\x03\x01\x12\x03D\x08\r\nW\n\x04\x04\x03\x02\0\x12\x03F\x02\x15\
    \x1aJ\x20granter\x20is\x20the\x20address\x20of\x20the\x20user\x20grantin\
    g\x20an\x20allowance\x20of\x20their\x20funds.\n\n\x0c\n\x05\x04\x03\x02\
    \0\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03F\t\x10\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03F\x13\x14\ne\n\x04\x04\x03\x02\x01\
    \x12\x03I\x02\x15\x1aX\x20grantee\x20is\x20the\x20address\x20of\x20the\
    \x20user\x20being\x20granted\x20an\x20allowance\x20of\x20another\x20user\
    's\x20funds.\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03I\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03I\t\x10\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03I\x13\x14\nH\n\x04\x04\x03\x02\x02\x12\x03L\x02Y\x1a;\x20allowan\
    ce\x20can\x20be\x20any\x20of\x20basic\x20and\x20filtered\x20fee\x20allow\
    ance.\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03L\x02\x15\n\x0c\n\x05\x04\
    \x03\x02\x02\x01\x12\x03L\x16\x1f\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03L\"#\n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x03L$X\n\x0f\n\x08\x04\x03\
    \x02\x02\x08\xc9\xd6\x05\x12\x03L%Wb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(BasicAllowance::generated_message_descriptor_data());
            messages.push(PeriodicAllowance::generated_message_descriptor_data());
            messages.push(AllowedMsgAllowance::generated_message_descriptor_data());
            messages.push(Grant::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
