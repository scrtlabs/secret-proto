// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/feegrant/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgGrantAllowance adds permission for Grantee to spend up to Allowance
///  of fees from the account of Granter.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.MsgGrantAllowance)
pub struct MsgGrantAllowance {
    // message fields
    ///  granter is the address of the user granting an allowance of their funds.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.MsgGrantAllowance.granter)
    pub granter: ::std::string::String,
    ///  grantee is the address of the user being granted an allowance of another user's funds.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.MsgGrantAllowance.grantee)
    pub grantee: ::std::string::String,
    ///  allowance can be any of basic and filtered fee allowance.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.MsgGrantAllowance.allowance)
    pub allowance: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.MsgGrantAllowance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgGrantAllowance {
    fn default() -> &'a MsgGrantAllowance {
        <MsgGrantAllowance as ::protobuf::Message>::default_instance()
    }
}

impl MsgGrantAllowance {
    pub fn new() -> MsgGrantAllowance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &MsgGrantAllowance| { &m.granter },
            |m: &mut MsgGrantAllowance| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &MsgGrantAllowance| { &m.grantee },
            |m: &mut MsgGrantAllowance| { &mut m.grantee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "allowance",
            |m: &MsgGrantAllowance| { &m.allowance },
            |m: &mut MsgGrantAllowance| { &mut m.allowance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgGrantAllowance>(
            "MsgGrantAllowance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgGrantAllowance {
    const NAME: &'static str = "MsgGrantAllowance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.granter = is.read_string()?;
                },
                18 => {
                    self.grantee = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.allowance)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grantee);
        }
        if let Some(v) = self.allowance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(2, &self.grantee)?;
        }
        if let Some(v) = self.allowance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgGrantAllowance {
        MsgGrantAllowance::new()
    }

    fn clear(&mut self) {
        self.granter.clear();
        self.grantee.clear();
        self.allowance.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgGrantAllowance {
        static instance: MsgGrantAllowance = MsgGrantAllowance {
            granter: ::std::string::String::new(),
            grantee: ::std::string::String::new(),
            allowance: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgGrantAllowance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgGrantAllowance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgGrantAllowance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgGrantAllowance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse)
pub struct MsgGrantAllowanceResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgGrantAllowanceResponse {
    fn default() -> &'a MsgGrantAllowanceResponse {
        <MsgGrantAllowanceResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgGrantAllowanceResponse {
    pub fn new() -> MsgGrantAllowanceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgGrantAllowanceResponse>(
            "MsgGrantAllowanceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgGrantAllowanceResponse {
    const NAME: &'static str = "MsgGrantAllowanceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgGrantAllowanceResponse {
        MsgGrantAllowanceResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgGrantAllowanceResponse {
        static instance: MsgGrantAllowanceResponse = MsgGrantAllowanceResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgGrantAllowanceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgGrantAllowanceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgGrantAllowanceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgGrantAllowanceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgRevokeAllowance removes any existing Allowance from Granter to Grantee.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.MsgRevokeAllowance)
pub struct MsgRevokeAllowance {
    // message fields
    ///  granter is the address of the user granting an allowance of their funds.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.MsgRevokeAllowance.granter)
    pub granter: ::std::string::String,
    ///  grantee is the address of the user being granted an allowance of another user's funds.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.MsgRevokeAllowance.grantee)
    pub grantee: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.MsgRevokeAllowance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgRevokeAllowance {
    fn default() -> &'a MsgRevokeAllowance {
        <MsgRevokeAllowance as ::protobuf::Message>::default_instance()
    }
}

impl MsgRevokeAllowance {
    pub fn new() -> MsgRevokeAllowance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &MsgRevokeAllowance| { &m.granter },
            |m: &mut MsgRevokeAllowance| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &MsgRevokeAllowance| { &m.grantee },
            |m: &mut MsgRevokeAllowance| { &mut m.grantee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgRevokeAllowance>(
            "MsgRevokeAllowance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgRevokeAllowance {
    const NAME: &'static str = "MsgRevokeAllowance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.granter = is.read_string()?;
                },
                18 => {
                    self.grantee = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grantee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(2, &self.grantee)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgRevokeAllowance {
        MsgRevokeAllowance::new()
    }

    fn clear(&mut self) {
        self.granter.clear();
        self.grantee.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgRevokeAllowance {
        static instance: MsgRevokeAllowance = MsgRevokeAllowance {
            granter: ::std::string::String::new(),
            grantee: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgRevokeAllowance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgRevokeAllowance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgRevokeAllowance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRevokeAllowance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse)
pub struct MsgRevokeAllowanceResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgRevokeAllowanceResponse {
    fn default() -> &'a MsgRevokeAllowanceResponse {
        <MsgRevokeAllowanceResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRevokeAllowanceResponse {
    pub fn new() -> MsgRevokeAllowanceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgRevokeAllowanceResponse>(
            "MsgRevokeAllowanceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgRevokeAllowanceResponse {
    const NAME: &'static str = "MsgRevokeAllowanceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgRevokeAllowanceResponse {
        MsgRevokeAllowanceResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgRevokeAllowanceResponse {
        static instance: MsgRevokeAllowanceResponse = MsgRevokeAllowanceResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgRevokeAllowanceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgRevokeAllowanceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgRevokeAllowanceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRevokeAllowanceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20cosmos/feegrant/v1beta1/tx.proto\x12\x17cosmos.feegrant.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\x1a\x19cos\
    mos_proto/cosmos.proto\"\x8e\x01\n\x11MsgGrantAllowance\x12\x18\n\x07gra\
    nter\x18\x01\x20\x01(\tR\x07granter\x12\x18\n\x07grantee\x18\x02\x20\x01\
    (\tR\x07grantee\x12E\n\tallowance\x18\x03\x20\x01(\x0b2\x14.google.proto\
    buf.AnyR\tallowanceB\x11\xca\xb4-\rFeeAllowanceI\"\x1b\n\x19MsgGrantAllo\
    wanceResponse\"H\n\x12MsgRevokeAllowance\x12\x18\n\x07granter\x18\x01\
    \x20\x01(\tR\x07granter\x12\x18\n\x07grantee\x18\x02\x20\x01(\tR\x07gran\
    tee\"\x1c\n\x1aMsgRevokeAllowanceResponse2\xec\x01\n\x03Msg\x12p\n\x0eGr\
    antAllowance\x12*.cosmos.feegrant.v1beta1.MsgGrantAllowance\x1a2.cosmos.\
    feegrant.v1beta1.MsgGrantAllowanceResponse\x12s\n\x0fRevokeAllowance\x12\
    +.cosmos.feegrant.v1beta1.MsgRevokeAllowance\x1a3.cosmos.feegrant.v1beta\
    1.MsgRevokeAllowanceResponseB)Z'github.com/cosmos/cosmos-sdk/x/feegrantJ\
    \xf6\x0c\n\x06\x12\x04\x01\00%\n\"\n\x01\x0c\x12\x03\x01\0\x12\x1a\x18\
    \x20Since:\x20cosmos-sdk\x200.43\n\n\x08\n\x01\x02\x12\x03\x02\0\x20\n\t\
    \n\x02\x03\0\x12\x03\x04\0\x1e\n\t\n\x02\x03\x01\x12\x03\x05\0#\n\t\n\
    \x02\x03\x02\x12\x03\x06\0#\n\x08\n\x01\x08\x12\x03\x08\0>\n\t\n\x02\x08\
    \x0b\x12\x03\x08\0>\n3\n\x02\x06\0\x12\x04\x0b\0\x14\x01\x1a'\x20Msg\x20\
    defines\x20the\x20feegrant\x20msg\x20service.\n\n\n\n\x03\x06\0\x01\x12\
    \x03\x0b\x08\x0b\n~\n\x04\x06\0\x02\0\x12\x03\x0f\x02L\x1aq\x20GrantAllo\
    wance\x20grants\x20fee\x20allowance\x20to\x20the\x20grantee\x20on\x20the\
    \x20granter's\n\x20account\x20with\x20the\x20provided\x20expiration\x20t\
    ime.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0f\x06\x14\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x0f\x15&\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0f1J\nt\
    \n\x04\x06\0\x02\x01\x12\x03\x13\x02O\x1ag\x20RevokeAllowance\x20revokes\
    \x20any\x20fee\x20allowance\x20of\x20granter's\x20account\x20that\n\x20h\
    as\x20been\x20granted\x20to\x20the\x20grantee.\n\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\x13\x06\x15\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x13\
    \x16(\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x133M\nz\n\x02\x04\0\x12\x04\
    \x18\0!\x01\x1an\x20MsgGrantAllowance\x20adds\x20permission\x20for\x20Gr\
    antee\x20to\x20spend\x20up\x20to\x20Allowance\n\x20of\x20fees\x20from\
    \x20the\x20account\x20of\x20Granter.\n\n\n\n\x03\x04\0\x01\x12\x03\x18\
    \x08\x19\nW\n\x04\x04\0\x02\0\x12\x03\x1a\x02\x15\x1aJ\x20granter\x20is\
    \x20the\x20address\x20of\x20the\x20user\x20granting\x20an\x20allowance\
    \x20of\x20their\x20funds.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1a\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1a\t\x10\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x1a\x13\x14\ne\n\x04\x04\0\x02\x01\x12\x03\x1d\x02\x15\
    \x1aX\x20grantee\x20is\x20the\x20address\x20of\x20the\x20user\x20being\
    \x20granted\x20an\x20allowance\x20of\x20another\x20user's\x20funds.\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x1d\t\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1d\x13\
    \x14\nH\n\x04\x04\0\x02\x02\x12\x03\x20\x02Y\x1a;\x20allowance\x20can\
    \x20be\x20any\x20of\x20basic\x20and\x20filtered\x20fee\x20allowance.\n\n\
    \x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x20\x02\x15\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x20\x16\x1f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x20\"\
    #\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x20$X\n\x0f\n\x08\x04\0\x02\x02\
    \x08\xc9\xd6\x05\x12\x03\x20%W\n\\\n\x02\x04\x01\x12\x03$\0$\x1aQ\x20Msg\
    GrantAllowanceResponse\x20defines\x20the\x20Msg/GrantAllowanceResponse\
    \x20response\x20type.\n\n\n\n\x03\x04\x01\x01\x12\x03$\x08!\nX\n\x02\x04\
    \x02\x12\x04'\0-\x01\x1aL\x20MsgRevokeAllowance\x20removes\x20any\x20exi\
    sting\x20Allowance\x20from\x20Granter\x20to\x20Grantee.\n\n\n\n\x03\x04\
    \x02\x01\x12\x03'\x08\x1a\nW\n\x04\x04\x02\x02\0\x12\x03)\x02\x15\x1aJ\
    \x20granter\x20is\x20the\x20address\x20of\x20the\x20user\x20granting\x20\
    an\x20allowance\x20of\x20their\x20funds.\n\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x03)\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03)\t\x10\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03)\x13\x14\ne\n\x04\x04\x02\x02\x01\x12\x03\
    ,\x02\x15\x1aX\x20grantee\x20is\x20the\x20address\x20of\x20the\x20user\
    \x20being\x20granted\x20an\x20allowance\x20of\x20another\x20user's\x20fu\
    nds.\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x03,\t\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03,\
    \x13\x14\n^\n\x02\x04\x03\x12\x030\0%\x1aS\x20MsgRevokeAllowanceResponse\
    \x20defines\x20the\x20Msg/RevokeAllowanceResponse\x20response\x20type.\n\
    \n\n\n\x03\x04\x03\x01\x12\x030\x08\"b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(MsgGrantAllowance::generated_message_descriptor_data());
            messages.push(MsgGrantAllowanceResponse::generated_message_descriptor_data());
            messages.push(MsgRevokeAllowance::generated_message_descriptor_data());
            messages.push(MsgRevokeAllowanceResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
