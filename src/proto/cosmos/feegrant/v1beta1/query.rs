// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/feegrant/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryAllowanceRequest is the request type for the Query/Allowance RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.QueryAllowanceRequest)
pub struct QueryAllowanceRequest {
    // message fields
    ///  granter is the address of the user granting an allowance of their funds.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.QueryAllowanceRequest.granter)
    pub granter: ::std::string::String,
    ///  grantee is the address of the user being granted an allowance of another user's funds.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.QueryAllowanceRequest.grantee)
    pub grantee: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.QueryAllowanceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAllowanceRequest {
    fn default() -> &'a QueryAllowanceRequest {
        <QueryAllowanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAllowanceRequest {
    pub fn new() -> QueryAllowanceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &QueryAllowanceRequest| { &m.granter },
            |m: &mut QueryAllowanceRequest| { &mut m.granter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &QueryAllowanceRequest| { &m.grantee },
            |m: &mut QueryAllowanceRequest| { &mut m.grantee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAllowanceRequest>(
            "QueryAllowanceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAllowanceRequest {
    const NAME: &'static str = "QueryAllowanceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.granter = is.read_string()?;
                },
                18 => {
                    self.grantee = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grantee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(2, &self.grantee)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAllowanceRequest {
        QueryAllowanceRequest::new()
    }

    fn clear(&mut self) {
        self.granter.clear();
        self.grantee.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAllowanceRequest {
        static instance: QueryAllowanceRequest = QueryAllowanceRequest {
            granter: ::std::string::String::new(),
            grantee: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAllowanceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAllowanceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAllowanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAllowanceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAllowanceResponse is the response type for the Query/Allowance RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.QueryAllowanceResponse)
pub struct QueryAllowanceResponse {
    // message fields
    ///  allowance is a allowance granted for grantee by granter.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.QueryAllowanceResponse.allowance)
    pub allowance: ::protobuf::MessageField<super::feegrant::Grant>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.QueryAllowanceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAllowanceResponse {
    fn default() -> &'a QueryAllowanceResponse {
        <QueryAllowanceResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAllowanceResponse {
    pub fn new() -> QueryAllowanceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::feegrant::Grant>(
            "allowance",
            |m: &QueryAllowanceResponse| { &m.allowance },
            |m: &mut QueryAllowanceResponse| { &mut m.allowance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAllowanceResponse>(
            "QueryAllowanceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAllowanceResponse {
    const NAME: &'static str = "QueryAllowanceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.allowance)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.allowance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.allowance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAllowanceResponse {
        QueryAllowanceResponse::new()
    }

    fn clear(&mut self) {
        self.allowance.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAllowanceResponse {
        static instance: QueryAllowanceResponse = QueryAllowanceResponse {
            allowance: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAllowanceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAllowanceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAllowanceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAllowanceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAllowancesRequest is the request type for the Query/Allowances RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.QueryAllowancesRequest)
pub struct QueryAllowancesRequest {
    // message fields
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.QueryAllowancesRequest.grantee)
    pub grantee: ::std::string::String,
    ///  pagination defines an pagination for the request.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.QueryAllowancesRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.QueryAllowancesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAllowancesRequest {
    fn default() -> &'a QueryAllowancesRequest {
        <QueryAllowancesRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAllowancesRequest {
    pub fn new() -> QueryAllowancesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grantee",
            |m: &QueryAllowancesRequest| { &m.grantee },
            |m: &mut QueryAllowancesRequest| { &mut m.grantee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryAllowancesRequest| { &m.pagination },
            |m: &mut QueryAllowancesRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAllowancesRequest>(
            "QueryAllowancesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAllowancesRequest {
    const NAME: &'static str = "QueryAllowancesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.grantee = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grantee);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.grantee.is_empty() {
            os.write_string(1, &self.grantee)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAllowancesRequest {
        QueryAllowancesRequest::new()
    }

    fn clear(&mut self) {
        self.grantee.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAllowancesRequest {
        static instance: QueryAllowancesRequest = QueryAllowancesRequest {
            grantee: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAllowancesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAllowancesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAllowancesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAllowancesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAllowancesResponse is the response type for the Query/Allowances RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.feegrant.v1beta1.QueryAllowancesResponse)
pub struct QueryAllowancesResponse {
    // message fields
    ///  allowances are allowance's granted for grantee by granter.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.QueryAllowancesResponse.allowances)
    pub allowances: ::std::vec::Vec<super::feegrant::Grant>,
    ///  pagination defines an pagination for the response.
    // @@protoc_insertion_point(field:cosmos.feegrant.v1beta1.QueryAllowancesResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.feegrant.v1beta1.QueryAllowancesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAllowancesResponse {
    fn default() -> &'a QueryAllowancesResponse {
        <QueryAllowancesResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAllowancesResponse {
    pub fn new() -> QueryAllowancesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowances",
            |m: &QueryAllowancesResponse| { &m.allowances },
            |m: &mut QueryAllowancesResponse| { &mut m.allowances },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryAllowancesResponse| { &m.pagination },
            |m: &mut QueryAllowancesResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAllowancesResponse>(
            "QueryAllowancesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAllowancesResponse {
    const NAME: &'static str = "QueryAllowancesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.allowances.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.allowances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.allowances {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAllowancesResponse {
        QueryAllowancesResponse::new()
    }

    fn clear(&mut self) {
        self.allowances.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAllowancesResponse {
        static instance: QueryAllowancesResponse = QueryAllowancesResponse {
            allowances: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAllowancesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAllowancesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAllowancesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAllowancesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#cosmos/feegrant/v1beta1/query.proto\x12\x17cosmos.feegrant.v1beta1\
    \x1a&cosmos/feegrant/v1beta1/feegrant.proto\x1a*cosmos/base/query/v1beta\
    1/pagination.proto\x1a\x1cgoogle/api/annotations.proto\"K\n\x15QueryAllo\
    wanceRequest\x12\x18\n\x07granter\x18\x01\x20\x01(\tR\x07granter\x12\x18\
    \n\x07grantee\x18\x02\x20\x01(\tR\x07grantee\"V\n\x16QueryAllowanceRespo\
    nse\x12<\n\tallowance\x18\x01\x20\x01(\x0b2\x1e.cosmos.feegrant.v1beta1.\
    GrantR\tallowance\"z\n\x16QueryAllowancesRequest\x12\x18\n\x07grantee\
    \x18\x01\x20\x01(\tR\x07grantee\x12F\n\npagination\x18\x02\x20\x01(\x0b2\
    &.cosmos.base.query.v1beta1.PageRequestR\npagination\"\xa2\x01\n\x17Quer\
    yAllowancesResponse\x12>\n\nallowances\x18\x01\x20\x03(\x0b2\x1e.cosmos.\
    feegrant.v1beta1.GrantR\nallowances\x12G\n\npagination\x18\x02\x20\x01(\
    \x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination2\xdf\x02\n\
    \x05Query\x12\xac\x01\n\tAllowance\x12..cosmos.feegrant.v1beta1.QueryAll\
    owanceRequest\x1a/.cosmos.feegrant.v1beta1.QueryAllowanceResponse\">\x82\
    \xd3\xe4\x93\x028\x126/cosmos/feegrant/v1beta1/allowance/{granter}/{gran\
    tee}\x12\xa6\x01\n\nAllowances\x12/.cosmos.feegrant.v1beta1.QueryAllowan\
    cesRequest\x1a0.cosmos.feegrant.v1beta1.QueryAllowancesResponse\"5\x82\
    \xd3\xe4\x93\x02/\x12-/cosmos/feegrant/v1beta1/allowances/{grantee}B)Z'g\
    ithub.com/cosmos/cosmos-sdk/x/feegrantJ\x99\r\n\x06\x12\x04\x01\06\x01\n\
    \"\n\x01\x0c\x12\x03\x01\0\x12\x1a\x18\x20Since:\x20cosmos-sdk\x200.43\n\
    \n\x08\n\x01\x02\x12\x03\x02\0\x20\n\t\n\x02\x03\0\x12\x03\x04\00\n\t\n\
    \x02\x03\x01\x12\x03\x05\04\n\t\n\x02\x03\x02\x12\x03\x06\0&\n\x08\n\x01\
    \x08\x12\x03\x08\0>\n\t\n\x02\x08\x0b\x12\x03\x08\0>\n5\n\x02\x06\0\x12\
    \x04\x0b\0\x16\x01\x1a)\x20Query\x20defines\x20the\x20gRPC\x20querier\
    \x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\x0b\x08\r\nL\n\x04\x06\0\x02\
    \0\x12\x04\x0e\x02\x10\x03\x1a>\x20Allowance\x20returns\x20fee\x20grante\
    d\x20to\x20the\x20grantee\x20by\x20the\x20granter.\n\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03\x0e\x06\x0f\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0e\
    \x10%\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0e0F\n\x0c\n\x05\x06\0\x02\0\
    \x04\x12\x03\x0f\x04\\\n\x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\
    \x03\x0f\x04\\\n>\n\x04\x06\0\x02\x01\x12\x04\x13\x02\x15\x03\x1a0\x20Al\
    lowances\x20returns\x20all\x20the\x20grants\x20for\x20address.\n\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x13\x06\x10\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x13\x11'\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x132I\n\x0c\n\
    \x05\x06\0\x02\x01\x04\x12\x03\x14\x04S\n\x11\n\n\x06\0\x02\x01\x04\xb0\
    \xca\xbc\"\x02\x12\x03\x14\x04S\n[\n\x02\x04\0\x12\x04\x19\0\x1f\x01\x1a\
    O\x20QueryAllowanceRequest\x20is\x20the\x20request\x20type\x20for\x20the\
    \x20Query/Allowance\x20RPC\x20method.\n\n\n\n\x03\x04\0\x01\x12\x03\x19\
    \x08\x1d\nW\n\x04\x04\0\x02\0\x12\x03\x1b\x02\x15\x1aJ\x20granter\x20is\
    \x20the\x20address\x20of\x20the\x20user\x20granting\x20an\x20allowance\
    \x20of\x20their\x20funds.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1b\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1b\t\x10\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x1b\x13\x14\ne\n\x04\x04\0\x02\x01\x12\x03\x1e\x02\x15\
    \x1aX\x20grantee\x20is\x20the\x20address\x20of\x20the\x20user\x20being\
    \x20granted\x20an\x20allowance\x20of\x20another\x20user's\x20funds.\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x1e\t\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1e\x13\
    \x14\n]\n\x02\x04\x01\x12\x04\"\0%\x01\x1aQ\x20QueryAllowanceResponse\
    \x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Allowance\x20RP\
    C\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03\"\x08\x1e\nG\n\x04\x04\x01\
    \x02\0\x12\x03$\x02.\x1a:\x20allowance\x20is\x20a\x20allowance\x20grante\
    d\x20for\x20grantee\x20by\x20granter.\n\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03$\x02\x1f\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03$\x20)\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03$,-\n]\n\x02\x04\x02\x12\x04(\0-\x01\x1aQ\
    \x20QueryAllowancesRequest\x20is\x20the\x20request\x20type\x20for\x20the\
    \x20Query/Allowances\x20RPC\x20method.\n\n\n\n\x03\x04\x02\x01\x12\x03(\
    \x08\x1e\n\x0b\n\x04\x04\x02\x02\0\x12\x03)\x02\x15\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03)\t\x10\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03)\x13\x14\n@\n\x04\x04\x02\x02\x01\
    \x12\x03,\x027\x1a3\x20pagination\x20defines\x20an\x20pagination\x20for\
    \x20the\x20request.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03,\x02'\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03,(2\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03,56\n_\n\x02\x04\x03\x12\x040\06\x01\x1aS\x20QueryAllowances\
    Response\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Allowan\
    ces\x20RPC\x20method.\n\n\n\n\x03\x04\x03\x01\x12\x030\x08\x1f\nI\n\x04\
    \x04\x03\x02\0\x12\x032\x028\x1a<\x20allowances\x20are\x20allowance's\
    \x20granted\x20for\x20grantee\x20by\x20granter.\n\n\x0c\n\x05\x04\x03\
    \x02\0\x04\x12\x032\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x032\x0b(\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x032)3\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03267\nA\n\x04\x04\x03\x02\x01\x12\x035\x028\x1a4\x20pagination\
    \x20defines\x20an\x20pagination\x20for\x20the\x20response.\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x06\x12\x035\x02(\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x035)3\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03567b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::feegrant::file_descriptor().clone());
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(QueryAllowanceRequest::generated_message_descriptor_data());
            messages.push(QueryAllowanceResponse::generated_message_descriptor_data());
            messages.push(QueryAllowancesRequest::generated_message_descriptor_data());
            messages.push(QueryAllowancesResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
