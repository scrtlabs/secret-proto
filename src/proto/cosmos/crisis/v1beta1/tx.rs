// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/crisis/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgVerifyInvariant represents a message to verify a particular invariance.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.crisis.v1beta1.MsgVerifyInvariant)
pub struct MsgVerifyInvariant {
    // message fields
    // @@protoc_insertion_point(field:cosmos.crisis.v1beta1.MsgVerifyInvariant.sender)
    pub sender: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.crisis.v1beta1.MsgVerifyInvariant.invariant_module_name)
    pub invariant_module_name: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.crisis.v1beta1.MsgVerifyInvariant.invariant_route)
    pub invariant_route: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.crisis.v1beta1.MsgVerifyInvariant.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgVerifyInvariant {
    fn default() -> &'a MsgVerifyInvariant {
        <MsgVerifyInvariant as ::protobuf::Message>::default_instance()
    }
}

impl MsgVerifyInvariant {
    pub fn new() -> MsgVerifyInvariant {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &MsgVerifyInvariant| { &m.sender },
            |m: &mut MsgVerifyInvariant| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invariant_module_name",
            |m: &MsgVerifyInvariant| { &m.invariant_module_name },
            |m: &mut MsgVerifyInvariant| { &mut m.invariant_module_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "invariant_route",
            |m: &MsgVerifyInvariant| { &m.invariant_route },
            |m: &mut MsgVerifyInvariant| { &mut m.invariant_route },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgVerifyInvariant>(
            "MsgVerifyInvariant",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgVerifyInvariant {
    const NAME: &'static str = "MsgVerifyInvariant";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sender = is.read_string()?;
                },
                18 => {
                    self.invariant_module_name = is.read_string()?;
                },
                26 => {
                    self.invariant_route = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.invariant_module_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.invariant_module_name);
        }
        if !self.invariant_route.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.invariant_route);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.invariant_module_name.is_empty() {
            os.write_string(2, &self.invariant_module_name)?;
        }
        if !self.invariant_route.is_empty() {
            os.write_string(3, &self.invariant_route)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgVerifyInvariant {
        MsgVerifyInvariant::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.invariant_module_name.clear();
        self.invariant_route.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgVerifyInvariant {
        static instance: MsgVerifyInvariant = MsgVerifyInvariant {
            sender: ::std::string::String::new(),
            invariant_module_name: ::std::string::String::new(),
            invariant_route: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgVerifyInvariant {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgVerifyInvariant").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgVerifyInvariant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVerifyInvariant {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgVerifyInvariantResponse defines the Msg/VerifyInvariant response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.crisis.v1beta1.MsgVerifyInvariantResponse)
pub struct MsgVerifyInvariantResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.crisis.v1beta1.MsgVerifyInvariantResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgVerifyInvariantResponse {
    fn default() -> &'a MsgVerifyInvariantResponse {
        <MsgVerifyInvariantResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgVerifyInvariantResponse {
    pub fn new() -> MsgVerifyInvariantResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgVerifyInvariantResponse>(
            "MsgVerifyInvariantResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgVerifyInvariantResponse {
    const NAME: &'static str = "MsgVerifyInvariantResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgVerifyInvariantResponse {
        MsgVerifyInvariantResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgVerifyInvariantResponse {
        static instance: MsgVerifyInvariantResponse = MsgVerifyInvariantResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgVerifyInvariantResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgVerifyInvariantResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgVerifyInvariantResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVerifyInvariantResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecosmos/crisis/v1beta1/tx.proto\x12\x15cosmos.crisis.v1beta1\x1a\
    \x14gogoproto/gogo.proto\"\xd1\x01\n\x12MsgVerifyInvariant\x12\x16\n\x06\
    sender\x18\x01\x20\x01(\tR\x06sender\x12T\n\x15invariant_module_name\x18\
    \x02\x20\x01(\tR\x13invariantModuleNameB\x20\xf2\xde\x1f\x1cyaml:\"invar\
    iant_module_name\"\x12C\n\x0finvariant_route\x18\x03\x20\x01(\tR\x0einva\
    riantRouteB\x1a\xf2\xde\x1f\x16yaml:\"invariant_route\":\x08\x88\xa0\x1f\
    \0\xe8\xa0\x1f\0\"\x1c\n\x1aMsgVerifyInvariantResponse2v\n\x03Msg\x12o\n\
    \x0fVerifyInvariant\x12).cosmos.crisis.v1beta1.MsgVerifyInvariant\x1a1.c\
    osmos.crisis.v1beta1.MsgVerifyInvariantResponseB-Z+github.com/cosmos/cos\
    mos-sdk/x/crisis/typesJ\xda\x05\n\x06\x12\x04\0\0\x18%\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1e\n\x08\n\x01\x08\x12\
    \x03\x03\0B\n\t\n\x02\x08\x0b\x12\x03\x03\0B\n\t\n\x02\x03\0\x12\x03\x05\
    \0\x1e\n/\n\x02\x06\0\x12\x04\x08\0\x0b\x01\x1a#\x20Msg\x20defines\x20th\
    e\x20bank\x20Msg\x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\x08\x08\x0b\n\
    R\n\x04\x06\0\x02\0\x12\x03\n\x02O\x1aE\x20VerifyInvariant\x20defines\
    \x20a\x20method\x20to\x20verify\x20a\x20particular\x20invariance.\n\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\n\x06\x15\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03\n\x16(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\n3M\nX\n\x02\x04\0\
    \x12\x04\x0e\0\x15\x01\x1aL\x20MsgVerifyInvariant\x20represents\x20a\x20\
    message\x20to\x20verify\x20a\x20particular\x20invariance.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x0e\x08\x1a\n\n\n\x03\x04\0\x07\x12\x03\x0f\x02-\n\r\
    \n\x06\x04\0\x07\x8d\xf4\x03\x12\x03\x0f\x02-\n\n\n\x03\x04\0\x07\x12\
    \x03\x10\x02-\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x10\x02-\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x12\x02#\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x12\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\t\x0f\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x12!\"\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x13\
    \x02]\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\x13\t\x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x13!\"\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x13#\\\n\x0f\n\x08\x04\0\
    \x02\x01\x08\xee\xfb\x03\x12\x03\x13$[\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x14\x02W\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x14\t\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x14!\"\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x14#V\n\x0f\n\x08\x04\
    \0\x02\x02\x08\xee\xfb\x03\x12\x03\x14$U\nV\n\x02\x04\x01\x12\x03\x18\0%\
    \x1aK\x20MsgVerifyInvariantResponse\x20defines\x20the\x20Msg/VerifyInvar\
    iant\x20response\x20type.\n\n\n\n\x03\x04\x01\x01\x12\x03\x18\x08\"b\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(MsgVerifyInvariant::generated_message_descriptor_data());
            messages.push(MsgVerifyInvariantResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
