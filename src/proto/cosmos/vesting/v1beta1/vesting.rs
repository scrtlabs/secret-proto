// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/vesting/v1beta1/vesting.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  BaseVestingAccount implements the VestingAccount interface. It contains all
///  the necessary fields needed for any vesting account implementation.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.vesting.v1beta1.BaseVestingAccount)
pub struct BaseVestingAccount {
    // message fields
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
    pub base_account: ::protobuf::MessageField<super::auth::BaseAccount>,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
    pub original_vesting: ::std::vec::Vec<super::coin::Coin>,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
    pub delegated_free: ::std::vec::Vec<super::coin::Coin>,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
    pub delegated_vesting: ::std::vec::Vec<super::coin::Coin>,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.BaseVestingAccount.end_time)
    pub end_time: i64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.vesting.v1beta1.BaseVestingAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BaseVestingAccount {
    fn default() -> &'a BaseVestingAccount {
        <BaseVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl BaseVestingAccount {
    pub fn new() -> BaseVestingAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::auth::BaseAccount>(
            "base_account",
            |m: &BaseVestingAccount| { &m.base_account },
            |m: &mut BaseVestingAccount| { &mut m.base_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "original_vesting",
            |m: &BaseVestingAccount| { &m.original_vesting },
            |m: &mut BaseVestingAccount| { &mut m.original_vesting },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegated_free",
            |m: &BaseVestingAccount| { &m.delegated_free },
            |m: &mut BaseVestingAccount| { &mut m.delegated_free },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegated_vesting",
            |m: &BaseVestingAccount| { &m.delegated_vesting },
            |m: &mut BaseVestingAccount| { &mut m.delegated_vesting },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &BaseVestingAccount| { &m.end_time },
            |m: &mut BaseVestingAccount| { &mut m.end_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BaseVestingAccount>(
            "BaseVestingAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BaseVestingAccount {
    const NAME: &'static str = "BaseVestingAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base_account)?;
                },
                18 => {
                    self.original_vesting.push(is.read_message()?);
                },
                26 => {
                    self.delegated_free.push(is.read_message()?);
                },
                34 => {
                    self.delegated_vesting.push(is.read_message()?);
                },
                40 => {
                    self.end_time = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.original_vesting {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.delegated_free {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.delegated_vesting {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.end_time != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.end_time);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.base_account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.original_vesting {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.delegated_free {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.delegated_vesting {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.end_time != 0 {
            os.write_int64(5, self.end_time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BaseVestingAccount {
        BaseVestingAccount::new()
    }

    fn clear(&mut self) {
        self.base_account.clear();
        self.original_vesting.clear();
        self.delegated_free.clear();
        self.delegated_vesting.clear();
        self.end_time = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BaseVestingAccount {
        static instance: BaseVestingAccount = BaseVestingAccount {
            base_account: ::protobuf::MessageField::none(),
            original_vesting: ::std::vec::Vec::new(),
            delegated_free: ::std::vec::Vec::new(),
            delegated_vesting: ::std::vec::Vec::new(),
            end_time: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BaseVestingAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BaseVestingAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BaseVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseVestingAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ContinuousVestingAccount implements the VestingAccount interface. It
///  continuously vests by unlocking coins linearly with respect to time.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.vesting.v1beta1.ContinuousVestingAccount)
pub struct ContinuousVestingAccount {
    // message fields
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
    pub base_vesting_account: ::protobuf::MessageField<BaseVestingAccount>,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.ContinuousVestingAccount.start_time)
    pub start_time: i64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.vesting.v1beta1.ContinuousVestingAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContinuousVestingAccount {
    fn default() -> &'a ContinuousVestingAccount {
        <ContinuousVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl ContinuousVestingAccount {
    pub fn new() -> ContinuousVestingAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BaseVestingAccount>(
            "base_vesting_account",
            |m: &ContinuousVestingAccount| { &m.base_vesting_account },
            |m: &mut ContinuousVestingAccount| { &mut m.base_vesting_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time",
            |m: &ContinuousVestingAccount| { &m.start_time },
            |m: &mut ContinuousVestingAccount| { &mut m.start_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContinuousVestingAccount>(
            "ContinuousVestingAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContinuousVestingAccount {
    const NAME: &'static str = "ContinuousVestingAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base_vesting_account)?;
                },
                16 => {
                    self.start_time = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.start_time);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.base_vesting_account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.start_time != 0 {
            os.write_int64(2, self.start_time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContinuousVestingAccount {
        ContinuousVestingAccount::new()
    }

    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.start_time = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContinuousVestingAccount {
        static instance: ContinuousVestingAccount = ContinuousVestingAccount {
            base_vesting_account: ::protobuf::MessageField::none(),
            start_time: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContinuousVestingAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContinuousVestingAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContinuousVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContinuousVestingAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  DelayedVestingAccount implements the VestingAccount interface. It vests all
///  coins after a specific time, but non prior. In other words, it keeps them
///  locked until a specified time.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.vesting.v1beta1.DelayedVestingAccount)
pub struct DelayedVestingAccount {
    // message fields
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
    pub base_vesting_account: ::protobuf::MessageField<BaseVestingAccount>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.vesting.v1beta1.DelayedVestingAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DelayedVestingAccount {
    fn default() -> &'a DelayedVestingAccount {
        <DelayedVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl DelayedVestingAccount {
    pub fn new() -> DelayedVestingAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BaseVestingAccount>(
            "base_vesting_account",
            |m: &DelayedVestingAccount| { &m.base_vesting_account },
            |m: &mut DelayedVestingAccount| { &mut m.base_vesting_account },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DelayedVestingAccount>(
            "DelayedVestingAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DelayedVestingAccount {
    const NAME: &'static str = "DelayedVestingAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base_vesting_account)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.base_vesting_account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DelayedVestingAccount {
        DelayedVestingAccount::new()
    }

    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DelayedVestingAccount {
        static instance: DelayedVestingAccount = DelayedVestingAccount {
            base_vesting_account: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DelayedVestingAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DelayedVestingAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DelayedVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelayedVestingAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Period defines a length of time and amount of coins that will vest.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.vesting.v1beta1.Period)
pub struct Period {
    // message fields
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.Period.length)
    pub length: i64,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.Period.amount)
    pub amount: ::std::vec::Vec<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.vesting.v1beta1.Period.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Period {
    fn default() -> &'a Period {
        <Period as ::protobuf::Message>::default_instance()
    }
}

impl Period {
    pub fn new() -> Period {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &Period| { &m.length },
            |m: &mut Period| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &Period| { &m.amount },
            |m: &mut Period| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Period>(
            "Period",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Period {
    const NAME: &'static str = "Period";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.length = is.read_int64()?;
                },
                18 => {
                    self.amount.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.length != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.length);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.length != 0 {
            os.write_int64(1, self.length)?;
        }
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Period {
        Period::new()
    }

    fn clear(&mut self) {
        self.length = 0;
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Period {
        static instance: Period = Period {
            length: 0,
            amount: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Period {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Period").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Period {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Period {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PeriodicVestingAccount implements the VestingAccount interface. It
///  periodically vests by unlocking coins during each specified period.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.vesting.v1beta1.PeriodicVestingAccount)
pub struct PeriodicVestingAccount {
    // message fields
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
    pub base_vesting_account: ::protobuf::MessageField<BaseVestingAccount>,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.PeriodicVestingAccount.start_time)
    pub start_time: i64,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
    pub vesting_periods: ::std::vec::Vec<Period>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.vesting.v1beta1.PeriodicVestingAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PeriodicVestingAccount {
    fn default() -> &'a PeriodicVestingAccount {
        <PeriodicVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl PeriodicVestingAccount {
    pub fn new() -> PeriodicVestingAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BaseVestingAccount>(
            "base_vesting_account",
            |m: &PeriodicVestingAccount| { &m.base_vesting_account },
            |m: &mut PeriodicVestingAccount| { &mut m.base_vesting_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time",
            |m: &PeriodicVestingAccount| { &m.start_time },
            |m: &mut PeriodicVestingAccount| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "vesting_periods",
            |m: &PeriodicVestingAccount| { &m.vesting_periods },
            |m: &mut PeriodicVestingAccount| { &mut m.vesting_periods },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PeriodicVestingAccount>(
            "PeriodicVestingAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PeriodicVestingAccount {
    const NAME: &'static str = "PeriodicVestingAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base_vesting_account)?;
                },
                16 => {
                    self.start_time = is.read_int64()?;
                },
                26 => {
                    self.vesting_periods.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.start_time);
        }
        for value in &self.vesting_periods {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.base_vesting_account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.start_time != 0 {
            os.write_int64(2, self.start_time)?;
        }
        for v in &self.vesting_periods {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PeriodicVestingAccount {
        PeriodicVestingAccount::new()
    }

    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.start_time = 0;
        self.vesting_periods.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PeriodicVestingAccount {
        static instance: PeriodicVestingAccount = PeriodicVestingAccount {
            base_vesting_account: ::protobuf::MessageField::none(),
            start_time: 0,
            vesting_periods: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PeriodicVestingAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PeriodicVestingAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PeriodicVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeriodicVestingAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PermanentLockedAccount implements the VestingAccount interface. It does
///  not ever release coins, locking them indefinitely. Coins in this account can
///  still be used for delegating and for governance votes even while locked.
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.vesting.v1beta1.PermanentLockedAccount)
pub struct PermanentLockedAccount {
    // message fields
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
    pub base_vesting_account: ::protobuf::MessageField<BaseVestingAccount>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.vesting.v1beta1.PermanentLockedAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PermanentLockedAccount {
    fn default() -> &'a PermanentLockedAccount {
        <PermanentLockedAccount as ::protobuf::Message>::default_instance()
    }
}

impl PermanentLockedAccount {
    pub fn new() -> PermanentLockedAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BaseVestingAccount>(
            "base_vesting_account",
            |m: &PermanentLockedAccount| { &m.base_vesting_account },
            |m: &mut PermanentLockedAccount| { &mut m.base_vesting_account },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PermanentLockedAccount>(
            "PermanentLockedAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PermanentLockedAccount {
    const NAME: &'static str = "PermanentLockedAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base_vesting_account)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.base_vesting_account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PermanentLockedAccount {
        PermanentLockedAccount::new()
    }

    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PermanentLockedAccount {
        static instance: PermanentLockedAccount = PermanentLockedAccount {
            base_vesting_account: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PermanentLockedAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PermanentLockedAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PermanentLockedAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PermanentLockedAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$cosmos/vesting/v1beta1/vesting.proto\x12\x16cosmos.vesting.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a\
    \x1ecosmos/auth/v1beta1/auth.proto\"\xd2\x04\n\x12BaseVestingAccount\x12\
    I\n\x0cbase_account\x18\x01\x20\x01(\x0b2\x20.cosmos.auth.v1beta1.BaseAc\
    countR\x0bbaseAccountB\x04\xd0\xde\x1f\x01\x12\x91\x01\n\x10original_ves\
    ting\x18\x02\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x0foriginalVest\
    ingBK\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\
    \xf2\xde\x1f\x17yaml:\"original_vesting\"\x12\x8b\x01\n\x0edelegated_fre\
    e\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\rdelegatedFreeBI\
    \xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\xf2\
    \xde\x1f\x15yaml:\"delegated_free\"\x12\x94\x01\n\x11delegated_vesting\
    \x18\x04\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x10delegatedVesting\
    BL\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\
    \xf2\xde\x1f\x18yaml:\"delegated_vesting\"\x12.\n\x08end_time\x18\x05\
    \x20\x01(\x03R\x07endTimeB\x13\xf2\xde\x1f\x0fyaml:\"end_time\":\x08\x88\
    \xa0\x1f\0\x98\xa0\x1f\0\"\xbe\x01\n\x18ContinuousVestingAccount\x12b\n\
    \x14base_vesting_account\x18\x01\x20\x01(\x0b2*.cosmos.vesting.v1beta1.B\
    aseVestingAccountR\x12baseVestingAccountB\x04\xd0\xde\x1f\x01\x124\n\nst\
    art_time\x18\x02\x20\x01(\x03R\tstartTimeB\x15\xf2\xde\x1f\x11yaml:\"sta\
    rt_time\":\x08\x88\xa0\x1f\0\x98\xa0\x1f\0\"\x85\x01\n\x15DelayedVesting\
    Account\x12b\n\x14base_vesting_account\x18\x01\x20\x01(\x0b2*.cosmos.ves\
    ting.v1beta1.BaseVestingAccountR\x12baseVestingAccountB\x04\xd0\xde\x1f\
    \x01:\x08\x88\xa0\x1f\0\x98\xa0\x1f\0\"\x8b\x01\n\x06Period\x12\x16\n\
    \x06length\x18\x01\x20\x01(\x03R\x06length\x12c\n\x06amount\x18\x02\x20\
    \x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amountB0\xaa\xdf\x1f(github.\
    com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0:\x04\x98\xa0\x1f\0\"\xa5\
    \x02\n\x16PeriodicVestingAccount\x12b\n\x14base_vesting_account\x18\x01\
    \x20\x01(\x0b2*.cosmos.vesting.v1beta1.BaseVestingAccountR\x12baseVestin\
    gAccountB\x04\xd0\xde\x1f\x01\x124\n\nstart_time\x18\x02\x20\x01(\x03R\t\
    startTimeB\x15\xf2\xde\x1f\x11yaml:\"start_time\"\x12g\n\x0fvesting_peri\
    ods\x18\x03\x20\x03(\x0b2\x1e.cosmos.vesting.v1beta1.PeriodR\x0evestingP\
    eriodsB\x1e\xf2\xde\x1f\x16yaml:\"vesting_periods\"\xc8\xde\x1f\0:\x08\
    \x88\xa0\x1f\0\x98\xa0\x1f\0\"\x86\x01\n\x16PermanentLockedAccount\x12b\
    \n\x14base_vesting_account\x18\x01\x20\x01(\x0b2*.cosmos.vesting.v1beta1\
    .BaseVestingAccountR\x12baseVestingAccountB\x04\xd0\xde\x1f\x01:\x08\x88\
    \xa0\x1f\0\x98\xa0\x1f\0B3Z1github.com/cosmos/cosmos-sdk/x/auth/vesting/\
    typesJ\xa9\x16\n\x06\x12\x04\0\0T\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x1f\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\
    \x02\x03\x01\x12\x03\x04\0(\n\t\n\x02\x03\x02\x12\x03\x05\0(\n\x08\n\x01\
    \x08\x12\x03\x07\0H\n\t\n\x02\x08\x0b\x12\x03\x07\0H\n\x9f\x01\n\x02\x04\
    \0\x12\x04\x0b\0\x20\x01\x1a\x92\x01\x20BaseVestingAccount\x20implements\
    \x20the\x20VestingAccount\x20interface.\x20It\x20contains\x20all\n\x20th\
    e\x20necessary\x20fields\x20needed\x20for\x20any\x20vesting\x20account\
    \x20implementation.\n\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x1a\n\n\n\x03\
    \x04\0\x07\x12\x03\x0c\x02.\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x0c\
    \x02.\n\n\n\x03\x04\0\x07\x12\x03\r\x02.\n\r\n\x06\x04\0\x07\x83\xf4\x03\
    \x12\x03\r\x02.\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x02T\n\x0c\n\x05\x04\
    \0\x02\0\x06\x12\x03\x0f\x02!\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\".\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f78\n\x0c\n\x05\x04\0\x02\0\x08\
    \x12\x03\x0f9S\n\x0f\n\x08\x04\0\x02\0\x08\xea\xfb\x03\x12\x03\x0f:R\n\
    \x0c\n\x04\x04\0\x02\x01\x12\x04\x10\x02\x14\x04\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x10\x0b\
    #\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10$4\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x1078\n\r\n\x05\x04\0\x02\x01\x08\x12\x04\x109\x14\x03\n\
    \x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x11\x04$\n\x0f\n\x08\
    \x04\0\x02\x01\x08\xf5\xfb\x03\x12\x03\x12\x04I\n\x0f\n\x08\x04\0\x02\
    \x01\x08\xee\xfb\x03\x12\x03\x13\x04:\n\x0c\n\x04\x04\0\x02\x02\x12\x04\
    \x15\x02\x19\x04\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x15\x02\n\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\x15\x0b#\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x15$2\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1556\n\r\n\x05\x04\
    \0\x02\x02\x08\x12\x04\x157\x19\x03\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\
    \xfb\x03\x12\x03\x16\x04$\n\x0f\n\x08\x04\0\x02\x02\x08\xf5\xfb\x03\x12\
    \x03\x17\x04I\n\x0f\n\x08\x04\0\x02\x02\x08\xee\xfb\x03\x12\x03\x18\x048\
    \n\x0c\n\x04\x04\0\x02\x03\x12\x04\x1a\x02\x1e\x04\n\x0c\n\x05\x04\0\x02\
    \x03\x04\x12\x03\x1a\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x1a\x0b\
    #\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1a$5\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\x1a89\n\r\n\x05\x04\0\x02\x03\x08\x12\x04\x1a:\x1e\x03\n\
    \x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\x03\x12\x03\x1b\x04$\n\x0f\n\x08\
    \x04\0\x02\x03\x08\xf5\xfb\x03\x12\x03\x1c\x04I\n\x0f\n\x08\x04\0\x02\
    \x03\x08\xee\xfb\x03\x12\x03\x1d\x04;\n\x0b\n\x04\x04\0\x02\x04\x12\x03\
    \x1f\x02B\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03\x1f\x08\x10\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03\x1f\x13\x14\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\x1f\x15A\n\x0f\n\
    \x08\x04\0\x02\x04\x08\xee\xfb\x03\x12\x03\x1f\x16@\n\x99\x01\n\x02\x04\
    \x01\x12\x04$\0*\x01\x1a\x8c\x01\x20ContinuousVestingAccount\x20implemen\
    ts\x20the\x20VestingAccount\x20interface.\x20It\n\x20continuously\x20ves\
    ts\x20by\x20unlocking\x20coins\x20linearly\x20with\x20respect\x20to\x20t\
    ime.\n\n\n\n\x03\x04\x01\x01\x12\x03$\x08\x20\n\n\n\x03\x04\x01\x07\x12\
    \x03%\x02.\n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03%\x02.\n\n\n\x03\x04\
    \x01\x07\x12\x03&\x02.\n\r\n\x06\x04\x01\x07\x83\xf4\x03\x12\x03&\x02.\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03(\x02I\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03(\x02\x14\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03(\x15)\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03(,-\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03(.H\n\
    \x0f\n\x08\x04\x01\x02\0\x08\xea\xfb\x03\x12\x03(/G\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03)\x02]\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03)\x02\x07\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03)\x15\x1f\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03),-\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03).\\\n\
    \x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03)/[\n\xc5\x01\n\x02\
    \x04\x02\x12\x04/\04\x01\x1a\xb8\x01\x20DelayedVestingAccount\x20impleme\
    nts\x20the\x20VestingAccount\x20interface.\x20It\x20vests\x20all\n\x20co\
    ins\x20after\x20a\x20specific\x20time,\x20but\x20non\x20prior.\x20In\x20\
    other\x20words,\x20it\x20keeps\x20them\n\x20locked\x20until\x20a\x20spec\
    ified\x20time.\n\n\n\n\x03\x04\x02\x01\x12\x03/\x08\x1d\n\n\n\x03\x04\
    \x02\x07\x12\x030\x02.\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x030\x02.\n\
    \n\n\x03\x04\x02\x07\x12\x031\x02.\n\r\n\x06\x04\x02\x07\x83\xf4\x03\x12\
    \x031\x02.\n\x0b\n\x04\x04\x02\x02\0\x12\x033\x02I\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x033\x02\x14\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x033\x15)\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x033,-\n\x0c\n\x05\x04\x02\x02\0\x08\
    \x12\x033.H\n\x0f\n\x08\x04\x02\x02\0\x08\xea\xfb\x03\x12\x033/G\nQ\n\
    \x02\x04\x03\x12\x047\0=\x01\x1aE\x20Period\x20defines\x20a\x20length\
    \x20of\x20time\x20and\x20amount\x20of\x20coins\x20that\x20will\x20vest.\
    \n\n\n\n\x03\x04\x03\x01\x12\x037\x08\x0e\n\n\n\x03\x04\x03\x07\x12\x038\
    \x02.\n\r\n\x06\x04\x03\x07\x83\xf4\x03\x12\x038\x02.\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03:\x02/\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03:\x02\x07\
    \n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03:\x0b\x11\n\x0c\n\x05\x04\x03\x02\
    \0\x03\x12\x03:-.\n\x0c\n\x04\x04\x03\x02\x01\x12\x04;\x02<l\n\x0c\n\x05\
    \x04\x03\x02\x01\x04\x12\x03;\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\
    \x03;\x0b#\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03;$*\n\x0c\n\x05\x04\
    \x03\x02\x01\x03\x12\x03;-.\n\x0c\n\x05\x04\x03\x02\x01\x08\x12\x03<\x06\
    k\n\x0f\n\x08\x04\x03\x02\x01\x08\xe9\xfb\x03\x12\x03<\x07#\n\x0f\n\x08\
    \x04\x03\x02\x01\x08\xf5\xfb\x03\x12\x03<%j\n\x96\x01\n\x02\x04\x04\x12\
    \x04A\0H\x01\x1a\x89\x01\x20PeriodicVestingAccount\x20implements\x20the\
    \x20VestingAccount\x20interface.\x20It\n\x20periodically\x20vests\x20by\
    \x20unlocking\x20coins\x20during\x20each\x20specified\x20period.\n\n\n\n\
    \x03\x04\x04\x01\x12\x03A\x08\x1e\n\n\n\x03\x04\x04\x07\x12\x03B\x02.\n\
    \r\n\x06\x04\x04\x07\x81\xf4\x03\x12\x03B\x02.\n\n\n\x03\x04\x04\x07\x12\
    \x03C\x02.\n\r\n\x06\x04\x04\x07\x83\xf4\x03\x12\x03C\x02.\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03E\x02I\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03E\x02\
    \x14\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03E\x15)\n\x0c\n\x05\x04\x04\x02\
    \0\x03\x12\x03E,-\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03E.H\n\x0f\n\x08\
    \x04\x04\x02\0\x08\xea\xfb\x03\x12\x03E/G\n\x0b\n\x04\x04\x04\x02\x01\
    \x12\x03F\x02]\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03F\x02\x07\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03F\x15\x1f\n\x0c\n\x05\x04\x04\x02\x01\
    \x03\x12\x03F,-\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03F.\\\n\x0f\n\x08\
    \x04\x04\x02\x01\x08\xee\xfb\x03\x12\x03F/[\n\x0b\n\x04\x04\x04\x02\x02\
    \x12\x03G\x02x\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03G\x02\n\n\x0c\n\
    \x05\x04\x04\x02\x02\x06\x12\x03G\x0b\x11\n\x0c\n\x05\x04\x04\x02\x02\
    \x01\x12\x03G\x12!\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03G$%\n\x0c\n\
    \x05\x04\x04\x02\x02\x08\x12\x03G&w\n\x0f\n\x08\x04\x04\x02\x02\x08\xee\
    \xfb\x03\x12\x03G'X\n\x0f\n\x08\x04\x04\x02\x02\x08\xe9\xfb\x03\x12\x03G\
    Zv\n\x87\x02\n\x02\x04\x05\x12\x04O\0T\x01\x1a\xfa\x01\x20PermanentLocke\
    dAccount\x20implements\x20the\x20VestingAccount\x20interface.\x20It\x20d\
    oes\n\x20not\x20ever\x20release\x20coins,\x20locking\x20them\x20indefini\
    tely.\x20Coins\x20in\x20this\x20account\x20can\n\x20still\x20be\x20used\
    \x20for\x20delegating\x20and\x20for\x20governance\x20votes\x20even\x20wh\
    ile\x20locked.\n\n\x20Since:\x20cosmos-sdk\x200.43\n\n\n\n\x03\x04\x05\
    \x01\x12\x03O\x08\x1e\n\n\n\x03\x04\x05\x07\x12\x03P\x02.\n\r\n\x06\x04\
    \x05\x07\x81\xf4\x03\x12\x03P\x02.\n\n\n\x03\x04\x05\x07\x12\x03Q\x02.\n\
    \r\n\x06\x04\x05\x07\x83\xf4\x03\x12\x03Q\x02.\n\x0b\n\x04\x04\x05\x02\0\
    \x12\x03S\x02I\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03S\x02\x14\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03S\x15)\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x03S,-\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x03S.H\n\x0f\n\x08\x04\x05\x02\
    \0\x08\xea\xfb\x03\x12\x03S/Gb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::auth::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(BaseVestingAccount::generated_message_descriptor_data());
            messages.push(ContinuousVestingAccount::generated_message_descriptor_data());
            messages.push(DelayedVestingAccount::generated_message_descriptor_data());
            messages.push(Period::generated_message_descriptor_data());
            messages.push(PeriodicVestingAccount::generated_message_descriptor_data());
            messages.push(PermanentLockedAccount::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
