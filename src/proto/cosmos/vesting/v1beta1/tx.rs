// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/vesting/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgCreateVestingAccount defines a message that enables creating a vesting
///  account.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.vesting.v1beta1.MsgCreateVestingAccount)
pub struct MsgCreateVestingAccount {
    // message fields
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.MsgCreateVestingAccount.from_address)
    pub from_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.MsgCreateVestingAccount.to_address)
    pub to_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.MsgCreateVestingAccount.amount)
    pub amount: ::std::vec::Vec<super::coin::Coin>,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.MsgCreateVestingAccount.end_time)
    pub end_time: i64,
    // @@protoc_insertion_point(field:cosmos.vesting.v1beta1.MsgCreateVestingAccount.delayed)
    pub delayed: bool,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.vesting.v1beta1.MsgCreateVestingAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreateVestingAccount {
    fn default() -> &'a MsgCreateVestingAccount {
        <MsgCreateVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateVestingAccount {
    pub fn new() -> MsgCreateVestingAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_address",
            |m: &MsgCreateVestingAccount| { &m.from_address },
            |m: &mut MsgCreateVestingAccount| { &mut m.from_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_address",
            |m: &MsgCreateVestingAccount| { &m.to_address },
            |m: &mut MsgCreateVestingAccount| { &mut m.to_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &MsgCreateVestingAccount| { &m.amount },
            |m: &mut MsgCreateVestingAccount| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &MsgCreateVestingAccount| { &m.end_time },
            |m: &mut MsgCreateVestingAccount| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delayed",
            |m: &MsgCreateVestingAccount| { &m.delayed },
            |m: &mut MsgCreateVestingAccount| { &mut m.delayed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreateVestingAccount>(
            "MsgCreateVestingAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreateVestingAccount {
    const NAME: &'static str = "MsgCreateVestingAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.from_address = is.read_string()?;
                },
                18 => {
                    self.to_address = is.read_string()?;
                },
                26 => {
                    self.amount.push(is.read_message()?);
                },
                32 => {
                    self.end_time = is.read_int64()?;
                },
                40 => {
                    self.delayed = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.from_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.from_address);
        }
        if !self.to_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.to_address);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.end_time != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.end_time);
        }
        if self.delayed != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.from_address.is_empty() {
            os.write_string(1, &self.from_address)?;
        }
        if !self.to_address.is_empty() {
            os.write_string(2, &self.to_address)?;
        }
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.end_time != 0 {
            os.write_int64(4, self.end_time)?;
        }
        if self.delayed != false {
            os.write_bool(5, self.delayed)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreateVestingAccount {
        MsgCreateVestingAccount::new()
    }

    fn clear(&mut self) {
        self.from_address.clear();
        self.to_address.clear();
        self.amount.clear();
        self.end_time = 0;
        self.delayed = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreateVestingAccount {
        static instance: MsgCreateVestingAccount = MsgCreateVestingAccount {
            from_address: ::std::string::String::new(),
            to_address: ::std::string::String::new(),
            amount: ::std::vec::Vec::new(),
            end_time: 0,
            delayed: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreateVestingAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreateVestingAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreateVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateVestingAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCreateVestingAccountResponse defines the Msg/CreateVestingAccount response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse)
pub struct MsgCreateVestingAccountResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreateVestingAccountResponse {
    fn default() -> &'a MsgCreateVestingAccountResponse {
        <MsgCreateVestingAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateVestingAccountResponse {
    pub fn new() -> MsgCreateVestingAccountResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreateVestingAccountResponse>(
            "MsgCreateVestingAccountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreateVestingAccountResponse {
    const NAME: &'static str = "MsgCreateVestingAccountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreateVestingAccountResponse {
        MsgCreateVestingAccountResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreateVestingAccountResponse {
        static instance: MsgCreateVestingAccountResponse = MsgCreateVestingAccountResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreateVestingAccountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreateVestingAccountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreateVestingAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateVestingAccountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/vesting/v1beta1/tx.proto\x12\x16cosmos.vesting.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\xc0\x02\
    \n\x17MsgCreateVestingAccount\x12:\n\x0cfrom_address\x18\x01\x20\x01(\tR\
    \x0bfromAddressB\x17\xf2\xde\x1f\x13yaml:\"from_address\"\x124\n\nto_add\
    ress\x18\x02\x20\x01(\tR\ttoAddressB\x15\xf2\xde\x1f\x11yaml:\"to_addres\
    s\"\x12c\n\x06amount\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\
    \x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\
    \xde\x1f\0\x12.\n\x08end_time\x18\x04\x20\x01(\x03R\x07endTimeB\x13\xf2\
    \xde\x1f\x0fyaml:\"end_time\"\x12\x18\n\x07delayed\x18\x05\x20\x01(\x08R\
    \x07delayed:\x04\xe8\xa0\x1f\x01\"!\n\x1fMsgCreateVestingAccountResponse\
    2\x88\x01\n\x03Msg\x12\x80\x01\n\x14CreateVestingAccount\x12/.cosmos.ves\
    ting.v1beta1.MsgCreateVestingAccount\x1a7.cosmos.vesting.v1beta1.MsgCrea\
    teVestingAccountResponseB3Z1github.com/cosmos/cosmos-sdk/x/auth/vesting/\
    typesJ\xb5\x07\n\x06\x12\x04\0\0\x1e*\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\0\x1f\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\
    \x02\x03\x01\x12\x03\x04\0(\n\x08\n\x01\x08\x12\x03\x06\0H\n\t\n\x02\x08\
    \x0b\x12\x03\x06\0H\n/\n\x02\x06\0\x12\x04\t\0\r\x01\x1a#\x20Msg\x20defi\
    nes\x20the\x20bank\x20Msg\x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\t\
    \x08\x0b\n^\n\x04\x06\0\x02\0\x12\x03\x0c\x02^\x1aQ\x20CreateVestingAcco\
    unt\x20defines\x20a\x20method\x20that\x20enables\x20creating\x20a\x20ves\
    ting\n\x20account.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0c\x06\x1a\n\
    \x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0c\x1b2\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\x0c=\\\na\n\x02\x04\0\x12\x04\x11\0\x1b\x01\x1aU\x20MsgCreateVe\
    stingAccount\x20defines\x20a\x20message\x20that\x20enables\x20creating\
    \x20a\x20vesting\n\x20account.\n\n\n\n\x03\x04\0\x01\x12\x03\x11\x08\x1f\
    \n\n\n\x03\x04\0\x07\x12\x03\x12\x02\"\n\r\n\x06\x04\0\x07\x8d\xf4\x03\
    \x12\x03\x12\x02\"\n\x0b\n\x04\x04\0\x02\0\x12\x03\x14\x02`\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x14\x0b\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x14-.\n\x0c\n\x05\x04\0\
    \x02\0\x08\x12\x03\x14/_\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\
    \x140^\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x15\x02^\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x15\
    \x0b\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x15-.\n\x0c\n\x05\x04\0\
    \x02\x01\x08\x12\x03\x15/]\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\
    \x03\x150\\\n\x0c\n\x04\x04\0\x02\x02\x12\x04\x16\x02\x17l\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x16\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\
    \x03\x16\x0b#\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x16$*\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x16-.\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\
    \x17\x06k\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x17\x07#\n\
    \x0f\n\x08\x04\0\x02\x02\x08\xf5\xfb\x03\x12\x03\x17%j\n\x0b\n\x04\x04\0\
    \x02\x03\x12\x03\x19\x02B\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x19\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x19\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x19\x13\x14\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\
    \x19\x15A\n\x0f\n\x08\x04\0\x02\x03\x08\xee\xfb\x03\x12\x03\x19\x16@\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x03\x1a\x02\x15\n\x0c\n\x05\x04\0\x02\x04\
    \x05\x12\x03\x1a\x02\x06\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x1a\x08\
    \x0f\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x1a\x13\x14\n`\n\x02\x04\x01\
    \x12\x03\x1e\0*\x1aU\x20MsgCreateVestingAccountResponse\x20defines\x20th\
    e\x20Msg/CreateVestingAccount\x20response\x20type.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1e\x08'b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(MsgCreateVestingAccount::generated_message_descriptor_data());
            messages.push(MsgCreateVestingAccountResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
