// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/staking/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryValidatorsRequest is request type for Query/Validators RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryValidatorsRequest)
pub struct QueryValidatorsRequest {
    // message fields
    ///  status enables to query for validators matching a given status.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorsRequest.status)
    pub status: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryValidatorsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryValidatorsRequest {
    fn default() -> &'a QueryValidatorsRequest {
        <QueryValidatorsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorsRequest {
    pub fn new() -> QueryValidatorsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &QueryValidatorsRequest| { &m.status },
            |m: &mut QueryValidatorsRequest| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryValidatorsRequest| { &m.pagination },
            |m: &mut QueryValidatorsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryValidatorsRequest>(
            "QueryValidatorsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryValidatorsRequest {
    const NAME: &'static str = "QueryValidatorsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.status = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryValidatorsRequest {
        QueryValidatorsRequest::new()
    }

    fn clear(&mut self) {
        self.status.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryValidatorsRequest {
        static instance: QueryValidatorsRequest = QueryValidatorsRequest {
            status: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryValidatorsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryValidatorsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryValidatorsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryValidatorsResponse is response type for the Query/Validators RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryValidatorsResponse)
pub struct QueryValidatorsResponse {
    // message fields
    ///  validators contains all the queried validators.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorsResponse.validators)
    pub validators: ::std::vec::Vec<super::staking::Validator>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryValidatorsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryValidatorsResponse {
    fn default() -> &'a QueryValidatorsResponse {
        <QueryValidatorsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorsResponse {
    pub fn new() -> QueryValidatorsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validators",
            |m: &QueryValidatorsResponse| { &m.validators },
            |m: &mut QueryValidatorsResponse| { &mut m.validators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryValidatorsResponse| { &m.pagination },
            |m: &mut QueryValidatorsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryValidatorsResponse>(
            "QueryValidatorsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryValidatorsResponse {
    const NAME: &'static str = "QueryValidatorsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validators.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.validators {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.validators {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryValidatorsResponse {
        QueryValidatorsResponse::new()
    }

    fn clear(&mut self) {
        self.validators.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryValidatorsResponse {
        static instance: QueryValidatorsResponse = QueryValidatorsResponse {
            validators: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryValidatorsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryValidatorsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryValidatorsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryValidatorRequest is response type for the Query/Validator RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryValidatorRequest)
pub struct QueryValidatorRequest {
    // message fields
    ///  validator_addr defines the validator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorRequest.validator_addr)
    pub validator_addr: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryValidatorRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryValidatorRequest {
    fn default() -> &'a QueryValidatorRequest {
        <QueryValidatorRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorRequest {
    pub fn new() -> QueryValidatorRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_addr",
            |m: &QueryValidatorRequest| { &m.validator_addr },
            |m: &mut QueryValidatorRequest| { &mut m.validator_addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryValidatorRequest>(
            "QueryValidatorRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryValidatorRequest {
    const NAME: &'static str = "QueryValidatorRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_addr = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_addr.is_empty() {
            os.write_string(1, &self.validator_addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryValidatorRequest {
        QueryValidatorRequest::new()
    }

    fn clear(&mut self) {
        self.validator_addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryValidatorRequest {
        static instance: QueryValidatorRequest = QueryValidatorRequest {
            validator_addr: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryValidatorRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryValidatorRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryValidatorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryValidatorResponse is response type for the Query/Validator RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryValidatorResponse)
pub struct QueryValidatorResponse {
    // message fields
    ///  validator defines the the validator info.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorResponse.validator)
    pub validator: ::protobuf::MessageField<super::staking::Validator>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryValidatorResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryValidatorResponse {
    fn default() -> &'a QueryValidatorResponse {
        <QueryValidatorResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorResponse {
    pub fn new() -> QueryValidatorResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::Validator>(
            "validator",
            |m: &QueryValidatorResponse| { &m.validator },
            |m: &mut QueryValidatorResponse| { &mut m.validator },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryValidatorResponse>(
            "QueryValidatorResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryValidatorResponse {
    const NAME: &'static str = "QueryValidatorResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.validator)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.validator.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.validator.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryValidatorResponse {
        QueryValidatorResponse::new()
    }

    fn clear(&mut self) {
        self.validator.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryValidatorResponse {
        static instance: QueryValidatorResponse = QueryValidatorResponse {
            validator: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryValidatorResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryValidatorResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryValidatorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryValidatorDelegationsRequest is request type for the
///  Query/ValidatorDelegations RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryValidatorDelegationsRequest)
pub struct QueryValidatorDelegationsRequest {
    // message fields
    ///  validator_addr defines the validator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorDelegationsRequest.validator_addr)
    pub validator_addr: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorDelegationsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryValidatorDelegationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryValidatorDelegationsRequest {
    fn default() -> &'a QueryValidatorDelegationsRequest {
        <QueryValidatorDelegationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorDelegationsRequest {
    pub fn new() -> QueryValidatorDelegationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_addr",
            |m: &QueryValidatorDelegationsRequest| { &m.validator_addr },
            |m: &mut QueryValidatorDelegationsRequest| { &mut m.validator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryValidatorDelegationsRequest| { &m.pagination },
            |m: &mut QueryValidatorDelegationsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryValidatorDelegationsRequest>(
            "QueryValidatorDelegationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryValidatorDelegationsRequest {
    const NAME: &'static str = "QueryValidatorDelegationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_addr = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_addr);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_addr.is_empty() {
            os.write_string(1, &self.validator_addr)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryValidatorDelegationsRequest {
        QueryValidatorDelegationsRequest::new()
    }

    fn clear(&mut self) {
        self.validator_addr.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryValidatorDelegationsRequest {
        static instance: QueryValidatorDelegationsRequest = QueryValidatorDelegationsRequest {
            validator_addr: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryValidatorDelegationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryValidatorDelegationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryValidatorDelegationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorDelegationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryValidatorDelegationsResponse is response type for the
///  Query/ValidatorDelegations RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryValidatorDelegationsResponse)
pub struct QueryValidatorDelegationsResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorDelegationsResponse.delegation_responses)
    pub delegation_responses: ::std::vec::Vec<super::staking::DelegationResponse>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorDelegationsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryValidatorDelegationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryValidatorDelegationsResponse {
    fn default() -> &'a QueryValidatorDelegationsResponse {
        <QueryValidatorDelegationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorDelegationsResponse {
    pub fn new() -> QueryValidatorDelegationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegation_responses",
            |m: &QueryValidatorDelegationsResponse| { &m.delegation_responses },
            |m: &mut QueryValidatorDelegationsResponse| { &mut m.delegation_responses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryValidatorDelegationsResponse| { &m.pagination },
            |m: &mut QueryValidatorDelegationsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryValidatorDelegationsResponse>(
            "QueryValidatorDelegationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryValidatorDelegationsResponse {
    const NAME: &'static str = "QueryValidatorDelegationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegation_responses.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.delegation_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.delegation_responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryValidatorDelegationsResponse {
        QueryValidatorDelegationsResponse::new()
    }

    fn clear(&mut self) {
        self.delegation_responses.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryValidatorDelegationsResponse {
        static instance: QueryValidatorDelegationsResponse = QueryValidatorDelegationsResponse {
            delegation_responses: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryValidatorDelegationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryValidatorDelegationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryValidatorDelegationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorDelegationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryValidatorUnbondingDelegationsRequest is required type for the
///  Query/ValidatorUnbondingDelegations RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest)
pub struct QueryValidatorUnbondingDelegationsRequest {
    // message fields
    ///  validator_addr defines the validator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest.validator_addr)
    pub validator_addr: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryValidatorUnbondingDelegationsRequest {
    fn default() -> &'a QueryValidatorUnbondingDelegationsRequest {
        <QueryValidatorUnbondingDelegationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorUnbondingDelegationsRequest {
    pub fn new() -> QueryValidatorUnbondingDelegationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_addr",
            |m: &QueryValidatorUnbondingDelegationsRequest| { &m.validator_addr },
            |m: &mut QueryValidatorUnbondingDelegationsRequest| { &mut m.validator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryValidatorUnbondingDelegationsRequest| { &m.pagination },
            |m: &mut QueryValidatorUnbondingDelegationsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryValidatorUnbondingDelegationsRequest>(
            "QueryValidatorUnbondingDelegationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryValidatorUnbondingDelegationsRequest {
    const NAME: &'static str = "QueryValidatorUnbondingDelegationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validator_addr = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.validator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_addr);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.validator_addr.is_empty() {
            os.write_string(1, &self.validator_addr)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryValidatorUnbondingDelegationsRequest {
        QueryValidatorUnbondingDelegationsRequest::new()
    }

    fn clear(&mut self) {
        self.validator_addr.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryValidatorUnbondingDelegationsRequest {
        static instance: QueryValidatorUnbondingDelegationsRequest = QueryValidatorUnbondingDelegationsRequest {
            validator_addr: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryValidatorUnbondingDelegationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryValidatorUnbondingDelegationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryValidatorUnbondingDelegationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorUnbondingDelegationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryValidatorUnbondingDelegationsResponse is response type for the
///  Query/ValidatorUnbondingDelegations RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse)
pub struct QueryValidatorUnbondingDelegationsResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse.unbonding_responses)
    pub unbonding_responses: ::std::vec::Vec<super::staking::UnbondingDelegation>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryValidatorUnbondingDelegationsResponse {
    fn default() -> &'a QueryValidatorUnbondingDelegationsResponse {
        <QueryValidatorUnbondingDelegationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorUnbondingDelegationsResponse {
    pub fn new() -> QueryValidatorUnbondingDelegationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unbonding_responses",
            |m: &QueryValidatorUnbondingDelegationsResponse| { &m.unbonding_responses },
            |m: &mut QueryValidatorUnbondingDelegationsResponse| { &mut m.unbonding_responses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryValidatorUnbondingDelegationsResponse| { &m.pagination },
            |m: &mut QueryValidatorUnbondingDelegationsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryValidatorUnbondingDelegationsResponse>(
            "QueryValidatorUnbondingDelegationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryValidatorUnbondingDelegationsResponse {
    const NAME: &'static str = "QueryValidatorUnbondingDelegationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.unbonding_responses.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.unbonding_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.unbonding_responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryValidatorUnbondingDelegationsResponse {
        QueryValidatorUnbondingDelegationsResponse::new()
    }

    fn clear(&mut self) {
        self.unbonding_responses.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryValidatorUnbondingDelegationsResponse {
        static instance: QueryValidatorUnbondingDelegationsResponse = QueryValidatorUnbondingDelegationsResponse {
            unbonding_responses: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryValidatorUnbondingDelegationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryValidatorUnbondingDelegationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryValidatorUnbondingDelegationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorUnbondingDelegationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegationRequest is request type for the Query/Delegation RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegationRequest)
pub struct QueryDelegationRequest {
    // message fields
    ///  delegator_addr defines the delegator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegationRequest.delegator_addr)
    pub delegator_addr: ::std::string::String,
    ///  validator_addr defines the validator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegationRequest.validator_addr)
    pub validator_addr: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegationRequest {
    fn default() -> &'a QueryDelegationRequest {
        <QueryDelegationRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegationRequest {
    pub fn new() -> QueryDelegationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_addr",
            |m: &QueryDelegationRequest| { &m.delegator_addr },
            |m: &mut QueryDelegationRequest| { &mut m.delegator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_addr",
            |m: &QueryDelegationRequest| { &m.validator_addr },
            |m: &mut QueryDelegationRequest| { &mut m.validator_addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegationRequest>(
            "QueryDelegationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegationRequest {
    const NAME: &'static str = "QueryDelegationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_addr = is.read_string()?;
                },
                18 => {
                    self.validator_addr = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_addr);
        }
        if !self.validator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_addr.is_empty() {
            os.write_string(1, &self.delegator_addr)?;
        }
        if !self.validator_addr.is_empty() {
            os.write_string(2, &self.validator_addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegationRequest {
        QueryDelegationRequest::new()
    }

    fn clear(&mut self) {
        self.delegator_addr.clear();
        self.validator_addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegationRequest {
        static instance: QueryDelegationRequest = QueryDelegationRequest {
            delegator_addr: ::std::string::String::new(),
            validator_addr: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegationResponse is response type for the Query/Delegation RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegationResponse)
pub struct QueryDelegationResponse {
    // message fields
    ///  delegation_responses defines the delegation info of a delegation.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegationResponse.delegation_response)
    pub delegation_response: ::protobuf::MessageField<super::staking::DelegationResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegationResponse {
    fn default() -> &'a QueryDelegationResponse {
        <QueryDelegationResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegationResponse {
    pub fn new() -> QueryDelegationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::DelegationResponse>(
            "delegation_response",
            |m: &QueryDelegationResponse| { &m.delegation_response },
            |m: &mut QueryDelegationResponse| { &mut m.delegation_response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegationResponse>(
            "QueryDelegationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegationResponse {
    const NAME: &'static str = "QueryDelegationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.delegation_response)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.delegation_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.delegation_response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegationResponse {
        QueryDelegationResponse::new()
    }

    fn clear(&mut self) {
        self.delegation_response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegationResponse {
        static instance: QueryDelegationResponse = QueryDelegationResponse {
            delegation_response: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryUnbondingDelegationRequest is request type for the
///  Query/UnbondingDelegation RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryUnbondingDelegationRequest)
pub struct QueryUnbondingDelegationRequest {
    // message fields
    ///  delegator_addr defines the delegator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryUnbondingDelegationRequest.delegator_addr)
    pub delegator_addr: ::std::string::String,
    ///  validator_addr defines the validator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryUnbondingDelegationRequest.validator_addr)
    pub validator_addr: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryUnbondingDelegationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryUnbondingDelegationRequest {
    fn default() -> &'a QueryUnbondingDelegationRequest {
        <QueryUnbondingDelegationRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryUnbondingDelegationRequest {
    pub fn new() -> QueryUnbondingDelegationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_addr",
            |m: &QueryUnbondingDelegationRequest| { &m.delegator_addr },
            |m: &mut QueryUnbondingDelegationRequest| { &mut m.delegator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_addr",
            |m: &QueryUnbondingDelegationRequest| { &m.validator_addr },
            |m: &mut QueryUnbondingDelegationRequest| { &mut m.validator_addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryUnbondingDelegationRequest>(
            "QueryUnbondingDelegationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryUnbondingDelegationRequest {
    const NAME: &'static str = "QueryUnbondingDelegationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_addr = is.read_string()?;
                },
                18 => {
                    self.validator_addr = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_addr);
        }
        if !self.validator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_addr.is_empty() {
            os.write_string(1, &self.delegator_addr)?;
        }
        if !self.validator_addr.is_empty() {
            os.write_string(2, &self.validator_addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryUnbondingDelegationRequest {
        QueryUnbondingDelegationRequest::new()
    }

    fn clear(&mut self) {
        self.delegator_addr.clear();
        self.validator_addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryUnbondingDelegationRequest {
        static instance: QueryUnbondingDelegationRequest = QueryUnbondingDelegationRequest {
            delegator_addr: ::std::string::String::new(),
            validator_addr: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryUnbondingDelegationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryUnbondingDelegationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryUnbondingDelegationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryUnbondingDelegationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegationResponse is response type for the Query/UnbondingDelegation
///  RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryUnbondingDelegationResponse)
pub struct QueryUnbondingDelegationResponse {
    // message fields
    ///  unbond defines the unbonding information of a delegation.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryUnbondingDelegationResponse.unbond)
    pub unbond: ::protobuf::MessageField<super::staking::UnbondingDelegation>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryUnbondingDelegationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryUnbondingDelegationResponse {
    fn default() -> &'a QueryUnbondingDelegationResponse {
        <QueryUnbondingDelegationResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryUnbondingDelegationResponse {
    pub fn new() -> QueryUnbondingDelegationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::UnbondingDelegation>(
            "unbond",
            |m: &QueryUnbondingDelegationResponse| { &m.unbond },
            |m: &mut QueryUnbondingDelegationResponse| { &mut m.unbond },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryUnbondingDelegationResponse>(
            "QueryUnbondingDelegationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryUnbondingDelegationResponse {
    const NAME: &'static str = "QueryUnbondingDelegationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.unbond)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.unbond.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.unbond.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryUnbondingDelegationResponse {
        QueryUnbondingDelegationResponse::new()
    }

    fn clear(&mut self) {
        self.unbond.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryUnbondingDelegationResponse {
        static instance: QueryUnbondingDelegationResponse = QueryUnbondingDelegationResponse {
            unbond: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryUnbondingDelegationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryUnbondingDelegationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryUnbondingDelegationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryUnbondingDelegationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegatorDelegationsRequest is request type for the
///  Query/DelegatorDelegations RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest)
pub struct QueryDelegatorDelegationsRequest {
    // message fields
    ///  delegator_addr defines the delegator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest.delegator_addr)
    pub delegator_addr: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorDelegationsRequest {
    fn default() -> &'a QueryDelegatorDelegationsRequest {
        <QueryDelegatorDelegationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorDelegationsRequest {
    pub fn new() -> QueryDelegatorDelegationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_addr",
            |m: &QueryDelegatorDelegationsRequest| { &m.delegator_addr },
            |m: &mut QueryDelegatorDelegationsRequest| { &mut m.delegator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryDelegatorDelegationsRequest| { &m.pagination },
            |m: &mut QueryDelegatorDelegationsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegatorDelegationsRequest>(
            "QueryDelegatorDelegationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegatorDelegationsRequest {
    const NAME: &'static str = "QueryDelegatorDelegationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_addr = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_addr);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_addr.is_empty() {
            os.write_string(1, &self.delegator_addr)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegatorDelegationsRequest {
        QueryDelegatorDelegationsRequest::new()
    }

    fn clear(&mut self) {
        self.delegator_addr.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegatorDelegationsRequest {
        static instance: QueryDelegatorDelegationsRequest = QueryDelegatorDelegationsRequest {
            delegator_addr: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegatorDelegationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegatorDelegationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegatorDelegationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorDelegationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegatorDelegationsResponse is response type for the
///  Query/DelegatorDelegations RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse)
pub struct QueryDelegatorDelegationsResponse {
    // message fields
    ///  delegation_responses defines all the delegations' info of a delegator.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse.delegation_responses)
    pub delegation_responses: ::std::vec::Vec<super::staking::DelegationResponse>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorDelegationsResponse {
    fn default() -> &'a QueryDelegatorDelegationsResponse {
        <QueryDelegatorDelegationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorDelegationsResponse {
    pub fn new() -> QueryDelegatorDelegationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegation_responses",
            |m: &QueryDelegatorDelegationsResponse| { &m.delegation_responses },
            |m: &mut QueryDelegatorDelegationsResponse| { &mut m.delegation_responses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryDelegatorDelegationsResponse| { &m.pagination },
            |m: &mut QueryDelegatorDelegationsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegatorDelegationsResponse>(
            "QueryDelegatorDelegationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegatorDelegationsResponse {
    const NAME: &'static str = "QueryDelegatorDelegationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegation_responses.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.delegation_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.delegation_responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegatorDelegationsResponse {
        QueryDelegatorDelegationsResponse::new()
    }

    fn clear(&mut self) {
        self.delegation_responses.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegatorDelegationsResponse {
        static instance: QueryDelegatorDelegationsResponse = QueryDelegatorDelegationsResponse {
            delegation_responses: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegatorDelegationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegatorDelegationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegatorDelegationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorDelegationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegatorUnbondingDelegationsRequest is request type for the
///  Query/DelegatorUnbondingDelegations RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest)
pub struct QueryDelegatorUnbondingDelegationsRequest {
    // message fields
    ///  delegator_addr defines the delegator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest.delegator_addr)
    pub delegator_addr: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorUnbondingDelegationsRequest {
    fn default() -> &'a QueryDelegatorUnbondingDelegationsRequest {
        <QueryDelegatorUnbondingDelegationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorUnbondingDelegationsRequest {
    pub fn new() -> QueryDelegatorUnbondingDelegationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_addr",
            |m: &QueryDelegatorUnbondingDelegationsRequest| { &m.delegator_addr },
            |m: &mut QueryDelegatorUnbondingDelegationsRequest| { &mut m.delegator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryDelegatorUnbondingDelegationsRequest| { &m.pagination },
            |m: &mut QueryDelegatorUnbondingDelegationsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegatorUnbondingDelegationsRequest>(
            "QueryDelegatorUnbondingDelegationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegatorUnbondingDelegationsRequest {
    const NAME: &'static str = "QueryDelegatorUnbondingDelegationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_addr = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_addr);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_addr.is_empty() {
            os.write_string(1, &self.delegator_addr)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegatorUnbondingDelegationsRequest {
        QueryDelegatorUnbondingDelegationsRequest::new()
    }

    fn clear(&mut self) {
        self.delegator_addr.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegatorUnbondingDelegationsRequest {
        static instance: QueryDelegatorUnbondingDelegationsRequest = QueryDelegatorUnbondingDelegationsRequest {
            delegator_addr: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegatorUnbondingDelegationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegatorUnbondingDelegationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegatorUnbondingDelegationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorUnbondingDelegationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryUnbondingDelegatorDelegationsResponse is response type for the
///  Query/UnbondingDelegatorDelegations RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse)
pub struct QueryDelegatorUnbondingDelegationsResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse.unbonding_responses)
    pub unbonding_responses: ::std::vec::Vec<super::staking::UnbondingDelegation>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorUnbondingDelegationsResponse {
    fn default() -> &'a QueryDelegatorUnbondingDelegationsResponse {
        <QueryDelegatorUnbondingDelegationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorUnbondingDelegationsResponse {
    pub fn new() -> QueryDelegatorUnbondingDelegationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unbonding_responses",
            |m: &QueryDelegatorUnbondingDelegationsResponse| { &m.unbonding_responses },
            |m: &mut QueryDelegatorUnbondingDelegationsResponse| { &mut m.unbonding_responses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryDelegatorUnbondingDelegationsResponse| { &m.pagination },
            |m: &mut QueryDelegatorUnbondingDelegationsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegatorUnbondingDelegationsResponse>(
            "QueryDelegatorUnbondingDelegationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegatorUnbondingDelegationsResponse {
    const NAME: &'static str = "QueryDelegatorUnbondingDelegationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.unbonding_responses.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.unbonding_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.unbonding_responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegatorUnbondingDelegationsResponse {
        QueryDelegatorUnbondingDelegationsResponse::new()
    }

    fn clear(&mut self) {
        self.unbonding_responses.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegatorUnbondingDelegationsResponse {
        static instance: QueryDelegatorUnbondingDelegationsResponse = QueryDelegatorUnbondingDelegationsResponse {
            unbonding_responses: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegatorUnbondingDelegationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegatorUnbondingDelegationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegatorUnbondingDelegationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorUnbondingDelegationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryRedelegationsRequest is request type for the Query/Redelegations RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryRedelegationsRequest)
pub struct QueryRedelegationsRequest {
    // message fields
    ///  delegator_addr defines the delegator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryRedelegationsRequest.delegator_addr)
    pub delegator_addr: ::std::string::String,
    ///  src_validator_addr defines the validator address to redelegate from.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryRedelegationsRequest.src_validator_addr)
    pub src_validator_addr: ::std::string::String,
    ///  dst_validator_addr defines the validator address to redelegate to.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryRedelegationsRequest.dst_validator_addr)
    pub dst_validator_addr: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryRedelegationsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryRedelegationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryRedelegationsRequest {
    fn default() -> &'a QueryRedelegationsRequest {
        <QueryRedelegationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryRedelegationsRequest {
    pub fn new() -> QueryRedelegationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_addr",
            |m: &QueryRedelegationsRequest| { &m.delegator_addr },
            |m: &mut QueryRedelegationsRequest| { &mut m.delegator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src_validator_addr",
            |m: &QueryRedelegationsRequest| { &m.src_validator_addr },
            |m: &mut QueryRedelegationsRequest| { &mut m.src_validator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dst_validator_addr",
            |m: &QueryRedelegationsRequest| { &m.dst_validator_addr },
            |m: &mut QueryRedelegationsRequest| { &mut m.dst_validator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryRedelegationsRequest| { &m.pagination },
            |m: &mut QueryRedelegationsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryRedelegationsRequest>(
            "QueryRedelegationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryRedelegationsRequest {
    const NAME: &'static str = "QueryRedelegationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_addr = is.read_string()?;
                },
                18 => {
                    self.src_validator_addr = is.read_string()?;
                },
                26 => {
                    self.dst_validator_addr = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_addr);
        }
        if !self.src_validator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.src_validator_addr);
        }
        if !self.dst_validator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.dst_validator_addr);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_addr.is_empty() {
            os.write_string(1, &self.delegator_addr)?;
        }
        if !self.src_validator_addr.is_empty() {
            os.write_string(2, &self.src_validator_addr)?;
        }
        if !self.dst_validator_addr.is_empty() {
            os.write_string(3, &self.dst_validator_addr)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryRedelegationsRequest {
        QueryRedelegationsRequest::new()
    }

    fn clear(&mut self) {
        self.delegator_addr.clear();
        self.src_validator_addr.clear();
        self.dst_validator_addr.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryRedelegationsRequest {
        static instance: QueryRedelegationsRequest = QueryRedelegationsRequest {
            delegator_addr: ::std::string::String::new(),
            src_validator_addr: ::std::string::String::new(),
            dst_validator_addr: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryRedelegationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryRedelegationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryRedelegationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRedelegationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryRedelegationsResponse is response type for the Query/Redelegations RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryRedelegationsResponse)
pub struct QueryRedelegationsResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryRedelegationsResponse.redelegation_responses)
    pub redelegation_responses: ::std::vec::Vec<super::staking::RedelegationResponse>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryRedelegationsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryRedelegationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryRedelegationsResponse {
    fn default() -> &'a QueryRedelegationsResponse {
        <QueryRedelegationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryRedelegationsResponse {
    pub fn new() -> QueryRedelegationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "redelegation_responses",
            |m: &QueryRedelegationsResponse| { &m.redelegation_responses },
            |m: &mut QueryRedelegationsResponse| { &mut m.redelegation_responses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryRedelegationsResponse| { &m.pagination },
            |m: &mut QueryRedelegationsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryRedelegationsResponse>(
            "QueryRedelegationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryRedelegationsResponse {
    const NAME: &'static str = "QueryRedelegationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.redelegation_responses.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.redelegation_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.redelegation_responses {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryRedelegationsResponse {
        QueryRedelegationsResponse::new()
    }

    fn clear(&mut self) {
        self.redelegation_responses.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryRedelegationsResponse {
        static instance: QueryRedelegationsResponse = QueryRedelegationsResponse {
            redelegation_responses: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryRedelegationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryRedelegationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryRedelegationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRedelegationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegatorValidatorsRequest is request type for the
///  Query/DelegatorValidators RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest)
pub struct QueryDelegatorValidatorsRequest {
    // message fields
    ///  delegator_addr defines the delegator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest.delegator_addr)
    pub delegator_addr: ::std::string::String,
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorValidatorsRequest {
    fn default() -> &'a QueryDelegatorValidatorsRequest {
        <QueryDelegatorValidatorsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorValidatorsRequest {
    pub fn new() -> QueryDelegatorValidatorsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_addr",
            |m: &QueryDelegatorValidatorsRequest| { &m.delegator_addr },
            |m: &mut QueryDelegatorValidatorsRequest| { &mut m.delegator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryDelegatorValidatorsRequest| { &m.pagination },
            |m: &mut QueryDelegatorValidatorsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegatorValidatorsRequest>(
            "QueryDelegatorValidatorsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegatorValidatorsRequest {
    const NAME: &'static str = "QueryDelegatorValidatorsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_addr = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_addr);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_addr.is_empty() {
            os.write_string(1, &self.delegator_addr)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegatorValidatorsRequest {
        QueryDelegatorValidatorsRequest::new()
    }

    fn clear(&mut self) {
        self.delegator_addr.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegatorValidatorsRequest {
        static instance: QueryDelegatorValidatorsRequest = QueryDelegatorValidatorsRequest {
            delegator_addr: ::std::string::String::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegatorValidatorsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegatorValidatorsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegatorValidatorsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorValidatorsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegatorValidatorsResponse is response type for the
///  Query/DelegatorValidators RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse)
pub struct QueryDelegatorValidatorsResponse {
    // message fields
    ///  validators defines the the validators' info of a delegator.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse.validators)
    pub validators: ::std::vec::Vec<super::staking::Validator>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorValidatorsResponse {
    fn default() -> &'a QueryDelegatorValidatorsResponse {
        <QueryDelegatorValidatorsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorValidatorsResponse {
    pub fn new() -> QueryDelegatorValidatorsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validators",
            |m: &QueryDelegatorValidatorsResponse| { &m.validators },
            |m: &mut QueryDelegatorValidatorsResponse| { &mut m.validators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryDelegatorValidatorsResponse| { &m.pagination },
            |m: &mut QueryDelegatorValidatorsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegatorValidatorsResponse>(
            "QueryDelegatorValidatorsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegatorValidatorsResponse {
    const NAME: &'static str = "QueryDelegatorValidatorsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.validators.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.validators {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.validators {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegatorValidatorsResponse {
        QueryDelegatorValidatorsResponse::new()
    }

    fn clear(&mut self) {
        self.validators.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegatorValidatorsResponse {
        static instance: QueryDelegatorValidatorsResponse = QueryDelegatorValidatorsResponse {
            validators: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegatorValidatorsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegatorValidatorsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegatorValidatorsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorValidatorsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegatorValidatorRequest is request type for the
///  Query/DelegatorValidator RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegatorValidatorRequest)
pub struct QueryDelegatorValidatorRequest {
    // message fields
    ///  delegator_addr defines the delegator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorValidatorRequest.delegator_addr)
    pub delegator_addr: ::std::string::String,
    ///  validator_addr defines the validator address to query for.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorValidatorRequest.validator_addr)
    pub validator_addr: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegatorValidatorRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorValidatorRequest {
    fn default() -> &'a QueryDelegatorValidatorRequest {
        <QueryDelegatorValidatorRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorValidatorRequest {
    pub fn new() -> QueryDelegatorValidatorRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_addr",
            |m: &QueryDelegatorValidatorRequest| { &m.delegator_addr },
            |m: &mut QueryDelegatorValidatorRequest| { &mut m.delegator_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_addr",
            |m: &QueryDelegatorValidatorRequest| { &m.validator_addr },
            |m: &mut QueryDelegatorValidatorRequest| { &mut m.validator_addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegatorValidatorRequest>(
            "QueryDelegatorValidatorRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegatorValidatorRequest {
    const NAME: &'static str = "QueryDelegatorValidatorRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_addr = is.read_string()?;
                },
                18 => {
                    self.validator_addr = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_addr);
        }
        if !self.validator_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_addr.is_empty() {
            os.write_string(1, &self.delegator_addr)?;
        }
        if !self.validator_addr.is_empty() {
            os.write_string(2, &self.validator_addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegatorValidatorRequest {
        QueryDelegatorValidatorRequest::new()
    }

    fn clear(&mut self) {
        self.delegator_addr.clear();
        self.validator_addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegatorValidatorRequest {
        static instance: QueryDelegatorValidatorRequest = QueryDelegatorValidatorRequest {
            delegator_addr: ::std::string::String::new(),
            validator_addr: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegatorValidatorRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegatorValidatorRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegatorValidatorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorValidatorRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDelegatorValidatorResponse response type for the
///  Query/DelegatorValidator RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryDelegatorValidatorResponse)
pub struct QueryDelegatorValidatorResponse {
    // message fields
    ///  validator defines the the validator info.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryDelegatorValidatorResponse.validator)
    pub validator: ::protobuf::MessageField<super::staking::Validator>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryDelegatorValidatorResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorValidatorResponse {
    fn default() -> &'a QueryDelegatorValidatorResponse {
        <QueryDelegatorValidatorResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorValidatorResponse {
    pub fn new() -> QueryDelegatorValidatorResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::Validator>(
            "validator",
            |m: &QueryDelegatorValidatorResponse| { &m.validator },
            |m: &mut QueryDelegatorValidatorResponse| { &mut m.validator },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDelegatorValidatorResponse>(
            "QueryDelegatorValidatorResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDelegatorValidatorResponse {
    const NAME: &'static str = "QueryDelegatorValidatorResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.validator)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.validator.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.validator.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDelegatorValidatorResponse {
        QueryDelegatorValidatorResponse::new()
    }

    fn clear(&mut self) {
        self.validator.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDelegatorValidatorResponse {
        static instance: QueryDelegatorValidatorResponse = QueryDelegatorValidatorResponse {
            validator: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDelegatorValidatorResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDelegatorValidatorResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDelegatorValidatorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorValidatorResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryHistoricalInfoRequest)
pub struct QueryHistoricalInfoRequest {
    // message fields
    ///  height defines at which height to query the historical info.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryHistoricalInfoRequest.height)
    pub height: i64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryHistoricalInfoRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryHistoricalInfoRequest {
    fn default() -> &'a QueryHistoricalInfoRequest {
        <QueryHistoricalInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryHistoricalInfoRequest {
    pub fn new() -> QueryHistoricalInfoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &QueryHistoricalInfoRequest| { &m.height },
            |m: &mut QueryHistoricalInfoRequest| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryHistoricalInfoRequest>(
            "QueryHistoricalInfoRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryHistoricalInfoRequest {
    const NAME: &'static str = "QueryHistoricalInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryHistoricalInfoRequest {
        QueryHistoricalInfoRequest::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryHistoricalInfoRequest {
        static instance: QueryHistoricalInfoRequest = QueryHistoricalInfoRequest {
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryHistoricalInfoRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryHistoricalInfoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryHistoricalInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryHistoricalInfoRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryHistoricalInfoResponse)
pub struct QueryHistoricalInfoResponse {
    // message fields
    ///  hist defines the historical info at the given height.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryHistoricalInfoResponse.hist)
    pub hist: ::protobuf::MessageField<super::staking::HistoricalInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryHistoricalInfoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryHistoricalInfoResponse {
    fn default() -> &'a QueryHistoricalInfoResponse {
        <QueryHistoricalInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryHistoricalInfoResponse {
    pub fn new() -> QueryHistoricalInfoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::HistoricalInfo>(
            "hist",
            |m: &QueryHistoricalInfoResponse| { &m.hist },
            |m: &mut QueryHistoricalInfoResponse| { &mut m.hist },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryHistoricalInfoResponse>(
            "QueryHistoricalInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryHistoricalInfoResponse {
    const NAME: &'static str = "QueryHistoricalInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.hist)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hist.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.hist.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryHistoricalInfoResponse {
        QueryHistoricalInfoResponse::new()
    }

    fn clear(&mut self) {
        self.hist.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryHistoricalInfoResponse {
        static instance: QueryHistoricalInfoResponse = QueryHistoricalInfoResponse {
            hist: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryHistoricalInfoResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryHistoricalInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryHistoricalInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryHistoricalInfoResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryPoolRequest is request type for the Query/Pool RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryPoolRequest)
pub struct QueryPoolRequest {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryPoolRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryPoolRequest {
    fn default() -> &'a QueryPoolRequest {
        <QueryPoolRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryPoolRequest {
    pub fn new() -> QueryPoolRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryPoolRequest>(
            "QueryPoolRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryPoolRequest {
    const NAME: &'static str = "QueryPoolRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryPoolRequest {
        QueryPoolRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryPoolRequest {
        static instance: QueryPoolRequest = QueryPoolRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryPoolRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryPoolRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryPoolRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryPoolRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryPoolResponse is response type for the Query/Pool RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryPoolResponse)
pub struct QueryPoolResponse {
    // message fields
    ///  pool defines the pool info.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryPoolResponse.pool)
    pub pool: ::protobuf::MessageField<super::staking::Pool>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryPoolResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryPoolResponse {
    fn default() -> &'a QueryPoolResponse {
        <QueryPoolResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryPoolResponse {
    pub fn new() -> QueryPoolResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::Pool>(
            "pool",
            |m: &QueryPoolResponse| { &m.pool },
            |m: &mut QueryPoolResponse| { &mut m.pool },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryPoolResponse>(
            "QueryPoolResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryPoolResponse {
    const NAME: &'static str = "QueryPoolResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pool)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pool.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pool.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryPoolResponse {
        QueryPoolResponse::new()
    }

    fn clear(&mut self) {
        self.pool.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryPoolResponse {
        static instance: QueryPoolResponse = QueryPoolResponse {
            pool: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryPoolResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryPoolResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryPoolResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryPoolResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryParamsRequest)
pub struct QueryParamsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsRequest>(
            "QueryParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: QueryParamsRequest = QueryParamsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.QueryParamsResponse)
pub struct QueryParamsResponse {
    // message fields
    ///  params holds all the parameters of this module.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.QueryParamsResponse.params)
    pub params: ::protobuf::MessageField<super::staking::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.QueryParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::Params>(
            "params",
            |m: &QueryParamsResponse| { &m.params },
            |m: &mut QueryParamsResponse| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsResponse>(
            "QueryParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: QueryParamsResponse = QueryParamsResponse {
            params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"cosmos/staking/v1beta1/query.proto\x12\x16cosmos.staking.v1beta1\x1a\
    *cosmos/base/query/v1beta1/pagination.proto\x1a\x14gogoproto/gogo.proto\
    \x1a\x1cgoogle/api/annotations.proto\x1a$cosmos/staking/v1beta1/staking.\
    proto\"x\n\x16QueryValidatorsRequest\x12\x16\n\x06status\x18\x01\x20\x01\
    (\tR\x06status\x12F\n\npagination\x18\x02\x20\x01(\x0b2&.cosmos.base.que\
    ry.v1beta1.PageRequestR\npagination\"\xab\x01\n\x17QueryValidatorsRespon\
    se\x12G\n\nvalidators\x18\x01\x20\x03(\x0b2!.cosmos.staking.v1beta1.Vali\
    datorR\nvalidatorsB\x04\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\x01\
    (\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination\">\n\x15Quer\
    yValidatorRequest\x12%\n\x0evalidator_addr\x18\x01\x20\x01(\tR\rvalidato\
    rAddr\"_\n\x16QueryValidatorResponse\x12E\n\tvalidator\x18\x01\x20\x01(\
    \x0b2!.cosmos.staking.v1beta1.ValidatorR\tvalidatorB\x04\xc8\xde\x1f\0\"\
    \x91\x01\n\x20QueryValidatorDelegationsRequest\x12%\n\x0evalidator_addr\
    \x18\x01\x20\x01(\tR\rvalidatorAddr\x12F\n\npagination\x18\x02\x20\x01(\
    \x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagination\"\xe8\x01\n!Qu\
    eryValidatorDelegationsResponse\x12z\n\x14delegation_responses\x18\x01\
    \x20\x03(\x0b2*.cosmos.staking.v1beta1.DelegationResponseR\x13delegation\
    ResponsesB\x1b\xaa\xdf\x1f\x13DelegationResponses\xc8\xde\x1f\0\x12G\n\n\
    pagination\x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponse\
    R\npagination\"\x9a\x01\n)QueryValidatorUnbondingDelegationsRequest\x12%\
    \n\x0evalidator_addr\x18\x01\x20\x01(\tR\rvalidatorAddr\x12F\n\npaginati\
    on\x18\x02\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagina\
    tion\"\xd9\x01\n*QueryValidatorUnbondingDelegationsResponse\x12b\n\x13un\
    bonding_responses\x18\x01\x20\x03(\x0b2+.cosmos.staking.v1beta1.Unbondin\
    gDelegationR\x12unbondingResponsesB\x04\xc8\xde\x1f\0\x12G\n\npagination\
    \x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npaginat\
    ion\"p\n\x16QueryDelegationRequest\x12%\n\x0edelegator_addr\x18\x01\x20\
    \x01(\tR\rdelegatorAddr\x12%\n\x0evalidator_addr\x18\x02\x20\x01(\tR\rva\
    lidatorAddr:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"v\n\x17QueryDelegationResp\
    onse\x12[\n\x13delegation_response\x18\x01\x20\x01(\x0b2*.cosmos.staking\
    .v1beta1.DelegationResponseR\x12delegationResponse\"y\n\x1fQueryUnbondin\
    gDelegationRequest\x12%\n\x0edelegator_addr\x18\x01\x20\x01(\tR\rdelegat\
    orAddr\x12%\n\x0evalidator_addr\x18\x02\x20\x01(\tR\rvalidatorAddr:\x08\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0\"m\n\x20QueryUnbondingDelegationResponse\
    \x12I\n\x06unbond\x18\x01\x20\x01(\x0b2+.cosmos.staking.v1beta1.Unbondin\
    gDelegationR\x06unbondB\x04\xc8\xde\x1f\0\"\x9b\x01\n\x20QueryDelegatorD\
    elegationsRequest\x12%\n\x0edelegator_addr\x18\x01\x20\x01(\tR\rdelegato\
    rAddr\x12F\n\npagination\x18\x02\x20\x01(\x0b2&.cosmos.base.query.v1beta\
    1.PageRequestR\npagination:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xd1\x01\n!\
    QueryDelegatorDelegationsResponse\x12c\n\x14delegation_responses\x18\x01\
    \x20\x03(\x0b2*.cosmos.staking.v1beta1.DelegationResponseR\x13delegation\
    ResponsesB\x04\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.c\
    osmos.base.query.v1beta1.PageResponseR\npagination\"\xa4\x01\n)QueryDele\
    gatorUnbondingDelegationsRequest\x12%\n\x0edelegator_addr\x18\x01\x20\
    \x01(\tR\rdelegatorAddr\x12F\n\npagination\x18\x02\x20\x01(\x0b2&.cosmos\
    .base.query.v1beta1.PageRequestR\npagination:\x08\x88\xa0\x1f\0\xe8\xa0\
    \x1f\0\"\xd9\x01\n*QueryDelegatorUnbondingDelegationsResponse\x12b\n\x13\
    unbonding_responses\x18\x01\x20\x03(\x0b2+.cosmos.staking.v1beta1.Unbond\
    ingDelegationR\x12unbondingResponsesB\x04\xc8\xde\x1f\0\x12G\n\npaginati\
    on\x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagin\
    ation\"\xf0\x01\n\x19QueryRedelegationsRequest\x12%\n\x0edelegator_addr\
    \x18\x01\x20\x01(\tR\rdelegatorAddr\x12,\n\x12src_validator_addr\x18\x02\
    \x20\x01(\tR\x10srcValidatorAddr\x12,\n\x12dst_validator_addr\x18\x03\
    \x20\x01(\tR\x10dstValidatorAddr\x12F\n\npagination\x18\x04\x20\x01(\x0b\
    2&.cosmos.base.query.v1beta1.PageRequestR\npagination:\x08\x88\xa0\x1f\0\
    \xe8\xa0\x1f\0\"\xd0\x01\n\x1aQueryRedelegationsResponse\x12i\n\x16redel\
    egation_responses\x18\x01\x20\x03(\x0b2,.cosmos.staking.v1beta1.Redelega\
    tionResponseR\x15redelegationResponsesB\x04\xc8\xde\x1f\0\x12G\n\npagina\
    tion\x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npag\
    ination\"\x9a\x01\n\x1fQueryDelegatorValidatorsRequest\x12%\n\x0edelegat\
    or_addr\x18\x01\x20\x01(\tR\rdelegatorAddr\x12F\n\npagination\x18\x02\
    \x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagination:\x08\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xb4\x01\n\x20QueryDelegatorValidatorsResp\
    onse\x12G\n\nvalidators\x18\x01\x20\x03(\x0b2!.cosmos.staking.v1beta1.Va\
    lidatorR\nvalidatorsB\x04\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\
    \x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination\"x\n\x1e\
    QueryDelegatorValidatorRequest\x12%\n\x0edelegator_addr\x18\x01\x20\x01(\
    \tR\rdelegatorAddr\x12%\n\x0evalidator_addr\x18\x02\x20\x01(\tR\rvalidat\
    orAddr:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"h\n\x1fQueryDelegatorValidatorR\
    esponse\x12E\n\tvalidator\x18\x01\x20\x01(\x0b2!.cosmos.staking.v1beta1.\
    ValidatorR\tvalidatorB\x04\xc8\xde\x1f\0\"4\n\x1aQueryHistoricalInfoRequ\
    est\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\x06height\"Y\n\x1bQueryHis\
    toricalInfoResponse\x12:\n\x04hist\x18\x01\x20\x01(\x0b2&.cosmos.staking\
    .v1beta1.HistoricalInfoR\x04hist\"\x12\n\x10QueryPoolRequest\"K\n\x11Que\
    ryPoolResponse\x126\n\x04pool\x18\x01\x20\x01(\x0b2\x1c.cosmos.staking.v\
    1beta1.PoolR\x04poolB\x04\xc8\xde\x1f\0\"\x14\n\x12QueryParamsRequest\"S\
    \n\x13QueryParamsResponse\x12<\n\x06params\x18\x01\x20\x01(\x0b2\x1e.cos\
    mos.staking.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\x1f\02\xea\x15\n\x05Q\
    uery\x12\x99\x01\n\nValidators\x12..cosmos.staking.v1beta1.QueryValidato\
    rsRequest\x1a/.cosmos.staking.v1beta1.QueryValidatorsResponse\"*\x82\xd3\
    \xe4\x93\x02$\x12\"/cosmos/staking/v1beta1/validators\x12\xa7\x01\n\tVal\
    idator\x12-.cosmos.staking.v1beta1.QueryValidatorRequest\x1a..cosmos.sta\
    king.v1beta1.QueryValidatorResponse\";\x82\xd3\xe4\x93\x025\x123/cosmos/\
    staking/v1beta1/validators/{validator_addr}\x12\xd4\x01\n\x14ValidatorDe\
    legations\x128.cosmos.staking.v1beta1.QueryValidatorDelegationsRequest\
    \x1a9.cosmos.staking.v1beta1.QueryValidatorDelegationsResponse\"G\x82\
    \xd3\xe4\x93\x02A\x12?/cosmos/staking/v1beta1/validators/{validator_addr\
    }/delegations\x12\xf9\x01\n\x1dValidatorUnbondingDelegations\x12A.cosmos\
    .staking.v1beta1.QueryValidatorUnbondingDelegationsRequest\x1aB.cosmos.s\
    taking.v1beta1.QueryValidatorUnbondingDelegationsResponse\"Q\x82\xd3\xe4\
    \x93\x02K\x12I/cosmos/staking/v1beta1/validators/{validator_addr}/unbond\
    ing_delegations\x12\xc7\x01\n\nDelegation\x12..cosmos.staking.v1beta1.Qu\
    eryDelegationRequest\x1a/.cosmos.staking.v1beta1.QueryDelegationResponse\
    \"X\x82\xd3\xe4\x93\x02R\x12P/cosmos/staking/v1beta1/validators/{validat\
    or_addr}/delegations/{delegator_addr}\x12\xf7\x01\n\x13UnbondingDelegati\
    on\x127.cosmos.staking.v1beta1.QueryUnbondingDelegationRequest\x1a8.cosm\
    os.staking.v1beta1.QueryUnbondingDelegationResponse\"m\x82\xd3\xe4\x93\
    \x02g\x12e/cosmos/staking/v1beta1/validators/{validator_addr}/delegation\
    s/{delegator_addr}/unbonding_delegation\x12\xc9\x01\n\x14DelegatorDelega\
    tions\x128.cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest\x1a9.\
    cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse\"<\x82\xd3\xe4\
    \x93\x026\x124/cosmos/staking/v1beta1/delegations/{delegator_addr}\x12\
    \xf9\x01\n\x1dDelegatorUnbondingDelegations\x12A.cosmos.staking.v1beta1.\
    QueryDelegatorUnbondingDelegationsRequest\x1aB.cosmos.staking.v1beta1.Qu\
    eryDelegatorUnbondingDelegationsResponse\"Q\x82\xd3\xe4\x93\x02K\x12I/co\
    smos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations\
    \x12\xc1\x01\n\rRedelegations\x121.cosmos.staking.v1beta1.QueryRedelegat\
    ionsRequest\x1a2.cosmos.staking.v1beta1.QueryRedelegationsResponse\"I\
    \x82\xd3\xe4\x93\x02C\x12A/cosmos/staking/v1beta1/delegators/{delegator_\
    addr}/redelegations\x12\xd0\x01\n\x13DelegatorValidators\x127.cosmos.sta\
    king.v1beta1.QueryDelegatorValidatorsRequest\x1a8.cosmos.staking.v1beta1\
    .QueryDelegatorValidatorsResponse\"F\x82\xd3\xe4\x93\x02@\x12>/cosmos/st\
    aking/v1beta1/delegators/{delegator_addr}/validators\x12\xde\x01\n\x12De\
    legatorValidator\x126.cosmos.staking.v1beta1.QueryDelegatorValidatorRequ\
    est\x1a7.cosmos.staking.v1beta1.QueryDelegatorValidatorResponse\"W\x82\
    \xd3\xe4\x93\x02Q\x12O/cosmos/staking/v1beta1/delegators/{delegator_addr\
    }/validators/{validator_addr}\x12\xb3\x01\n\x0eHistoricalInfo\x122.cosmo\
    s.staking.v1beta1.QueryHistoricalInfoRequest\x1a3.cosmos.staking.v1beta1\
    .QueryHistoricalInfoResponse\"8\x82\xd3\xe4\x93\x022\x120/cosmos/staking\
    /v1beta1/historical_info/{height}\x12\x81\x01\n\x04Pool\x12(.cosmos.stak\
    ing.v1beta1.QueryPoolRequest\x1a).cosmos.staking.v1beta1.QueryPoolRespon\
    se\"$\x82\xd3\xe4\x93\x02\x1e\x12\x1c/cosmos/staking/v1beta1/pool\x12\
    \x89\x01\n\x06Params\x12*.cosmos.staking.v1beta1.QueryParamsRequest\x1a+\
    .cosmos.staking.v1beta1.QueryParamsResponse\"&\x82\xd3\xe4\x93\x02\x20\
    \x12\x1e/cosmos/staking/v1beta1/paramsB.Z,github.com/cosmos/cosmos-sdk/x\
    /staking/typesJ\x9d[\n\x07\x12\x05\0\0\xdb\x02\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1f\n\t\n\x02\x03\0\x12\x03\
    \x03\04\n\t\n\x02\x03\x01\x12\x03\x04\0\x1e\n\t\n\x02\x03\x02\x12\x03\
    \x05\0&\n\t\n\x02\x03\x03\x12\x03\x06\0.\n\x08\n\x01\x08\x12\x03\x08\0C\
    \n\t\n\x02\x08\x0b\x12\x03\x08\0C\n5\n\x02\x06\0\x12\x04\x0b\0\\\x01\x1a\
    )\x20Query\x20defines\x20the\x20gRPC\x20querier\x20service.\n\n\n\n\x03\
    \x06\0\x01\x12\x03\x0b\x08\r\nN\n\x04\x06\0\x02\0\x12\x04\r\x02\x0f\x03\
    \x1a@\x20Validators\x20queries\x20all\x20validators\x20that\x20match\x20\
    the\x20given\x20status.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\r\x06\x10\
    \n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\r\x11'\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\r2I\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x0e\x04H\n\x11\n\n\x06\
    \0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x0e\x04H\nM\n\x04\x06\0\x02\x01\
    \x12\x04\x12\x02\x14\x03\x1a?\x20Validator\x20queries\x20validator\x20in\
    fo\x20for\x20given\x20validator\x20address.\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03\x12\x06\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x12\x10%\
    \n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x120F\n\x0c\n\x05\x06\0\x02\x01\
    \x04\x12\x03\x13\x04Y\n\x11\n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\x02\x12\
    \x03\x13\x04Y\nO\n\x04\x06\0\x02\x02\x12\x04\x17\x02\x19\x03\x1aA\x20Val\
    idatorDelegations\x20queries\x20delegate\x20info\x20for\x20given\x20vali\
    dator.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x17\x06\x1a\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03\x17\x1b;\n\x0c\n\x05\x06\0\x02\x02\x03\x12\
    \x03\x17Fg\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03\x18\x04e\n\x11\n\n\x06\
    \0\x02\x02\x04\xb0\xca\xbc\"\x02\x12\x03\x18\x04e\n[\n\x04\x06\0\x02\x03\
    \x12\x04\x1c\x02\x20\x03\x1aM\x20ValidatorUnbondingDelegations\x20querie\
    s\x20unbonding\x20delegations\x20of\x20a\x20validator.\n\n\x0c\n\x05\x06\
    \0\x02\x03\x01\x12\x03\x1c\x06#\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\
    \x1c$M\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x1d\x0f9\n\r\n\x05\x06\0\
    \x02\x03\x04\x12\x04\x1e\x04\x1fL\n\x12\n\n\x06\0\x02\x03\x04\xb0\xca\
    \xbc\"\x02\x12\x04\x1e\x04\x1fL\nT\n\x04\x06\0\x02\x04\x12\x04#\x02&\x03\
    \x1aF\x20Delegation\x20queries\x20delegate\x20info\x20for\x20given\x20va\
    lidator\x20delegator\x20pair.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03#\
    \x06\x10\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03#\x11'\n\x0c\n\x05\x06\0\
    \x02\x04\x03\x12\x03#2I\n\r\n\x05\x06\0\x02\x04\x04\x12\x04$\x04%6\n\x12\
    \n\n\x06\0\x02\x04\x04\xb0\xca\xbc\"\x02\x12\x04$\x04%6\n_\n\x04\x06\0\
    \x02\x05\x12\x04*\x02-\x03\x1aQ\x20UnbondingDelegation\x20queries\x20unb\
    onding\x20info\x20for\x20given\x20validator\x20delegator\n\x20pair.\n\n\
    \x0c\n\x05\x06\0\x02\x05\x01\x12\x03*\x06\x19\n\x0c\n\x05\x06\0\x02\x05\
    \x02\x12\x03*\x1a9\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03*Dd\n\r\n\x05\
    \x06\0\x02\x05\x04\x12\x04+\x04,K\n\x12\n\n\x06\0\x02\x05\x04\xb0\xca\
    \xbc\"\x02\x12\x04+\x04,K\nZ\n\x04\x06\0\x02\x06\x12\x040\x022\x03\x1aL\
    \x20DelegatorDelegations\x20queries\x20all\x20delegations\x20of\x20a\x20\
    given\x20delegator\x20address.\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x030\
    \x06\x1a\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x030\x1b;\n\x0c\n\x05\x06\0\
    \x02\x06\x03\x12\x030Fg\n\x0c\n\x05\x06\0\x02\x06\x04\x12\x031\x04Z\n\
    \x11\n\n\x06\0\x02\x06\x04\xb0\xca\xbc\"\x02\x12\x031\x04Z\nn\n\x04\x06\
    \0\x02\x07\x12\x046\x02:\x03\x1a`\x20DelegatorUnbondingDelegations\x20qu\
    eries\x20all\x20unbonding\x20delegations\x20of\x20a\x20given\n\x20delega\
    tor\x20address.\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x036\x06#\n\x0c\n\
    \x05\x06\0\x02\x07\x02\x12\x036$M\n\x0c\n\x05\x06\0\x02\x07\x03\x12\x037\
    \x0f9\n\r\n\x05\x06\0\x02\x07\x04\x12\x048\x049L\n\x12\n\n\x06\0\x02\x07\
    \x04\xb0\xca\xbc\"\x02\x12\x048\x049L\nE\n\x04\x06\0\x02\x08\x12\x04=\
    \x02?\x03\x1a7\x20Redelegations\x20queries\x20redelegations\x20of\x20giv\
    en\x20address.\n\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03=\x06\x13\n\x0c\n\
    \x05\x06\0\x02\x08\x02\x12\x03=\x14-\n\x0c\n\x05\x06\0\x02\x08\x03\x12\
    \x03=8R\n\x0c\n\x05\x06\0\x02\x08\x04\x12\x03>\x04g\n\x11\n\n\x06\0\x02\
    \x08\x04\xb0\xca\xbc\"\x02\x12\x03>\x04g\n]\n\x04\x06\0\x02\t\x12\x04C\
    \x02E\x03\x1aO\x20DelegatorValidators\x20queries\x20all\x20validators\
    \x20info\x20for\x20given\x20delegator\n\x20address.\n\n\x0c\n\x05\x06\0\
    \x02\t\x01\x12\x03C\x06\x19\n\x0c\n\x05\x06\0\x02\t\x02\x12\x03C\x1a9\n\
    \x0c\n\x05\x06\0\x02\t\x03\x12\x03CDd\n\x0c\n\x05\x06\0\x02\t\x04\x12\
    \x03D\x04d\n\x11\n\n\x06\0\x02\t\x04\xb0\xca\xbc\"\x02\x12\x03D\x04d\n^\
    \n\x04\x06\0\x02\n\x12\x04I\x02L\x03\x1aP\x20DelegatorValidator\x20queri\
    es\x20validator\x20info\x20for\x20given\x20delegator\x20validator\n\x20p\
    air.\n\n\x0c\n\x05\x06\0\x02\n\x01\x12\x03I\x06\x18\n\x0c\n\x05\x06\0\
    \x02\n\x02\x12\x03I\x197\n\x0c\n\x05\x06\0\x02\n\x03\x12\x03IBa\n\r\n\
    \x05\x06\0\x02\n\x04\x12\x04J\x04K6\n\x12\n\n\x06\0\x02\n\x04\xb0\xca\
    \xbc\"\x02\x12\x04J\x04K6\nL\n\x04\x06\0\x02\x0b\x12\x04O\x02Q\x03\x1a>\
    \x20HistoricalInfo\x20queries\x20the\x20historical\x20info\x20for\x20giv\
    en\x20height.\n\n\x0c\n\x05\x06\0\x02\x0b\x01\x12\x03O\x06\x14\n\x0c\n\
    \x05\x06\0\x02\x0b\x02\x12\x03O\x15/\n\x0c\n\x05\x06\0\x02\x0b\x03\x12\
    \x03O:U\n\x0c\n\x05\x06\0\x02\x0b\x04\x12\x03P\x04V\n\x11\n\n\x06\0\x02\
    \x0b\x04\xb0\xca\xbc\"\x02\x12\x03P\x04V\n+\n\x04\x06\0\x02\x0c\x12\x04T\
    \x02V\x03\x1a\x1d\x20Pool\x20queries\x20the\x20pool\x20info.\n\n\x0c\n\
    \x05\x06\0\x02\x0c\x01\x12\x03T\x06\n\n\x0c\n\x05\x06\0\x02\x0c\x02\x12\
    \x03T\x0b\x1b\n\x0c\n\x05\x06\0\x02\x0c\x03\x12\x03T&7\n\x0c\n\x05\x06\0\
    \x02\x0c\x04\x12\x03U\x04B\n\x11\n\n\x06\0\x02\x0c\x04\xb0\xca\xbc\"\x02\
    \x12\x03U\x04B\n:\n\x04\x06\0\x02\r\x12\x04Y\x02[\x03\x1a,\x20Parameters\
    \x20queries\x20the\x20staking\x20parameters.\n\n\x0c\n\x05\x06\0\x02\r\
    \x01\x12\x03Y\x06\x0c\n\x0c\n\x05\x06\0\x02\r\x02\x12\x03Y\r\x1f\n\x0c\n\
    \x05\x06\0\x02\r\x03\x12\x03Y*=\n\x0c\n\x05\x06\0\x02\r\x04\x12\x03Z\x04\
    D\n\x11\n\n\x06\0\x02\r\x04\xb0\xca\xbc\"\x02\x12\x03Z\x04D\nU\n\x02\x04\
    \0\x12\x04_\0e\x01\x1aI\x20QueryValidatorsRequest\x20is\x20request\x20ty\
    pe\x20for\x20Query/Validators\x20RPC\x20method.\n\n\n\n\x03\x04\0\x01\
    \x12\x03_\x08\x1e\nN\n\x04\x04\0\x02\0\x12\x03a\x02\x14\x1aA\x20status\
    \x20enables\x20to\x20query\x20for\x20validators\x20matching\x20a\x20give\
    n\x20status.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03a\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03a\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03a\x12\
    \x13\nI\n\x04\x04\0\x02\x01\x12\x03d\x027\x1a<\x20pagination\x20defines\
    \x20an\x20optional\x20pagination\x20for\x20the\x20request.\n\n\x0c\n\x05\
    \x04\0\x02\x01\x06\x12\x03d\x02'\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03d(\
    2\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03d56\nZ\n\x02\x04\x01\x12\x04h\0n\
    \x01\x1aN\x20QueryValidatorsResponse\x20is\x20response\x20type\x20for\
    \x20the\x20Query/Validators\x20RPC\x20method\n\n\n\n\x03\x04\x01\x01\x12\
    \x03h\x08\x1f\n>\n\x04\x04\x01\x02\0\x12\x03j\x02C\x1a1\x20validators\
    \x20contains\x20all\x20the\x20queried\x20validators.\n\n\x0c\n\x05\x04\
    \x01\x02\0\x04\x12\x03j\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03j\x0b\
    \x14\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03j\x15\x1f\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03j\"#\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03j$B\n\x0f\n\
    \x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03j%A\nA\n\x04\x04\x01\x02\x01\
    \x12\x03m\x028\x1a4\x20pagination\x20defines\x20the\x20pagination\x20in\
    \x20the\x20response.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03m\x02(\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03m)3\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03m67\nW\n\x02\x04\x02\x12\x04q\0t\x01\x1aK\x20QueryValidatorR\
    equest\x20is\x20response\x20type\x20for\x20the\x20Query/Validator\x20RPC\
    \x20method\n\n\n\n\x03\x04\x02\x01\x12\x03q\x08\x1d\nI\n\x04\x04\x02\x02\
    \0\x12\x03s\x02\x1c\x1a<\x20validator_addr\x20defines\x20the\x20validato\
    r\x20address\x20to\x20query\x20for.\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03s\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03s\t\x17\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03s\x1a\x1b\nX\n\x02\x04\x03\x12\x04w\0z\x01\x1a\
    L\x20QueryValidatorResponse\x20is\x20response\x20type\x20for\x20the\x20Q\
    uery/Validator\x20RPC\x20method\n\n\n\n\x03\x04\x03\x01\x12\x03w\x08\x1e\
    \n8\n\x04\x04\x03\x02\0\x12\x03y\x029\x1a+\x20validator\x20defines\x20th\
    e\x20the\x20validator\x20info.\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03y\
    \x02\x0b\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03y\x0c\x15\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03y\x18\x19\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03y\
    \x1a8\n\x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03y\x1b7\nn\n\x02\
    \x04\x04\x12\x05~\0\x84\x01\x01\x1aa\x20QueryValidatorDelegationsRequest\
    \x20is\x20request\x20type\x20for\x20the\n\x20Query/ValidatorDelegations\
    \x20RPC\x20method\n\n\n\n\x03\x04\x04\x01\x12\x03~\x08(\nJ\n\x04\x04\x04\
    \x02\0\x12\x04\x80\x01\x02\x1c\x1a<\x20validator_addr\x20defines\x20the\
    \x20validator\x20address\x20to\x20query\x20for.\n\n\r\n\x05\x04\x04\x02\
    \0\x05\x12\x04\x80\x01\x02\x08\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x80\
    \x01\t\x17\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x80\x01\x1a\x1b\nJ\n\x04\
    \x04\x04\x02\x01\x12\x04\x83\x01\x027\x1a<\x20pagination\x20defines\x20a\
    n\x20optional\x20pagination\x20for\x20the\x20request.\n\n\r\n\x05\x04\
    \x04\x02\x01\x06\x12\x04\x83\x01\x02'\n\r\n\x05\x04\x04\x02\x01\x01\x12\
    \x04\x83\x01(2\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\x83\x0156\nq\n\x02\
    \x04\x05\x12\x06\x88\x01\0\x8e\x01\x01\x1ac\x20QueryValidatorDelegations\
    Response\x20is\x20response\x20type\x20for\x20the\n\x20Query/ValidatorDel\
    egations\x20RPC\x20method\n\n\x0b\n\x03\x04\x05\x01\x12\x04\x88\x01\x08)\
    \n\x0e\n\x04\x04\x05\x02\0\x12\x06\x89\x01\x02\x8a\x01W\n\r\n\x05\x04\
    \x05\x02\0\x04\x12\x04\x89\x01\x02\n\n\r\n\x05\x04\x05\x02\0\x06\x12\x04\
    \x89\x01\x0b\x1d\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x89\x01\x1e2\n\r\n\
    \x05\x04\x05\x02\0\x03\x12\x04\x89\x0156\n\r\n\x05\x04\x05\x02\0\x08\x12\
    \x04\x8a\x01\x06V\n\x10\n\x08\x04\x05\x02\0\x08\xe9\xfb\x03\x12\x04\x8a\
    \x01\x07#\n\x10\n\x08\x04\x05\x02\0\x08\xf5\xfb\x03\x12\x04\x8a\x01%U\nB\
    \n\x04\x04\x05\x02\x01\x12\x04\x8d\x01\x028\x1a4\x20pagination\x20define\
    s\x20the\x20pagination\x20in\x20the\x20response.\n\n\r\n\x05\x04\x05\x02\
    \x01\x06\x12\x04\x8d\x01\x02(\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x8d\
    \x01)3\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\x8d\x0167\n\x82\x01\n\x02\
    \x04\x06\x12\x06\x92\x01\0\x98\x01\x01\x1at\x20QueryValidatorUnbondingDe\
    legationsRequest\x20is\x20required\x20type\x20for\x20the\n\x20Query/Vali\
    datorUnbondingDelegations\x20RPC\x20method\n\n\x0b\n\x03\x04\x06\x01\x12\
    \x04\x92\x01\x081\nJ\n\x04\x04\x06\x02\0\x12\x04\x94\x01\x02\x1c\x1a<\
    \x20validator_addr\x20defines\x20the\x20validator\x20address\x20to\x20qu\
    ery\x20for.\n\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\x94\x01\x02\x08\n\r\n\
    \x05\x04\x06\x02\0\x01\x12\x04\x94\x01\t\x17\n\r\n\x05\x04\x06\x02\0\x03\
    \x12\x04\x94\x01\x1a\x1b\nJ\n\x04\x04\x06\x02\x01\x12\x04\x97\x01\x027\
    \x1a<\x20pagination\x20defines\x20an\x20optional\x20pagination\x20for\
    \x20the\x20request.\n\n\r\n\x05\x04\x06\x02\x01\x06\x12\x04\x97\x01\x02'\
    \n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x97\x01(2\n\r\n\x05\x04\x06\x02\
    \x01\x03\x12\x04\x97\x0156\n\x84\x01\n\x02\x04\x07\x12\x06\x9c\x01\0\xa1\
    \x01\x01\x1av\x20QueryValidatorUnbondingDelegationsResponse\x20is\x20res\
    ponse\x20type\x20for\x20the\n\x20Query/ValidatorUnbondingDelegations\x20\
    RPC\x20method.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\x9c\x01\x082\n\x0c\n\
    \x04\x04\x07\x02\0\x12\x04\x9d\x01\x02V\n\r\n\x05\x04\x07\x02\0\x04\x12\
    \x04\x9d\x01\x02\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\x9d\x01\x0b\x1e\n\
    \r\n\x05\x04\x07\x02\0\x01\x12\x04\x9d\x01\x1f2\n\r\n\x05\x04\x07\x02\0\
    \x03\x12\x04\x9d\x0156\n\r\n\x05\x04\x07\x02\0\x08\x12\x04\x9d\x017U\n\
    \x10\n\x08\x04\x07\x02\0\x08\xe9\xfb\x03\x12\x04\x9d\x018T\nB\n\x04\x04\
    \x07\x02\x01\x12\x04\xa0\x01\x028\x1a4\x20pagination\x20defines\x20the\
    \x20pagination\x20in\x20the\x20response.\n\n\r\n\x05\x04\x07\x02\x01\x06\
    \x12\x04\xa0\x01\x02(\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\xa0\x01)3\n\
    \r\n\x05\x04\x07\x02\x01\x03\x12\x04\xa0\x0167\n[\n\x02\x04\x08\x12\x06\
    \xa4\x01\0\xad\x01\x01\x1aM\x20QueryDelegationRequest\x20is\x20request\
    \x20type\x20for\x20the\x20Query/Delegation\x20RPC\x20method.\n\n\x0b\n\
    \x03\x04\x08\x01\x12\x04\xa4\x01\x08\x1e\n\x0b\n\x03\x04\x08\x07\x12\x04\
    \xa5\x01\x02-\n\x0e\n\x06\x04\x08\x07\x8d\xf4\x03\x12\x04\xa5\x01\x02-\n\
    \x0b\n\x03\x04\x08\x07\x12\x04\xa6\x01\x02-\n\x0e\n\x06\x04\x08\x07\x81\
    \xf4\x03\x12\x04\xa6\x01\x02-\nJ\n\x04\x04\x08\x02\0\x12\x04\xa9\x01\x02\
    \x1c\x1a<\x20delegator_addr\x20defines\x20the\x20delegator\x20address\
    \x20to\x20query\x20for.\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xa9\x01\
    \x02\x08\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xa9\x01\t\x17\n\r\n\x05\x04\
    \x08\x02\0\x03\x12\x04\xa9\x01\x1a\x1b\nJ\n\x04\x04\x08\x02\x01\x12\x04\
    \xac\x01\x02\x1c\x1a<\x20validator_addr\x20defines\x20the\x20validator\
    \x20address\x20to\x20query\x20for.\n\n\r\n\x05\x04\x08\x02\x01\x05\x12\
    \x04\xac\x01\x02\x08\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xac\x01\t\x17\
    \n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xac\x01\x1a\x1b\n]\n\x02\x04\t\
    \x12\x06\xb0\x01\0\xb3\x01\x01\x1aO\x20QueryDelegationResponse\x20is\x20\
    response\x20type\x20for\x20the\x20Query/Delegation\x20RPC\x20method.\n\n\
    \x0b\n\x03\x04\t\x01\x12\x04\xb0\x01\x08\x1f\nQ\n\x04\x04\t\x02\0\x12\
    \x04\xb2\x01\x02-\x1aC\x20delegation_responses\x20defines\x20the\x20dele\
    gation\x20info\x20of\x20a\x20delegation.\n\n\r\n\x05\x04\t\x02\0\x06\x12\
    \x04\xb2\x01\x02\x14\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xb2\x01\x15(\n\r\
    \n\x05\x04\t\x02\0\x03\x12\x04\xb2\x01+,\nn\n\x02\x04\n\x12\x06\xb7\x01\
    \0\xc0\x01\x01\x1a`\x20QueryUnbondingDelegationRequest\x20is\x20request\
    \x20type\x20for\x20the\n\x20Query/UnbondingDelegation\x20RPC\x20method.\
    \n\n\x0b\n\x03\x04\n\x01\x12\x04\xb7\x01\x08'\n\x0b\n\x03\x04\n\x07\x12\
    \x04\xb8\x01\x02-\n\x0e\n\x06\x04\n\x07\x8d\xf4\x03\x12\x04\xb8\x01\x02-\
    \n\x0b\n\x03\x04\n\x07\x12\x04\xb9\x01\x02-\n\x0e\n\x06\x04\n\x07\x81\
    \xf4\x03\x12\x04\xb9\x01\x02-\nJ\n\x04\x04\n\x02\0\x12\x04\xbc\x01\x02\
    \x1c\x1a<\x20delegator_addr\x20defines\x20the\x20delegator\x20address\
    \x20to\x20query\x20for.\n\n\r\n\x05\x04\n\x02\0\x05\x12\x04\xbc\x01\x02\
    \x08\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xbc\x01\t\x17\n\r\n\x05\x04\n\x02\
    \0\x03\x12\x04\xbc\x01\x1a\x1b\nJ\n\x04\x04\n\x02\x01\x12\x04\xbf\x01\
    \x02\x1c\x1a<\x20validator_addr\x20defines\x20the\x20validator\x20addres\
    s\x20to\x20query\x20for.\n\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\xbf\x01\
    \x02\x08\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\xbf\x01\t\x17\n\r\n\x05\x04\
    \n\x02\x01\x03\x12\x04\xbf\x01\x1a\x1b\ng\n\x02\x04\x0b\x12\x06\xc4\x01\
    \0\xc7\x01\x01\x1aY\x20QueryDelegationResponse\x20is\x20response\x20type\
    \x20for\x20the\x20Query/UnbondingDelegation\n\x20RPC\x20method.\n\n\x0b\
    \n\x03\x04\x0b\x01\x12\x04\xc4\x01\x08(\nI\n\x04\x04\x0b\x02\0\x12\x04\
    \xc6\x01\x02@\x1a;\x20unbond\x20defines\x20the\x20unbonding\x20informati\
    on\x20of\x20a\x20delegation.\n\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\xc6\
    \x01\x02\x15\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xc6\x01\x16\x1c\n\r\n\
    \x05\x04\x0b\x02\0\x03\x12\x04\xc6\x01\x1f\x20\n\r\n\x05\x04\x0b\x02\0\
    \x08\x12\x04\xc6\x01!?\n\x10\n\x08\x04\x0b\x02\0\x08\xe9\xfb\x03\x12\x04\
    \xc6\x01\">\np\n\x02\x04\x0c\x12\x06\xcb\x01\0\xd4\x01\x01\x1ab\x20Query\
    DelegatorDelegationsRequest\x20is\x20request\x20type\x20for\x20the\n\x20\
    Query/DelegatorDelegations\x20RPC\x20method.\n\n\x0b\n\x03\x04\x0c\x01\
    \x12\x04\xcb\x01\x08(\n\x0b\n\x03\x04\x0c\x07\x12\x04\xcc\x01\x02-\n\x0e\
    \n\x06\x04\x0c\x07\x8d\xf4\x03\x12\x04\xcc\x01\x02-\n\x0b\n\x03\x04\x0c\
    \x07\x12\x04\xcd\x01\x02-\n\x0e\n\x06\x04\x0c\x07\x81\xf4\x03\x12\x04\
    \xcd\x01\x02-\nJ\n\x04\x04\x0c\x02\0\x12\x04\xd0\x01\x02\x1c\x1a<\x20del\
    egator_addr\x20defines\x20the\x20delegator\x20address\x20to\x20query\x20\
    for.\n\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xd0\x01\x02\x08\n\r\n\x05\x04\
    \x0c\x02\0\x01\x12\x04\xd0\x01\t\x17\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\
    \xd0\x01\x1a\x1b\nJ\n\x04\x04\x0c\x02\x01\x12\x04\xd3\x01\x027\x1a<\x20p\
    agination\x20defines\x20an\x20optional\x20pagination\x20for\x20the\x20re\
    quest.\n\n\r\n\x05\x04\x0c\x02\x01\x06\x12\x04\xd3\x01\x02'\n\r\n\x05\
    \x04\x0c\x02\x01\x01\x12\x04\xd3\x01(2\n\r\n\x05\x04\x0c\x02\x01\x03\x12\
    \x04\xd3\x0156\nr\n\x02\x04\r\x12\x06\xd8\x01\0\xde\x01\x01\x1ad\x20Quer\
    yDelegatorDelegationsResponse\x20is\x20response\x20type\x20for\x20the\n\
    \x20Query/DelegatorDelegations\x20RPC\x20method.\n\n\x0b\n\x03\x04\r\x01\
    \x12\x04\xd8\x01\x08)\nV\n\x04\x04\r\x02\0\x12\x04\xda\x01\x02V\x1aH\x20\
    delegation_responses\x20defines\x20all\x20the\x20delegations'\x20info\
    \x20of\x20a\x20delegator.\n\n\r\n\x05\x04\r\x02\0\x04\x12\x04\xda\x01\
    \x02\n\n\r\n\x05\x04\r\x02\0\x06\x12\x04\xda\x01\x0b\x1d\n\r\n\x05\x04\r\
    \x02\0\x01\x12\x04\xda\x01\x1e2\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xda\
    \x0156\n\r\n\x05\x04\r\x02\0\x08\x12\x04\xda\x017U\n\x10\n\x08\x04\r\x02\
    \0\x08\xe9\xfb\x03\x12\x04\xda\x018T\nB\n\x04\x04\r\x02\x01\x12\x04\xdd\
    \x01\x028\x1a4\x20pagination\x20defines\x20the\x20pagination\x20in\x20th\
    e\x20response.\n\n\r\n\x05\x04\r\x02\x01\x06\x12\x04\xdd\x01\x02(\n\r\n\
    \x05\x04\r\x02\x01\x01\x12\x04\xdd\x01)3\n\r\n\x05\x04\r\x02\x01\x03\x12\
    \x04\xdd\x0167\n\x82\x01\n\x02\x04\x0e\x12\x06\xe2\x01\0\xeb\x01\x01\x1a\
    t\x20QueryDelegatorUnbondingDelegationsRequest\x20is\x20request\x20type\
    \x20for\x20the\n\x20Query/DelegatorUnbondingDelegations\x20RPC\x20method\
    .\n\n\x0b\n\x03\x04\x0e\x01\x12\x04\xe2\x01\x081\n\x0b\n\x03\x04\x0e\x07\
    \x12\x04\xe3\x01\x02-\n\x0e\n\x06\x04\x0e\x07\x8d\xf4\x03\x12\x04\xe3\
    \x01\x02-\n\x0b\n\x03\x04\x0e\x07\x12\x04\xe4\x01\x02-\n\x0e\n\x06\x04\
    \x0e\x07\x81\xf4\x03\x12\x04\xe4\x01\x02-\nJ\n\x04\x04\x0e\x02\0\x12\x04\
    \xe7\x01\x02\x1c\x1a<\x20delegator_addr\x20defines\x20the\x20delegator\
    \x20address\x20to\x20query\x20for.\n\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\
    \xe7\x01\x02\x08\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xe7\x01\t\x17\n\r\n\
    \x05\x04\x0e\x02\0\x03\x12\x04\xe7\x01\x1a\x1b\nJ\n\x04\x04\x0e\x02\x01\
    \x12\x04\xea\x01\x027\x1a<\x20pagination\x20defines\x20an\x20optional\
    \x20pagination\x20for\x20the\x20request.\n\n\r\n\x05\x04\x0e\x02\x01\x06\
    \x12\x04\xea\x01\x02'\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xea\x01(2\n\
    \r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xea\x0156\n\x84\x01\n\x02\x04\x0f\
    \x12\x06\xef\x01\0\xf4\x01\x01\x1av\x20QueryUnbondingDelegatorDelegation\
    sResponse\x20is\x20response\x20type\x20for\x20the\n\x20Query/UnbondingDe\
    legatorDelegations\x20RPC\x20method.\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\
    \xef\x01\x082\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\xf0\x01\x02V\n\r\n\x05\
    \x04\x0f\x02\0\x04\x12\x04\xf0\x01\x02\n\n\r\n\x05\x04\x0f\x02\0\x06\x12\
    \x04\xf0\x01\x0b\x1e\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\xf0\x01\x1f2\n\
    \r\n\x05\x04\x0f\x02\0\x03\x12\x04\xf0\x0156\n\r\n\x05\x04\x0f\x02\0\x08\
    \x12\x04\xf0\x017U\n\x10\n\x08\x04\x0f\x02\0\x08\xe9\xfb\x03\x12\x04\xf0\
    \x018T\nB\n\x04\x04\x0f\x02\x01\x12\x04\xf3\x01\x028\x1a4\x20pagination\
    \x20defines\x20the\x20pagination\x20in\x20the\x20response.\n\n\r\n\x05\
    \x04\x0f\x02\x01\x06\x12\x04\xf3\x01\x02(\n\r\n\x05\x04\x0f\x02\x01\x01\
    \x12\x04\xf3\x01)3\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\xf3\x0167\nb\n\
    \x02\x04\x10\x12\x06\xf8\x01\0\x87\x02\x01\x1aT\x20QueryRedelegationsReq\
    uest\x20is\x20request\x20type\x20for\x20the\x20Query/Redelegations\x20RP\
    C\n\x20method.\n\n\x0b\n\x03\x04\x10\x01\x12\x04\xf8\x01\x08!\n\x0b\n\
    \x03\x04\x10\x07\x12\x04\xf9\x01\x02-\n\x0e\n\x06\x04\x10\x07\x8d\xf4\
    \x03\x12\x04\xf9\x01\x02-\n\x0b\n\x03\x04\x10\x07\x12\x04\xfa\x01\x02-\n\
    \x0e\n\x06\x04\x10\x07\x81\xf4\x03\x12\x04\xfa\x01\x02-\nJ\n\x04\x04\x10\
    \x02\0\x12\x04\xfd\x01\x02\x1c\x1a<\x20delegator_addr\x20defines\x20the\
    \x20delegator\x20address\x20to\x20query\x20for.\n\n\r\n\x05\x04\x10\x02\
    \0\x05\x12\x04\xfd\x01\x02\x08\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\xfd\
    \x01\t\x17\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\xfd\x01\x1a\x1b\nT\n\x04\
    \x04\x10\x02\x01\x12\x04\x80\x02\x02\x20\x1aF\x20src_validator_addr\x20d\
    efines\x20the\x20validator\x20address\x20to\x20redelegate\x20from.\n\n\r\
    \n\x05\x04\x10\x02\x01\x05\x12\x04\x80\x02\x02\x08\n\r\n\x05\x04\x10\x02\
    \x01\x01\x12\x04\x80\x02\t\x1b\n\r\n\x05\x04\x10\x02\x01\x03\x12\x04\x80\
    \x02\x1e\x1f\nR\n\x04\x04\x10\x02\x02\x12\x04\x83\x02\x02\x20\x1aD\x20ds\
    t_validator_addr\x20defines\x20the\x20validator\x20address\x20to\x20rede\
    legate\x20to.\n\n\r\n\x05\x04\x10\x02\x02\x05\x12\x04\x83\x02\x02\x08\n\
    \r\n\x05\x04\x10\x02\x02\x01\x12\x04\x83\x02\t\x1b\n\r\n\x05\x04\x10\x02\
    \x02\x03\x12\x04\x83\x02\x1e\x1f\nJ\n\x04\x04\x10\x02\x03\x12\x04\x86\
    \x02\x027\x1a<\x20pagination\x20defines\x20an\x20optional\x20pagination\
    \x20for\x20the\x20request.\n\n\r\n\x05\x04\x10\x02\x03\x06\x12\x04\x86\
    \x02\x02'\n\r\n\x05\x04\x10\x02\x03\x01\x12\x04\x86\x02(2\n\r\n\x05\x04\
    \x10\x02\x03\x03\x12\x04\x86\x0256\nd\n\x02\x04\x11\x12\x06\x8b\x02\0\
    \x90\x02\x01\x1aV\x20QueryRedelegationsResponse\x20is\x20response\x20typ\
    e\x20for\x20the\x20Query/Redelegations\x20RPC\n\x20method.\n\n\x0b\n\x03\
    \x04\x11\x01\x12\x04\x8b\x02\x08\"\n\x0c\n\x04\x04\x11\x02\0\x12\x04\x8c\
    \x02\x02Z\n\r\n\x05\x04\x11\x02\0\x04\x12\x04\x8c\x02\x02\n\n\r\n\x05\
    \x04\x11\x02\0\x06\x12\x04\x8c\x02\x0b\x1f\n\r\n\x05\x04\x11\x02\0\x01\
    \x12\x04\x8c\x02\x206\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\x8c\x029:\n\r\
    \n\x05\x04\x11\x02\0\x08\x12\x04\x8c\x02;Y\n\x10\n\x08\x04\x11\x02\0\x08\
    \xe9\xfb\x03\x12\x04\x8c\x02<X\nB\n\x04\x04\x11\x02\x01\x12\x04\x8f\x02\
    \x028\x1a4\x20pagination\x20defines\x20the\x20pagination\x20in\x20the\
    \x20response.\n\n\r\n\x05\x04\x11\x02\x01\x06\x12\x04\x8f\x02\x02(\n\r\n\
    \x05\x04\x11\x02\x01\x01\x12\x04\x8f\x02)3\n\r\n\x05\x04\x11\x02\x01\x03\
    \x12\x04\x8f\x0267\nn\n\x02\x04\x12\x12\x06\x94\x02\0\x9d\x02\x01\x1a`\
    \x20QueryDelegatorValidatorsRequest\x20is\x20request\x20type\x20for\x20t\
    he\n\x20Query/DelegatorValidators\x20RPC\x20method.\n\n\x0b\n\x03\x04\
    \x12\x01\x12\x04\x94\x02\x08'\n\x0b\n\x03\x04\x12\x07\x12\x04\x95\x02\
    \x02-\n\x0e\n\x06\x04\x12\x07\x8d\xf4\x03\x12\x04\x95\x02\x02-\n\x0b\n\
    \x03\x04\x12\x07\x12\x04\x96\x02\x02-\n\x0e\n\x06\x04\x12\x07\x81\xf4\
    \x03\x12\x04\x96\x02\x02-\nJ\n\x04\x04\x12\x02\0\x12\x04\x99\x02\x02\x1c\
    \x1a<\x20delegator_addr\x20defines\x20the\x20delegator\x20address\x20to\
    \x20query\x20for.\n\n\r\n\x05\x04\x12\x02\0\x05\x12\x04\x99\x02\x02\x08\
    \n\r\n\x05\x04\x12\x02\0\x01\x12\x04\x99\x02\t\x17\n\r\n\x05\x04\x12\x02\
    \0\x03\x12\x04\x99\x02\x1a\x1b\nJ\n\x04\x04\x12\x02\x01\x12\x04\x9c\x02\
    \x027\x1a<\x20pagination\x20defines\x20an\x20optional\x20pagination\x20f\
    or\x20the\x20request.\n\n\r\n\x05\x04\x12\x02\x01\x06\x12\x04\x9c\x02\
    \x02'\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\x9c\x02(2\n\r\n\x05\x04\x12\
    \x02\x01\x03\x12\x04\x9c\x0256\np\n\x02\x04\x13\x12\x06\xa1\x02\0\xa7\
    \x02\x01\x1ab\x20QueryDelegatorValidatorsResponse\x20is\x20response\x20t\
    ype\x20for\x20the\n\x20Query/DelegatorValidators\x20RPC\x20method.\n\n\
    \x0b\n\x03\x04\x13\x01\x12\x04\xa1\x02\x08(\nK\n\x04\x04\x13\x02\0\x12\
    \x04\xa3\x02\x02C\x1a=\x20validators\x20defines\x20the\x20the\x20validat\
    ors'\x20info\x20of\x20a\x20delegator.\n\n\r\n\x05\x04\x13\x02\0\x04\x12\
    \x04\xa3\x02\x02\n\n\r\n\x05\x04\x13\x02\0\x06\x12\x04\xa3\x02\x0b\x14\n\
    \r\n\x05\x04\x13\x02\0\x01\x12\x04\xa3\x02\x15\x1f\n\r\n\x05\x04\x13\x02\
    \0\x03\x12\x04\xa3\x02\"#\n\r\n\x05\x04\x13\x02\0\x08\x12\x04\xa3\x02$B\
    \n\x10\n\x08\x04\x13\x02\0\x08\xe9\xfb\x03\x12\x04\xa3\x02%A\nB\n\x04\
    \x04\x13\x02\x01\x12\x04\xa6\x02\x028\x1a4\x20pagination\x20defines\x20t\
    he\x20pagination\x20in\x20the\x20response.\n\n\r\n\x05\x04\x13\x02\x01\
    \x06\x12\x04\xa6\x02\x02(\n\r\n\x05\x04\x13\x02\x01\x01\x12\x04\xa6\x02)\
    3\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\xa6\x0267\nl\n\x02\x04\x14\x12\
    \x06\xab\x02\0\xb4\x02\x01\x1a^\x20QueryDelegatorValidatorRequest\x20is\
    \x20request\x20type\x20for\x20the\n\x20Query/DelegatorValidator\x20RPC\
    \x20method.\n\n\x0b\n\x03\x04\x14\x01\x12\x04\xab\x02\x08&\n\x0b\n\x03\
    \x04\x14\x07\x12\x04\xac\x02\x02-\n\x0e\n\x06\x04\x14\x07\x8d\xf4\x03\
    \x12\x04\xac\x02\x02-\n\x0b\n\x03\x04\x14\x07\x12\x04\xad\x02\x02-\n\x0e\
    \n\x06\x04\x14\x07\x81\xf4\x03\x12\x04\xad\x02\x02-\nJ\n\x04\x04\x14\x02\
    \0\x12\x04\xb0\x02\x02\x1c\x1a<\x20delegator_addr\x20defines\x20the\x20d\
    elegator\x20address\x20to\x20query\x20for.\n\n\r\n\x05\x04\x14\x02\0\x05\
    \x12\x04\xb0\x02\x02\x08\n\r\n\x05\x04\x14\x02\0\x01\x12\x04\xb0\x02\t\
    \x17\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\xb0\x02\x1a\x1b\nJ\n\x04\x04\
    \x14\x02\x01\x12\x04\xb3\x02\x02\x1c\x1a<\x20validator_addr\x20defines\
    \x20the\x20validator\x20address\x20to\x20query\x20for.\n\n\r\n\x05\x04\
    \x14\x02\x01\x05\x12\x04\xb3\x02\x02\x08\n\r\n\x05\x04\x14\x02\x01\x01\
    \x12\x04\xb3\x02\t\x17\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\xb3\x02\x1a\
    \x1b\nk\n\x02\x04\x15\x12\x06\xb8\x02\0\xbb\x02\x01\x1a]\x20QueryDelegat\
    orValidatorResponse\x20response\x20type\x20for\x20the\n\x20Query/Delegat\
    orValidator\x20RPC\x20method.\n\n\x0b\n\x03\x04\x15\x01\x12\x04\xb8\x02\
    \x08'\n9\n\x04\x04\x15\x02\0\x12\x04\xba\x02\x029\x1a+\x20validator\x20d\
    efines\x20the\x20the\x20validator\x20info.\n\n\r\n\x05\x04\x15\x02\0\x06\
    \x12\x04\xba\x02\x02\x0b\n\r\n\x05\x04\x15\x02\0\x01\x12\x04\xba\x02\x0c\
    \x15\n\r\n\x05\x04\x15\x02\0\x03\x12\x04\xba\x02\x18\x19\n\r\n\x05\x04\
    \x15\x02\0\x08\x12\x04\xba\x02\x1a8\n\x10\n\x08\x04\x15\x02\0\x08\xe9\
    \xfb\x03\x12\x04\xba\x02\x1b7\nd\n\x02\x04\x16\x12\x06\xbf\x02\0\xc2\x02\
    \x01\x1aV\x20QueryHistoricalInfoRequest\x20is\x20request\x20type\x20for\
    \x20the\x20Query/HistoricalInfo\x20RPC\n\x20method.\n\n\x0b\n\x03\x04\
    \x16\x01\x12\x04\xbf\x02\x08\"\nL\n\x04\x04\x16\x02\0\x12\x04\xc1\x02\
    \x02\x13\x1a>\x20height\x20defines\x20at\x20which\x20height\x20to\x20que\
    ry\x20the\x20historical\x20info.\n\n\r\n\x05\x04\x16\x02\0\x05\x12\x04\
    \xc1\x02\x02\x07\n\r\n\x05\x04\x16\x02\0\x01\x12\x04\xc1\x02\x08\x0e\n\r\
    \n\x05\x04\x16\x02\0\x03\x12\x04\xc1\x02\x11\x12\nf\n\x02\x04\x17\x12\
    \x06\xc6\x02\0\xc9\x02\x01\x1aX\x20QueryHistoricalInfoResponse\x20is\x20\
    response\x20type\x20for\x20the\x20Query/HistoricalInfo\x20RPC\n\x20metho\
    d.\n\n\x0b\n\x03\x04\x17\x01\x12\x04\xc6\x02\x08#\nE\n\x04\x04\x17\x02\0\
    \x12\x04\xc8\x02\x02\x1a\x1a7\x20hist\x20defines\x20the\x20historical\
    \x20info\x20at\x20the\x20given\x20height.\n\n\r\n\x05\x04\x17\x02\0\x06\
    \x12\x04\xc8\x02\x02\x10\n\r\n\x05\x04\x17\x02\0\x01\x12\x04\xc8\x02\x11\
    \x15\n\r\n\x05\x04\x17\x02\0\x03\x12\x04\xc8\x02\x18\x19\nM\n\x02\x04\
    \x18\x12\x04\xcc\x02\0\x1b\x1aA\x20QueryPoolRequest\x20is\x20request\x20\
    type\x20for\x20the\x20Query/Pool\x20RPC\x20method.\n\n\x0b\n\x03\x04\x18\
    \x01\x12\x04\xcc\x02\x08\x18\nQ\n\x02\x04\x19\x12\x06\xcf\x02\0\xd2\x02\
    \x01\x1aC\x20QueryPoolResponse\x20is\x20response\x20type\x20for\x20the\
    \x20Query/Pool\x20RPC\x20method.\n\n\x0b\n\x03\x04\x19\x01\x12\x04\xcf\
    \x02\x08\x19\n+\n\x04\x04\x19\x02\0\x12\x04\xd1\x02\x02/\x1a\x1d\x20pool\
    \x20defines\x20the\x20pool\x20info.\n\n\r\n\x05\x04\x19\x02\0\x06\x12\
    \x04\xd1\x02\x02\x06\n\r\n\x05\x04\x19\x02\0\x01\x12\x04\xd1\x02\x07\x0b\
    \n\r\n\x05\x04\x19\x02\0\x03\x12\x04\xd1\x02\x0e\x0f\n\r\n\x05\x04\x19\
    \x02\0\x08\x12\x04\xd1\x02\x10.\n\x10\n\x08\x04\x19\x02\0\x08\xe9\xfb\
    \x03\x12\x04\xd1\x02\x11-\nQ\n\x02\x04\x1a\x12\x04\xd5\x02\0\x1d\x1aE\
    \x20QueryParamsRequest\x20is\x20request\x20type\x20for\x20the\x20Query/P\
    arams\x20RPC\x20method.\n\n\x0b\n\x03\x04\x1a\x01\x12\x04\xd5\x02\x08\
    \x1a\nU\n\x02\x04\x1b\x12\x06\xd8\x02\0\xdb\x02\x01\x1aG\x20QueryParamsR\
    esponse\x20is\x20response\x20type\x20for\x20the\x20Query/Params\x20RPC\
    \x20method.\n\n\x0b\n\x03\x04\x1b\x01\x12\x04\xd8\x02\x08\x1b\n?\n\x04\
    \x04\x1b\x02\0\x12\x04\xda\x02\x023\x1a1\x20params\x20holds\x20all\x20th\
    e\x20parameters\x20of\x20this\x20module.\n\n\r\n\x05\x04\x1b\x02\0\x06\
    \x12\x04\xda\x02\x02\x08\n\r\n\x05\x04\x1b\x02\0\x01\x12\x04\xda\x02\t\
    \x0f\n\r\n\x05\x04\x1b\x02\0\x03\x12\x04\xda\x02\x12\x13\n\r\n\x05\x04\
    \x1b\x02\0\x08\x12\x04\xda\x02\x142\n\x10\n\x08\x04\x1b\x02\0\x08\xe9\
    \xfb\x03\x12\x04\xda\x02\x151b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::staking::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(28);
            messages.push(QueryValidatorsRequest::generated_message_descriptor_data());
            messages.push(QueryValidatorsResponse::generated_message_descriptor_data());
            messages.push(QueryValidatorRequest::generated_message_descriptor_data());
            messages.push(QueryValidatorResponse::generated_message_descriptor_data());
            messages.push(QueryValidatorDelegationsRequest::generated_message_descriptor_data());
            messages.push(QueryValidatorDelegationsResponse::generated_message_descriptor_data());
            messages.push(QueryValidatorUnbondingDelegationsRequest::generated_message_descriptor_data());
            messages.push(QueryValidatorUnbondingDelegationsResponse::generated_message_descriptor_data());
            messages.push(QueryDelegationRequest::generated_message_descriptor_data());
            messages.push(QueryDelegationResponse::generated_message_descriptor_data());
            messages.push(QueryUnbondingDelegationRequest::generated_message_descriptor_data());
            messages.push(QueryUnbondingDelegationResponse::generated_message_descriptor_data());
            messages.push(QueryDelegatorDelegationsRequest::generated_message_descriptor_data());
            messages.push(QueryDelegatorDelegationsResponse::generated_message_descriptor_data());
            messages.push(QueryDelegatorUnbondingDelegationsRequest::generated_message_descriptor_data());
            messages.push(QueryDelegatorUnbondingDelegationsResponse::generated_message_descriptor_data());
            messages.push(QueryRedelegationsRequest::generated_message_descriptor_data());
            messages.push(QueryRedelegationsResponse::generated_message_descriptor_data());
            messages.push(QueryDelegatorValidatorsRequest::generated_message_descriptor_data());
            messages.push(QueryDelegatorValidatorsResponse::generated_message_descriptor_data());
            messages.push(QueryDelegatorValidatorRequest::generated_message_descriptor_data());
            messages.push(QueryDelegatorValidatorResponse::generated_message_descriptor_data());
            messages.push(QueryHistoricalInfoRequest::generated_message_descriptor_data());
            messages.push(QueryHistoricalInfoResponse::generated_message_descriptor_data());
            messages.push(QueryPoolRequest::generated_message_descriptor_data());
            messages.push(QueryPoolResponse::generated_message_descriptor_data());
            messages.push(QueryParamsRequest::generated_message_descriptor_data());
            messages.push(QueryParamsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
