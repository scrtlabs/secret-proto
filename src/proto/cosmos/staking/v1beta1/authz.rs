// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/staking/v1beta1/authz.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  StakeAuthorization defines authorization for delegate/undelegate/redelegate.
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.StakeAuthorization)
pub struct StakeAuthorization {
    // message fields
    ///  max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
    ///  empty, there is no spend limit and any amount of coins can be delegated.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
    pub max_tokens: ::protobuf::MessageField<super::coin::Coin>,
    ///  authorization_type defines one of AuthorizationType.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.StakeAuthorization.authorization_type)
    pub authorization_type: ::protobuf::EnumOrUnknown<AuthorizationType>,
    // message oneof groups
    pub validators: ::std::option::Option<stake_authorization::Validators>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.StakeAuthorization.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StakeAuthorization {
    fn default() -> &'a StakeAuthorization {
        <StakeAuthorization as ::protobuf::Message>::default_instance()
    }
}

impl StakeAuthorization {
    pub fn new() -> StakeAuthorization {
        ::std::default::Default::default()
    }

    // .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;

    pub fn allow_list(&self) -> &stake_authorization::Validators {
        match self.validators {
            ::std::option::Option::Some(stake_authorization::Validators::AllowList(ref v)) => v,
            _ => <stake_authorization::Validators as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_allow_list(&mut self) {
        self.validators = ::std::option::Option::None;
    }

    pub fn has_allow_list(&self) -> bool {
        match self.validators {
            ::std::option::Option::Some(stake_authorization::Validators::AllowList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_allow_list(&mut self, v: stake_authorization::Validators) {
        self.validators = ::std::option::Option::Some(stake_authorization::Validators::AllowList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_allow_list(&mut self) -> &mut stake_authorization::Validators {
        if let ::std::option::Option::Some(stake_authorization::Validators::AllowList(_)) = self.validators {
        } else {
            self.validators = ::std::option::Option::Some(stake_authorization::Validators::AllowList(stake_authorization::Validators::new()));
        }
        match self.validators {
            ::std::option::Option::Some(stake_authorization::Validators::AllowList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_allow_list(&mut self) -> stake_authorization::Validators {
        if self.has_allow_list() {
            match self.validators.take() {
                ::std::option::Option::Some(stake_authorization::Validators::AllowList(v)) => v,
                _ => panic!(),
            }
        } else {
            stake_authorization::Validators::new()
        }
    }

    // .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;

    pub fn deny_list(&self) -> &stake_authorization::Validators {
        match self.validators {
            ::std::option::Option::Some(stake_authorization::Validators::DenyList(ref v)) => v,
            _ => <stake_authorization::Validators as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_deny_list(&mut self) {
        self.validators = ::std::option::Option::None;
    }

    pub fn has_deny_list(&self) -> bool {
        match self.validators {
            ::std::option::Option::Some(stake_authorization::Validators::DenyList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deny_list(&mut self, v: stake_authorization::Validators) {
        self.validators = ::std::option::Option::Some(stake_authorization::Validators::DenyList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deny_list(&mut self) -> &mut stake_authorization::Validators {
        if let ::std::option::Option::Some(stake_authorization::Validators::DenyList(_)) = self.validators {
        } else {
            self.validators = ::std::option::Option::Some(stake_authorization::Validators::DenyList(stake_authorization::Validators::new()));
        }
        match self.validators {
            ::std::option::Option::Some(stake_authorization::Validators::DenyList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deny_list(&mut self) -> stake_authorization::Validators {
        if self.has_deny_list() {
            match self.validators.take() {
                ::std::option::Option::Some(stake_authorization::Validators::DenyList(v)) => v,
                _ => panic!(),
            }
        } else {
            stake_authorization::Validators::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "max_tokens",
            |m: &StakeAuthorization| { &m.max_tokens },
            |m: &mut StakeAuthorization| { &mut m.max_tokens },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stake_authorization::Validators>(
            "allow_list",
            StakeAuthorization::has_allow_list,
            StakeAuthorization::allow_list,
            StakeAuthorization::mut_allow_list,
            StakeAuthorization::set_allow_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stake_authorization::Validators>(
            "deny_list",
            StakeAuthorization::has_deny_list,
            StakeAuthorization::deny_list,
            StakeAuthorization::mut_deny_list,
            StakeAuthorization::set_deny_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "authorization_type",
            |m: &StakeAuthorization| { &m.authorization_type },
            |m: &mut StakeAuthorization| { &mut m.authorization_type },
        ));
        oneofs.push(stake_authorization::Validators::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StakeAuthorization>(
            "StakeAuthorization",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StakeAuthorization {
    const NAME: &'static str = "StakeAuthorization";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.max_tokens)?;
                },
                18 => {
                    self.validators = ::std::option::Option::Some(stake_authorization::Validators::AllowList(is.read_message()?));
                },
                26 => {
                    self.validators = ::std::option::Option::Some(stake_authorization::Validators::DenyList(is.read_message()?));
                },
                32 => {
                    self.authorization_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.max_tokens.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.authorization_type != ::protobuf::EnumOrUnknown::new(AuthorizationType::AUTHORIZATION_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.authorization_type.value());
        }
        if let ::std::option::Option::Some(ref v) = self.validators {
            match v {
                &stake_authorization::Validators::AllowList(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &stake_authorization::Validators::DenyList(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.max_tokens.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.authorization_type != ::protobuf::EnumOrUnknown::new(AuthorizationType::AUTHORIZATION_TYPE_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.authorization_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.validators {
            match v {
                &stake_authorization::Validators::AllowList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &stake_authorization::Validators::DenyList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StakeAuthorization {
        StakeAuthorization::new()
    }

    fn clear(&mut self) {
        self.max_tokens.clear();
        self.validators = ::std::option::Option::None;
        self.validators = ::std::option::Option::None;
        self.authorization_type = ::protobuf::EnumOrUnknown::new(AuthorizationType::AUTHORIZATION_TYPE_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StakeAuthorization {
        static instance: StakeAuthorization = StakeAuthorization {
            max_tokens: ::protobuf::MessageField::none(),
            authorization_type: ::protobuf::EnumOrUnknown::from_i32(0),
            validators: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StakeAuthorization {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StakeAuthorization").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StakeAuthorization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StakeAuthorization {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StakeAuthorization`
pub mod stake_authorization {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:cosmos.staking.v1beta1.StakeAuthorization.validators)
    pub enum Validators {
        // @@protoc_insertion_point(oneof_field:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
        AllowList(Validators),
        // @@protoc_insertion_point(oneof_field:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
        DenyList(Validators),
    }

    impl ::protobuf::Oneof for Validators {
    }

    impl ::protobuf::OneofFull for Validators {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::StakeAuthorization as ::protobuf::MessageFull>::descriptor().oneof_by_name("validators").unwrap()).clone()
        }
    }

    impl Validators {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Validators>("validators")
        }
    }
    ///  Validators defines list of validator addresses.
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:cosmos.staking.v1beta1.StakeAuthorization.Validators)
    pub struct Validators {
        // message fields
        // @@protoc_insertion_point(field:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
        pub address: ::std::vec::Vec<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.StakeAuthorization.Validators.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Validators {
        fn default() -> &'a Validators {
            <Validators as ::protobuf::Message>::default_instance()
        }
    }

    impl Validators {
        pub fn new() -> Validators {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "address",
                |m: &Validators| { &m.address },
                |m: &mut Validators| { &mut m.address },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Validators>(
                "StakeAuthorization.Validators",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Validators {
        const NAME: &'static str = "Validators";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.address.push(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.address {
                my_size += ::protobuf::rt::string_size(1, &value);
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.address {
                os.write_string(1, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Validators {
            Validators::new()
        }

        fn clear(&mut self) {
            self.address.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Validators {
            static instance: Validators = Validators {
                address: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Validators {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StakeAuthorization.Validators").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Validators {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Validators {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  AuthorizationType defines the type of staking module authorization type
///
///  Since: cosmos-sdk 0.43
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:cosmos.staking.v1beta1.AuthorizationType)
pub enum AuthorizationType {
    // @@protoc_insertion_point(enum_value:cosmos.staking.v1beta1.AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED)
    AUTHORIZATION_TYPE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:cosmos.staking.v1beta1.AuthorizationType.AUTHORIZATION_TYPE_DELEGATE)
    AUTHORIZATION_TYPE_DELEGATE = 1,
    // @@protoc_insertion_point(enum_value:cosmos.staking.v1beta1.AuthorizationType.AUTHORIZATION_TYPE_UNDELEGATE)
    AUTHORIZATION_TYPE_UNDELEGATE = 2,
    // @@protoc_insertion_point(enum_value:cosmos.staking.v1beta1.AuthorizationType.AUTHORIZATION_TYPE_REDELEGATE)
    AUTHORIZATION_TYPE_REDELEGATE = 3,
}

impl ::protobuf::Enum for AuthorizationType {
    const NAME: &'static str = "AuthorizationType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AuthorizationType> {
        match value {
            0 => ::std::option::Option::Some(AuthorizationType::AUTHORIZATION_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(AuthorizationType::AUTHORIZATION_TYPE_DELEGATE),
            2 => ::std::option::Option::Some(AuthorizationType::AUTHORIZATION_TYPE_UNDELEGATE),
            3 => ::std::option::Option::Some(AuthorizationType::AUTHORIZATION_TYPE_REDELEGATE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [AuthorizationType] = &[
        AuthorizationType::AUTHORIZATION_TYPE_UNSPECIFIED,
        AuthorizationType::AUTHORIZATION_TYPE_DELEGATE,
        AuthorizationType::AUTHORIZATION_TYPE_UNDELEGATE,
        AuthorizationType::AUTHORIZATION_TYPE_REDELEGATE,
    ];
}

impl ::protobuf::EnumFull for AuthorizationType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("AuthorizationType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for AuthorizationType {
    fn default() -> Self {
        AuthorizationType::AUTHORIZATION_TYPE_UNSPECIFIED
    }
}

impl AuthorizationType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<AuthorizationType>("AuthorizationType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"cosmos/staking/v1beta1/authz.proto\x12\x16cosmos.staking.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x19cosmos_proto/cosmos.proto\x1a\x1ecosmos/\
    base/v1beta1/coin.proto\"\xcc\x03\n\x12StakeAuthorization\x12e\n\nmax_to\
    kens\x18\x01\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\tmaxTokensB+\
    \xaa\xdf\x1f'github.com/cosmos/cosmos-sdk/types.Coin\x12V\n\nallow_list\
    \x18\x02\x20\x01(\x0b25.cosmos.staking.v1beta1.StakeAuthorization.Valida\
    torsH\0R\tallowList\x12T\n\tdeny_list\x18\x03\x20\x01(\x0b25.cosmos.stak\
    ing.v1beta1.StakeAuthorization.ValidatorsH\0R\x08denyList\x12X\n\x12auth\
    orization_type\x18\x04\x20\x01(\x0e2).cosmos.staking.v1beta1.Authorizati\
    onTypeR\x11authorizationType\x1a&\n\nValidators\x12\x18\n\x07address\x18\
    \x01\x20\x03(\tR\x07addressB\x0c\n\nvalidators:\x11\xd2\xb4-\rAuthorizat\
    ion*\x9e\x01\n\x11AuthorizationType\x12\"\n\x1eAUTHORIZATION_TYPE_UNSPEC\
    IFIED\x10\0\x12\x1f\n\x1bAUTHORIZATION_TYPE_DELEGATE\x10\x01\x12!\n\x1dA\
    UTHORIZATION_TYPE_UNDELEGATE\x10\x02\x12!\n\x1dAUTHORIZATION_TYPE_REDELE\
    GATE\x10\x03B.Z,github.com/cosmos/cosmos-sdk/x/staking/typesJ\x86\x0e\n\
    \x06\x12\x04\0\0.\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x1f\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\
    \x12\x03\x04\0#\n\t\n\x02\x03\x02\x12\x03\x05\0(\n\x08\n\x01\x08\x12\x03\
    \x07\0C\n\t\n\x02\x08\x0b\x12\x03\x07\0C\ns\n\x02\x04\0\x12\x04\x0c\0\
    \x20\x01\x1ag\x20StakeAuthorization\x20defines\x20authorization\x20for\
    \x20delegate/undelegate/redelegate.\n\n\x20Since:\x20cosmos-sdk\x200.43\
    \n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x1a\n\n\n\x03\x04\0\x07\x12\x03\r\
    \x02?\n\r\n\x06\x04\0\x07\xca\xd6\x05\x12\x03\r\x02?\n\xb4\x01\n\x04\x04\
    \0\x02\0\x12\x03\x11\x02q\x1a\xa6\x01\x20max_tokens\x20specifies\x20the\
    \x20maximum\x20amount\x20of\x20tokens\x20can\x20be\x20delegate\x20to\x20\
    a\x20validator.\x20If\x20it\x20is\n\x20empty,\x20there\x20is\x20no\x20sp\
    end\x20limit\x20and\x20any\x20amount\x20of\x20coins\x20can\x20be\x20dele\
    gated.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x11\x02\x1a\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x11\x1b%\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x11()\
    \n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x11*p\n\x0f\n\x08\x04\0\x02\0\x08\
    \xf5\xfb\x03\x12\x03\x11+o\nV\n\x04\x04\0\x08\0\x12\x04\x13\x02\x19\x03\
    \x1aH\x20validators\x20is\x20the\x20oneof\x20that\x20represents\x20eithe\
    r\x20allow_list\x20or\x20deny_list\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\
    \x13\x08\x12\n\x84\x01\n\x04\x04\0\x02\x01\x12\x03\x16\x04\x1e\x1aw\x20a\
    llow_list\x20specifies\x20list\x20of\x20validator\x20addresses\x20to\x20\
    whom\x20grantee\x20can\x20delegate\x20tokens\x20on\x20behalf\x20of\x20gr\
    anter's\n\x20account.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x16\x04\
    \x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x16\x0f\x19\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x16\x1c\x1d\ng\n\x04\x04\0\x02\x02\x12\x03\x18\x04\
    \x1d\x1aZ\x20deny_list\x20specifies\x20list\x20of\x20validator\x20addres\
    ses\x20to\x20whom\x20grantee\x20can\x20not\x20delegate\x20tokens.\n\n\
    \x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x18\x04\x0e\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x18\x0f\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x18\
    \x1b\x1c\n?\n\x04\x04\0\x03\0\x12\x04\x1b\x02\x1d\x03\x1a1\x20Validators\
    \x20defines\x20list\x20of\x20validator\x20addresses.\n\n\x0c\n\x05\x04\0\
    \x03\0\x01\x12\x03\x1b\n\x14\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\x1c\x04\
    \x20\n\x0e\n\x07\x04\0\x03\0\x02\0\x04\x12\x03\x1c\x04\x0c\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x05\x12\x03\x1c\r\x13\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x01\x12\x03\x1c\x14\x1b\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x1c\
    \x1e\x1f\nC\n\x04\x04\0\x02\x03\x12\x03\x1f\x02+\x1a6\x20authorization_t\
    ype\x20defines\x20one\x20of\x20AuthorizationType.\n\n\x0c\n\x05\x04\0\
    \x02\x03\x06\x12\x03\x1f\x02\x13\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \x1f\x14&\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1f)*\nn\n\x02\x05\0\x12\
    \x04%\0.\x01\x1ab\x20AuthorizationType\x20defines\x20the\x20type\x20of\
    \x20staking\x20module\x20authorization\x20type\n\n\x20Since:\x20cosmos-s\
    dk\x200.43\n\n\n\n\x03\x05\0\x01\x12\x03%\x05\x16\nU\n\x04\x05\0\x02\0\
    \x12\x03'\x02%\x1aH\x20AUTHORIZATION_TYPE_UNSPECIFIED\x20specifies\x20an\
    \x20unknown\x20authorization\x20type\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\
    \x03'\x02\x20\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03'#$\nY\n\x04\x05\0\x02\
    \x01\x12\x03)\x02\"\x1aL\x20AUTHORIZATION_TYPE_DELEGATE\x20defines\x20an\
    \x20authorization\x20type\x20for\x20Msg/Delegate\n\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03)\x02\x1d\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03)\x20!\n]\
    \n\x04\x05\0\x02\x02\x12\x03+\x02$\x1aP\x20AUTHORIZATION_TYPE_UNDELEGATE\
    \x20defines\x20an\x20authorization\x20type\x20for\x20Msg/Undelegate\n\n\
    \x0c\n\x05\x05\0\x02\x02\x01\x12\x03+\x02\x1f\n\x0c\n\x05\x05\0\x02\x02\
    \x02\x12\x03+\"#\nb\n\x04\x05\0\x02\x03\x12\x03-\x02$\x1aU\x20AUTHORIZAT\
    ION_TYPE_REDELEGATE\x20defines\x20an\x20authorization\x20type\x20for\x20\
    Msg/BeginRedelegate\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03-\x02\x1f\n\
    \x0c\n\x05\x05\0\x02\x03\x02\x12\x03-\"#b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(StakeAuthorization::generated_message_descriptor_data());
            messages.push(stake_authorization::Validators::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(AuthorizationType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
