// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/staking/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState defines the staking module's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.GenesisState)
pub struct GenesisState {
    // message fields
    ///  params defines all the paramaters of related to deposit.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.GenesisState.params)
    pub params: ::protobuf::MessageField<super::staking::Params>,
    ///  last_total_power tracks the total amounts of bonded tokens recorded during
    ///  the previous end block.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.GenesisState.last_total_power)
    pub last_total_power: ::std::vec::Vec<u8>,
    ///  last_validator_powers is a special index that provides a historical list
    ///  of the last-block's bonded validators.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.GenesisState.last_validator_powers)
    pub last_validator_powers: ::std::vec::Vec<LastValidatorPower>,
    ///  delegations defines the validator set at genesis.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.GenesisState.validators)
    pub validators: ::std::vec::Vec<super::staking::Validator>,
    ///  delegations defines the delegations active at genesis.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.GenesisState.delegations)
    pub delegations: ::std::vec::Vec<super::staking::Delegation>,
    ///  unbonding_delegations defines the unbonding delegations active at genesis.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.GenesisState.unbonding_delegations)
    pub unbonding_delegations: ::std::vec::Vec<super::staking::UnbondingDelegation>,
    ///  redelegations defines the redelegations active at genesis.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.GenesisState.redelegations)
    pub redelegations: ::std::vec::Vec<super::staking::Redelegation>,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.GenesisState.exported)
    pub exported: bool,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::Params>(
            "params",
            |m: &GenesisState| { &m.params },
            |m: &mut GenesisState| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_total_power",
            |m: &GenesisState| { &m.last_total_power },
            |m: &mut GenesisState| { &mut m.last_total_power },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "last_validator_powers",
            |m: &GenesisState| { &m.last_validator_powers },
            |m: &mut GenesisState| { &mut m.last_validator_powers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validators",
            |m: &GenesisState| { &m.validators },
            |m: &mut GenesisState| { &mut m.validators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "delegations",
            |m: &GenesisState| { &m.delegations },
            |m: &mut GenesisState| { &mut m.delegations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unbonding_delegations",
            |m: &GenesisState| { &m.unbonding_delegations },
            |m: &mut GenesisState| { &mut m.unbonding_delegations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "redelegations",
            |m: &GenesisState| { &m.redelegations },
            |m: &mut GenesisState| { &mut m.redelegations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exported",
            |m: &GenesisState| { &m.exported },
            |m: &mut GenesisState| { &mut m.exported },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                18 => {
                    self.last_total_power = is.read_bytes()?;
                },
                26 => {
                    self.last_validator_powers.push(is.read_message()?);
                },
                34 => {
                    self.validators.push(is.read_message()?);
                },
                42 => {
                    self.delegations.push(is.read_message()?);
                },
                50 => {
                    self.unbonding_delegations.push(is.read_message()?);
                },
                58 => {
                    self.redelegations.push(is.read_message()?);
                },
                64 => {
                    self.exported = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.last_total_power.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.last_total_power);
        }
        for value in &self.last_validator_powers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.validators {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.delegations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.unbonding_delegations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.redelegations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.exported != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.last_total_power.is_empty() {
            os.write_bytes(2, &self.last_total_power)?;
        }
        for v in &self.last_validator_powers {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.validators {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.delegations {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.unbonding_delegations {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.redelegations {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.exported != false {
            os.write_bool(8, self.exported)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.last_total_power.clear();
        self.last_validator_powers.clear();
        self.validators.clear();
        self.delegations.clear();
        self.unbonding_delegations.clear();
        self.redelegations.clear();
        self.exported = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            params: ::protobuf::MessageField::none(),
            last_total_power: ::std::vec::Vec::new(),
            last_validator_powers: ::std::vec::Vec::new(),
            validators: ::std::vec::Vec::new(),
            delegations: ::std::vec::Vec::new(),
            unbonding_delegations: ::std::vec::Vec::new(),
            redelegations: ::std::vec::Vec::new(),
            exported: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  LastValidatorPower required for validator set update logic.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.LastValidatorPower)
pub struct LastValidatorPower {
    // message fields
    ///  address is the address of the validator.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.LastValidatorPower.address)
    pub address: ::std::string::String,
    ///  power defines the power of the validator.
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.LastValidatorPower.power)
    pub power: i64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.LastValidatorPower.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LastValidatorPower {
    fn default() -> &'a LastValidatorPower {
        <LastValidatorPower as ::protobuf::Message>::default_instance()
    }
}

impl LastValidatorPower {
    pub fn new() -> LastValidatorPower {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &LastValidatorPower| { &m.address },
            |m: &mut LastValidatorPower| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "power",
            |m: &LastValidatorPower| { &m.power },
            |m: &mut LastValidatorPower| { &mut m.power },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LastValidatorPower>(
            "LastValidatorPower",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LastValidatorPower {
    const NAME: &'static str = "LastValidatorPower";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                16 => {
                    self.power = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if self.power != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.power);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if self.power != 0 {
            os.write_int64(2, self.power)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LastValidatorPower {
        LastValidatorPower::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.power = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LastValidatorPower {
        static instance: LastValidatorPower = LastValidatorPower {
            address: ::std::string::String::new(),
            power: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LastValidatorPower {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LastValidatorPower").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LastValidatorPower {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LastValidatorPower {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$cosmos/staking/v1beta1/genesis.proto\x12\x16cosmos.staking.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a$cosmos/staking/v1beta1/staking.proto\"\
    \xd4\x05\n\x0cGenesisState\x12<\n\x06params\x18\x01\x20\x01(\x0b2\x1e.co\
    smos.staking.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\x1f\0\x12s\n\x10last\
    _total_power\x18\x02\x20\x01(\x0cR\x0elastTotalPowerBI\xf2\xde\x1f\x17ya\
    ml:\"last_total_power\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.I\
    nt\xc8\xde\x1f\0\x12\x84\x01\n\x15last_validator_powers\x18\x03\x20\x03(\
    \x0b2*.cosmos.staking.v1beta1.LastValidatorPowerR\x13lastValidatorPowers\
    B$\xf2\xde\x1f\x1cyaml:\"last_validator_powers\"\xc8\xde\x1f\0\x12G\n\nv\
    alidators\x18\x04\x20\x03(\x0b2!.cosmos.staking.v1beta1.ValidatorR\nvali\
    datorsB\x04\xc8\xde\x1f\0\x12J\n\x0bdelegations\x18\x05\x20\x03(\x0b2\".\
    cosmos.staking.v1beta1.DelegationR\x0bdelegationsB\x04\xc8\xde\x1f\0\x12\
    \x86\x01\n\x15unbonding_delegations\x18\x06\x20\x03(\x0b2+.cosmos.stakin\
    g.v1beta1.UnbondingDelegationR\x14unbondingDelegationsB$\xf2\xde\x1f\x1c\
    yaml:\"unbonding_delegations\"\xc8\xde\x1f\0\x12P\n\rredelegations\x18\
    \x07\x20\x03(\x0b2$.cosmos.staking.v1beta1.RedelegationR\rredelegationsB\
    \x04\xc8\xde\x1f\0\x12\x1a\n\x08exported\x18\x08\x20\x01(\x08R\x08export\
    ed\"N\n\x12LastValidatorPower\x12\x18\n\x07address\x18\x01\x20\x01(\tR\
    \x07address\x12\x14\n\x05power\x18\x02\x20\x01(\x03R\x05power:\x08\x88\
    \xa0\x1f\0\xe8\xa0\x1f\0B.Z,github.com/cosmos/cosmos-sdk/x/staking/types\
    J\xa1\x0e\n\x06\x12\x04\0\04\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x1f\n\x08\n\x01\x08\x12\x03\x03\0C\n\t\n\x02\x08\
    \x0b\x12\x03\x03\0C\n\t\n\x02\x03\0\x12\x03\x05\0\x1e\n\t\n\x02\x03\x01\
    \x12\x03\x06\0.\nF\n\x02\x04\0\x12\x04\t\0(\x01\x1a:\x20GenesisState\x20\
    defines\x20the\x20staking\x20module's\x20genesis\x20state.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\t\x08\x14\nG\n\x04\x04\0\x02\0\x12\x03\x0b\x023\x1a:\
    \x20params\x20defines\x20all\x20the\x20paramaters\x20of\x20related\x20to\
    \x20deposit.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0b\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x0b\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0b\x12\x13\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0b\x142\n\x0f\n\
    \x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\x0b\x151\ns\n\x04\x04\0\x02\x01\
    \x12\x04\x0f\x02\x13\x04\x1ae\x20last_total_power\x20tracks\x20the\x20to\
    tal\x20amounts\x20of\x20bonded\x20tokens\x20recorded\x20during\n\x20the\
    \x20previous\x20end\x20block.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x0f\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x08\x18\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x0f\x1b\x1c\n\r\n\x05\x04\0\x02\x01\x08\
    \x12\x04\x0f\x1d\x13\x03\n\x0f\n\x08\x04\0\x02\x01\x08\xeb\xfb\x03\x12\
    \x03\x10\x04E\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x11\x048\
    \n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x12\x04\"\n\x80\x01\n\
    \x04\x04\0\x02\x02\x12\x04\x17\x02\x18^\x1ar\x20last_validator_powers\
    \x20is\x20a\x20special\x20index\x20that\x20provides\x20a\x20historical\
    \x20list\n\x20of\x20the\x20last-block's\x20bonded\x20validators.\n\n\x0c\
    \n\x05\x04\0\x02\x02\x04\x12\x03\x17\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\
    \x12\x03\x17\x0b\x1d\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x17\x1e3\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1767\n\x0c\n\x05\x04\0\x02\x02\x08\
    \x12\x03\x18\x06]\n\x0f\n\x08\x04\0\x02\x02\x08\xee\xfb\x03\x12\x03\x18\
    \x07>\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x18@\\\n@\n\x04\
    \x04\0\x02\x03\x12\x03\x1b\x02C\x1a3\x20delegations\x20defines\x20the\
    \x20validator\x20set\x20at\x20genesis.\n\n\x0c\n\x05\x04\0\x02\x03\x04\
    \x12\x03\x1b\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x1b\x0b\x14\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1b\x15\x1f\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x1b\"#\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x1b$B\n\
    \x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\x03\x12\x03\x1b%A\nE\n\x04\x04\0\
    \x02\x04\x12\x03\x1e\x02E\x1a8\x20delegations\x20defines\x20the\x20deleg\
    ations\x20active\x20at\x20genesis.\n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\
    \x03\x1e\x02\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x1e\x0b\x15\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03\x1e\x16!\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x1e$%\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\x1e&D\n\x0f\n\x08\
    \x04\0\x02\x04\x08\xe9\xfb\x03\x12\x03\x1e'C\nZ\n\x04\x04\0\x02\x05\x12\
    \x04!\x02\"^\x1aL\x20unbonding_delegations\x20defines\x20the\x20unbondin\
    g\x20delegations\x20active\x20at\x20genesis.\n\n\x0c\n\x05\x04\0\x02\x05\
    \x04\x12\x03!\x02\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03!\x0b\x1e\n\x0c\
    \n\x05\x04\0\x02\x05\x01\x12\x03!\x1f4\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x03!78\n\x0c\n\x05\x04\0\x02\x05\x08\x12\x03\"\x06]\n\x0f\n\x08\x04\0\
    \x02\x05\x08\xee\xfb\x03\x12\x03\"\x07>\n\x0f\n\x08\x04\0\x02\x05\x08\
    \xe9\xfb\x03\x12\x03\"@\\\nI\n\x04\x04\0\x02\x06\x12\x03%\x02I\x1a<\x20r\
    edelegations\x20defines\x20the\x20redelegations\x20active\x20at\x20genes\
    is.\n\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03%\x02\n\n\x0c\n\x05\x04\0\x02\
    \x06\x06\x12\x03%\x0b\x17\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03%\x18%\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03%()\n\x0c\n\x05\x04\0\x02\x06\x08\
    \x12\x03%*H\n\x0f\n\x08\x04\0\x02\x06\x08\xe9\xfb\x03\x12\x03%+G\n\x0b\n\
    \x04\x04\0\x02\x07\x12\x03'\x02\x14\n\x0c\n\x05\x04\0\x02\x07\x05\x12\
    \x03'\x02\x06\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03'\x07\x0f\n\x0c\n\x05\
    \x04\0\x02\x07\x03\x12\x03'\x12\x13\nI\n\x02\x04\x01\x12\x04+\04\x01\x1a\
    =\x20LastValidatorPower\x20required\x20for\x20validator\x20set\x20update\
    \x20logic.\n\n\n\n\x03\x04\x01\x01\x12\x03+\x08\x1a\n\n\n\x03\x04\x01\
    \x07\x12\x03,\x02-\n\r\n\x06\x04\x01\x07\x8d\xf4\x03\x12\x03,\x02-\n\n\n\
    \x03\x04\x01\x07\x12\x03-\x02-\n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03\
    -\x02-\n7\n\x04\x04\x01\x02\0\x12\x030\x02\x15\x1a*\x20address\x20is\x20\
    the\x20address\x20of\x20the\x20validator.\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x030\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x030\t\x10\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x030\x13\x14\n8\n\x04\x04\x01\x02\x01\x12\
    \x033\x02\x12\x1a+\x20power\x20defines\x20the\x20power\x20of\x20the\x20v\
    alidator.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x033\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x033\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x033\x10\x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::staking::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(GenesisState::generated_message_descriptor_data());
            messages.push(LastValidatorPower::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
