// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/staking/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgCreateValidator defines a SDK message for creating a new validator.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgCreateValidator)
pub struct MsgCreateValidator {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgCreateValidator.description)
    pub description: ::protobuf::MessageField<super::staking::Description>,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgCreateValidator.commission)
    pub commission: ::protobuf::MessageField<super::staking::CommissionRates>,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgCreateValidator.min_self_delegation)
    pub min_self_delegation: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgCreateValidator.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgCreateValidator.validator_address)
    pub validator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgCreateValidator.pubkey)
    pub pubkey: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgCreateValidator.value)
    pub value: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgCreateValidator.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreateValidator {
    fn default() -> &'a MsgCreateValidator {
        <MsgCreateValidator as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateValidator {
    pub fn new() -> MsgCreateValidator {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::Description>(
            "description",
            |m: &MsgCreateValidator| { &m.description },
            |m: &mut MsgCreateValidator| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::CommissionRates>(
            "commission",
            |m: &MsgCreateValidator| { &m.commission },
            |m: &mut MsgCreateValidator| { &mut m.commission },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_self_delegation",
            |m: &MsgCreateValidator| { &m.min_self_delegation },
            |m: &mut MsgCreateValidator| { &mut m.min_self_delegation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgCreateValidator| { &m.delegator_address },
            |m: &mut MsgCreateValidator| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &MsgCreateValidator| { &m.validator_address },
            |m: &mut MsgCreateValidator| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "pubkey",
            |m: &MsgCreateValidator| { &m.pubkey },
            |m: &mut MsgCreateValidator| { &mut m.pubkey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "value",
            |m: &MsgCreateValidator| { &m.value },
            |m: &mut MsgCreateValidator| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreateValidator>(
            "MsgCreateValidator",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreateValidator {
    const NAME: &'static str = "MsgCreateValidator";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.description)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.commission)?;
                },
                26 => {
                    self.min_self_delegation = is.read_string()?;
                },
                34 => {
                    self.delegator_address = is.read_string()?;
                },
                42 => {
                    self.validator_address = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pubkey)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.description.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.commission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.min_self_delegation.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.min_self_delegation);
        }
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.validator_address);
        }
        if let Some(v) = self.pubkey.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.description.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.commission.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.min_self_delegation.is_empty() {
            os.write_string(3, &self.min_self_delegation)?;
        }
        if !self.delegator_address.is_empty() {
            os.write_string(4, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(5, &self.validator_address)?;
        }
        if let Some(v) = self.pubkey.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreateValidator {
        MsgCreateValidator::new()
    }

    fn clear(&mut self) {
        self.description.clear();
        self.commission.clear();
        self.min_self_delegation.clear();
        self.delegator_address.clear();
        self.validator_address.clear();
        self.pubkey.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreateValidator {
        static instance: MsgCreateValidator = MsgCreateValidator {
            description: ::protobuf::MessageField::none(),
            commission: ::protobuf::MessageField::none(),
            min_self_delegation: ::std::string::String::new(),
            delegator_address: ::std::string::String::new(),
            validator_address: ::std::string::String::new(),
            pubkey: ::protobuf::MessageField::none(),
            value: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreateValidator {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreateValidator").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreateValidator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateValidator {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCreateValidatorResponse defines the Msg/CreateValidator response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgCreateValidatorResponse)
pub struct MsgCreateValidatorResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgCreateValidatorResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreateValidatorResponse {
    fn default() -> &'a MsgCreateValidatorResponse {
        <MsgCreateValidatorResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateValidatorResponse {
    pub fn new() -> MsgCreateValidatorResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreateValidatorResponse>(
            "MsgCreateValidatorResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreateValidatorResponse {
    const NAME: &'static str = "MsgCreateValidatorResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreateValidatorResponse {
        MsgCreateValidatorResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreateValidatorResponse {
        static instance: MsgCreateValidatorResponse = MsgCreateValidatorResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreateValidatorResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreateValidatorResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreateValidatorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateValidatorResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgEditValidator defines a SDK message for editing an existing validator.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgEditValidator)
pub struct MsgEditValidator {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgEditValidator.description)
    pub description: ::protobuf::MessageField<super::staking::Description>,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgEditValidator.validator_address)
    pub validator_address: ::std::string::String,
    ///  We pass a reference to the new commission rate and min self delegation as
    ///  it's not mandatory to update. If not updated, the deserialized rate will be
    ///  zero with no way to distinguish if an update was intended.
    ///  REF: #2373
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgEditValidator.commission_rate)
    pub commission_rate: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgEditValidator.min_self_delegation)
    pub min_self_delegation: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgEditValidator.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgEditValidator {
    fn default() -> &'a MsgEditValidator {
        <MsgEditValidator as ::protobuf::Message>::default_instance()
    }
}

impl MsgEditValidator {
    pub fn new() -> MsgEditValidator {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::staking::Description>(
            "description",
            |m: &MsgEditValidator| { &m.description },
            |m: &mut MsgEditValidator| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &MsgEditValidator| { &m.validator_address },
            |m: &mut MsgEditValidator| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "commission_rate",
            |m: &MsgEditValidator| { &m.commission_rate },
            |m: &mut MsgEditValidator| { &mut m.commission_rate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_self_delegation",
            |m: &MsgEditValidator| { &m.min_self_delegation },
            |m: &mut MsgEditValidator| { &mut m.min_self_delegation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgEditValidator>(
            "MsgEditValidator",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgEditValidator {
    const NAME: &'static str = "MsgEditValidator";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.description)?;
                },
                18 => {
                    self.validator_address = is.read_string()?;
                },
                26 => {
                    self.commission_rate = is.read_string()?;
                },
                34 => {
                    self.min_self_delegation = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.description.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if !self.commission_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.commission_rate);
        }
        if !self.min_self_delegation.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.min_self_delegation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.description.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if !self.commission_rate.is_empty() {
            os.write_string(3, &self.commission_rate)?;
        }
        if !self.min_self_delegation.is_empty() {
            os.write_string(4, &self.min_self_delegation)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgEditValidator {
        MsgEditValidator::new()
    }

    fn clear(&mut self) {
        self.description.clear();
        self.validator_address.clear();
        self.commission_rate.clear();
        self.min_self_delegation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgEditValidator {
        static instance: MsgEditValidator = MsgEditValidator {
            description: ::protobuf::MessageField::none(),
            validator_address: ::std::string::String::new(),
            commission_rate: ::std::string::String::new(),
            min_self_delegation: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgEditValidator {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgEditValidator").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgEditValidator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgEditValidator {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgEditValidatorResponse defines the Msg/EditValidator response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgEditValidatorResponse)
pub struct MsgEditValidatorResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgEditValidatorResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgEditValidatorResponse {
    fn default() -> &'a MsgEditValidatorResponse {
        <MsgEditValidatorResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgEditValidatorResponse {
    pub fn new() -> MsgEditValidatorResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgEditValidatorResponse>(
            "MsgEditValidatorResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgEditValidatorResponse {
    const NAME: &'static str = "MsgEditValidatorResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgEditValidatorResponse {
        MsgEditValidatorResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgEditValidatorResponse {
        static instance: MsgEditValidatorResponse = MsgEditValidatorResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgEditValidatorResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgEditValidatorResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgEditValidatorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgEditValidatorResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgDelegate defines a SDK message for performing a delegation of coins
///  from a delegator to a validator.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgDelegate)
pub struct MsgDelegate {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgDelegate.validator_address)
    pub validator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgDelegate.amount)
    pub amount: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgDelegate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDelegate {
    fn default() -> &'a MsgDelegate {
        <MsgDelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegate {
    pub fn new() -> MsgDelegate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgDelegate| { &m.delegator_address },
            |m: &mut MsgDelegate| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &MsgDelegate| { &m.validator_address },
            |m: &mut MsgDelegate| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "amount",
            |m: &MsgDelegate| { &m.amount },
            |m: &mut MsgDelegate| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDelegate>(
            "MsgDelegate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDelegate {
    const NAME: &'static str = "MsgDelegate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.validator_address = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.amount)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if let Some(v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if let Some(v) = self.amount.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDelegate {
        MsgDelegate::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDelegate {
        static instance: MsgDelegate = MsgDelegate {
            delegator_address: ::std::string::String::new(),
            validator_address: ::std::string::String::new(),
            amount: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDelegate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDelegate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgDelegateResponse defines the Msg/Delegate response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgDelegateResponse)
pub struct MsgDelegateResponse {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgDelegateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDelegateResponse {
    fn default() -> &'a MsgDelegateResponse {
        <MsgDelegateResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegateResponse {
    pub fn new() -> MsgDelegateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDelegateResponse>(
            "MsgDelegateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDelegateResponse {
    const NAME: &'static str = "MsgDelegateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDelegateResponse {
        MsgDelegateResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDelegateResponse {
        static instance: MsgDelegateResponse = MsgDelegateResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDelegateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDelegateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDelegateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgBeginRedelegate defines a SDK message for performing a redelegation
///  of coins from a delegator and source validator to a destination validator.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgBeginRedelegate)
pub struct MsgBeginRedelegate {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
    pub validator_src_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
    pub validator_dst_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
    pub amount: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgBeginRedelegate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgBeginRedelegate {
    fn default() -> &'a MsgBeginRedelegate {
        <MsgBeginRedelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgBeginRedelegate {
    pub fn new() -> MsgBeginRedelegate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgBeginRedelegate| { &m.delegator_address },
            |m: &mut MsgBeginRedelegate| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_src_address",
            |m: &MsgBeginRedelegate| { &m.validator_src_address },
            |m: &mut MsgBeginRedelegate| { &mut m.validator_src_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_dst_address",
            |m: &MsgBeginRedelegate| { &m.validator_dst_address },
            |m: &mut MsgBeginRedelegate| { &mut m.validator_dst_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "amount",
            |m: &MsgBeginRedelegate| { &m.amount },
            |m: &mut MsgBeginRedelegate| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgBeginRedelegate>(
            "MsgBeginRedelegate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgBeginRedelegate {
    const NAME: &'static str = "MsgBeginRedelegate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.validator_src_address = is.read_string()?;
                },
                26 => {
                    self.validator_dst_address = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.amount)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_src_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_src_address);
        }
        if !self.validator_dst_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.validator_dst_address);
        }
        if let Some(v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_src_address.is_empty() {
            os.write_string(2, &self.validator_src_address)?;
        }
        if !self.validator_dst_address.is_empty() {
            os.write_string(3, &self.validator_dst_address)?;
        }
        if let Some(v) = self.amount.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgBeginRedelegate {
        MsgBeginRedelegate::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_src_address.clear();
        self.validator_dst_address.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgBeginRedelegate {
        static instance: MsgBeginRedelegate = MsgBeginRedelegate {
            delegator_address: ::std::string::String::new(),
            validator_src_address: ::std::string::String::new(),
            validator_dst_address: ::std::string::String::new(),
            amount: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgBeginRedelegate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgBeginRedelegate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgBeginRedelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgBeginRedelegate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgBeginRedelegateResponse)
pub struct MsgBeginRedelegateResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.completion_time)
    pub completion_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgBeginRedelegateResponse {
    fn default() -> &'a MsgBeginRedelegateResponse {
        <MsgBeginRedelegateResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgBeginRedelegateResponse {
    pub fn new() -> MsgBeginRedelegateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "completion_time",
            |m: &MsgBeginRedelegateResponse| { &m.completion_time },
            |m: &mut MsgBeginRedelegateResponse| { &mut m.completion_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgBeginRedelegateResponse>(
            "MsgBeginRedelegateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgBeginRedelegateResponse {
    const NAME: &'static str = "MsgBeginRedelegateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.completion_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.completion_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.completion_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgBeginRedelegateResponse {
        MsgBeginRedelegateResponse::new()
    }

    fn clear(&mut self) {
        self.completion_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgBeginRedelegateResponse {
        static instance: MsgBeginRedelegateResponse = MsgBeginRedelegateResponse {
            completion_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgBeginRedelegateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgBeginRedelegateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgBeginRedelegateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgBeginRedelegateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgUndelegate defines a SDK message for performing an undelegation from a
///  delegate and a validator.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgUndelegate)
pub struct MsgUndelegate {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
    pub validator_address: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgUndelegate.amount)
    pub amount: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgUndelegate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUndelegate {
    fn default() -> &'a MsgUndelegate {
        <MsgUndelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgUndelegate {
    pub fn new() -> MsgUndelegate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgUndelegate| { &m.delegator_address },
            |m: &mut MsgUndelegate| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &MsgUndelegate| { &m.validator_address },
            |m: &mut MsgUndelegate| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "amount",
            |m: &MsgUndelegate| { &m.amount },
            |m: &mut MsgUndelegate| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUndelegate>(
            "MsgUndelegate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUndelegate {
    const NAME: &'static str = "MsgUndelegate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.validator_address = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.amount)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if let Some(v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if let Some(v) = self.amount.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUndelegate {
        MsgUndelegate::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUndelegate {
        static instance: MsgUndelegate = MsgUndelegate {
            delegator_address: ::std::string::String::new(),
            validator_address: ::std::string::String::new(),
            amount: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUndelegate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUndelegate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUndelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUndelegate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgUndelegateResponse defines the Msg/Undelegate response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.staking.v1beta1.MsgUndelegateResponse)
pub struct MsgUndelegateResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.staking.v1beta1.MsgUndelegateResponse.completion_time)
    pub completion_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.staking.v1beta1.MsgUndelegateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUndelegateResponse {
    fn default() -> &'a MsgUndelegateResponse {
        <MsgUndelegateResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUndelegateResponse {
    pub fn new() -> MsgUndelegateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "completion_time",
            |m: &MsgUndelegateResponse| { &m.completion_time },
            |m: &mut MsgUndelegateResponse| { &mut m.completion_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUndelegateResponse>(
            "MsgUndelegateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUndelegateResponse {
    const NAME: &'static str = "MsgUndelegateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.completion_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.completion_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.completion_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUndelegateResponse {
        MsgUndelegateResponse::new()
    }

    fn clear(&mut self) {
        self.completion_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUndelegateResponse {
        static instance: MsgUndelegateResponse = MsgUndelegateResponse {
            completion_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUndelegateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUndelegateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUndelegateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUndelegateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/staking/v1beta1/tx.proto\x12\x16cosmos.staking.v1beta1\x1a\
    \x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\
    \x14gogoproto/gogo.proto\x1a\x19cosmos_proto/cosmos.proto\x1a\x1ecosmos/\
    base/v1beta1/coin.proto\x1a$cosmos/staking/v1beta1/staking.proto\"\xcd\
    \x04\n\x12MsgCreateValidator\x12K\n\x0bdescription\x18\x01\x20\x01(\x0b2\
    #.cosmos.staking.v1beta1.DescriptionR\x0bdescriptionB\x04\xc8\xde\x1f\0\
    \x12M\n\ncommission\x18\x02\x20\x01(\x0b2'.cosmos.staking.v1beta1.Commis\
    sionRatesR\ncommissionB\x04\xc8\xde\x1f\0\x12|\n\x13min_self_delegation\
    \x18\x03\x20\x01(\tR\x11minSelfDelegationBL\xf2\xde\x1f\x1ayaml:\"min_se\
    lf_delegation\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\
    \xde\x1f\0\x12I\n\x11delegator_address\x18\x04\x20\x01(\tR\x10delegatorA\
    ddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12I\n\x11validato\
    r_address\x18\x05\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18ya\
    ml:\"validator_address\"\x12F\n\x06pubkey\x18\x06\x20\x01(\x0b2\x14.goog\
    le.protobuf.AnyR\x06pubkeyB\x18\xca\xb4-\x14cosmos.crypto.PubKey\x125\n\
    \x05value\x18\x07\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x05valueB\
    \x04\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x1c\n\x1aMsgCreate\
    ValidatorResponse\"\x93\x03\n\x10MsgEditValidator\x12K\n\x0bdescription\
    \x18\x01\x20\x01(\x0b2#.cosmos.staking.v1beta1.DescriptionR\x0bdescripti\
    onB\x04\xc8\xde\x1f\0\x12?\n\x11validator_address\x18\x02\x20\x01(\tR\
    \x10validatorAddressB\x12\xf2\xde\x1f\x0eyaml:\"address\"\x12m\n\x0fcomm\
    ission_rate\x18\x03\x20\x01(\tR\x0ecommissionRateBD\xf2\xde\x1f\x16yaml:\
    \"commission_rate\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\
    \x12x\n\x13min_self_delegation\x18\x04\x20\x01(\tR\x11minSelfDelegationB\
    H\xf2\xde\x1f\x1ayaml:\"min_self_delegation\"\xda\xde\x1f&github.com/cos\
    mos/cosmos-sdk/types.Int:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x1a\n\x18Msg\
    EditValidatorResponse\"\xe6\x01\n\x0bMsgDelegate\x12I\n\x11delegator_add\
    ress\x18\x01\x20\x01(\tR\x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"\
    delegator_address\"\x12I\n\x11validator_address\x18\x02\x20\x01(\tR\x10v\
    alidatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_address\"\x127\n\
    \x06amount\x18\x03\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amount\
    B\x04\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x15\n\x13MsgDeleg\
    ateResponse\"\xce\x02\n\x12MsgBeginRedelegate\x12I\n\x11delegator_addres\
    s\x18\x01\x20\x01(\tR\x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"del\
    egator_address\"\x12T\n\x15validator_src_address\x18\x02\x20\x01(\tR\x13\
    validatorSrcAddressB\x20\xf2\xde\x1f\x1cyaml:\"validator_src_address\"\
    \x12T\n\x15validator_dst_address\x18\x03\x20\x01(\tR\x13validatorDstAddr\
    essB\x20\xf2\xde\x1f\x1cyaml:\"validator_dst_address\"\x127\n\x06amount\
    \x18\x04\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amountB\x04\xc8\
    \xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"k\n\x1aMsgBeginRedelegateRe\
    sponse\x12M\n\x0fcompletion_time\x18\x01\x20\x01(\x0b2\x1a.google.protob\
    uf.TimestampR\x0ecompletionTimeB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x01\"\xe8\
    \x01\n\rMsgUndelegate\x12I\n\x11delegator_address\x18\x01\x20\x01(\tR\
    \x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12I\
    \n\x11validator_address\x18\x02\x20\x01(\tR\x10validatorAddressB\x1c\xf2\
    \xde\x1f\x18yaml:\"validator_address\"\x127\n\x06amount\x18\x03\x20\x01(\
    \x0b2\x19.cosmos.base.v1beta1.CoinR\x06amountB\x04\xc8\xde\x1f\0:\x08\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0\"f\n\x15MsgUndelegateResponse\x12M\n\x0fcom\
    pletion_time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0ecom\
    pletionTimeB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x012\x9a\x04\n\x03Msg\x12q\n\
    \x0fCreateValidator\x12*.cosmos.staking.v1beta1.MsgCreateValidator\x1a2.\
    cosmos.staking.v1beta1.MsgCreateValidatorResponse\x12k\n\rEditValidator\
    \x12(.cosmos.staking.v1beta1.MsgEditValidator\x1a0.cosmos.staking.v1beta\
    1.MsgEditValidatorResponse\x12\\\n\x08Delegate\x12#.cosmos.staking.v1bet\
    a1.MsgDelegate\x1a+.cosmos.staking.v1beta1.MsgDelegateResponse\x12q\n\
    \x0fBeginRedelegate\x12*.cosmos.staking.v1beta1.MsgBeginRedelegate\x1a2.\
    cosmos.staking.v1beta1.MsgBeginRedelegateResponse\x12b\n\nUndelegate\x12\
    %.cosmos.staking.v1beta1.MsgUndelegate\x1a-.cosmos.staking.v1beta1.MsgUn\
    delegateResponseB.Z,github.com/cosmos/cosmos-sdk/x/staking/typesJ\x8e$\n\
    \x06\x12\x04\0\0}\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x1f\n\t\n\x02\x03\0\x12\x03\x03\0#\n\t\n\x02\x03\x01\x12\
    \x03\x04\0)\n\t\n\x02\x03\x02\x12\x03\x05\0\x1e\n\t\n\x02\x03\x03\x12\
    \x03\x07\0#\n\t\n\x02\x03\x04\x12\x03\x08\0(\n\t\n\x02\x03\x05\x12\x03\t\
    \0.\n\x08\n\x01\x08\x12\x03\x0b\0C\n\t\n\x02\x08\x0b\x12\x03\x0b\0C\n2\n\
    \x02\x06\0\x12\x04\x0e\0\x20\x01\x1a&\x20Msg\x20defines\x20the\x20stakin\
    g\x20Msg\x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\x0e\x08\x0b\nM\n\x04\
    \x06\0\x02\0\x12\x03\x10\x02O\x1a@\x20CreateValidator\x20defines\x20a\
    \x20method\x20for\x20creating\x20a\x20new\x20validator.\n\n\x0c\n\x05\
    \x06\0\x02\0\x01\x12\x03\x10\x06\x15\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\
    \x10\x16(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x103M\nP\n\x04\x06\0\x02\
    \x01\x12\x03\x13\x02I\x1aC\x20EditValidator\x20defines\x20a\x20method\
    \x20for\x20editing\x20an\x20existing\x20validator.\n\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x13\x06\x13\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x13\x14$\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x13/G\no\n\x04\x06\0\x02\
    \x02\x12\x03\x17\x02:\x1ab\x20Delegate\x20defines\x20a\x20method\x20for\
    \x20performing\x20a\x20delegation\x20of\x20coins\n\x20from\x20a\x20deleg\
    ator\x20to\x20a\x20validator.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    \x17\x06\x0e\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x17\x0f\x1a\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x17%8\n\x9a\x01\n\x04\x06\0\x02\x03\x12\
    \x03\x1b\x02O\x1a\x8c\x01\x20BeginRedelegate\x20defines\x20a\x20method\
    \x20for\x20performing\x20a\x20redelegation\n\x20of\x20coins\x20from\x20a\
    \x20delegator\x20and\x20source\x20validator\x20to\x20a\x20destination\
    \x20validator.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x1b\x06\x15\n\x0c\
    \n\x05\x06\0\x02\x03\x02\x12\x03\x1b\x16(\n\x0c\n\x05\x06\0\x02\x03\x03\
    \x12\x03\x1b3M\nk\n\x04\x06\0\x02\x04\x12\x03\x1f\x02@\x1a^\x20Undelegat\
    e\x20defines\x20a\x20method\x20for\x20performing\x20an\x20undelegation\
    \x20from\x20a\n\x20delegate\x20and\x20a\x20validator.\n\n\x0c\n\x05\x06\
    \0\x02\x04\x01\x12\x03\x1f\x06\x10\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\
    \x1f\x11\x1e\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x1f)>\nT\n\x02\x04\0\
    \x12\x04#\02\x01\x1aH\x20MsgCreateValidator\x20defines\x20a\x20SDK\x20me\
    ssage\x20for\x20creating\x20a\x20new\x20validator.\n\n\n\n\x03\x04\0\x01\
    \x12\x03#\x08\x1a\n\n\n\x03\x04\0\x07\x12\x03$\x02-\n\r\n\x06\x04\0\x07\
    \x8d\xf4\x03\x12\x03$\x02-\n\n\n\x03\x04\0\x07\x12\x03%\x02-\n\r\n\x06\
    \x04\0\x07\x81\xf4\x03\x12\x03%\x02-\n\x0b\n\x04\x04\0\x02\0\x12\x03'\
    \x02I\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03'\x02\r\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03'\x12\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03'()\n\x0c\n\x05\
    \x04\0\x02\0\x08\x12\x03'*H\n\x0f\n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\
    \x03'+G\n\x0b\n\x04\x04\0\x02\x01\x12\x03(\x02I\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03(\x02\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03(\x12\x1c\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03(()\n\x0c\n\x05\x04\0\x02\x01\x08\
    \x12\x03(*H\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03(+G\n\x0c\n\
    \x04\x04\0\x02\x02\x12\x04)\x02-\x04\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03)\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03)\x12%\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03)()\n\r\n\x05\x04\0\x02\x02\x08\x12\x04)*-\x03\
    \n\x0f\n\x08\x04\0\x02\x02\x08\xeb\xfb\x03\x12\x03*\x04E\n\x0f\n\x08\x04\
    \0\x02\x02\x08\xee\xfb\x03\x12\x03+\x04;\n\x0f\n\x08\x04\0\x02\x02\x08\
    \xe9\xfb\x03\x12\x03,\x04\"\n\x0b\n\x04\x04\0\x02\x03\x12\x03.\x02g\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03.\x1b,\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03./0\n\x0c\n\x05\
    \x04\0\x02\x03\x08\x12\x03.1f\n\x0f\n\x08\x04\0\x02\x03\x08\xee\xfb\x03\
    \x12\x03.2e\n\x0b\n\x04\x04\0\x02\x04\x12\x03/\x02g\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03/\x1b\
    ,\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03//0\n\x0c\n\x05\x04\0\x02\x04\x08\
    \x12\x03/1f\n\x0f\n\x08\x04\0\x02\x04\x08\xee\xfb\x03\x12\x03/2e\n\x0b\n\
    \x04\x04\0\x02\x05\x12\x030\x02m\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x030\
    \x02\x15\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x030\x1b!\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x030/0\n\x0c\n\x05\x04\0\x02\x05\x08\x12\x0301l\n\x0f\n\
    \x08\x04\0\x02\x05\x08\xc9\xd6\x05\x12\x0302k\n\x0b\n\x04\x04\0\x02\x06\
    \x12\x031\x02P\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x031\x02\x1a\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x031\x1b\x20\n\x0c\n\x05\x04\0\x02\x06\x03\
    \x12\x031/0\n\x0c\n\x05\x04\0\x02\x06\x08\x12\x0311O\n\x0f\n\x08\x04\0\
    \x02\x06\x08\xe9\xfb\x03\x12\x0312N\nV\n\x02\x04\x01\x12\x035\0%\x1aK\
    \x20MsgCreateValidatorResponse\x20defines\x20the\x20Msg/CreateValidator\
    \x20response\x20type.\n\n\n\n\x03\x04\x01\x01\x12\x035\x08\"\nW\n\x02\
    \x04\x02\x12\x048\0K\x01\x1aK\x20MsgEditValidator\x20defines\x20a\x20SDK\
    \x20message\x20for\x20editing\x20an\x20existing\x20validator.\n\n\n\n\
    \x03\x04\x02\x01\x12\x038\x08\x18\n\n\n\x03\x04\x02\x07\x12\x039\x02-\n\
    \r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x039\x02-\n\n\n\x03\x04\x02\x07\x12\
    \x03:\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x03:\x02-\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03<\x02C\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03<\x02\
    \r\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03<\x0e\x19\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03<\"#\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03<$B\n\x0f\n\
    \x08\x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03<%A\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03=\x02P\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03=\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03=\x0e\x1f\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03=\"#\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03=$O\n\x0f\n\
    \x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\x03=%N\n\xef\x01\n\x04\x04\x02\
    \x02\x02\x12\x04C\x02F\x04\x1a\xe0\x01\x20We\x20pass\x20a\x20reference\
    \x20to\x20the\x20new\x20commission\x20rate\x20and\x20min\x20self\x20dele\
    gation\x20as\n\x20it's\x20not\x20mandatory\x20to\x20update.\x20If\x20not\
    \x20updated,\x20the\x20deserialized\x20rate\x20will\x20be\n\x20zero\x20w\
    ith\x20no\x20way\x20to\x20distinguish\x20if\x20an\x20update\x20was\x20in\
    tended.\n\x20REF:\x20#2373\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03C\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03C\t\x18\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03C\x1b\x1c\n\r\n\x05\x04\x02\x02\x02\x08\x12\x04C\
    \x1dF\x03\n\x0f\n\x08\x04\x02\x02\x02\x08\xeb\xfb\x03\x12\x03D\x04E\n\
    \x0f\n\x08\x04\x02\x02\x02\x08\xee\xfb\x03\x12\x03E\x047\n\x0c\n\x04\x04\
    \x02\x02\x03\x12\x04G\x02J\x04\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03G\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03G\t\x1c\n\x0c\n\x05\x04\
    \x02\x02\x03\x03\x12\x03G\x1f\x20\n\r\n\x05\x04\x02\x02\x03\x08\x12\x04G\
    !J\x03\n\x0f\n\x08\x04\x02\x02\x03\x08\xeb\xfb\x03\x12\x03H\x04E\n\x0f\n\
    \x08\x04\x02\x02\x03\x08\xee\xfb\x03\x12\x03I\x04;\nR\n\x02\x04\x03\x12\
    \x03N\0#\x1aG\x20MsgEditValidatorResponse\x20defines\x20the\x20Msg/EditV\
    alidator\x20response\x20type.\n\n\n\n\x03\x04\x03\x01\x12\x03N\x08\x20\n\
    v\n\x02\x04\x04\x12\x04R\0Y\x01\x1aj\x20MsgDelegate\x20defines\x20a\x20S\
    DK\x20message\x20for\x20performing\x20a\x20delegation\x20of\x20coins\n\
    \x20from\x20a\x20delegator\x20to\x20a\x20validator.\n\n\n\n\x03\x04\x04\
    \x01\x12\x03R\x08\x13\n\n\n\x03\x04\x04\x07\x12\x03S\x02-\n\r\n\x06\x04\
    \x04\x07\x8d\xf4\x03\x12\x03S\x02-\n\n\n\x03\x04\x04\x07\x12\x03T\x02-\n\
    \r\n\x06\x04\x04\x07\x81\xf4\x03\x12\x03T\x02-\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03V\x02g\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03V\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03V\x1b,\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03V/0\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03V1f\n\x0f\n\x08\x04\x04\x02\
    \0\x08\xee\xfb\x03\x12\x03V2e\n\x0b\n\x04\x04\x04\x02\x01\x12\x03W\x02g\
    \n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03W\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03W\x1b,\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03W/0\n\
    \x0c\n\x05\x04\x04\x02\x01\x08\x12\x03W1f\n\x0f\n\x08\x04\x04\x02\x01\
    \x08\xee\xfb\x03\x12\x03W2e\n\x0b\n\x04\x04\x04\x02\x02\x12\x03X\x02P\n\
    \x0c\n\x05\x04\x04\x02\x02\x06\x12\x03X\x02\x1a\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03X\x1b!\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03X/0\n\x0c\
    \n\x05\x04\x04\x02\x02\x08\x12\x03X1O\n\x0f\n\x08\x04\x04\x02\x02\x08\
    \xe9\xfb\x03\x12\x03X2N\nH\n\x02\x04\x05\x12\x03\\\0\x1e\x1a=\x20MsgDele\
    gateResponse\x20defines\x20the\x20Msg/Delegate\x20response\x20type.\n\n\
    \n\n\x03\x04\x05\x01\x12\x03\\\x08\x1b\n\xa1\x01\n\x02\x04\x06\x12\x04`\
    \0h\x01\x1a\x94\x01\x20MsgBeginRedelegate\x20defines\x20a\x20SDK\x20mess\
    age\x20for\x20performing\x20a\x20redelegation\n\x20of\x20coins\x20from\
    \x20a\x20delegator\x20and\x20source\x20validator\x20to\x20a\x20destinati\
    on\x20validator.\n\n\n\n\x03\x04\x06\x01\x12\x03`\x08\x1a\n\n\n\x03\x04\
    \x06\x07\x12\x03a\x02-\n\r\n\x06\x04\x06\x07\x8d\xf4\x03\x12\x03a\x02-\n\
    \n\n\x03\x04\x06\x07\x12\x03b\x02-\n\r\n\x06\x04\x06\x07\x81\xf4\x03\x12\
    \x03b\x02-\n\x0b\n\x04\x04\x06\x02\0\x12\x03d\x02k\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03d\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03d\x1b,\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03d34\n\x0c\n\x05\x04\x06\x02\0\x08\
    \x12\x03d5j\n\x0f\n\x08\x04\x06\x02\0\x08\xee\xfb\x03\x12\x03d6i\n\x0b\n\
    \x04\x04\x06\x02\x01\x12\x03e\x02o\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\
    \x03e\x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03e\x1b0\n\x0c\n\x05\
    \x04\x06\x02\x01\x03\x12\x03e34\n\x0c\n\x05\x04\x06\x02\x01\x08\x12\x03e\
    5n\n\x0f\n\x08\x04\x06\x02\x01\x08\xee\xfb\x03\x12\x03e6m\n\x0b\n\x04\
    \x04\x06\x02\x02\x12\x03f\x02o\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03f\
    \x02\x08\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03f\x1b0\n\x0c\n\x05\x04\
    \x06\x02\x02\x03\x12\x03f34\n\x0c\n\x05\x04\x06\x02\x02\x08\x12\x03f5n\n\
    \x0f\n\x08\x04\x06\x02\x02\x08\xee\xfb\x03\x12\x03f6m\n\x0b\n\x04\x04\
    \x06\x02\x03\x12\x03g\x02T\n\x0c\n\x05\x04\x06\x02\x03\x06\x12\x03g\x02\
    \x1a\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03g\x1b!\n\x0c\n\x05\x04\x06\
    \x02\x03\x03\x12\x03g34\n\x0c\n\x05\x04\x06\x02\x03\x08\x12\x03g5S\n\x0f\
    \n\x08\x04\x06\x02\x03\x08\xe9\xfb\x03\x12\x03g6R\nW\n\x02\x04\x07\x12\
    \x04k\0m\x01\x1aK\x20MsgBeginRedelegateResponse\x20defines\x20the\x20Msg\
    /BeginRedelegate\x20response\x20type.\n\n\n\n\x03\x04\x07\x01\x12\x03k\
    \x08\"\n\x0b\n\x04\x04\x07\x02\0\x12\x03l\x02k\n\x0c\n\x05\x04\x07\x02\0\
    \x06\x12\x03l\x02\x1b\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03l\x1c+\n\x0c\
    \n\x05\x04\x07\x02\0\x03\x12\x03l./\n\x0c\n\x05\x04\x07\x02\0\x08\x12\
    \x03l0j\n\x0f\n\x08\x04\x07\x02\0\x08\xe9\xfb\x03\x12\x03l1M\n\x0f\n\x08\
    \x04\x07\x02\0\x08\xf2\xfb\x03\x12\x03lOi\nr\n\x02\x04\x08\x12\x04q\0x\
    \x01\x1af\x20MsgUndelegate\x20defines\x20a\x20SDK\x20message\x20for\x20p\
    erforming\x20an\x20undelegation\x20from\x20a\n\x20delegate\x20and\x20a\
    \x20validator.\n\n\n\n\x03\x04\x08\x01\x12\x03q\x08\x15\n\n\n\x03\x04\
    \x08\x07\x12\x03r\x02-\n\r\n\x06\x04\x08\x07\x8d\xf4\x03\x12\x03r\x02-\n\
    \n\n\x03\x04\x08\x07\x12\x03s\x02-\n\r\n\x06\x04\x08\x07\x81\xf4\x03\x12\
    \x03s\x02-\n\x0b\n\x04\x04\x08\x02\0\x12\x03u\x02g\n\x0c\n\x05\x04\x08\
    \x02\0\x05\x12\x03u\x02\x08\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03u\x1b,\
    \n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03u/0\n\x0c\n\x05\x04\x08\x02\0\x08\
    \x12\x03u1f\n\x0f\n\x08\x04\x08\x02\0\x08\xee\xfb\x03\x12\x03u2e\n\x0b\n\
    \x04\x04\x08\x02\x01\x12\x03v\x02g\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\
    \x03v\x02\x08\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03v\x1b,\n\x0c\n\x05\
    \x04\x08\x02\x01\x03\x12\x03v/0\n\x0c\n\x05\x04\x08\x02\x01\x08\x12\x03v\
    1f\n\x0f\n\x08\x04\x08\x02\x01\x08\xee\xfb\x03\x12\x03v2e\n\x0b\n\x04\
    \x04\x08\x02\x02\x12\x03w\x02P\n\x0c\n\x05\x04\x08\x02\x02\x06\x12\x03w\
    \x02\x1a\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03w\x1b!\n\x0c\n\x05\x04\
    \x08\x02\x02\x03\x12\x03w/0\n\x0c\n\x05\x04\x08\x02\x02\x08\x12\x03w1O\n\
    \x0f\n\x08\x04\x08\x02\x02\x08\xe9\xfb\x03\x12\x03w2N\nM\n\x02\x04\t\x12\
    \x04{\0}\x01\x1aA\x20MsgUndelegateResponse\x20defines\x20the\x20Msg/Unde\
    legate\x20response\x20type.\n\n\n\n\x03\x04\t\x01\x12\x03{\x08\x1d\n\x0b\
    \n\x04\x04\t\x02\0\x12\x03|\x02k\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03|\
    \x02\x1b\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03|\x1c+\n\x0c\n\x05\x04\t\x02\
    \0\x03\x12\x03|./\n\x0c\n\x05\x04\t\x02\0\x08\x12\x03|0j\n\x0f\n\x08\x04\
    \t\x02\0\x08\xe9\xfb\x03\x12\x03|1M\n\x0f\n\x08\x04\t\x02\0\x08\xf2\xfb\
    \x03\x12\x03|Oib\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::staking::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(MsgCreateValidator::generated_message_descriptor_data());
            messages.push(MsgCreateValidatorResponse::generated_message_descriptor_data());
            messages.push(MsgEditValidator::generated_message_descriptor_data());
            messages.push(MsgEditValidatorResponse::generated_message_descriptor_data());
            messages.push(MsgDelegate::generated_message_descriptor_data());
            messages.push(MsgDelegateResponse::generated_message_descriptor_data());
            messages.push(MsgBeginRedelegate::generated_message_descriptor_data());
            messages.push(MsgBeginRedelegateResponse::generated_message_descriptor_data());
            messages.push(MsgUndelegate::generated_message_descriptor_data());
            messages.push(MsgUndelegateResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
