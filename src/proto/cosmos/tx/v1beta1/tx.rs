// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/tx/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Tx is the standard type used for broadcasting transactions.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.Tx)
pub struct Tx {
    // message fields
    ///  body is the processable content of the transaction
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.Tx.body)
    pub body: ::protobuf::MessageField<TxBody>,
    ///  auth_info is the authorization related content of the transaction,
    ///  specifically signers, signer modes and fee
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.Tx.auth_info)
    pub auth_info: ::protobuf::MessageField<AuthInfo>,
    ///  signatures is a list of signatures that matches the length and order of
    ///  AuthInfo's signer_infos to allow connecting signature meta information like
    ///  public key and signing mode by position.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.Tx.signatures)
    pub signatures: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.Tx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Tx {
    fn default() -> &'a Tx {
        <Tx as ::protobuf::Message>::default_instance()
    }
}

impl Tx {
    pub fn new() -> Tx {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TxBody>(
            "body",
            |m: &Tx| { &m.body },
            |m: &mut Tx| { &mut m.body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthInfo>(
            "auth_info",
            |m: &Tx| { &m.auth_info },
            |m: &mut Tx| { &mut m.auth_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signatures",
            |m: &Tx| { &m.signatures },
            |m: &mut Tx| { &mut m.signatures },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Tx>(
            "Tx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Tx {
    const NAME: &'static str = "Tx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.body)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth_info)?;
                },
                26 => {
                    self.signatures.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.auth_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.signatures {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.body.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.auth_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.signatures {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Tx {
        Tx::new()
    }

    fn clear(&mut self) {
        self.body.clear();
        self.auth_info.clear();
        self.signatures.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Tx {
        static instance: Tx = Tx {
            body: ::protobuf::MessageField::none(),
            auth_info: ::protobuf::MessageField::none(),
            signatures: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Tx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Tx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Tx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TxRaw is a variant of Tx that pins the signer's exact binary representation
///  of body and auth_info. This is used for signing, broadcasting and
///  verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and
///  the hash `sha256(serialize(tx: TxRaw))` becomes the "txhash", commonly used
///  as the transaction ID.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.TxRaw)
pub struct TxRaw {
    // message fields
    ///  body_bytes is a protobuf serialization of a TxBody that matches the
    ///  representation in SignDoc.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.TxRaw.body_bytes)
    pub body_bytes: ::std::vec::Vec<u8>,
    ///  auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
    ///  representation in SignDoc.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
    pub auth_info_bytes: ::std::vec::Vec<u8>,
    ///  signatures is a list of signatures that matches the length and order of
    ///  AuthInfo's signer_infos to allow connecting signature meta information like
    ///  public key and signing mode by position.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.TxRaw.signatures)
    pub signatures: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.TxRaw.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TxRaw {
    fn default() -> &'a TxRaw {
        <TxRaw as ::protobuf::Message>::default_instance()
    }
}

impl TxRaw {
    pub fn new() -> TxRaw {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body_bytes",
            |m: &TxRaw| { &m.body_bytes },
            |m: &mut TxRaw| { &mut m.body_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auth_info_bytes",
            |m: &TxRaw| { &m.auth_info_bytes },
            |m: &mut TxRaw| { &mut m.auth_info_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signatures",
            |m: &TxRaw| { &m.signatures },
            |m: &mut TxRaw| { &mut m.signatures },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TxRaw>(
            "TxRaw",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TxRaw {
    const NAME: &'static str = "TxRaw";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.body_bytes = is.read_bytes()?;
                },
                18 => {
                    self.auth_info_bytes = is.read_bytes()?;
                },
                26 => {
                    self.signatures.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.body_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.body_bytes);
        }
        if !self.auth_info_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.auth_info_bytes);
        }
        for value in &self.signatures {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.body_bytes.is_empty() {
            os.write_bytes(1, &self.body_bytes)?;
        }
        if !self.auth_info_bytes.is_empty() {
            os.write_bytes(2, &self.auth_info_bytes)?;
        }
        for v in &self.signatures {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TxRaw {
        TxRaw::new()
    }

    fn clear(&mut self) {
        self.body_bytes.clear();
        self.auth_info_bytes.clear();
        self.signatures.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TxRaw {
        static instance: TxRaw = TxRaw {
            body_bytes: ::std::vec::Vec::new(),
            auth_info_bytes: ::std::vec::Vec::new(),
            signatures: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TxRaw {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TxRaw").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TxRaw {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxRaw {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.SignDoc)
pub struct SignDoc {
    // message fields
    ///  body_bytes is protobuf serialization of a TxBody that matches the
    ///  representation in TxRaw.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SignDoc.body_bytes)
    pub body_bytes: ::std::vec::Vec<u8>,
    ///  auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
    ///  representation in TxRaw.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
    pub auth_info_bytes: ::std::vec::Vec<u8>,
    ///  chain_id is the unique identifier of the chain this transaction targets.
    ///  It prevents signed transactions from being used on another chain by an
    ///  attacker
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SignDoc.chain_id)
    pub chain_id: ::std::string::String,
    ///  account_number is the account number of the account in state
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SignDoc.account_number)
    pub account_number: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.SignDoc.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignDoc {
    fn default() -> &'a SignDoc {
        <SignDoc as ::protobuf::Message>::default_instance()
    }
}

impl SignDoc {
    pub fn new() -> SignDoc {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body_bytes",
            |m: &SignDoc| { &m.body_bytes },
            |m: &mut SignDoc| { &mut m.body_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auth_info_bytes",
            |m: &SignDoc| { &m.auth_info_bytes },
            |m: &mut SignDoc| { &mut m.auth_info_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &SignDoc| { &m.chain_id },
            |m: &mut SignDoc| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_number",
            |m: &SignDoc| { &m.account_number },
            |m: &mut SignDoc| { &mut m.account_number },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignDoc>(
            "SignDoc",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignDoc {
    const NAME: &'static str = "SignDoc";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.body_bytes = is.read_bytes()?;
                },
                18 => {
                    self.auth_info_bytes = is.read_bytes()?;
                },
                26 => {
                    self.chain_id = is.read_string()?;
                },
                32 => {
                    self.account_number = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.body_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.body_bytes);
        }
        if !self.auth_info_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.auth_info_bytes);
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.chain_id);
        }
        if self.account_number != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.account_number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.body_bytes.is_empty() {
            os.write_bytes(1, &self.body_bytes)?;
        }
        if !self.auth_info_bytes.is_empty() {
            os.write_bytes(2, &self.auth_info_bytes)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(3, &self.chain_id)?;
        }
        if self.account_number != 0 {
            os.write_uint64(4, self.account_number)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignDoc {
        SignDoc::new()
    }

    fn clear(&mut self) {
        self.body_bytes.clear();
        self.auth_info_bytes.clear();
        self.chain_id.clear();
        self.account_number = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignDoc {
        static instance: SignDoc = SignDoc {
            body_bytes: ::std::vec::Vec::new(),
            auth_info_bytes: ::std::vec::Vec::new(),
            chain_id: ::std::string::String::new(),
            account_number: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignDoc {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignDoc").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignDoc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignDoc {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TxBody is the body of a transaction that all signers sign over.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.TxBody)
pub struct TxBody {
    // message fields
    ///  messages is a list of messages to be executed. The required signers of
    ///  those messages define the number and order of elements in AuthInfo's
    ///  signer_infos and Tx's signatures. Each required signer address is added to
    ///  the list only the first time it occurs.
    ///  By convention, the first required signer (usually from the first message)
    ///  is referred to as the primary signer and pays the fee for the whole
    ///  transaction.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.TxBody.messages)
    pub messages: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    ///  memo is any arbitrary note/comment to be added to the transaction.
    ///  WARNING: in clients, any publicly exposed text should not be called memo,
    ///  but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.TxBody.memo)
    pub memo: ::std::string::String,
    ///  timeout is the block height after which this transaction will not
    ///  be processed by the chain
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.TxBody.timeout_height)
    pub timeout_height: u64,
    ///  extension_options are arbitrary options that can be added by chains
    ///  when the default options are not sufficient. If any of these are present
    ///  and can't be handled, the transaction will be rejected
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.TxBody.extension_options)
    pub extension_options: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    ///  extension_options are arbitrary options that can be added by chains
    ///  when the default options are not sufficient. If any of these are present
    ///  and can't be handled, they will be ignored
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
    pub non_critical_extension_options: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.TxBody.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TxBody {
    fn default() -> &'a TxBody {
        <TxBody as ::protobuf::Message>::default_instance()
    }
}

impl TxBody {
    pub fn new() -> TxBody {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &TxBody| { &m.messages },
            |m: &mut TxBody| { &mut m.messages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memo",
            |m: &TxBody| { &m.memo },
            |m: &mut TxBody| { &mut m.memo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timeout_height",
            |m: &TxBody| { &m.timeout_height },
            |m: &mut TxBody| { &mut m.timeout_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "extension_options",
            |m: &TxBody| { &m.extension_options },
            |m: &mut TxBody| { &mut m.extension_options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "non_critical_extension_options",
            |m: &TxBody| { &m.non_critical_extension_options },
            |m: &mut TxBody| { &mut m.non_critical_extension_options },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TxBody>(
            "TxBody",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TxBody {
    const NAME: &'static str = "TxBody";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.messages.push(is.read_message()?);
                },
                18 => {
                    self.memo = is.read_string()?;
                },
                24 => {
                    self.timeout_height = is.read_uint64()?;
                },
                8186 => {
                    self.extension_options.push(is.read_message()?);
                },
                16378 => {
                    self.non_critical_extension_options.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.memo);
        }
        if self.timeout_height != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.timeout_height);
        }
        for value in &self.extension_options {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.non_critical_extension_options {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.memo.is_empty() {
            os.write_string(2, &self.memo)?;
        }
        if self.timeout_height != 0 {
            os.write_uint64(3, self.timeout_height)?;
        }
        for v in &self.extension_options {
            ::protobuf::rt::write_message_field_with_cached_size(1023, v, os)?;
        };
        for v in &self.non_critical_extension_options {
            ::protobuf::rt::write_message_field_with_cached_size(2047, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TxBody {
        TxBody::new()
    }

    fn clear(&mut self) {
        self.messages.clear();
        self.memo.clear();
        self.timeout_height = 0;
        self.extension_options.clear();
        self.non_critical_extension_options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TxBody {
        static instance: TxBody = TxBody {
            messages: ::std::vec::Vec::new(),
            memo: ::std::string::String::new(),
            timeout_height: 0,
            extension_options: ::std::vec::Vec::new(),
            non_critical_extension_options: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TxBody {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TxBody").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TxBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxBody {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  AuthInfo describes the fee and signer modes that are used to sign a
///  transaction.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.AuthInfo)
pub struct AuthInfo {
    // message fields
    ///  signer_infos defines the signing modes for the required signers. The number
    ///  and order of elements must match the required signers from TxBody's
    ///  messages. The first element is the primary signer and the one which pays
    ///  the fee.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.AuthInfo.signer_infos)
    pub signer_infos: ::std::vec::Vec<SignerInfo>,
    ///  Fee is the fee and gas limit for the transaction. The first signer is the
    ///  primary signer and the one which pays the fee. The fee can be calculated
    ///  based on the cost of evaluating the body and doing signature verification
    ///  of the signers. This can be estimated via simulation.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.AuthInfo.fee)
    pub fee: ::protobuf::MessageField<Fee>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.AuthInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthInfo {
    fn default() -> &'a AuthInfo {
        <AuthInfo as ::protobuf::Message>::default_instance()
    }
}

impl AuthInfo {
    pub fn new() -> AuthInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signer_infos",
            |m: &AuthInfo| { &m.signer_infos },
            |m: &mut AuthInfo| { &mut m.signer_infos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Fee>(
            "fee",
            |m: &AuthInfo| { &m.fee },
            |m: &mut AuthInfo| { &mut m.fee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthInfo>(
            "AuthInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthInfo {
    const NAME: &'static str = "AuthInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signer_infos.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.fee)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.signer_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.fee.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.signer_infos {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.fee.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthInfo {
        AuthInfo::new()
    }

    fn clear(&mut self) {
        self.signer_infos.clear();
        self.fee.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthInfo {
        static instance: AuthInfo = AuthInfo {
            signer_infos: ::std::vec::Vec::new(),
            fee: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SignerInfo describes the public key and signing mode of a single top-level
///  signer.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.SignerInfo)
pub struct SignerInfo {
    // message fields
    ///  public_key is the public key of the signer. It is optional for accounts
    ///  that already exist in state. If unset, the verifier can use the required \
    ///  signer address for this position and lookup the public key.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SignerInfo.public_key)
    pub public_key: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  mode_info describes the signing mode of the signer and is a nested
    ///  structure to support nested multisig pubkey's
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SignerInfo.mode_info)
    pub mode_info: ::protobuf::MessageField<ModeInfo>,
    ///  sequence is the sequence of the account, which describes the
    ///  number of committed transactions signed by a given address. It is used to
    ///  prevent replay attacks.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SignerInfo.sequence)
    pub sequence: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.SignerInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignerInfo {
    fn default() -> &'a SignerInfo {
        <SignerInfo as ::protobuf::Message>::default_instance()
    }
}

impl SignerInfo {
    pub fn new() -> SignerInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "public_key",
            |m: &SignerInfo| { &m.public_key },
            |m: &mut SignerInfo| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ModeInfo>(
            "mode_info",
            |m: &SignerInfo| { &m.mode_info },
            |m: &mut SignerInfo| { &mut m.mode_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &SignerInfo| { &m.sequence },
            |m: &mut SignerInfo| { &mut m.sequence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignerInfo>(
            "SignerInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignerInfo {
    const NAME: &'static str = "SignerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.public_key)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mode_info)?;
                },
                24 => {
                    self.sequence = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.mode_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.sequence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.mode_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.sequence != 0 {
            os.write_uint64(3, self.sequence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignerInfo {
        SignerInfo::new()
    }

    fn clear(&mut self) {
        self.public_key.clear();
        self.mode_info.clear();
        self.sequence = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignerInfo {
        static instance: SignerInfo = SignerInfo {
            public_key: ::protobuf::MessageField::none(),
            mode_info: ::protobuf::MessageField::none(),
            sequence: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignerInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignerInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ModeInfo describes the signing mode of a single or nested multisig signer.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.ModeInfo)
pub struct ModeInfo {
    // message oneof groups
    pub sum: ::std::option::Option<mode_info::Sum>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.ModeInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ModeInfo {
    fn default() -> &'a ModeInfo {
        <ModeInfo as ::protobuf::Message>::default_instance()
    }
}

impl ModeInfo {
    pub fn new() -> ModeInfo {
        ::std::default::Default::default()
    }

    // .cosmos.tx.v1beta1.ModeInfo.Single single = 1;

    pub fn single(&self) -> &mode_info::Single {
        match self.sum {
            ::std::option::Option::Some(mode_info::Sum::Single(ref v)) => v,
            _ => <mode_info::Single as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_single(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_single(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(mode_info::Sum::Single(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_single(&mut self, v: mode_info::Single) {
        self.sum = ::std::option::Option::Some(mode_info::Sum::Single(v))
    }

    // Mutable pointer to the field.
    pub fn mut_single(&mut self) -> &mut mode_info::Single {
        if let ::std::option::Option::Some(mode_info::Sum::Single(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(mode_info::Sum::Single(mode_info::Single::new()));
        }
        match self.sum {
            ::std::option::Option::Some(mode_info::Sum::Single(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_single(&mut self) -> mode_info::Single {
        if self.has_single() {
            match self.sum.take() {
                ::std::option::Option::Some(mode_info::Sum::Single(v)) => v,
                _ => panic!(),
            }
        } else {
            mode_info::Single::new()
        }
    }

    // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2;

    pub fn multi(&self) -> &mode_info::Multi {
        match self.sum {
            ::std::option::Option::Some(mode_info::Sum::Multi(ref v)) => v,
            _ => <mode_info::Multi as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_multi(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_multi(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(mode_info::Sum::Multi(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multi(&mut self, v: mode_info::Multi) {
        self.sum = ::std::option::Option::Some(mode_info::Sum::Multi(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multi(&mut self) -> &mut mode_info::Multi {
        if let ::std::option::Option::Some(mode_info::Sum::Multi(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(mode_info::Sum::Multi(mode_info::Multi::new()));
        }
        match self.sum {
            ::std::option::Option::Some(mode_info::Sum::Multi(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multi(&mut self) -> mode_info::Multi {
        if self.has_multi() {
            match self.sum.take() {
                ::std::option::Option::Some(mode_info::Sum::Multi(v)) => v,
                _ => panic!(),
            }
        } else {
            mode_info::Multi::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, mode_info::Single>(
            "single",
            ModeInfo::has_single,
            ModeInfo::single,
            ModeInfo::mut_single,
            ModeInfo::set_single,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, mode_info::Multi>(
            "multi",
            ModeInfo::has_multi,
            ModeInfo::multi,
            ModeInfo::mut_multi,
            ModeInfo::set_multi,
        ));
        oneofs.push(mode_info::Sum::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ModeInfo>(
            "ModeInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ModeInfo {
    const NAME: &'static str = "ModeInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sum = ::std::option::Option::Some(mode_info::Sum::Single(is.read_message()?));
                },
                18 => {
                    self.sum = ::std::option::Option::Some(mode_info::Sum::Multi(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &mode_info::Sum::Single(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mode_info::Sum::Multi(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &mode_info::Sum::Single(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &mode_info::Sum::Multi(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ModeInfo {
        ModeInfo::new()
    }

    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ModeInfo {
        static instance: ModeInfo = ModeInfo {
            sum: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ModeInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ModeInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ModeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModeInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ModeInfo`
pub mod mode_info {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:cosmos.tx.v1beta1.ModeInfo.sum)
    pub enum Sum {
        // @@protoc_insertion_point(oneof_field:cosmos.tx.v1beta1.ModeInfo.single)
        Single(Single),
        // @@protoc_insertion_point(oneof_field:cosmos.tx.v1beta1.ModeInfo.multi)
        Multi(Multi),
    }

    impl ::protobuf::Oneof for Sum {
    }

    impl ::protobuf::OneofFull for Sum {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ModeInfo as ::protobuf::MessageFull>::descriptor().oneof_by_name("sum").unwrap()).clone()
        }
    }

    impl Sum {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Sum>("sum")
        }
    }
    ///  Single is the mode info for a single signer. It is structured as a message
    ///  to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
    ///  future
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:cosmos.tx.v1beta1.ModeInfo.Single)
    pub struct Single {
        // message fields
        ///  mode is the signing mode of the single signer
        // @@protoc_insertion_point(field:cosmos.tx.v1beta1.ModeInfo.Single.mode)
        pub mode: ::protobuf::EnumOrUnknown<super::super::signing::SignMode>,
        // special fields
        // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.ModeInfo.Single.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Single {
        fn default() -> &'a Single {
            <Single as ::protobuf::Message>::default_instance()
        }
    }

    impl Single {
        pub fn new() -> Single {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "mode",
                |m: &Single| { &m.mode },
                |m: &mut Single| { &mut m.mode },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Single>(
                "ModeInfo.Single",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Single {
        const NAME: &'static str = "Single";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.mode = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.mode != ::protobuf::EnumOrUnknown::new(super::super::signing::SignMode::SIGN_MODE_UNSPECIFIED) {
                my_size += ::protobuf::rt::int32_size(1, self.mode.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.mode != ::protobuf::EnumOrUnknown::new(super::super::signing::SignMode::SIGN_MODE_UNSPECIFIED) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.mode))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Single {
            Single::new()
        }

        fn clear(&mut self) {
            self.mode = ::protobuf::EnumOrUnknown::new(super::super::signing::SignMode::SIGN_MODE_UNSPECIFIED);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Single {
            static instance: Single = Single {
                mode: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Single {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModeInfo.Single").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Single {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Single {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  Multi is the mode info for a multisig public key
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:cosmos.tx.v1beta1.ModeInfo.Multi)
    pub struct Multi {
        // message fields
        ///  bitarray specifies which keys within the multisig are signing
        // @@protoc_insertion_point(field:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
        pub bitarray: ::protobuf::MessageField<super::super::multisig::CompactBitArray>,
        ///  mode_infos is the corresponding modes of the signers of the multisig
        ///  which could include nested multisig public keys
        // @@protoc_insertion_point(field:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
        pub mode_infos: ::std::vec::Vec<super::ModeInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.ModeInfo.Multi.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Multi {
        fn default() -> &'a Multi {
            <Multi as ::protobuf::Message>::default_instance()
        }
    }

    impl Multi {
        pub fn new() -> Multi {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::multisig::CompactBitArray>(
                "bitarray",
                |m: &Multi| { &m.bitarray },
                |m: &mut Multi| { &mut m.bitarray },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "mode_infos",
                |m: &Multi| { &m.mode_infos },
                |m: &mut Multi| { &mut m.mode_infos },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Multi>(
                "ModeInfo.Multi",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Multi {
        const NAME: &'static str = "Multi";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.bitarray)?;
                    },
                    18 => {
                        self.mode_infos.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.bitarray.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            for value in &self.mode_infos {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.bitarray.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            for v in &self.mode_infos {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Multi {
            Multi::new()
        }

        fn clear(&mut self) {
            self.bitarray.clear();
            self.mode_infos.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Multi {
            static instance: Multi = Multi {
                bitarray: ::protobuf::MessageField::none(),
                mode_infos: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Multi {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModeInfo.Multi").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Multi {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Multi {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Fee includes the amount of coins paid in fees and the maximum
///  gas to be used by the transaction. The ratio yields an effective "gasprice",
///  which must be above some miminum to be accepted into the mempool.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.Fee)
pub struct Fee {
    // message fields
    ///  amount is the amount of coins to be paid as a fee
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.Fee.amount)
    pub amount: ::std::vec::Vec<super::coin::Coin>,
    ///  gas_limit is the maximum gas that can be used in transaction processing
    ///  before an out of gas error occurs
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.Fee.gas_limit)
    pub gas_limit: u64,
    ///  if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
    ///  the payer must be a tx signer (and thus have signed this field in AuthInfo).
    ///  setting this field does *not* change the ordering of required signers for the transaction.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.Fee.payer)
    pub payer: ::std::string::String,
    ///  if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
    ///  to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
    ///  not support fee grants, this will fail
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.Fee.granter)
    pub granter: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.Fee.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Fee {
    fn default() -> &'a Fee {
        <Fee as ::protobuf::Message>::default_instance()
    }
}

impl Fee {
    pub fn new() -> Fee {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &Fee| { &m.amount },
            |m: &mut Fee| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_limit",
            |m: &Fee| { &m.gas_limit },
            |m: &mut Fee| { &mut m.gas_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payer",
            |m: &Fee| { &m.payer },
            |m: &mut Fee| { &mut m.payer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granter",
            |m: &Fee| { &m.granter },
            |m: &mut Fee| { &mut m.granter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Fee>(
            "Fee",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Fee {
    const NAME: &'static str = "Fee";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.amount.push(is.read_message()?);
                },
                16 => {
                    self.gas_limit = is.read_uint64()?;
                },
                26 => {
                    self.payer = is.read_string()?;
                },
                34 => {
                    self.granter = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.gas_limit);
        }
        if !self.payer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.payer);
        }
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.granter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.gas_limit != 0 {
            os.write_uint64(2, self.gas_limit)?;
        }
        if !self.payer.is_empty() {
            os.write_string(3, &self.payer)?;
        }
        if !self.granter.is_empty() {
            os.write_string(4, &self.granter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Fee {
        Fee::new()
    }

    fn clear(&mut self) {
        self.amount.clear();
        self.gas_limit = 0;
        self.payer.clear();
        self.granter.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Fee {
        static instance: Fee = Fee {
            amount: ::std::vec::Vec::new(),
            gas_limit: 0,
            payer: ::std::string::String::new(),
            granter: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Fee {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Fee").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Fee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fee {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1acosmos/tx/v1beta1/tx.proto\x12\x11cosmos.tx.v1beta1\x1a\x14gogopro\
    to/gogo.proto\x1a-cosmos/crypto/multisig/v1beta1/multisig.proto\x1a\x1ec\
    osmos/base/v1beta1/coin.proto\x1a'cosmos/tx/signing/v1beta1/signing.prot\
    o\x1a\x19google/protobuf/any.proto\"\x8d\x01\n\x02Tx\x12-\n\x04body\x18\
    \x01\x20\x01(\x0b2\x19.cosmos.tx.v1beta1.TxBodyR\x04body\x128\n\tauth_in\
    fo\x18\x02\x20\x01(\x0b2\x1b.cosmos.tx.v1beta1.AuthInfoR\x08authInfo\x12\
    \x1e\n\nsignatures\x18\x03\x20\x03(\x0cR\nsignatures\"n\n\x05TxRaw\x12\
    \x1d\n\nbody_bytes\x18\x01\x20\x01(\x0cR\tbodyBytes\x12&\n\x0fauth_info_\
    bytes\x18\x02\x20\x01(\x0cR\rauthInfoBytes\x12\x1e\n\nsignatures\x18\x03\
    \x20\x03(\x0cR\nsignatures\"\x92\x01\n\x07SignDoc\x12\x1d\n\nbody_bytes\
    \x18\x01\x20\x01(\x0cR\tbodyBytes\x12&\n\x0fauth_info_bytes\x18\x02\x20\
    \x01(\x0cR\rauthInfoBytes\x12\x19\n\x08chain_id\x18\x03\x20\x01(\tR\x07c\
    hainId\x12%\n\x0eaccount_number\x18\x04\x20\x01(\x04R\raccountNumber\"\
    \x95\x02\n\x06TxBody\x120\n\x08messages\x18\x01\x20\x03(\x0b2\x14.google\
    .protobuf.AnyR\x08messages\x12\x12\n\x04memo\x18\x02\x20\x01(\tR\x04memo\
    \x12%\n\x0etimeout_height\x18\x03\x20\x01(\x04R\rtimeoutHeight\x12B\n\
    \x11extension_options\x18\xff\x07\x20\x03(\x0b2\x14.google.protobuf.AnyR\
    \x10extensionOptions\x12Z\n\x1enon_critical_extension_options\x18\xff\
    \x0f\x20\x03(\x0b2\x14.google.protobuf.AnyR\x1bnonCriticalExtensionOptio\
    ns\"v\n\x08AuthInfo\x12@\n\x0csigner_infos\x18\x01\x20\x03(\x0b2\x1d.cos\
    mos.tx.v1beta1.SignerInfoR\x0bsignerInfos\x12(\n\x03fee\x18\x02\x20\x01(\
    \x0b2\x16.cosmos.tx.v1beta1.FeeR\x03fee\"\x97\x01\n\nSignerInfo\x123\n\n\
    public_key\x18\x01\x20\x01(\x0b2\x14.google.protobuf.AnyR\tpublicKey\x12\
    8\n\tmode_info\x18\x02\x20\x01(\x0b2\x1b.cosmos.tx.v1beta1.ModeInfoR\x08\
    modeInfo\x12\x1a\n\x08sequence\x18\x03\x20\x01(\x04R\x08sequence\"\xe0\
    \x02\n\x08ModeInfo\x12<\n\x06single\x18\x01\x20\x01(\x0b2\".cosmos.tx.v1\
    beta1.ModeInfo.SingleH\0R\x06single\x129\n\x05multi\x18\x02\x20\x01(\x0b\
    2!.cosmos.tx.v1beta1.ModeInfo.MultiH\0R\x05multi\x1aA\n\x06Single\x127\n\
    \x04mode\x18\x01\x20\x01(\x0e2#.cosmos.tx.signing.v1beta1.SignModeR\x04m\
    ode\x1a\x90\x01\n\x05Multi\x12K\n\x08bitarray\x18\x01\x20\x01(\x0b2/.cos\
    mos.crypto.multisig.v1beta1.CompactBitArrayR\x08bitarray\x12:\n\nmode_in\
    fos\x18\x02\x20\x03(\x0b2\x1b.cosmos.tx.v1beta1.ModeInfoR\tmodeInfosB\
    \x05\n\x03sum\"\xb7\x01\n\x03Fee\x12c\n\x06amount\x18\x01\x20\x03(\x0b2\
    \x19.cosmos.base.v1beta1.CoinR\x06amountB0\xaa\xdf\x1f(github.com/cosmos\
    /cosmos-sdk/types.Coins\xc8\xde\x1f\0\x12\x1b\n\tgas_limit\x18\x02\x20\
    \x01(\x04R\x08gasLimit\x12\x14\n\x05payer\x18\x03\x20\x01(\tR\x05payer\
    \x12\x18\n\x07granter\x18\x04\x20\x01(\tR\x07granterB'Z%github.com/cosmo\
    s/cosmos-sdk/types/txJ\xf3=\n\x07\x12\x05\0\0\xb6\x01\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1a\n\t\n\x02\x03\0\
    \x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\x12\x03\x04\07\n\t\n\x02\x03\x02\
    \x12\x03\x05\0(\n\t\n\x02\x03\x03\x12\x03\x06\01\n\t\n\x02\x03\x04\x12\
    \x03\x07\0#\n\x08\n\x01\x08\x12\x03\t\0<\n\t\n\x02\x08\x0b\x12\x03\t\0<\
    \nI\n\x02\x04\0\x12\x04\x0c\0\x18\x01\x1a=\x20Tx\x20is\x20the\x20standar\
    d\x20type\x20used\x20for\x20broadcasting\x20transactions.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x0c\x08\n\nA\n\x04\x04\0\x02\0\x12\x03\x0e\x02\x12\
    \x1a4\x20body\x20is\x20the\x20processable\x20content\x20of\x20the\x20tra\
    nsaction\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0e\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\
    \x10\x11\n}\n\x04\x04\0\x02\x01\x12\x03\x12\x02\x19\x1ap\x20auth_info\
    \x20is\x20the\x20authorization\x20related\x20content\x20of\x20the\x20tra\
    nsaction,\n\x20specifically\x20signers,\x20signer\x20modes\x20and\x20fee\
    \n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x12\x02\n\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x12\x0b\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x12\
    \x17\x18\n\xce\x01\n\x04\x04\0\x02\x02\x12\x03\x17\x02\x20\x1a\xc0\x01\
    \x20signatures\x20is\x20a\x20list\x20of\x20signatures\x20that\x20matches\
    \x20the\x20length\x20and\x20order\x20of\n\x20AuthInfo's\x20signer_infos\
    \x20to\x20allow\x20connecting\x20signature\x20meta\x20information\x20lik\
    e\n\x20public\x20key\x20and\x20signing\x20mode\x20by\x20position.\n\n\
    \x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x17\x02\n\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x17\x0b\x10\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x17\x11\
    \x1b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x17\x1e\x1f\n\xcf\x02\n\x02\
    \x04\x01\x12\x04\x1f\0,\x01\x1a\xc2\x02\x20TxRaw\x20is\x20a\x20variant\
    \x20of\x20Tx\x20that\x20pins\x20the\x20signer's\x20exact\x20binary\x20re\
    presentation\n\x20of\x20body\x20and\x20auth_info.\x20This\x20is\x20used\
    \x20for\x20signing,\x20broadcasting\x20and\n\x20verification.\x20The\x20\
    binary\x20`serialize(tx:\x20TxRaw)`\x20is\x20stored\x20in\x20Tendermint\
    \x20and\n\x20the\x20hash\x20`sha256(serialize(tx:\x20TxRaw))`\x20becomes\
    \x20the\x20\"txhash\",\x20commonly\x20used\n\x20as\x20the\x20transaction\
    \x20ID.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1f\x08\r\nn\n\x04\x04\x01\x02\0\
    \x12\x03\"\x02\x17\x1aa\x20body_bytes\x20is\x20a\x20protobuf\x20serializ\
    ation\x20of\x20a\x20TxBody\x20that\x20matches\x20the\n\x20representation\
    \x20in\x20SignDoc.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\"\x02\x07\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\"\x08\x12\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\"\x15\x16\nv\n\x04\x04\x01\x02\x01\x12\x03&\x02\x1c\x1ai\
    \x20auth_info_bytes\x20is\x20a\x20protobuf\x20serialization\x20of\x20an\
    \x20AuthInfo\x20that\x20matches\x20the\n\x20representation\x20in\x20Sign\
    Doc.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03&\x02\x07\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03&\x08\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03&\x1a\x1b\n\xce\x01\n\x04\x04\x01\x02\x02\x12\x03+\x02\x20\x1a\xc0\
    \x01\x20signatures\x20is\x20a\x20list\x20of\x20signatures\x20that\x20mat\
    ches\x20the\x20length\x20and\x20order\x20of\n\x20AuthInfo's\x20signer_in\
    fos\x20to\x20allow\x20connecting\x20signature\x20meta\x20information\x20\
    like\n\x20public\x20key\x20and\x20signing\x20mode\x20by\x20position.\n\n\
    \x0c\n\x05\x04\x01\x02\x02\x04\x12\x03+\x02\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03+\x0b\x10\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03+\x11\
    \x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03+\x1e\x1f\nV\n\x02\x04\x02\
    \x12\x04/\0?\x01\x1aJ\x20SignDoc\x20is\x20the\x20type\x20used\x20for\x20\
    generating\x20sign\x20bytes\x20for\x20SIGN_MODE_DIRECT.\n\n\n\n\x03\x04\
    \x02\x01\x12\x03/\x08\x0f\nj\n\x04\x04\x02\x02\0\x12\x032\x02\x17\x1a]\
    \x20body_bytes\x20is\x20protobuf\x20serialization\x20of\x20a\x20TxBody\
    \x20that\x20matches\x20the\n\x20representation\x20in\x20TxRaw.\n\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x032\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x032\x08\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x032\x15\x16\nt\n\
    \x04\x04\x02\x02\x01\x12\x036\x02\x1c\x1ag\x20auth_info_bytes\x20is\x20a\
    \x20protobuf\x20serialization\x20of\x20an\x20AuthInfo\x20that\x20matches\
    \x20the\n\x20representation\x20in\x20TxRaw.\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x036\x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x036\x08\
    \x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x036\x1a\x1b\n\xaa\x01\n\x04\
    \x04\x02\x02\x02\x12\x03;\x02\x16\x1a\x9c\x01\x20chain_id\x20is\x20the\
    \x20unique\x20identifier\x20of\x20the\x20chain\x20this\x20transaction\
    \x20targets.\n\x20It\x20prevents\x20signed\x20transactions\x20from\x20be\
    ing\x20used\x20on\x20another\x20chain\x20by\x20an\n\x20attacker\n\n\x0c\
    \n\x05\x04\x02\x02\x02\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03;\t\x11\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03;\x14\x15\nK\
    \n\x04\x04\x02\x02\x03\x12\x03>\x02\x1c\x1a>\x20account_number\x20is\x20\
    the\x20account\x20number\x20of\x20the\x20account\x20in\x20state\n\n\x0c\
    \n\x05\x04\x02\x02\x03\x05\x12\x03>\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03>\t\x17\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03>\x1a\x1b\nM\
    \n\x02\x04\x03\x12\x04B\0^\x01\x1aA\x20TxBody\x20is\x20the\x20body\x20of\
    \x20a\x20transaction\x20that\x20all\x20signers\x20sign\x20over.\n\n\n\n\
    \x03\x04\x03\x01\x12\x03B\x08\x0e\n\xaf\x03\n\x04\x04\x03\x02\0\x12\x03J\
    \x02,\x1a\xa1\x03\x20messages\x20is\x20a\x20list\x20of\x20messages\x20to\
    \x20be\x20executed.\x20The\x20required\x20signers\x20of\n\x20those\x20me\
    ssages\x20define\x20the\x20number\x20and\x20order\x20of\x20elements\x20i\
    n\x20AuthInfo's\n\x20signer_infos\x20and\x20Tx's\x20signatures.\x20Each\
    \x20required\x20signer\x20address\x20is\x20added\x20to\n\x20the\x20list\
    \x20only\x20the\x20first\x20time\x20it\x20occurs.\n\x20By\x20convention,\
    \x20the\x20first\x20required\x20signer\x20(usually\x20from\x20the\x20fir\
    st\x20message)\n\x20is\x20referred\x20to\x20as\x20the\x20primary\x20sign\
    er\x20and\x20pays\x20the\x20fee\x20for\x20the\x20whole\n\x20transaction.\
    \n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03J\x02\n\n\x0c\n\x05\x04\x03\x02\
    \0\x06\x12\x03J\x0b\x1e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03J\x1f'\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03J*+\n\xfa\x01\n\x04\x04\x03\x02\x01\
    \x12\x03O\x02\x12\x1a\xec\x01\x20memo\x20is\x20any\x20arbitrary\x20note/\
    comment\x20to\x20be\x20added\x20to\x20the\x20transaction.\n\x20WARNING:\
    \x20in\x20clients,\x20any\x20publicly\x20exposed\x20text\x20should\x20no\
    t\x20be\x20called\x20memo,\n\x20but\x20should\x20be\x20called\x20`note`\
    \x20instead\x20(see\x20https://github.com/cosmos/cosmos-sdk/issues/9122)\
    .\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03O\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x03O\t\r\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03O\x10\
    \x11\nk\n\x04\x04\x03\x02\x02\x12\x03S\x02\x1c\x1a^\x20timeout\x20is\x20\
    the\x20block\x20height\x20after\x20which\x20this\x20transaction\x20will\
    \x20not\n\x20be\x20processed\x20by\x20the\x20chain\n\n\x0c\n\x05\x04\x03\
    \x02\x02\x05\x12\x03S\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03S\t\
    \x17\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03S\x1a\x1b\n\xd5\x01\n\x04\
    \x04\x03\x02\x03\x12\x03X\x028\x1a\xc7\x01\x20extension_options\x20are\
    \x20arbitrary\x20options\x20that\x20can\x20be\x20added\x20by\x20chains\n\
    \x20when\x20the\x20default\x20options\x20are\x20not\x20sufficient.\x20If\
    \x20any\x20of\x20these\x20are\x20present\n\x20and\x20can't\x20be\x20hand\
    led,\x20the\x20transaction\x20will\x20be\x20rejected\n\n\x0c\n\x05\x04\
    \x03\x02\x03\x04\x12\x03X\x02\n\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03X\
    \x0b\x1e\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03X\x1f0\n\x0c\n\x05\x04\
    \x03\x02\x03\x03\x12\x03X37\n\xc9\x01\n\x04\x04\x03\x02\x04\x12\x03]\x02\
    E\x1a\xbb\x01\x20extension_options\x20are\x20arbitrary\x20options\x20tha\
    t\x20can\x20be\x20added\x20by\x20chains\n\x20when\x20the\x20default\x20o\
    ptions\x20are\x20not\x20sufficient.\x20If\x20any\x20of\x20these\x20are\
    \x20present\n\x20and\x20can't\x20be\x20handled,\x20they\x20will\x20be\
    \x20ignored\n\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03]\x02\n\n\x0c\n\x05\
    \x04\x03\x02\x04\x06\x12\x03]\x0b\x1e\n\x0c\n\x05\x04\x03\x02\x04\x01\
    \x12\x03]\x1f=\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03]@D\n_\n\x02\x04\
    \x04\x12\x04b\0n\x01\x1aS\x20AuthInfo\x20describes\x20the\x20fee\x20and\
    \x20signer\x20modes\x20that\x20are\x20used\x20to\x20sign\x20a\n\x20trans\
    action.\n\n\n\n\x03\x04\x04\x01\x12\x03b\x08\x10\n\xf4\x01\n\x04\x04\x04\
    \x02\0\x12\x03g\x02'\x1a\xe6\x01\x20signer_infos\x20defines\x20the\x20si\
    gning\x20modes\x20for\x20the\x20required\x20signers.\x20The\x20number\n\
    \x20and\x20order\x20of\x20elements\x20must\x20match\x20the\x20required\
    \x20signers\x20from\x20TxBody's\n\x20messages.\x20The\x20first\x20elemen\
    t\x20is\x20the\x20primary\x20signer\x20and\x20the\x20one\x20which\x20pay\
    s\n\x20the\x20fee.\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03g\x02\n\n\x0c\
    \n\x05\x04\x04\x02\0\x06\x12\x03g\x0b\x15\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03g\x16\"\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03g%&\n\xa5\x02\n\x04\
    \x04\x04\x02\x01\x12\x03m\x02\x0e\x1a\x97\x02\x20Fee\x20is\x20the\x20fee\
    \x20and\x20gas\x20limit\x20for\x20the\x20transaction.\x20The\x20first\
    \x20signer\x20is\x20the\n\x20primary\x20signer\x20and\x20the\x20one\x20w\
    hich\x20pays\x20the\x20fee.\x20The\x20fee\x20can\x20be\x20calculated\n\
    \x20based\x20on\x20the\x20cost\x20of\x20evaluating\x20the\x20body\x20and\
    \x20doing\x20signature\x20verification\n\x20of\x20the\x20signers.\x20Thi\
    s\x20can\x20be\x20estimated\x20via\x20simulation.\n\n\x0c\n\x05\x04\x04\
    \x02\x01\x06\x12\x03m\x02\x05\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03m\
    \x06\t\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03m\x0c\r\nb\n\x02\x04\x05\
    \x12\x05r\0\x80\x01\x01\x1aU\x20SignerInfo\x20describes\x20the\x20public\
    \x20key\x20and\x20signing\x20mode\x20of\x20a\x20single\x20top-level\n\
    \x20signer.\n\n\n\n\x03\x04\x05\x01\x12\x03r\x08\x12\n\xe0\x01\n\x04\x04\
    \x05\x02\0\x12\x03v\x02%\x1a\xd2\x01\x20public_key\x20is\x20the\x20publi\
    c\x20key\x20of\x20the\x20signer.\x20It\x20is\x20optional\x20for\x20accou\
    nts\n\x20that\x20already\x20exist\x20in\x20state.\x20If\x20unset,\x20the\
    \x20verifier\x20can\x20use\x20the\x20required\x20\\\n\x20signer\x20addre\
    ss\x20for\x20this\x20position\x20and\x20lookup\x20the\x20public\x20key.\
    \n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03v\x02\x15\n\x0c\n\x05\x04\x05\
    \x02\0\x01\x12\x03v\x16\x20\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03v#$\n\
    \x80\x01\n\x04\x04\x05\x02\x01\x12\x03z\x02\x19\x1as\x20mode_info\x20des\
    cribes\x20the\x20signing\x20mode\x20of\x20the\x20signer\x20and\x20is\x20\
    a\x20nested\n\x20structure\x20to\x20support\x20nested\x20multisig\x20pub\
    key's\n\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03z\x02\n\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03z\x0b\x14\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03z\x17\x18\n\xb0\x01\n\x04\x04\x05\x02\x02\x12\x03\x7f\x02\x16\x1a\
    \xa2\x01\x20sequence\x20is\x20the\x20sequence\x20of\x20the\x20account,\
    \x20which\x20describes\x20the\n\x20number\x20of\x20committed\x20transact\
    ions\x20signed\x20by\x20a\x20given\x20address.\x20It\x20is\x20used\x20to\
    \n\x20prevent\x20replay\x20attacks.\n\n\x0c\n\x05\x04\x05\x02\x02\x05\
    \x12\x03\x7f\x02\x08\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03\x7f\t\x11\n\
    \x0c\n\x05\x04\x05\x02\x02\x03\x12\x03\x7f\x14\x15\nZ\n\x02\x04\x06\x12\
    \x06\x83\x01\0\x9f\x01\x01\x1aL\x20ModeInfo\x20describes\x20the\x20signi\
    ng\x20mode\x20of\x20a\x20single\x20or\x20nested\x20multisig\x20signer.\n\
    \n\x0b\n\x03\x04\x06\x01\x12\x04\x83\x01\x08\x10\nm\n\x04\x04\x06\x08\0\
    \x12\x06\x86\x01\x02\x8c\x01\x03\x1a]\x20sum\x20is\x20the\x20oneof\x20th\
    at\x20specifies\x20whether\x20this\x20represents\x20a\x20single\x20or\
    \x20nested\n\x20multisig\x20signer\n\n\r\n\x05\x04\x06\x08\0\x01\x12\x04\
    \x86\x01\x08\x0b\n1\n\x04\x04\x06\x02\0\x12\x04\x88\x01\x04\x16\x1a#\x20\
    single\x20represents\x20a\x20single\x20signer\n\n\r\n\x05\x04\x06\x02\0\
    \x06\x12\x04\x88\x01\x04\n\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\x88\x01\
    \x0b\x11\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x88\x01\x14\x15\n9\n\x04\
    \x04\x06\x02\x01\x12\x04\x8b\x01\x04\x14\x1a+\x20multi\x20represents\x20\
    a\x20nested\x20multisig\x20signer\n\n\r\n\x05\x04\x06\x02\x01\x06\x12\
    \x04\x8b\x01\x04\t\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x8b\x01\n\x0f\n\
    \r\n\x05\x04\x06\x02\x01\x03\x12\x04\x8b\x01\x12\x13\n\xb1\x01\n\x04\x04\
    \x06\x03\0\x12\x06\x91\x01\x02\x94\x01\x03\x1a\xa0\x01\x20Single\x20is\
    \x20the\x20mode\x20info\x20for\x20a\x20single\x20signer.\x20It\x20is\x20\
    structured\x20as\x20a\x20message\n\x20to\x20allow\x20for\x20additional\
    \x20fields\x20such\x20as\x20locale\x20for\x20SIGN_MODE_TEXTUAL\x20in\x20\
    the\n\x20future\n\n\r\n\x05\x04\x06\x03\0\x01\x12\x04\x91\x01\n\x10\n?\n\
    \x06\x04\x06\x03\0\x02\0\x12\x04\x93\x01\x040\x1a/\x20mode\x20is\x20the\
    \x20signing\x20mode\x20of\x20the\x20single\x20signer\n\n\x0f\n\x07\x04\
    \x06\x03\0\x02\0\x06\x12\x04\x93\x01\x04&\n\x0f\n\x07\x04\x06\x03\0\x02\
    \0\x01\x12\x04\x93\x01'+\n\x0f\n\x07\x04\x06\x03\0\x02\0\x03\x12\x04\x93\
    \x01./\nB\n\x04\x04\x06\x03\x01\x12\x06\x97\x01\x02\x9e\x01\x03\x1a2\x20\
    Multi\x20is\x20the\x20mode\x20info\x20for\x20a\x20multisig\x20public\x20\
    key\n\n\r\n\x05\x04\x06\x03\x01\x01\x12\x04\x97\x01\n\x0f\nO\n\x06\x04\
    \x06\x03\x01\x02\0\x12\x04\x99\x01\x04@\x1a?\x20bitarray\x20specifies\
    \x20which\x20keys\x20within\x20the\x20multisig\x20are\x20signing\n\n\x0f\
    \n\x07\x04\x06\x03\x01\x02\0\x06\x12\x04\x99\x01\x042\n\x0f\n\x07\x04\
    \x06\x03\x01\x02\0\x01\x12\x04\x99\x013;\n\x0f\n\x07\x04\x06\x03\x01\x02\
    \0\x03\x12\x04\x99\x01>?\n\x87\x01\n\x06\x04\x06\x03\x01\x02\x01\x12\x04\
    \x9d\x01\x04%\x1aw\x20mode_infos\x20is\x20the\x20corresponding\x20modes\
    \x20of\x20the\x20signers\x20of\x20the\x20multisig\n\x20which\x20could\
    \x20include\x20nested\x20multisig\x20public\x20keys\n\n\x0f\n\x07\x04\
    \x06\x03\x01\x02\x01\x04\x12\x04\x9d\x01\x04\x0c\n\x0f\n\x07\x04\x06\x03\
    \x01\x02\x01\x06\x12\x04\x9d\x01\r\x15\n\x0f\n\x07\x04\x06\x03\x01\x02\
    \x01\x01\x12\x04\x9d\x01\x16\x20\n\x0f\n\x07\x04\x06\x03\x01\x02\x01\x03\
    \x12\x04\x9d\x01#$\n\xdf\x01\n\x02\x04\x07\x12\x06\xa4\x01\0\xb6\x01\x01\
    \x1a\xd0\x01\x20Fee\x20includes\x20the\x20amount\x20of\x20coins\x20paid\
    \x20in\x20fees\x20and\x20the\x20maximum\n\x20gas\x20to\x20be\x20used\x20\
    by\x20the\x20transaction.\x20The\x20ratio\x20yields\x20an\x20effective\
    \x20\"gasprice\",\n\x20which\x20must\x20be\x20above\x20some\x20miminum\
    \x20to\x20be\x20accepted\x20into\x20the\x20mempool.\n\n\x0b\n\x03\x04\
    \x07\x01\x12\x04\xa4\x01\x08\x0b\nC\n\x04\x04\x07\x02\0\x12\x06\xa6\x01\
    \x02\xa7\x01l\x1a3\x20amount\x20is\x20the\x20amount\x20of\x20coins\x20to\
    \x20be\x20paid\x20as\x20a\x20fee\n\n\r\n\x05\x04\x07\x02\0\x04\x12\x04\
    \xa6\x01\x02\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\xa6\x01\x0b#\n\r\n\
    \x05\x04\x07\x02\0\x01\x12\x04\xa6\x01$*\n\r\n\x05\x04\x07\x02\0\x03\x12\
    \x04\xa6\x01-.\n\r\n\x05\x04\x07\x02\0\x08\x12\x04\xa7\x01\x06k\n\x10\n\
    \x08\x04\x07\x02\0\x08\xe9\xfb\x03\x12\x04\xa7\x01\x07#\n\x10\n\x08\x04\
    \x07\x02\0\x08\xf5\xfb\x03\x12\x04\xa7\x01%j\nz\n\x04\x04\x07\x02\x01\
    \x12\x04\xab\x01\x02\x17\x1al\x20gas_limit\x20is\x20the\x20maximum\x20ga\
    s\x20that\x20can\x20be\x20used\x20in\x20transaction\x20processing\n\x20b\
    efore\x20an\x20out\x20of\x20gas\x20error\x20occurs\n\n\r\n\x05\x04\x07\
    \x02\x01\x05\x12\x04\xab\x01\x02\x08\n\r\n\x05\x04\x07\x02\x01\x01\x12\
    \x04\xab\x01\t\x12\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xab\x01\x15\x16\
    \n\xaa\x02\n\x04\x04\x07\x02\x02\x12\x04\xb0\x01\x02\x13\x1a\x9b\x02\x20\
    if\x20unset,\x20the\x20first\x20signer\x20is\x20responsible\x20for\x20pa\
    ying\x20the\x20fees.\x20If\x20set,\x20the\x20specified\x20account\x20mus\
    t\x20pay\x20the\x20fees.\n\x20the\x20payer\x20must\x20be\x20a\x20tx\x20s\
    igner\x20(and\x20thus\x20have\x20signed\x20this\x20field\x20in\x20AuthIn\
    fo).\n\x20setting\x20this\x20field\x20does\x20*not*\x20change\x20the\x20\
    ordering\x20of\x20required\x20signers\x20for\x20the\x20transaction.\n\n\
    \r\n\x05\x04\x07\x02\x02\x05\x12\x04\xb0\x01\x02\x08\n\r\n\x05\x04\x07\
    \x02\x02\x01\x12\x04\xb0\x01\t\x0e\n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\
    \xb0\x01\x11\x12\n\x9c\x02\n\x04\x04\x07\x02\x03\x12\x04\xb5\x01\x02\x15\
    \x1a\x8d\x02\x20if\x20set,\x20the\x20fee\x20payer\x20(either\x20the\x20f\
    irst\x20signer\x20or\x20the\x20value\x20of\x20the\x20payer\x20field)\x20\
    requests\x20that\x20a\x20fee\x20grant\x20be\x20used\n\x20to\x20pay\x20fe\
    es\x20instead\x20of\x20the\x20fee\x20payer's\x20own\x20balance.\x20If\
    \x20an\x20appropriate\x20fee\x20grant\x20does\x20not\x20exist\x20or\x20t\
    he\x20chain\x20does\n\x20not\x20support\x20fee\x20grants,\x20this\x20wil\
    l\x20fail\n\n\r\n\x05\x04\x07\x02\x03\x05\x12\x04\xb5\x01\x02\x08\n\r\n\
    \x05\x04\x07\x02\x03\x01\x12\x04\xb5\x01\t\x10\n\r\n\x05\x04\x07\x02\x03\
    \x03\x12\x04\xb5\x01\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::multisig::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::signing::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(Tx::generated_message_descriptor_data());
            messages.push(TxRaw::generated_message_descriptor_data());
            messages.push(SignDoc::generated_message_descriptor_data());
            messages.push(TxBody::generated_message_descriptor_data());
            messages.push(AuthInfo::generated_message_descriptor_data());
            messages.push(SignerInfo::generated_message_descriptor_data());
            messages.push(ModeInfo::generated_message_descriptor_data());
            messages.push(Fee::generated_message_descriptor_data());
            messages.push(mode_info::Single::generated_message_descriptor_data());
            messages.push(mode_info::Multi::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
