// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/tx/v1beta1/service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GetTxsEventRequest is the request type for the Service.TxsByEvents
///  RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.GetTxsEventRequest)
pub struct GetTxsEventRequest {
    // message fields
    ///  events is the list of transaction event type.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxsEventRequest.events)
    pub events: ::std::vec::Vec<::std::string::String>,
    ///  pagination defines a pagination for the request.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxsEventRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxsEventRequest.order_by)
    pub order_by: ::protobuf::EnumOrUnknown<OrderBy>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.GetTxsEventRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTxsEventRequest {
    fn default() -> &'a GetTxsEventRequest {
        <GetTxsEventRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTxsEventRequest {
    pub fn new() -> GetTxsEventRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "events",
            |m: &GetTxsEventRequest| { &m.events },
            |m: &mut GetTxsEventRequest| { &mut m.events },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &GetTxsEventRequest| { &m.pagination },
            |m: &mut GetTxsEventRequest| { &mut m.pagination },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_by",
            |m: &GetTxsEventRequest| { &m.order_by },
            |m: &mut GetTxsEventRequest| { &mut m.order_by },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTxsEventRequest>(
            "GetTxsEventRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTxsEventRequest {
    const NAME: &'static str = "GetTxsEventRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.events.push(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                24 => {
                    self.order_by = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.events {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.order_by != ::protobuf::EnumOrUnknown::new(OrderBy::ORDER_BY_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.order_by.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.events {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.order_by != ::protobuf::EnumOrUnknown::new(OrderBy::ORDER_BY_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.order_by))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTxsEventRequest {
        GetTxsEventRequest::new()
    }

    fn clear(&mut self) {
        self.events.clear();
        self.pagination.clear();
        self.order_by = ::protobuf::EnumOrUnknown::new(OrderBy::ORDER_BY_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTxsEventRequest {
        static instance: GetTxsEventRequest = GetTxsEventRequest {
            events: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            order_by: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTxsEventRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTxsEventRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTxsEventRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxsEventRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GetTxsEventResponse is the response type for the Service.TxsByEvents
///  RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.GetTxsEventResponse)
pub struct GetTxsEventResponse {
    // message fields
    ///  txs is the list of queried transactions.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxsEventResponse.txs)
    pub txs: ::std::vec::Vec<super::tx::Tx>,
    ///  tx_responses is the list of queried TxResponses.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxsEventResponse.tx_responses)
    pub tx_responses: ::std::vec::Vec<super::abci::TxResponse>,
    ///  pagination defines a pagination for the response.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxsEventResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.GetTxsEventResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTxsEventResponse {
    fn default() -> &'a GetTxsEventResponse {
        <GetTxsEventResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTxsEventResponse {
    pub fn new() -> GetTxsEventResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "txs",
            |m: &GetTxsEventResponse| { &m.txs },
            |m: &mut GetTxsEventResponse| { &mut m.txs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tx_responses",
            |m: &GetTxsEventResponse| { &m.tx_responses },
            |m: &mut GetTxsEventResponse| { &mut m.tx_responses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &GetTxsEventResponse| { &m.pagination },
            |m: &mut GetTxsEventResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTxsEventResponse>(
            "GetTxsEventResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTxsEventResponse {
    const NAME: &'static str = "GetTxsEventResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.txs.push(is.read_message()?);
                },
                18 => {
                    self.tx_responses.push(is.read_message()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.tx_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.txs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.tx_responses {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTxsEventResponse {
        GetTxsEventResponse::new()
    }

    fn clear(&mut self) {
        self.txs.clear();
        self.tx_responses.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTxsEventResponse {
        static instance: GetTxsEventResponse = GetTxsEventResponse {
            txs: ::std::vec::Vec::new(),
            tx_responses: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTxsEventResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTxsEventResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTxsEventResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxsEventResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
///  RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.BroadcastTxRequest)
pub struct BroadcastTxRequest {
    // message fields
    ///  tx_bytes is the raw transaction.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.BroadcastTxRequest.tx_bytes)
    pub tx_bytes: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.BroadcastTxRequest.mode)
    pub mode: ::protobuf::EnumOrUnknown<BroadcastMode>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.BroadcastTxRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BroadcastTxRequest {
    fn default() -> &'a BroadcastTxRequest {
        <BroadcastTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastTxRequest {
    pub fn new() -> BroadcastTxRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_bytes",
            |m: &BroadcastTxRequest| { &m.tx_bytes },
            |m: &mut BroadcastTxRequest| { &mut m.tx_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mode",
            |m: &BroadcastTxRequest| { &m.mode },
            |m: &mut BroadcastTxRequest| { &mut m.mode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BroadcastTxRequest>(
            "BroadcastTxRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BroadcastTxRequest {
    const NAME: &'static str = "BroadcastTxRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tx_bytes = is.read_bytes()?;
                },
                16 => {
                    self.mode = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tx_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.tx_bytes);
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(BroadcastMode::BROADCAST_MODE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.mode.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tx_bytes.is_empty() {
            os.write_bytes(1, &self.tx_bytes)?;
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(BroadcastMode::BROADCAST_MODE_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.mode))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BroadcastTxRequest {
        BroadcastTxRequest::new()
    }

    fn clear(&mut self) {
        self.tx_bytes.clear();
        self.mode = ::protobuf::EnumOrUnknown::new(BroadcastMode::BROADCAST_MODE_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BroadcastTxRequest {
        static instance: BroadcastTxRequest = BroadcastTxRequest {
            tx_bytes: ::std::vec::Vec::new(),
            mode: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BroadcastTxRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BroadcastTxRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BroadcastTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastTxRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  BroadcastTxResponse is the response type for the
///  Service.BroadcastTx method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.BroadcastTxResponse)
pub struct BroadcastTxResponse {
    // message fields
    ///  tx_response is the queried TxResponses.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.BroadcastTxResponse.tx_response)
    pub tx_response: ::protobuf::MessageField<super::abci::TxResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.BroadcastTxResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BroadcastTxResponse {
    fn default() -> &'a BroadcastTxResponse {
        <BroadcastTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastTxResponse {
    pub fn new() -> BroadcastTxResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::abci::TxResponse>(
            "tx_response",
            |m: &BroadcastTxResponse| { &m.tx_response },
            |m: &mut BroadcastTxResponse| { &mut m.tx_response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BroadcastTxResponse>(
            "BroadcastTxResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BroadcastTxResponse {
    const NAME: &'static str = "BroadcastTxResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tx_response)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tx_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tx_response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BroadcastTxResponse {
        BroadcastTxResponse::new()
    }

    fn clear(&mut self) {
        self.tx_response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BroadcastTxResponse {
        static instance: BroadcastTxResponse = BroadcastTxResponse {
            tx_response: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BroadcastTxResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BroadcastTxResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BroadcastTxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastTxResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SimulateRequest is the request type for the Service.Simulate
///  RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.SimulateRequest)
pub struct SimulateRequest {
    // message fields
    ///  tx is the transaction to simulate.
    ///  Deprecated. Send raw tx bytes instead.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SimulateRequest.tx)
    pub tx: ::protobuf::MessageField<super::tx::Tx>,
    ///  tx_bytes is the raw transaction.
    ///
    ///  Since: cosmos-sdk 0.43
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SimulateRequest.tx_bytes)
    pub tx_bytes: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.SimulateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SimulateRequest {
    fn default() -> &'a SimulateRequest {
        <SimulateRequest as ::protobuf::Message>::default_instance()
    }
}

impl SimulateRequest {
    pub fn new() -> SimulateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::tx::Tx>(
            "tx",
            |m: &SimulateRequest| { &m.tx },
            |m: &mut SimulateRequest| { &mut m.tx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_bytes",
            |m: &SimulateRequest| { &m.tx_bytes },
            |m: &mut SimulateRequest| { &mut m.tx_bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SimulateRequest>(
            "SimulateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SimulateRequest {
    const NAME: &'static str = "SimulateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tx)?;
                },
                18 => {
                    self.tx_bytes = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.tx_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tx_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tx.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.tx_bytes.is_empty() {
            os.write_bytes(2, &self.tx_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SimulateRequest {
        SimulateRequest::new()
    }

    fn clear(&mut self) {
        self.tx.clear();
        self.tx_bytes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SimulateRequest {
        static instance: SimulateRequest = SimulateRequest {
            tx: ::protobuf::MessageField::none(),
            tx_bytes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SimulateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SimulateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SimulateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SimulateResponse is the response type for the
///  Service.SimulateRPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.SimulateResponse)
pub struct SimulateResponse {
    // message fields
    ///  gas_info is the information about gas used in the simulation.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SimulateResponse.gas_info)
    pub gas_info: ::protobuf::MessageField<super::abci::GasInfo>,
    ///  result is the result of the simulation.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.SimulateResponse.result)
    pub result: ::protobuf::MessageField<super::abci::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.SimulateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SimulateResponse {
    fn default() -> &'a SimulateResponse {
        <SimulateResponse as ::protobuf::Message>::default_instance()
    }
}

impl SimulateResponse {
    pub fn new() -> SimulateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::abci::GasInfo>(
            "gas_info",
            |m: &SimulateResponse| { &m.gas_info },
            |m: &mut SimulateResponse| { &mut m.gas_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::abci::Result>(
            "result",
            |m: &SimulateResponse| { &m.result },
            |m: &mut SimulateResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SimulateResponse>(
            "SimulateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SimulateResponse {
    const NAME: &'static str = "SimulateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gas_info)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.result)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gas_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gas_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.result.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SimulateResponse {
        SimulateResponse::new()
    }

    fn clear(&mut self) {
        self.gas_info.clear();
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SimulateResponse {
        static instance: SimulateResponse = SimulateResponse {
            gas_info: ::protobuf::MessageField::none(),
            result: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SimulateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SimulateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SimulateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GetTxRequest is the request type for the Service.GetTx
///  RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.GetTxRequest)
pub struct GetTxRequest {
    // message fields
    ///  hash is the tx hash to query, encoded as a hex string.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxRequest.hash)
    pub hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.GetTxRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTxRequest {
    fn default() -> &'a GetTxRequest {
        <GetTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTxRequest {
    pub fn new() -> GetTxRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &GetTxRequest| { &m.hash },
            |m: &mut GetTxRequest| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTxRequest>(
            "GetTxRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTxRequest {
    const NAME: &'static str = "GetTxRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTxRequest {
        GetTxRequest::new()
    }

    fn clear(&mut self) {
        self.hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTxRequest {
        static instance: GetTxRequest = GetTxRequest {
            hash: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTxRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTxRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GetTxResponse is the response type for the Service.GetTx method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.GetTxResponse)
pub struct GetTxResponse {
    // message fields
    ///  tx is the queried transaction.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxResponse.tx)
    pub tx: ::protobuf::MessageField<super::tx::Tx>,
    ///  tx_response is the queried TxResponses.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetTxResponse.tx_response)
    pub tx_response: ::protobuf::MessageField<super::abci::TxResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.GetTxResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTxResponse {
    fn default() -> &'a GetTxResponse {
        <GetTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTxResponse {
    pub fn new() -> GetTxResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::tx::Tx>(
            "tx",
            |m: &GetTxResponse| { &m.tx },
            |m: &mut GetTxResponse| { &mut m.tx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::abci::TxResponse>(
            "tx_response",
            |m: &GetTxResponse| { &m.tx_response },
            |m: &mut GetTxResponse| { &mut m.tx_response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTxResponse>(
            "GetTxResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTxResponse {
    const NAME: &'static str = "GetTxResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tx)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tx_response)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tx_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tx.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.tx_response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTxResponse {
        GetTxResponse::new()
    }

    fn clear(&mut self) {
        self.tx.clear();
        self.tx_response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTxResponse {
        static instance: GetTxResponse = GetTxResponse {
            tx: ::protobuf::MessageField::none(),
            tx_response: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTxResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTxResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GetBlockWithTxsRequest is the request type for the Service.GetBlockWithTxs
///  RPC method.
///
///  Since: cosmos-sdk 0.45.2
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
pub struct GetBlockWithTxsRequest {
    // message fields
    ///  height is the height of the block to query.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetBlockWithTxsRequest.height)
    pub height: i64,
    ///  pagination defines a pagination for the request.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetBlockWithTxsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.GetBlockWithTxsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetBlockWithTxsRequest {
    fn default() -> &'a GetBlockWithTxsRequest {
        <GetBlockWithTxsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetBlockWithTxsRequest {
    pub fn new() -> GetBlockWithTxsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &GetBlockWithTxsRequest| { &m.height },
            |m: &mut GetBlockWithTxsRequest| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &GetBlockWithTxsRequest| { &m.pagination },
            |m: &mut GetBlockWithTxsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetBlockWithTxsRequest>(
            "GetBlockWithTxsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetBlockWithTxsRequest {
    const NAME: &'static str = "GetBlockWithTxsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetBlockWithTxsRequest {
        GetBlockWithTxsRequest::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetBlockWithTxsRequest {
        static instance: GetBlockWithTxsRequest = GetBlockWithTxsRequest {
            height: 0,
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetBlockWithTxsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetBlockWithTxsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetBlockWithTxsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBlockWithTxsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method.
///
///  Since: cosmos-sdk 0.45.2
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
pub struct GetBlockWithTxsResponse {
    // message fields
    ///  txs are the transactions in the block.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetBlockWithTxsResponse.txs)
    pub txs: ::std::vec::Vec<super::tx::Tx>,
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block_id)
    pub block_id: ::protobuf::MessageField<super::types::BlockID>,
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block)
    pub block: ::protobuf::MessageField<super::block::Block>,
    ///  pagination defines a pagination for the response.
    // @@protoc_insertion_point(field:cosmos.tx.v1beta1.GetBlockWithTxsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.tx.v1beta1.GetBlockWithTxsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetBlockWithTxsResponse {
    fn default() -> &'a GetBlockWithTxsResponse {
        <GetBlockWithTxsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetBlockWithTxsResponse {
    pub fn new() -> GetBlockWithTxsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "txs",
            |m: &GetBlockWithTxsResponse| { &m.txs },
            |m: &mut GetBlockWithTxsResponse| { &mut m.txs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::BlockID>(
            "block_id",
            |m: &GetBlockWithTxsResponse| { &m.block_id },
            |m: &mut GetBlockWithTxsResponse| { &mut m.block_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::block::Block>(
            "block",
            |m: &GetBlockWithTxsResponse| { &m.block },
            |m: &mut GetBlockWithTxsResponse| { &mut m.block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &GetBlockWithTxsResponse| { &m.pagination },
            |m: &mut GetBlockWithTxsResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetBlockWithTxsResponse>(
            "GetBlockWithTxsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetBlockWithTxsResponse {
    const NAME: &'static str = "GetBlockWithTxsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.txs.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block_id)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.txs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.block_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetBlockWithTxsResponse {
        GetBlockWithTxsResponse::new()
    }

    fn clear(&mut self) {
        self.txs.clear();
        self.block_id.clear();
        self.block.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetBlockWithTxsResponse {
        static instance: GetBlockWithTxsResponse = GetBlockWithTxsResponse {
            txs: ::std::vec::Vec::new(),
            block_id: ::protobuf::MessageField::none(),
            block: ::protobuf::MessageField::none(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetBlockWithTxsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetBlockWithTxsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetBlockWithTxsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBlockWithTxsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  OrderBy defines the sorting order
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:cosmos.tx.v1beta1.OrderBy)
pub enum OrderBy {
    // @@protoc_insertion_point(enum_value:cosmos.tx.v1beta1.OrderBy.ORDER_BY_UNSPECIFIED)
    ORDER_BY_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:cosmos.tx.v1beta1.OrderBy.ORDER_BY_ASC)
    ORDER_BY_ASC = 1,
    // @@protoc_insertion_point(enum_value:cosmos.tx.v1beta1.OrderBy.ORDER_BY_DESC)
    ORDER_BY_DESC = 2,
}

impl ::protobuf::Enum for OrderBy {
    const NAME: &'static str = "OrderBy";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OrderBy> {
        match value {
            0 => ::std::option::Option::Some(OrderBy::ORDER_BY_UNSPECIFIED),
            1 => ::std::option::Option::Some(OrderBy::ORDER_BY_ASC),
            2 => ::std::option::Option::Some(OrderBy::ORDER_BY_DESC),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [OrderBy] = &[
        OrderBy::ORDER_BY_UNSPECIFIED,
        OrderBy::ORDER_BY_ASC,
        OrderBy::ORDER_BY_DESC,
    ];
}

impl ::protobuf::EnumFull for OrderBy {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("OrderBy").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for OrderBy {
    fn default() -> Self {
        OrderBy::ORDER_BY_UNSPECIFIED
    }
}

impl OrderBy {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OrderBy>("OrderBy")
    }
}

///  BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:cosmos.tx.v1beta1.BroadcastMode)
pub enum BroadcastMode {
    // @@protoc_insertion_point(enum_value:cosmos.tx.v1beta1.BroadcastMode.BROADCAST_MODE_UNSPECIFIED)
    BROADCAST_MODE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:cosmos.tx.v1beta1.BroadcastMode.BROADCAST_MODE_BLOCK)
    BROADCAST_MODE_BLOCK = 1,
    // @@protoc_insertion_point(enum_value:cosmos.tx.v1beta1.BroadcastMode.BROADCAST_MODE_SYNC)
    BROADCAST_MODE_SYNC = 2,
    // @@protoc_insertion_point(enum_value:cosmos.tx.v1beta1.BroadcastMode.BROADCAST_MODE_ASYNC)
    BROADCAST_MODE_ASYNC = 3,
}

impl ::protobuf::Enum for BroadcastMode {
    const NAME: &'static str = "BroadcastMode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BroadcastMode> {
        match value {
            0 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_UNSPECIFIED),
            1 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_BLOCK),
            2 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_SYNC),
            3 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_ASYNC),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [BroadcastMode] = &[
        BroadcastMode::BROADCAST_MODE_UNSPECIFIED,
        BroadcastMode::BROADCAST_MODE_BLOCK,
        BroadcastMode::BROADCAST_MODE_SYNC,
        BroadcastMode::BROADCAST_MODE_ASYNC,
    ];
}

impl ::protobuf::EnumFull for BroadcastMode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("BroadcastMode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for BroadcastMode {
    fn default() -> Self {
        BroadcastMode::BROADCAST_MODE_UNSPECIFIED
    }
}

impl BroadcastMode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<BroadcastMode>("BroadcastMode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/tx/v1beta1/service.proto\x12\x11cosmos.tx.v1beta1\x1a\x1cgo\
    ogle/api/annotations.proto\x1a#cosmos/base/abci/v1beta1/abci.proto\x1a\
    \x1acosmos/tx/v1beta1/tx.proto\x1a\x14gogoproto/gogo.proto\x1a*cosmos/ba\
    se/query/v1beta1/pagination.proto\x1a\x1ctendermint/types/block.proto\
    \x1a\x1ctendermint/types/types.proto\"\xab\x01\n\x12GetTxsEventRequest\
    \x12\x16\n\x06events\x18\x01\x20\x03(\tR\x06events\x12F\n\npagination\
    \x18\x02\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npaginati\
    on\x125\n\x08order_by\x18\x03\x20\x01(\x0e2\x1a.cosmos.tx.v1beta1.OrderB\
    yR\x07orderBy\"\xd0\x01\n\x13GetTxsEventResponse\x12'\n\x03txs\x18\x01\
    \x20\x03(\x0b2\x15.cosmos.tx.v1beta1.TxR\x03txs\x12G\n\x0ctx_responses\
    \x18\x02\x20\x03(\x0b2$.cosmos.base.abci.v1beta1.TxResponseR\x0btxRespon\
    ses\x12G\n\npagination\x18\x03\x20\x01(\x0b2'.cosmos.base.query.v1beta1.\
    PageResponseR\npagination\"e\n\x12BroadcastTxRequest\x12\x19\n\x08tx_byt\
    es\x18\x01\x20\x01(\x0cR\x07txBytes\x124\n\x04mode\x18\x02\x20\x01(\x0e2\
    \x20.cosmos.tx.v1beta1.BroadcastModeR\x04mode\"\\\n\x13BroadcastTxRespon\
    se\x12E\n\x0btx_response\x18\x01\x20\x01(\x0b2$.cosmos.base.abci.v1beta1\
    .TxResponseR\ntxResponse\"W\n\x0fSimulateRequest\x12)\n\x02tx\x18\x01\
    \x20\x01(\x0b2\x15.cosmos.tx.v1beta1.TxR\x02txB\x02\x18\x01\x12\x19\n\
    \x08tx_bytes\x18\x02\x20\x01(\x0cR\x07txBytes\"\x8a\x01\n\x10SimulateRes\
    ponse\x12<\n\x08gas_info\x18\x01\x20\x01(\x0b2!.cosmos.base.abci.v1beta1\
    .GasInfoR\x07gasInfo\x128\n\x06result\x18\x02\x20\x01(\x0b2\x20.cosmos.b\
    ase.abci.v1beta1.ResultR\x06result\"\"\n\x0cGetTxRequest\x12\x12\n\x04ha\
    sh\x18\x01\x20\x01(\tR\x04hash\"}\n\rGetTxResponse\x12%\n\x02tx\x18\x01\
    \x20\x01(\x0b2\x15.cosmos.tx.v1beta1.TxR\x02tx\x12E\n\x0btx_response\x18\
    \x02\x20\x01(\x0b2$.cosmos.base.abci.v1beta1.TxResponseR\ntxResponse\"x\
    \n\x16GetBlockWithTxsRequest\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\
    \x06height\x12F\n\npagination\x18\x02\x20\x01(\x0b2&.cosmos.base.query.v\
    1beta1.PageRequestR\npagination\"\xf0\x01\n\x17GetBlockWithTxsResponse\
    \x12'\n\x03txs\x18\x01\x20\x03(\x0b2\x15.cosmos.tx.v1beta1.TxR\x03txs\
    \x124\n\x08block_id\x18\x02\x20\x01(\x0b2\x19.tendermint.types.BlockIDR\
    \x07blockId\x12-\n\x05block\x18\x03\x20\x01(\x0b2\x17.tendermint.types.B\
    lockR\x05block\x12G\n\npagination\x18\x04\x20\x01(\x0b2'.cosmos.base.que\
    ry.v1beta1.PageResponseR\npagination*H\n\x07OrderBy\x12\x18\n\x14ORDER_B\
    Y_UNSPECIFIED\x10\0\x12\x10\n\x0cORDER_BY_ASC\x10\x01\x12\x11\n\rORDER_B\
    Y_DESC\x10\x02*|\n\rBroadcastMode\x12\x1e\n\x1aBROADCAST_MODE_UNSPECIFIE\
    D\x10\0\x12\x18\n\x14BROADCAST_MODE_BLOCK\x10\x01\x12\x17\n\x13BROADCAST\
    _MODE_SYNC\x10\x02\x12\x18\n\x14BROADCAST_MODE_ASYNC\x10\x032\x92\x05\n\
    \x07Service\x12{\n\x08Simulate\x12\".cosmos.tx.v1beta1.SimulateRequest\
    \x1a#.cosmos.tx.v1beta1.SimulateResponse\"&\x82\xd3\xe4\x93\x02\x20\"\
    \x1b/cosmos/tx/v1beta1/simulate:\x01*\x12q\n\x05GetTx\x12\x1f.cosmos.tx.\
    v1beta1.GetTxRequest\x1a\x20.cosmos.tx.v1beta1.GetTxResponse\"%\x82\xd3\
    \xe4\x93\x02\x1f\x12\x1d/cosmos/tx/v1beta1/txs/{hash}\x12\x7f\n\x0bBroad\
    castTx\x12%.cosmos.tx.v1beta1.BroadcastTxRequest\x1a&.cosmos.tx.v1beta1.\
    BroadcastTxResponse\"!\x82\xd3\xe4\x93\x02\x1b\"\x16/cosmos/tx/v1beta1/t\
    xs:\x01*\x12|\n\x0bGetTxsEvent\x12%.cosmos.tx.v1beta1.GetTxsEventRequest\
    \x1a&.cosmos.tx.v1beta1.GetTxsEventResponse\"\x1e\x82\xd3\xe4\x93\x02\
    \x18\x12\x16/cosmos/tx/v1beta1/txs\x12\x97\x01\n\x0fGetBlockWithTxs\x12)\
    .cosmos.tx.v1beta1.GetBlockWithTxsRequest\x1a*.cosmos.tx.v1beta1.GetBloc\
    kWithTxsResponse\"-\x82\xd3\xe4\x93\x02'\x12%/cosmos/tx/v1beta1/txs/bloc\
    k/{height}B+Z%github.com/cosmos/cosmos-sdk/types/tx\xc0\xe3\x1e\x01J\xb9\
    )\n\x07\x12\x05\0\0\xa4\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x1a\n\t\n\x02\x03\0\x12\x03\x03\0&\n\t\n\x02\x03\
    \x01\x12\x03\x04\0-\n\t\n\x02\x03\x02\x12\x03\x05\0$\n\t\n\x02\x03\x03\
    \x12\x03\x06\0\x1e\n\t\n\x02\x03\x04\x12\x03\x07\04\n\t\n\x02\x03\x05\
    \x12\x03\x08\0&\n\t\n\x02\x03\x06\x12\x03\t\0&\n\x08\n\x01\x08\x12\x03\
    \x0b\0/\n\x0b\n\x04\x08\xb8\xec\x03\x12\x03\x0b\0/\n\x08\n\x01\x08\x12\
    \x03\x0c\0R\n\t\n\x02\x08\x0b\x12\x03\x0c\0R\nO\n\x02\x06\0\x12\x04\x0f\
    \0,\x01\x1aC\x20Service\x20defines\x20a\x20gRPC\x20service\x20for\x20int\
    eracting\x20with\x20transactions.\n\n\n\n\x03\x06\0\x01\x12\x03\x0f\x08\
    \x0f\nT\n\x04\x06\0\x02\0\x12\x04\x11\x02\x16\x03\x1aF\x20Simulate\x20si\
    mulates\x20executing\x20a\x20transaction\x20for\x20estimating\x20gas\x20\
    usage.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x11\x06\x0e\n\x0c\n\x05\x06\
    \0\x02\0\x02\x12\x03\x11\x0f\x1e\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x11\
    )9\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x12\x04\x15\x06\n\x11\n\t\x06\0\x02\
    \0\x04\xb0\xca\xbc\"\x12\x04\x12\x04\x15\x06\n+\n\x04\x06\0\x02\x01\x12\
    \x04\x18\x02\x1a\x03\x1a\x1d\x20GetTx\x20fetches\x20a\x20tx\x20by\x20has\
    h.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x18\x06\x0b\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x18\x0c\x18\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \x18#0\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03\x19\x04C\n\x11\n\n\x06\0\
    \x02\x01\x04\xb0\xca\xbc\"\x02\x12\x03\x19\x04C\n2\n\x04\x06\0\x02\x02\
    \x12\x04\x1c\x02!\x03\x1a$\x20BroadcastTx\x20broadcast\x20transaction.\n\
    \n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1c\x06\x11\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03\x1c\x12$\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1c/B\n\
    \r\n\x05\x06\0\x02\x02\x04\x12\x04\x1d\x04\x20\x06\n\x11\n\t\x06\0\x02\
    \x02\x04\xb0\xca\xbc\"\x12\x04\x1d\x04\x20\x06\n1\n\x04\x06\0\x02\x03\
    \x12\x04#\x02%\x03\x1a#\x20GetTxsEvent\x20fetches\x20txs\x20by\x20event.\
    \n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03#\x06\x11\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03#\x12$\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03#/B\n\x0c\n\
    \x05\x06\0\x02\x03\x04\x12\x03$\x04<\n\x11\n\n\x06\0\x02\x03\x04\xb0\xca\
    \xbc\"\x02\x12\x03$\x04<\n\\\n\x04\x06\0\x02\x04\x12\x04)\x02+\x03\x1aN\
    \x20GetBlockWithTxs\x20fetches\x20a\x20block\x20with\x20decoded\x20txs.\
    \n\n\x20Since:\x20cosmos-sdk\x200.45.2\n\n\x0c\n\x05\x06\0\x02\x04\x01\
    \x12\x03)\x06\x15\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03)\x16,\n\x0c\n\
    \x05\x06\0\x02\x04\x03\x12\x03)7N\n\x0c\n\x05\x06\0\x02\x04\x04\x12\x03*\
    \x04K\n\x11\n\n\x06\0\x02\x04\x04\xb0\xca\xbc\"\x02\x12\x03*\x04K\n]\n\
    \x02\x04\0\x12\x040\06\x01\x1aQ\x20GetTxsEventRequest\x20is\x20the\x20re\
    quest\x20type\x20for\x20the\x20Service.TxsByEvents\n\x20RPC\x20method.\n\
    \n\n\n\x03\x04\0\x01\x12\x030\x08\x1a\n<\n\x04\x04\0\x02\0\x12\x032\x02\
    \x1d\x1a/\x20events\x20is\x20the\x20list\x20of\x20transaction\x20event\
    \x20type.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x032\x02\n\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x032\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\x032\x12\x18\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x032\x1b\x1c\n?\n\x04\x04\0\x02\x01\x12\
    \x034\x027\x1a2\x20pagination\x20defines\x20a\x20pagination\x20for\x20th\
    e\x20request.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x034\x02'\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x034(2\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03456\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x035\x027\n\x0c\n\x05\x04\0\x02\x02\x06\x12\
    \x035\x02\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x035(0\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03556\n/\n\x02\x05\0\x12\x049\0@\x01\x1a#\x20OrderBy\
    \x20defines\x20the\x20sorting\x20order\n\n\n\n\x03\x05\0\x01\x12\x039\
    \x05\x0c\nm\n\x04\x05\0\x02\0\x12\x03;\x02\x1b\x1a`\x20ORDER_BY_UNSPECIF\
    IED\x20specifies\x20an\x20unknown\x20sorting\x20order.\x20OrderBy\x20def\
    aults\x20to\x20ASC\x20in\x20this\x20case.\n\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03;\x02\x16\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03;\x19\x1a\n3\n\x04\
    \x05\0\x02\x01\x12\x03=\x02\x13\x1a&\x20ORDER_BY_ASC\x20defines\x20ascen\
    ding\x20order\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03=\x02\x0e\n\x0c\n\
    \x05\x05\0\x02\x01\x02\x12\x03=\x11\x12\n5\n\x04\x05\0\x02\x02\x12\x03?\
    \x02\x14\x1a(\x20ORDER_BY_DESC\x20defines\x20descending\x20order\n\n\x0c\
    \n\x05\x05\0\x02\x02\x01\x12\x03?\x02\x0f\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03?\x12\x13\n_\n\x02\x04\x01\x12\x04D\0K\x01\x1aS\x20GetTxsEventRe\
    sponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Service.TxsByEv\
    ents\n\x20RPC\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03D\x08\x1b\n7\n\
    \x04\x04\x01\x02\0\x12\x03F\x02(\x1a*\x20txs\x20is\x20the\x20list\x20of\
    \x20queried\x20transactions.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03F\
    \x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03F\x0b\x1f\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03F\x20#\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03F&'\n?\
    \n\x04\x04\x01\x02\x01\x12\x03H\x02@\x1a2\x20tx_responses\x20is\x20the\
    \x20list\x20of\x20queried\x20TxResponses.\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03H\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03H\x0b.\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03H/;\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03H>?\n@\n\x04\x04\x01\x02\x02\x12\x03J\x028\x1a3\x20pagination\
    \x20defines\x20a\x20pagination\x20for\x20the\x20response.\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x06\x12\x03J\x02(\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03J)3\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03J67\nd\n\x02\x04\x02\x12\
    \x04O\0S\x01\x1aX\x20BroadcastTxRequest\x20is\x20the\x20request\x20type\
    \x20for\x20the\x20Service.BroadcastTxRequest\n\x20RPC\x20method.\n\n\n\n\
    \x03\x04\x02\x01\x12\x03O\x08\x1a\n/\n\x04\x04\x02\x02\0\x12\x03Q\x02\
    \x1d\x1a\"\x20tx_bytes\x20is\x20the\x20raw\x20transaction.\n\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03Q\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03Q\x10\x18\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03Q\x1b\x1c\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03R\x02\x1d\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\
    \x03R\x02\x0f\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03R\x10\x14\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03R\x1b\x1c\n`\n\x02\x05\x01\x12\x04V\0b\
    \x01\x1aT\x20BroadcastMode\x20specifies\x20the\x20broadcast\x20mode\x20f\
    or\x20the\x20TxService.Broadcast\x20RPC\x20method.\n\n\n\n\x03\x05\x01\
    \x01\x12\x03V\x05\x12\n+\n\x04\x05\x01\x02\0\x12\x03X\x02!\x1a\x1e\x20ze\
    ro-value\x20for\x20mode\x20ordering\n\n\x0c\n\x05\x05\x01\x02\0\x01\x12\
    \x03X\x02\x1c\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03X\x1f\x20\n\x81\x01\n\
    \x04\x05\x01\x02\x01\x12\x03[\x02\x1b\x1at\x20BROADCAST_MODE_BLOCK\x20de\
    fines\x20a\x20tx\x20broadcasting\x20mode\x20where\x20the\x20client\x20wa\
    its\x20for\n\x20the\x20tx\x20to\x20be\x20committed\x20in\x20a\x20block.\
    \n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03[\x02\x16\n\x0c\n\x05\x05\x01\
    \x02\x01\x02\x12\x03[\x19\x1a\n\x80\x01\n\x04\x05\x01\x02\x02\x12\x03^\
    \x02\x1a\x1as\x20BROADCAST_MODE_SYNC\x20defines\x20a\x20tx\x20broadcasti\
    ng\x20mode\x20where\x20the\x20client\x20waits\x20for\n\x20a\x20CheckTx\
    \x20execution\x20response\x20only.\n\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\
    \x03^\x02\x15\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03^\x18\x19\ni\n\x04\
    \x05\x01\x02\x03\x12\x03a\x02\x1b\x1a\\\x20BROADCAST_MODE_ASYNC\x20defin\
    es\x20a\x20tx\x20broadcasting\x20mode\x20where\x20the\x20client\x20retur\
    ns\n\x20immediately.\n\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03a\x02\x16\
    \n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03a\x19\x1a\n[\n\x02\x04\x03\x12\
    \x04f\0i\x01\x1aO\x20BroadcastTxResponse\x20is\x20the\x20response\x20typ\
    e\x20for\x20the\n\x20Service.BroadcastTx\x20method.\n\n\n\n\x03\x04\x03\
    \x01\x12\x03f\x08\x1b\n6\n\x04\x04\x03\x02\0\x12\x03h\x026\x1a)\x20tx_re\
    sponse\x20is\x20the\x20queried\x20TxResponses.\n\n\x0c\n\x05\x04\x03\x02\
    \0\x06\x12\x03h\x02%\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03h&1\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03h45\nW\n\x02\x04\x04\x12\x04m\0u\x01\x1aK\
    \x20SimulateRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Ser\
    vice.Simulate\n\x20RPC\x20method.\n\n\n\n\x03\x04\x04\x01\x12\x03m\x08\
    \x17\nY\n\x04\x04\x04\x02\0\x12\x03p\x022\x1aL\x20tx\x20is\x20the\x20tra\
    nsaction\x20to\x20simulate.\n\x20Deprecated.\x20Send\x20raw\x20tx\x20byt\
    es\x20instead.\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03p\x02\x16\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03p\x17\x19\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03p\x1c\x1d\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03p\x1e1\n\r\n\x06\
    \x04\x04\x02\0\x08\x03\x12\x03p\x1f0\nH\n\x04\x04\x04\x02\x01\x12\x03t\
    \x02\x15\x1a;\x20tx_bytes\x20is\x20the\x20raw\x20transaction.\n\n\x20Sin\
    ce:\x20cosmos-sdk\x200.43\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03t\x02\
    \x07\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03t\x08\x10\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03t\x13\x14\nX\n\x02\x04\x05\x12\x04y\0~\x01\x1aL\
    \x20SimulateResponse\x20is\x20the\x20response\x20type\x20for\x20the\n\
    \x20Service.SimulateRPC\x20method.\n\n\n\n\x03\x04\x05\x01\x12\x03y\x08\
    \x18\nL\n\x04\x04\x05\x02\0\x12\x03{\x020\x1a?\x20gas_info\x20is\x20the\
    \x20information\x20about\x20gas\x20used\x20in\x20the\x20simulation.\n\n\
    \x0c\n\x05\x04\x05\x02\0\x06\x12\x03{\x02\"\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03{#+\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03{./\n6\n\x04\x04\
    \x05\x02\x01\x12\x03}\x02-\x1a)\x20result\x20is\x20the\x20result\x20of\
    \x20the\x20simulation.\n\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03}\x02!\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03}\"(\n\x0c\n\x05\x04\x05\x02\x01\
    \x03\x12\x03}+,\nS\n\x02\x04\x06\x12\x06\x82\x01\0\x85\x01\x01\x1aE\x20G\
    etTxRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Service.Get\
    Tx\n\x20RPC\x20method.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\x82\x01\x08\x14\
    \nF\n\x04\x04\x06\x02\0\x12\x04\x84\x01\x02\x12\x1a8\x20hash\x20is\x20th\
    e\x20tx\x20hash\x20to\x20query,\x20encoded\x20as\x20a\x20hex\x20string.\
    \n\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\x84\x01\x02\x08\n\r\n\x05\x04\x06\
    \x02\0\x01\x12\x04\x84\x01\t\r\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x84\
    \x01\x10\x11\nP\n\x02\x04\x07\x12\x06\x88\x01\0\x8d\x01\x01\x1aB\x20GetT\
    xResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Service.GetT\
    x\x20method.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\x88\x01\x08\x15\n.\n\x04\
    \x04\x07\x02\0\x12\x04\x8a\x01\x02\x1e\x1a\x20\x20tx\x20is\x20the\x20que\
    ried\x20transaction.\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\x8a\x01\x02\
    \x16\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\x8a\x01\x17\x19\n\r\n\x05\x04\
    \x07\x02\0\x03\x12\x04\x8a\x01\x1c\x1d\n7\n\x04\x04\x07\x02\x01\x12\x04\
    \x8c\x01\x026\x1a)\x20tx_response\x20is\x20the\x20queried\x20TxResponses\
    .\n\n\r\n\x05\x04\x07\x02\x01\x06\x12\x04\x8c\x01\x02%\n\r\n\x05\x04\x07\
    \x02\x01\x01\x12\x04\x8c\x01&1\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\x8c\
    \x0145\n\x82\x01\n\x02\x04\x08\x12\x06\x93\x01\0\x98\x01\x01\x1at\x20Get\
    BlockWithTxsRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Ser\
    vice.GetBlockWithTxs\n\x20RPC\x20method.\n\n\x20Since:\x20cosmos-sdk\x20\
    0.45.2\n\n\x0b\n\x03\x04\x08\x01\x12\x04\x93\x01\x08\x1e\n;\n\x04\x04\
    \x08\x02\0\x12\x04\x95\x01\x02\x13\x1a-\x20height\x20is\x20the\x20height\
    \x20of\x20the\x20block\x20to\x20query.\n\n\r\n\x05\x04\x08\x02\0\x05\x12\
    \x04\x95\x01\x02\x07\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\x95\x01\x08\x0e\
    \n\r\n\x05\x04\x08\x02\0\x03\x12\x04\x95\x01\x11\x12\n@\n\x04\x04\x08\
    \x02\x01\x12\x04\x97\x01\x027\x1a2\x20pagination\x20defines\x20a\x20pagi\
    nation\x20for\x20the\x20request.\n\n\r\n\x05\x04\x08\x02\x01\x06\x12\x04\
    \x97\x01\x02'\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\x97\x01(2\n\r\n\x05\
    \x04\x08\x02\x01\x03\x12\x04\x97\x0156\n\x7f\n\x02\x04\t\x12\x06\x9d\x01\
    \0\xa4\x01\x01\x1aq\x20GetBlockWithTxsResponse\x20is\x20the\x20response\
    \x20type\x20for\x20the\x20Service.GetBlockWithTxs\x20method.\n\n\x20Sinc\
    e:\x20cosmos-sdk\x200.45.2\n\n\x0b\n\x03\x04\t\x01\x12\x04\x9d\x01\x08\
    \x1f\n6\n\x04\x04\t\x02\0\x12\x04\x9f\x01\x02(\x1a(\x20txs\x20are\x20the\
    \x20transactions\x20in\x20the\x20block.\n\n\r\n\x05\x04\t\x02\0\x04\x12\
    \x04\x9f\x01\x02\n\n\r\n\x05\x04\t\x02\0\x06\x12\x04\x9f\x01\x0b\x1f\n\r\
    \n\x05\x04\t\x02\0\x01\x12\x04\x9f\x01\x20#\n\r\n\x05\x04\t\x02\0\x03\
    \x12\x04\x9f\x01&'\n\x0c\n\x04\x04\t\x02\x01\x12\x04\xa0\x01\x02)\n\r\n\
    \x05\x04\t\x02\x01\x06\x12\x04\xa0\x01\x02\x1b\n\r\n\x05\x04\t\x02\x01\
    \x01\x12\x04\xa0\x01\x1c$\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xa0\x01'(\
    \n\x0c\n\x04\x04\t\x02\x02\x12\x04\xa1\x01\x02)\n\r\n\x05\x04\t\x02\x02\
    \x06\x12\x04\xa1\x01\x02\x19\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\xa1\x01\
    \x1c!\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xa1\x01'(\nA\n\x04\x04\t\x02\
    \x03\x12\x04\xa3\x01\x028\x1a3\x20pagination\x20defines\x20a\x20paginati\
    on\x20for\x20the\x20response.\n\n\r\n\x05\x04\t\x02\x03\x06\x12\x04\xa3\
    \x01\x02(\n\r\n\x05\x04\t\x02\x03\x01\x12\x04\xa3\x01)3\n\r\n\x05\x04\t\
    \x02\x03\x03\x12\x04\xa3\x0167b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::abci::file_descriptor().clone());
            deps.push(super::tx::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::block::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(GetTxsEventRequest::generated_message_descriptor_data());
            messages.push(GetTxsEventResponse::generated_message_descriptor_data());
            messages.push(BroadcastTxRequest::generated_message_descriptor_data());
            messages.push(BroadcastTxResponse::generated_message_descriptor_data());
            messages.push(SimulateRequest::generated_message_descriptor_data());
            messages.push(SimulateResponse::generated_message_descriptor_data());
            messages.push(GetTxRequest::generated_message_descriptor_data());
            messages.push(GetTxResponse::generated_message_descriptor_data());
            messages.push(GetBlockWithTxsRequest::generated_message_descriptor_data());
            messages.push(GetBlockWithTxsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(OrderBy::generated_enum_descriptor_data());
            enums.push(BroadcastMode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
