// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/mint/v1beta1/mint.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Minter represents the minting state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.mint.v1beta1.Minter)
pub struct Minter {
    // message fields
    ///  current annual inflation rate
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.Minter.inflation)
    pub inflation: ::std::string::String,
    ///  current annual expected provisions
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.Minter.annual_provisions)
    pub annual_provisions: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.mint.v1beta1.Minter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Minter {
    fn default() -> &'a Minter {
        <Minter as ::protobuf::Message>::default_instance()
    }
}

impl Minter {
    pub fn new() -> Minter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inflation",
            |m: &Minter| { &m.inflation },
            |m: &mut Minter| { &mut m.inflation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "annual_provisions",
            |m: &Minter| { &m.annual_provisions },
            |m: &mut Minter| { &mut m.annual_provisions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Minter>(
            "Minter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Minter {
    const NAME: &'static str = "Minter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inflation = is.read_string()?;
                },
                18 => {
                    self.annual_provisions = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.inflation.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.inflation);
        }
        if !self.annual_provisions.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.annual_provisions);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.inflation.is_empty() {
            os.write_string(1, &self.inflation)?;
        }
        if !self.annual_provisions.is_empty() {
            os.write_string(2, &self.annual_provisions)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Minter {
        Minter::new()
    }

    fn clear(&mut self) {
        self.inflation.clear();
        self.annual_provisions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Minter {
        static instance: Minter = Minter {
            inflation: ::std::string::String::new(),
            annual_provisions: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Minter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Minter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Minter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Minter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Params holds parameters for the mint module.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.mint.v1beta1.Params)
pub struct Params {
    // message fields
    ///  type of coin to mint
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.Params.mint_denom)
    pub mint_denom: ::std::string::String,
    ///  maximum annual change in inflation rate
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.Params.inflation_rate_change)
    pub inflation_rate_change: ::std::string::String,
    ///  maximum inflation rate
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.Params.inflation_max)
    pub inflation_max: ::std::string::String,
    ///  minimum inflation rate
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.Params.inflation_min)
    pub inflation_min: ::std::string::String,
    ///  goal of percent bonded atoms
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.Params.goal_bonded)
    pub goal_bonded: ::std::string::String,
    ///  expected blocks per year
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.Params.blocks_per_year)
    pub blocks_per_year: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.mint.v1beta1.Params.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mint_denom",
            |m: &Params| { &m.mint_denom },
            |m: &mut Params| { &mut m.mint_denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inflation_rate_change",
            |m: &Params| { &m.inflation_rate_change },
            |m: &mut Params| { &mut m.inflation_rate_change },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inflation_max",
            |m: &Params| { &m.inflation_max },
            |m: &mut Params| { &mut m.inflation_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inflation_min",
            |m: &Params| { &m.inflation_min },
            |m: &mut Params| { &mut m.inflation_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "goal_bonded",
            |m: &Params| { &m.goal_bonded },
            |m: &mut Params| { &mut m.goal_bonded },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "blocks_per_year",
            |m: &Params| { &m.blocks_per_year },
            |m: &mut Params| { &mut m.blocks_per_year },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Params>(
            "Params",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Params {
    const NAME: &'static str = "Params";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mint_denom = is.read_string()?;
                },
                18 => {
                    self.inflation_rate_change = is.read_string()?;
                },
                26 => {
                    self.inflation_max = is.read_string()?;
                },
                34 => {
                    self.inflation_min = is.read_string()?;
                },
                42 => {
                    self.goal_bonded = is.read_string()?;
                },
                48 => {
                    self.blocks_per_year = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mint_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mint_denom);
        }
        if !self.inflation_rate_change.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.inflation_rate_change);
        }
        if !self.inflation_max.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.inflation_max);
        }
        if !self.inflation_min.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.inflation_min);
        }
        if !self.goal_bonded.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.goal_bonded);
        }
        if self.blocks_per_year != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.blocks_per_year);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mint_denom.is_empty() {
            os.write_string(1, &self.mint_denom)?;
        }
        if !self.inflation_rate_change.is_empty() {
            os.write_string(2, &self.inflation_rate_change)?;
        }
        if !self.inflation_max.is_empty() {
            os.write_string(3, &self.inflation_max)?;
        }
        if !self.inflation_min.is_empty() {
            os.write_string(4, &self.inflation_min)?;
        }
        if !self.goal_bonded.is_empty() {
            os.write_string(5, &self.goal_bonded)?;
        }
        if self.blocks_per_year != 0 {
            os.write_uint64(6, self.blocks_per_year)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Params {
        Params::new()
    }

    fn clear(&mut self) {
        self.mint_denom.clear();
        self.inflation_rate_change.clear();
        self.inflation_max.clear();
        self.inflation_min.clear();
        self.goal_bonded.clear();
        self.blocks_per_year = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Params {
        static instance: Params = Params {
            mint_denom: ::std::string::String::new(),
            inflation_rate_change: ::std::string::String::new(),
            inflation_max: ::std::string::String::new(),
            inflation_min: ::std::string::String::new(),
            goal_bonded: ::std::string::String::new(),
            blocks_per_year: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Params {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Params").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecosmos/mint/v1beta1/mint.proto\x12\x13cosmos.mint.v1beta1\x1a\x14g\
    ogoproto/gogo.proto\"\xcf\x01\n\x06Minter\x12L\n\tinflation\x18\x01\x20\
    \x01(\tR\tinflationB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\
    \xc8\xde\x1f\0\x12w\n\x11annual_provisions\x18\x02\x20\x01(\tR\x10annual\
    ProvisionsBJ\xf2\xde\x1f\x18yaml:\"annual_provisions\"\xda\xde\x1f&githu\
    b.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\"\xb7\x04\n\x06Params\
    \x12\x1d\n\nmint_denom\x18\x01\x20\x01(\tR\tmintDenom\x12\x82\x01\n\x15i\
    nflation_rate_change\x18\x02\x20\x01(\tR\x13inflationRateChangeBN\xf2\
    \xde\x1f\x1cyaml:\"inflation_rate_change\"\xda\xde\x1f&github.com/cosmos\
    /cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12k\n\rinflation_max\x18\x03\x20\
    \x01(\tR\x0cinflationMaxBF\xf2\xde\x1f\x14yaml:\"inflation_max\"\xda\xde\
    \x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12k\n\rinflat\
    ion_min\x18\x04\x20\x01(\tR\x0cinflationMinBF\xf2\xde\x1f\x14yaml:\"infl\
    ation_min\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\
    \x1f\0\x12e\n\x0bgoal_bonded\x18\x05\x20\x01(\tR\ngoalBondedBD\xf2\xde\
    \x1f\x12yaml:\"goal_bonded\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/ty\
    pes.Dec\xc8\xde\x1f\0\x12B\n\x0fblocks_per_year\x18\x06\x20\x01(\x04R\rb\
    locksPerYearB\x1a\xf2\xde\x1f\x16yaml:\"blocks_per_year\":\x04\x98\xa0\
    \x1f\0B+Z)github.com/cosmos/cosmos-sdk/x/mint/typesJ\xb0\n\n\x06\x12\x04\
    \0\04\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\
    \x1c\n\x08\n\x01\x08\x12\x03\x03\0@\n\t\n\x02\x08\x0b\x12\x03\x03\0@\n\t\
    \n\x02\x03\0\x12\x03\x05\0\x1e\n2\n\x02\x04\0\x12\x04\x08\0\x12\x01\x1a&\
    \x20Minter\x20represents\x20the\x20minting\x20state.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x08\x08\x0e\n-\n\x04\x04\0\x02\0\x12\x04\n\x02\x0bh\x1a\x1f\
    \x20current\x20annual\x20inflation\x20rate\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\t\x12\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\n\x15\x16\n\x0c\n\x05\x04\0\x02\0\x08\x12\
    \x03\x0b\x06g\n\x0f\n\x08\x04\0\x02\0\x08\xeb\xfb\x03\x12\x03\x0b\x07H\n\
    \x0f\n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\x0bJf\n2\n\x04\x04\0\x02\
    \x01\x12\x04\r\x02\x11\x04\x1a$\x20current\x20annual\x20expected\x20prov\
    isions\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\r\t\x1a\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r\
    \x1d\x1e\n\r\n\x05\x04\0\x02\x01\x08\x12\x04\r\x1f\x11\x03\n\x0f\n\x08\
    \x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x0e\x049\n\x0f\n\x08\x04\0\x02\
    \x01\x08\xeb\xfb\x03\x12\x03\x0f\x04E\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\
    \xfb\x03\x12\x03\x10\x04\"\n:\n\x02\x04\x01\x12\x04\x15\04\x01\x1a.\x20P\
    arams\x20holds\x20parameters\x20for\x20the\x20mint\x20module.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\x15\x08\x0e\n\n\n\x03\x04\x01\x07\x12\x03\x16\
    \x02.\n\r\n\x06\x04\x01\x07\x83\xf4\x03\x12\x03\x16\x02.\n#\n\x04\x04\
    \x01\x02\0\x12\x03\x19\x02\x18\x1a\x16\x20type\x20of\x20coin\x20to\x20mi\
    nt\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x19\t\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x19\x16\x17\n7\n\x04\x04\x01\x02\x01\x12\x04\x1b\x02\x1f\x04\x1a)\x20ma\
    ximum\x20annual\x20change\x20in\x20inflation\x20rate\n\n\x0c\n\x05\x04\
    \x01\x02\x01\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x03\x1b\t\x1e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1b!\"\n\r\n\x05\
    \x04\x01\x02\x01\x08\x12\x04\x1b#\x1f\x03\n\x0f\n\x08\x04\x01\x02\x01\
    \x08\xee\xfb\x03\x12\x03\x1c\x04=\n\x0f\n\x08\x04\x01\x02\x01\x08\xeb\
    \xfb\x03\x12\x03\x1d\x04E\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\x03\
    \x12\x03\x1e\x04\"\n&\n\x04\x04\x01\x02\x02\x12\x04!\x02%\x04\x1a\x18\
    \x20maximum\x20inflation\x20rate\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\
    \x03!\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03!\t\x16\n\x0c\n\x05\
    \x04\x01\x02\x02\x03\x12\x03!\x19\x1a\n\r\n\x05\x04\x01\x02\x02\x08\x12\
    \x04!\x1b%\x03\n\x0f\n\x08\x04\x01\x02\x02\x08\xee\xfb\x03\x12\x03\"\x04\
    5\n\x0f\n\x08\x04\x01\x02\x02\x08\xeb\xfb\x03\x12\x03#\x04E\n\x0f\n\x08\
    \x04\x01\x02\x02\x08\xe9\xfb\x03\x12\x03$\x04\"\n&\n\x04\x04\x01\x02\x03\
    \x12\x04'\x02+\x04\x1a\x18\x20minimum\x20inflation\x20rate\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03'\t\x16\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03'\x19\x1a\n\r\n\
    \x05\x04\x01\x02\x03\x08\x12\x04'\x1b+\x03\n\x0f\n\x08\x04\x01\x02\x03\
    \x08\xee\xfb\x03\x12\x03(\x045\n\x0f\n\x08\x04\x01\x02\x03\x08\xeb\xfb\
    \x03\x12\x03)\x04E\n\x0f\n\x08\x04\x01\x02\x03\x08\xe9\xfb\x03\x12\x03*\
    \x04\"\n,\n\x04\x04\x01\x02\x04\x12\x04-\x021\x04\x1a\x1e\x20goal\x20of\
    \x20percent\x20bonded\x20atoms\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\
    -\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03-\t\x14\n\x0c\n\x05\x04\
    \x01\x02\x04\x03\x12\x03-\x17\x18\n\r\n\x05\x04\x01\x02\x04\x08\x12\x04-\
    \x191\x03\n\x0f\n\x08\x04\x01\x02\x04\x08\xee\xfb\x03\x12\x03.\x043\n\
    \x0f\n\x08\x04\x01\x02\x04\x08\xeb\xfb\x03\x12\x03/\x04E\n\x0f\n\x08\x04\
    \x01\x02\x04\x08\xe9\xfb\x03\x12\x030\x04\"\n'\n\x04\x04\x01\x02\x05\x12\
    \x033\x02Q\x1a\x1a\x20expected\x20blocks\x20per\x20year\n\n\x0c\n\x05\
    \x04\x01\x02\x05\x05\x12\x033\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\
    \x12\x033\t\x18\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x033\x1b\x1c\n\x0c\n\
    \x05\x04\x01\x02\x05\x08\x12\x033\x1dP\n\x0f\n\x08\x04\x01\x02\x05\x08\
    \xee\xfb\x03\x12\x033\x1eOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Minter::generated_message_descriptor_data());
            messages.push(Params::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
