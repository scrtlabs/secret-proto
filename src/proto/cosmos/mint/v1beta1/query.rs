// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/mint/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.mint.v1beta1.QueryParamsRequest)
pub struct QueryParamsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.mint.v1beta1.QueryParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsRequest>(
            "QueryParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: QueryParamsRequest = QueryParamsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.mint.v1beta1.QueryParamsResponse)
pub struct QueryParamsResponse {
    // message fields
    ///  params defines the parameters of the module.
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.QueryParamsResponse.params)
    pub params: ::protobuf::MessageField<super::mint::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.mint.v1beta1.QueryParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::mint::Params>(
            "params",
            |m: &QueryParamsResponse| { &m.params },
            |m: &mut QueryParamsResponse| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsResponse>(
            "QueryParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: QueryParamsResponse = QueryParamsResponse {
            params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryInflationRequest is the request type for the Query/Inflation RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.mint.v1beta1.QueryInflationRequest)
pub struct QueryInflationRequest {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.mint.v1beta1.QueryInflationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryInflationRequest {
    fn default() -> &'a QueryInflationRequest {
        <QueryInflationRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryInflationRequest {
    pub fn new() -> QueryInflationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryInflationRequest>(
            "QueryInflationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryInflationRequest {
    const NAME: &'static str = "QueryInflationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryInflationRequest {
        QueryInflationRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryInflationRequest {
        static instance: QueryInflationRequest = QueryInflationRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryInflationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryInflationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryInflationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInflationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryInflationResponse is the response type for the Query/Inflation RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.mint.v1beta1.QueryInflationResponse)
pub struct QueryInflationResponse {
    // message fields
    ///  inflation is the current minting inflation value.
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.QueryInflationResponse.inflation)
    pub inflation: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.mint.v1beta1.QueryInflationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryInflationResponse {
    fn default() -> &'a QueryInflationResponse {
        <QueryInflationResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryInflationResponse {
    pub fn new() -> QueryInflationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inflation",
            |m: &QueryInflationResponse| { &m.inflation },
            |m: &mut QueryInflationResponse| { &mut m.inflation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryInflationResponse>(
            "QueryInflationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryInflationResponse {
    const NAME: &'static str = "QueryInflationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inflation = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.inflation.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.inflation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.inflation.is_empty() {
            os.write_bytes(1, &self.inflation)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryInflationResponse {
        QueryInflationResponse::new()
    }

    fn clear(&mut self) {
        self.inflation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryInflationResponse {
        static instance: QueryInflationResponse = QueryInflationResponse {
            inflation: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryInflationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryInflationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryInflationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInflationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAnnualProvisionsRequest is the request type for the
///  Query/AnnualProvisions RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.mint.v1beta1.QueryAnnualProvisionsRequest)
pub struct QueryAnnualProvisionsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAnnualProvisionsRequest {
    fn default() -> &'a QueryAnnualProvisionsRequest {
        <QueryAnnualProvisionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAnnualProvisionsRequest {
    pub fn new() -> QueryAnnualProvisionsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAnnualProvisionsRequest>(
            "QueryAnnualProvisionsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAnnualProvisionsRequest {
    const NAME: &'static str = "QueryAnnualProvisionsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAnnualProvisionsRequest {
        QueryAnnualProvisionsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAnnualProvisionsRequest {
        static instance: QueryAnnualProvisionsRequest = QueryAnnualProvisionsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAnnualProvisionsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAnnualProvisionsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAnnualProvisionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAnnualProvisionsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAnnualProvisionsResponse is the response type for the
///  Query/AnnualProvisions RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.mint.v1beta1.QueryAnnualProvisionsResponse)
pub struct QueryAnnualProvisionsResponse {
    // message fields
    ///  annual_provisions is the current minting annual provisions value.
    // @@protoc_insertion_point(field:cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.annual_provisions)
    pub annual_provisions: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAnnualProvisionsResponse {
    fn default() -> &'a QueryAnnualProvisionsResponse {
        <QueryAnnualProvisionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAnnualProvisionsResponse {
    pub fn new() -> QueryAnnualProvisionsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "annual_provisions",
            |m: &QueryAnnualProvisionsResponse| { &m.annual_provisions },
            |m: &mut QueryAnnualProvisionsResponse| { &mut m.annual_provisions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAnnualProvisionsResponse>(
            "QueryAnnualProvisionsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAnnualProvisionsResponse {
    const NAME: &'static str = "QueryAnnualProvisionsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.annual_provisions = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.annual_provisions.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.annual_provisions);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.annual_provisions.is_empty() {
            os.write_bytes(1, &self.annual_provisions)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAnnualProvisionsResponse {
        QueryAnnualProvisionsResponse::new()
    }

    fn clear(&mut self) {
        self.annual_provisions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAnnualProvisionsResponse {
        static instance: QueryAnnualProvisionsResponse = QueryAnnualProvisionsResponse {
            annual_provisions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAnnualProvisionsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAnnualProvisionsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAnnualProvisionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAnnualProvisionsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/mint/v1beta1/query.proto\x12\x13cosmos.mint.v1beta1\x1a\x14\
    gogoproto/gogo.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1ecosmos/m\
    int/v1beta1/mint.proto\"\x14\n\x12QueryParamsRequest\"P\n\x13QueryParams\
    Response\x129\n\x06params\x18\x01\x20\x01(\x0b2\x1b.cosmos.mint.v1beta1.\
    ParamsR\x06paramsB\x04\xc8\xde\x1f\0\"\x17\n\x15QueryInflationRequest\"f\
    \n\x16QueryInflationResponse\x12L\n\tinflation\x18\x01\x20\x01(\x0cR\tin\
    flationB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\
    \0\"\x1e\n\x1cQueryAnnualProvisionsRequest\"|\n\x1dQueryAnnualProvisions\
    Response\x12[\n\x11annual_provisions\x18\x01\x20\x01(\x0cR\x10annualProv\
    isionsB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\
    \02\xc5\x03\n\x05Query\x12\x80\x01\n\x06Params\x12'.cosmos.mint.v1beta1.\
    QueryParamsRequest\x1a(.cosmos.mint.v1beta1.QueryParamsResponse\"#\x82\
    \xd3\xe4\x93\x02\x1d\x12\x1b/cosmos/mint/v1beta1/params\x12\x8c\x01\n\tI\
    nflation\x12*.cosmos.mint.v1beta1.QueryInflationRequest\x1a+.cosmos.mint\
    .v1beta1.QueryInflationResponse\"&\x82\xd3\xe4\x93\x02\x20\x12\x1e/cosmo\
    s/mint/v1beta1/inflation\x12\xa9\x01\n\x10AnnualProvisions\x121.cosmos.m\
    int.v1beta1.QueryAnnualProvisionsRequest\x1a2.cosmos.mint.v1beta1.QueryA\
    nnualProvisionsResponse\".\x82\xd3\xe4\x93\x02(\x12&/cosmos/mint/v1beta1\
    /annual_provisionsB+Z)github.com/cosmos/cosmos-sdk/x/mint/typesJ\xb2\r\n\
    \x06\x12\x04\0\08\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x1c\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\
    \x12\x03\x04\0&\n\t\n\x02\x03\x02\x12\x03\x05\0(\n\x08\n\x01\x08\x12\x03\
    \x07\0@\n\t\n\x02\x08\x0b\x12\x03\x07\0@\n>\n\x02\x06\0\x12\x04\n\0\x19\
    \x01\x1a2\x20Query\x20provides\x20defines\x20the\x20gRPC\x20querier\x20s\
    ervice.\n\n\n\n\x03\x06\0\x01\x12\x03\n\x08\r\nC\n\x04\x06\0\x02\0\x12\
    \x04\x0c\x02\x0e\x03\x1a5\x20Params\x20returns\x20the\x20total\x20set\
    \x20of\x20minting\x20parameters.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x0c\x06\x0c\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0c\r\x1f\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\x0c*=\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\r\x04\
    A\n\x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\r\x04A\nF\n\x04\
    \x06\0\x02\x01\x12\x04\x11\x02\x13\x03\x1a8\x20Inflation\x20returns\x20t\
    he\x20current\x20minting\x20inflation\x20value.\n\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\x11\x06\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x11\
    \x10%\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x110F\n\x0c\n\x05\x06\0\x02\
    \x01\x04\x12\x03\x12\x04D\n\x11\n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\x02\
    \x12\x03\x12\x04D\nI\n\x04\x06\0\x02\x02\x12\x04\x16\x02\x18\x03\x1a;\
    \x20AnnualProvisions\x20current\x20minting\x20annual\x20provisions\x20va\
    lue.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x16\x06\x16\n\x0c\n\x05\x06\
    \0\x02\x02\x02\x12\x03\x16\x173\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\
    \x16>[\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03\x17\x04L\n\x11\n\n\x06\0\
    \x02\x02\x04\xb0\xca\xbc\"\x02\x12\x03\x17\x04L\nT\n\x02\x04\0\x12\x03\
    \x1c\0\x1d\x1aI\x20QueryParamsRequest\x20is\x20the\x20request\x20type\
    \x20for\x20the\x20Query/Params\x20RPC\x20method.\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x1c\x08\x1a\nW\n\x02\x04\x01\x12\x04\x1f\0\"\x01\x1aK\x20QueryP\
    aramsResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Pa\
    rams\x20RPC\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1f\x08\x1b\n;\n\
    \x04\x04\x01\x02\0\x12\x03!\x023\x1a.\x20params\x20defines\x20the\x20par\
    ameters\x20of\x20the\x20module.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03!\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03!\t\x0f\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03!\x12\x13\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03!\
    \x142\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03!\x151\nZ\n\x02\
    \x04\x02\x12\x03%\0\x20\x1aO\x20QueryInflationRequest\x20is\x20the\x20re\
    quest\x20type\x20for\x20the\x20Query/Inflation\x20RPC\x20method.\n\n\n\n\
    \x03\x04\x02\x01\x12\x03%\x08\x1d\n^\n\x02\x04\x03\x12\x04)\0,\x01\x1aR\
    \x20QueryInflationResponse\x20is\x20the\x20response\x20type\x20for\x20th\
    e\x20Query/Inflation\x20RPC\n\x20method.\n\n\n\n\x03\x04\x03\x01\x12\x03\
    )\x08\x1e\n@\n\x04\x04\x03\x02\0\x12\x03+\x02x\x1a3\x20inflation\x20is\
    \x20the\x20current\x20minting\x20inflation\x20value.\n\n\x0c\n\x05\x04\
    \x03\x02\0\x05\x12\x03+\x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03+\
    \x08\x11\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03+\x14\x15\n\x0c\n\x05\x04\
    \x03\x02\0\x08\x12\x03+\x16w\n\x0f\n\x08\x04\x03\x02\0\x08\xeb\xfb\x03\
    \x12\x03+\x17X\n\x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03+Zv\ni\n\
    \x02\x04\x04\x12\x030\0'\x1a^\x20QueryAnnualProvisionsRequest\x20is\x20t\
    he\x20request\x20type\x20for\x20the\n\x20Query/AnnualProvisions\x20RPC\
    \x20method.\n\n\n\n\x03\x04\x04\x01\x12\x030\x08$\nl\n\x02\x04\x05\x12\
    \x044\08\x01\x1a`\x20QueryAnnualProvisionsResponse\x20is\x20the\x20respo\
    nse\x20type\x20for\x20the\n\x20Query/AnnualProvisions\x20RPC\x20method.\
    \n\n\n\n\x03\x04\x05\x01\x12\x034\x08%\nQ\n\x04\x04\x05\x02\0\x12\x046\
    \x027h\x1aC\x20annual_provisions\x20is\x20the\x20current\x20minting\x20a\
    nnual\x20provisions\x20value.\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x036\
    \x02\x07\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x036\x08\x19\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x036\x1c\x1d\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x037\
    \x06g\n\x0f\n\x08\x04\x05\x02\0\x08\xeb\xfb\x03\x12\x037\x07H\n\x0f\n\
    \x08\x04\x05\x02\0\x08\xe9\xfb\x03\x12\x037Jfb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::mint::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(QueryParamsRequest::generated_message_descriptor_data());
            messages.push(QueryParamsResponse::generated_message_descriptor_data());
            messages.push(QueryInflationRequest::generated_message_descriptor_data());
            messages.push(QueryInflationResponse::generated_message_descriptor_data());
            messages.push(QueryAnnualProvisionsRequest::generated_message_descriptor_data());
            messages.push(QueryAnnualProvisionsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
