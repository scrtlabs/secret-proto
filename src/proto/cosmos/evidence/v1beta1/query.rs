// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/evidence/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.evidence.v1beta1.QueryEvidenceRequest)
pub struct QueryEvidenceRequest {
    // message fields
    ///  evidence_hash defines the hash of the requested evidence.
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.QueryEvidenceRequest.evidence_hash)
    pub evidence_hash: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.evidence.v1beta1.QueryEvidenceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryEvidenceRequest {
    fn default() -> &'a QueryEvidenceRequest {
        <QueryEvidenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryEvidenceRequest {
    pub fn new() -> QueryEvidenceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "evidence_hash",
            |m: &QueryEvidenceRequest| { &m.evidence_hash },
            |m: &mut QueryEvidenceRequest| { &mut m.evidence_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryEvidenceRequest>(
            "QueryEvidenceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryEvidenceRequest {
    const NAME: &'static str = "QueryEvidenceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.evidence_hash = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.evidence_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.evidence_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.evidence_hash.is_empty() {
            os.write_bytes(1, &self.evidence_hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryEvidenceRequest {
        QueryEvidenceRequest::new()
    }

    fn clear(&mut self) {
        self.evidence_hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryEvidenceRequest {
        static instance: QueryEvidenceRequest = QueryEvidenceRequest {
            evidence_hash: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryEvidenceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryEvidenceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryEvidenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryEvidenceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.evidence.v1beta1.QueryEvidenceResponse)
pub struct QueryEvidenceResponse {
    // message fields
    ///  evidence returns the requested evidence.
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.QueryEvidenceResponse.evidence)
    pub evidence: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.evidence.v1beta1.QueryEvidenceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryEvidenceResponse {
    fn default() -> &'a QueryEvidenceResponse {
        <QueryEvidenceResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryEvidenceResponse {
    pub fn new() -> QueryEvidenceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "evidence",
            |m: &QueryEvidenceResponse| { &m.evidence },
            |m: &mut QueryEvidenceResponse| { &mut m.evidence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryEvidenceResponse>(
            "QueryEvidenceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryEvidenceResponse {
    const NAME: &'static str = "QueryEvidenceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.evidence)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.evidence.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.evidence.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryEvidenceResponse {
        QueryEvidenceResponse::new()
    }

    fn clear(&mut self) {
        self.evidence.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryEvidenceResponse {
        static instance: QueryEvidenceResponse = QueryEvidenceResponse {
            evidence: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryEvidenceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryEvidenceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryEvidenceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryEvidenceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
pub struct QueryAllEvidenceRequest {
    // message fields
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.QueryAllEvidenceRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.evidence.v1beta1.QueryAllEvidenceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAllEvidenceRequest {
    fn default() -> &'a QueryAllEvidenceRequest {
        <QueryAllEvidenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAllEvidenceRequest {
    pub fn new() -> QueryAllEvidenceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryAllEvidenceRequest| { &m.pagination },
            |m: &mut QueryAllEvidenceRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAllEvidenceRequest>(
            "QueryAllEvidenceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAllEvidenceRequest {
    const NAME: &'static str = "QueryAllEvidenceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAllEvidenceRequest {
        QueryAllEvidenceRequest::new()
    }

    fn clear(&mut self) {
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAllEvidenceRequest {
        static instance: QueryAllEvidenceRequest = QueryAllEvidenceRequest {
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAllEvidenceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAllEvidenceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAllEvidenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAllEvidenceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
pub struct QueryAllEvidenceResponse {
    // message fields
    ///  evidence returns all evidences.
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.evidence)
    pub evidence: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryAllEvidenceResponse {
    fn default() -> &'a QueryAllEvidenceResponse {
        <QueryAllEvidenceResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAllEvidenceResponse {
    pub fn new() -> QueryAllEvidenceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "evidence",
            |m: &QueryAllEvidenceResponse| { &m.evidence },
            |m: &mut QueryAllEvidenceResponse| { &mut m.evidence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryAllEvidenceResponse| { &m.pagination },
            |m: &mut QueryAllEvidenceResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryAllEvidenceResponse>(
            "QueryAllEvidenceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryAllEvidenceResponse {
    const NAME: &'static str = "QueryAllEvidenceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.evidence.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.evidence {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.evidence {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryAllEvidenceResponse {
        QueryAllEvidenceResponse::new()
    }

    fn clear(&mut self) {
        self.evidence.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryAllEvidenceResponse {
        static instance: QueryAllEvidenceResponse = QueryAllEvidenceResponse {
            evidence: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryAllEvidenceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryAllEvidenceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryAllEvidenceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAllEvidenceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#cosmos/evidence/v1beta1/query.proto\x12\x17cosmos.evidence.v1beta1\
    \x1a*cosmos/base/query/v1beta1/pagination.proto\x1a\x14gogoproto/gogo.pr\
    oto\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/api/annotations.proto\
    \"u\n\x14QueryEvidenceRequest\x12]\n\revidence_hash\x18\x01\x20\x01(\x0c\
    R\x0cevidenceHashB8\xfa\xde\x1f4github.com/tendermint/tendermint/libs/by\
    tes.HexBytes\"I\n\x15QueryEvidenceResponse\x120\n\x08evidence\x18\x01\
    \x20\x01(\x0b2\x14.google.protobuf.AnyR\x08evidence\"a\n\x17QueryAllEvid\
    enceRequest\x12F\n\npagination\x18\x01\x20\x01(\x0b2&.cosmos.base.query.\
    v1beta1.PageRequestR\npagination\"\x95\x01\n\x18QueryAllEvidenceResponse\
    \x120\n\x08evidence\x18\x01\x20\x03(\x0b2\x14.google.protobuf.AnyR\x08ev\
    idence\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1bet\
    a1.PageResponseR\npagination2\xce\x02\n\x05Query\x12\xa4\x01\n\x08Eviden\
    ce\x12-.cosmos.evidence.v1beta1.QueryEvidenceRequest\x1a..cosmos.evidenc\
    e.v1beta1.QueryEvidenceResponse\"9\x82\xd3\xe4\x93\x023\x121/cosmos/evid\
    ence/v1beta1/evidence/{evidence_hash}\x12\x9d\x01\n\x0bAllEvidence\x120.\
    cosmos.evidence.v1beta1.QueryAllEvidenceRequest\x1a1.cosmos.evidence.v1b\
    eta1.QueryAllEvidenceResponse\")\x82\xd3\xe4\x93\x02#\x12!/cosmos/eviden\
    ce/v1beta1/evidenceB/Z-github.com/cosmos/cosmos-sdk/x/evidence/typesJ\
    \x97\x0b\n\x06\x12\x04\0\02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x20\n\t\n\x02\x03\0\x12\x03\x03\04\n\t\n\x02\x03\
    \x01\x12\x03\x04\0\x1e\n\t\n\x02\x03\x02\x12\x03\x05\0#\n\t\n\x02\x03\
    \x03\x12\x03\x06\0&\n\x08\n\x01\x08\x12\x03\x08\0D\n\t\n\x02\x08\x0b\x12\
    \x03\x08\0D\n5\n\x02\x06\0\x12\x04\x0b\0\x15\x01\x1a)\x20Query\x20define\
    s\x20the\x20gRPC\x20querier\x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\
    \x0b\x08\r\nA\n\x04\x06\0\x02\0\x12\x04\r\x02\x0f\x03\x1a3\x20Evidence\
    \x20queries\x20evidence\x20based\x20on\x20evidence\x20hash.\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\r\x06\x0e\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\r\x0f#\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\r.C\n\x0c\n\x05\x06\0\
    \x02\0\x04\x12\x03\x0e\x04W\n\x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\
    \x12\x03\x0e\x04W\n1\n\x04\x06\0\x02\x01\x12\x04\x12\x02\x14\x03\x1a#\
    \x20AllEvidence\x20queries\x20all\x20evidence.\n\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\x12\x06\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x12\
    \x12)\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x124L\n\x0c\n\x05\x06\0\x02\
    \x01\x04\x12\x03\x13\x04G\n\x11\n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\x02\
    \x12\x03\x13\x04G\nY\n\x02\x04\0\x12\x04\x18\0\x1b\x01\x1aM\x20QueryEvid\
    enceRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Query/Evide\
    nce\x20RPC\x20method.\n\n\n\n\x03\x04\0\x01\x12\x03\x18\x08\x1c\nH\n\x04\
    \x04\0\x02\0\x12\x03\x1a\x02j\x1a;\x20evidence_hash\x20defines\x20the\
    \x20hash\x20of\x20the\x20requested\x20evidence.\n\n\x0c\n\x05\x04\0\x02\
    \0\x05\x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1a\x08\
    \x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1a\x18\x19\n\x0c\n\x05\x04\0\
    \x02\0\x08\x12\x03\x1a\x1ai\n\x0f\n\x08\x04\0\x02\0\x08\xef\xfb\x03\x12\
    \x03\x1a\x1bh\n[\n\x02\x04\x01\x12\x04\x1e\0!\x01\x1aO\x20QueryEvidenceR\
    esponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Evidence\
    \x20RPC\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1e\x08\x1d\n7\n\x04\
    \x04\x01\x02\0\x12\x03\x20\x02#\x1a*\x20evidence\x20returns\x20the\x20re\
    quested\x20evidence.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x20\x02\x15\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x20\x16\x1e\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x20!\"\n]\n\x02\x04\x02\x12\x04%\0(\x01\x1aQ\x20Query\
    EvidenceRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Query/A\
    llEvidence\x20RPC\n\x20method.\n\n\n\n\x03\x04\x02\x01\x12\x03%\x08\x1f\
    \nI\n\x04\x04\x02\x02\0\x12\x03'\x027\x1a<\x20pagination\x20defines\x20a\
    n\x20optional\x20pagination\x20for\x20the\x20request.\n\n\x0c\n\x05\x04\
    \x02\x02\0\x06\x12\x03'\x02'\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03'(2\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03'56\nb\n\x02\x04\x03\x12\x04,\02\x01\
    \x1aV\x20QueryAllEvidenceResponse\x20is\x20the\x20response\x20type\x20fo\
    r\x20the\x20Query/AllEvidence\x20RPC\n\x20method.\n\n\n\n\x03\x04\x03\
    \x01\x12\x03,\x08\x20\n.\n\x04\x04\x03\x02\0\x12\x03.\x02,\x1a!\x20evide\
    nce\x20returns\x20all\x20evidences.\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\
    \x03.\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03.\x0b\x1e\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03.\x1f'\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03.*\
    +\nA\n\x04\x04\x03\x02\x01\x12\x031\x028\x1a4\x20pagination\x20defines\
    \x20the\x20pagination\x20in\x20the\x20response.\n\n\x0c\n\x05\x04\x03\
    \x02\x01\x06\x12\x031\x02(\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x031)3\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x03167b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(QueryEvidenceRequest::generated_message_descriptor_data());
            messages.push(QueryEvidenceResponse::generated_message_descriptor_data());
            messages.push(QueryAllEvidenceRequest::generated_message_descriptor_data());
            messages.push(QueryAllEvidenceResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
