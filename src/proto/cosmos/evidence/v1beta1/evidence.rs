// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/evidence/v1beta1/evidence.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Equivocation implements the Evidence interface and defines evidence of double
///  signing misbehavior.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.evidence.v1beta1.Equivocation)
pub struct Equivocation {
    // message fields
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.Equivocation.height)
    pub height: i64,
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.Equivocation.time)
    pub time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.Equivocation.power)
    pub power: i64,
    // @@protoc_insertion_point(field:cosmos.evidence.v1beta1.Equivocation.consensus_address)
    pub consensus_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.evidence.v1beta1.Equivocation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Equivocation {
    fn default() -> &'a Equivocation {
        <Equivocation as ::protobuf::Message>::default_instance()
    }
}

impl Equivocation {
    pub fn new() -> Equivocation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &Equivocation| { &m.height },
            |m: &mut Equivocation| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "time",
            |m: &Equivocation| { &m.time },
            |m: &mut Equivocation| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "power",
            |m: &Equivocation| { &m.power },
            |m: &mut Equivocation| { &mut m.power },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consensus_address",
            |m: &Equivocation| { &m.consensus_address },
            |m: &mut Equivocation| { &mut m.consensus_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Equivocation>(
            "Equivocation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Equivocation {
    const NAME: &'static str = "Equivocation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                },
                24 => {
                    self.power = is.read_int64()?;
                },
                34 => {
                    self.consensus_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        if let Some(v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.power != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.power);
        }
        if !self.consensus_address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.consensus_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if let Some(v) = self.time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.power != 0 {
            os.write_int64(3, self.power)?;
        }
        if !self.consensus_address.is_empty() {
            os.write_string(4, &self.consensus_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Equivocation {
        Equivocation::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.time.clear();
        self.power = 0;
        self.consensus_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Equivocation {
        static instance: Equivocation = Equivocation {
            height: 0,
            time: ::protobuf::MessageField::none(),
            power: 0,
            consensus_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Equivocation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Equivocation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Equivocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Equivocation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&cosmos/evidence/v1beta1/evidence.proto\x12\x17cosmos.evidence.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\
    \xcf\x01\n\x0cEquivocation\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\x06\
    height\x128\n\x04time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Timestam\
    pR\x04timeB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x01\x12\x14\n\x05power\x18\x03\
    \x20\x01(\x03R\x05power\x12I\n\x11consensus_address\x18\x04\x20\x01(\tR\
    \x10consensusAddressB\x1c\xf2\xde\x1f\x18yaml:\"consensus_address\":\x0c\
    \x88\xa0\x1f\0\x98\xa0\x1f\0\xe8\xa0\x1f\0B3Z-github.com/cosmos/cosmos-s\
    dk/x/evidence/types\xa8\xe2\x1e\x01J\xd9\x04\n\x06\x12\x04\0\0\x14\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x20\n\x08\n\
    \x01\x08\x12\x03\x03\0O\n\t\n\x02\x08\x0b\x12\x03\x03\0O\n\x08\n\x01\x08\
    \x12\x03\x04\0$\n\x0b\n\x04\x08\xa5\xec\x03\x12\x03\x04\0$\n\t\n\x02\x03\
    \0\x12\x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\x03\x07\0)\nq\n\x02\x04\0\x12\
    \x04\x0b\0\x14\x01\x1ae\x20Equivocation\x20implements\x20the\x20Evidence\
    \x20interface\x20and\x20defines\x20evidence\x20of\x20double\n\x20signing\
    \x20misbehavior.\n\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x14\n\n\n\x03\x04\
    \0\x07\x12\x03\x0c\x02.\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\x03\x0c\x02.\
    \n\n\n\x03\x04\0\x07\x12\x03\r\x02.\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\
    \x03\r\x02.\n\n\n\x03\x04\0\x07\x12\x03\x0e\x02.\n\r\n\x06\x04\0\x07\x8d\
    \xf4\x03\x12\x03\x0e\x02.\n\x0b\n\x04\x04\0\x02\0\x12\x03\x10\x022\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x10\x1c\"\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1001\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x11\x02m\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\
    \x11\x02\x1b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x11\x1c\x20\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x1101\n\x0c\n\x05\x04\0\x02\x01\x08\x12\
    \x03\x112l\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x113O\n\x0f\
    \n\x08\x04\0\x02\x01\x08\xf2\xfb\x03\x12\x03\x11Qk\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x12\x022\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x12\x02\x07\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x12\x1c!\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x1201\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x13\x02h\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x13\x1c-\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1301\n\x0c\
    \n\x05\x04\0\x02\x03\x08\x12\x03\x132g\n\x0f\n\x08\x04\0\x02\x03\x08\xee\
    \xfb\x03\x12\x03\x133fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Equivocation::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
