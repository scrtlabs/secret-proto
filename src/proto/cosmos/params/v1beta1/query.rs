// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/params/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.params.v1beta1.QueryParamsRequest)
pub struct QueryParamsRequest {
    // message fields
    ///  subspace defines the module to query the parameter for.
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.QueryParamsRequest.subspace)
    pub subspace: ::std::string::String,
    ///  key defines the key of the parameter in the subspace.
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.QueryParamsRequest.key)
    pub key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.params.v1beta1.QueryParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "subspace",
            |m: &QueryParamsRequest| { &m.subspace },
            |m: &mut QueryParamsRequest| { &mut m.subspace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &QueryParamsRequest| { &m.key },
            |m: &mut QueryParamsRequest| { &mut m.key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsRequest>(
            "QueryParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.subspace = is.read_string()?;
                },
                18 => {
                    self.key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.subspace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subspace);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.subspace.is_empty() {
            os.write_string(1, &self.subspace)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn clear(&mut self) {
        self.subspace.clear();
        self.key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: QueryParamsRequest = QueryParamsRequest {
            subspace: ::std::string::String::new(),
            key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.params.v1beta1.QueryParamsResponse)
pub struct QueryParamsResponse {
    // message fields
    ///  param defines the queried parameter.
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.QueryParamsResponse.param)
    pub param: ::protobuf::MessageField<super::params::ParamChange>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.params.v1beta1.QueryParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::params::ParamChange>(
            "param",
            |m: &QueryParamsResponse| { &m.param },
            |m: &mut QueryParamsResponse| { &mut m.param },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsResponse>(
            "QueryParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.param)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.param.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.param.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn clear(&mut self) {
        self.param.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: QueryParamsResponse = QueryParamsResponse {
            param: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!cosmos/params/v1beta1/query.proto\x12\x15cosmos.params.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x1cgoogle/api/annotations.proto\x1a\"cosmos\
    /params/v1beta1/params.proto\"B\n\x12QueryParamsRequest\x12\x1a\n\x08sub\
    space\x18\x01\x20\x01(\tR\x08subspace\x12\x10\n\x03key\x18\x02\x20\x01(\
    \tR\x03key\"U\n\x13QueryParamsResponse\x12>\n\x05param\x18\x01\x20\x01(\
    \x0b2\".cosmos.params.v1beta1.ParamChangeR\x05paramB\x04\xc8\xde\x1f\02\
    \x90\x01\n\x05Query\x12\x86\x01\n\x06Params\x12).cosmos.params.v1beta1.Q\
    ueryParamsRequest\x1a*.cosmos.params.v1beta1.QueryParamsResponse\"%\x82\
    \xd3\xe4\x93\x02\x1f\x12\x1d/cosmos/params/v1beta1/paramsB6Z4github.com/\
    cosmos/cosmos-sdk/x/params/types/proposalJ\xdf\x06\n\x06\x12\x04\0\0\x1f\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1e\n\
    \t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\x12\x03\x04\0&\n\t\n\
    \x02\x03\x02\x12\x03\x05\0,\n\x08\n\x01\x08\x12\x03\x07\0K\n\t\n\x02\x08\
    \x0b\x12\x03\x07\0K\n5\n\x02\x06\0\x12\x04\n\0\x10\x01\x1a)\x20Query\x20\
    defines\x20the\x20gRPC\x20querier\x20service.\n\n\n\n\x03\x06\0\x01\x12\
    \x03\n\x08\r\n]\n\x04\x06\0\x02\0\x12\x04\r\x02\x0f\x03\x1aO\x20Params\
    \x20queries\x20a\x20specific\x20parameter\x20of\x20a\x20module,\x20given\
    \x20its\x20subspace\x20and\n\x20key.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\r\x06\x0c\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\r\r\x1f\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\r*=\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x0e\x04\
    C\n\x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x0e\x04C\nQ\n\x02\
    \x04\0\x12\x04\x13\0\x19\x01\x1aE\x20QueryParamsRequest\x20is\x20request\
    \x20type\x20for\x20the\x20Query/Params\x20RPC\x20method.\n\n\n\n\x03\x04\
    \0\x01\x12\x03\x13\x08\x1a\nF\n\x04\x04\0\x02\0\x12\x03\x15\x02\x16\x1a9\
    \x20subspace\x20defines\x20the\x20module\x20to\x20query\x20the\x20parame\
    ter\x20for.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x15\t\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x15\x14\x15\nD\n\x04\x04\0\x02\x01\x12\x03\x18\x02\x11\x1a7\x20key\
    \x20defines\x20the\x20key\x20of\x20the\x20parameter\x20in\x20the\x20subs\
    pace.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x18\t\x0c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x18\x0f\x10\nS\n\x02\x04\x01\x12\x04\x1c\0\x1f\x01\x1aG\x20QueryPar\
    amsResponse\x20is\x20response\x20type\x20for\x20the\x20Query/Params\x20R\
    PC\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1c\x08\x1b\n3\n\x04\x04\
    \x01\x02\0\x12\x03\x1e\x027\x1a&\x20param\x20defines\x20the\x20queried\
    \x20parameter.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1e\x02\r\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x1e\x0e\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1e\x16\x17\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x1e\x186\n\
    \x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03\x1e\x195b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::params::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(QueryParamsRequest::generated_message_descriptor_data());
            messages.push(QueryParamsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
