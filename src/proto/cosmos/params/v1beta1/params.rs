// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/params/v1beta1/params.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  ParameterChangeProposal defines a proposal to change one or more parameters.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.params.v1beta1.ParameterChangeProposal)
pub struct ParameterChangeProposal {
    // message fields
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.ParameterChangeProposal.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.ParameterChangeProposal.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.ParameterChangeProposal.changes)
    pub changes: ::std::vec::Vec<ParamChange>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.params.v1beta1.ParameterChangeProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParameterChangeProposal {
    fn default() -> &'a ParameterChangeProposal {
        <ParameterChangeProposal as ::protobuf::Message>::default_instance()
    }
}

impl ParameterChangeProposal {
    pub fn new() -> ParameterChangeProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &ParameterChangeProposal| { &m.title },
            |m: &mut ParameterChangeProposal| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &ParameterChangeProposal| { &m.description },
            |m: &mut ParameterChangeProposal| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "changes",
            |m: &ParameterChangeProposal| { &m.changes },
            |m: &mut ParameterChangeProposal| { &mut m.changes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ParameterChangeProposal>(
            "ParameterChangeProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ParameterChangeProposal {
    const NAME: &'static str = "ParameterChangeProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.title = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                26 => {
                    self.changes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        for value in &self.changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        for v in &self.changes {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParameterChangeProposal {
        ParameterChangeProposal::new()
    }

    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.changes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParameterChangeProposal {
        static instance: ParameterChangeProposal = ParameterChangeProposal {
            title: ::std::string::String::new(),
            description: ::std::string::String::new(),
            changes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ParameterChangeProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParameterChangeProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParameterChangeProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParameterChangeProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ParamChange defines an individual parameter change, for use in
///  ParameterChangeProposal.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.params.v1beta1.ParamChange)
pub struct ParamChange {
    // message fields
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.ParamChange.subspace)
    pub subspace: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.ParamChange.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.params.v1beta1.ParamChange.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.params.v1beta1.ParamChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParamChange {
    fn default() -> &'a ParamChange {
        <ParamChange as ::protobuf::Message>::default_instance()
    }
}

impl ParamChange {
    pub fn new() -> ParamChange {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "subspace",
            |m: &ParamChange| { &m.subspace },
            |m: &mut ParamChange| { &mut m.subspace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &ParamChange| { &m.key },
            |m: &mut ParamChange| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &ParamChange| { &m.value },
            |m: &mut ParamChange| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ParamChange>(
            "ParamChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ParamChange {
    const NAME: &'static str = "ParamChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.subspace = is.read_string()?;
                },
                18 => {
                    self.key = is.read_string()?;
                },
                26 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.subspace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subspace);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.subspace.is_empty() {
            os.write_string(1, &self.subspace)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(3, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParamChange {
        ParamChange::new()
    }

    fn clear(&mut self) {
        self.subspace.clear();
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParamChange {
        static instance: ParamChange = ParamChange {
            subspace: ::std::string::String::new(),
            key: ::std::string::String::new(),
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ParamChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParamChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParamChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParamChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"cosmos/params/v1beta1/params.proto\x12\x15cosmos.params.v1beta1\x1a\
    \x14gogoproto/gogo.proto\"\x9f\x01\n\x17ParameterChangeProposal\x12\x14\
    \n\x05title\x18\x01\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\
    \x02\x20\x01(\tR\x0bdescription\x12B\n\x07changes\x18\x03\x20\x03(\x0b2\
    \".cosmos.params.v1beta1.ParamChangeR\x07changesB\x04\xc8\xde\x1f\0:\x08\
    \x88\xa0\x1f\0\x98\xa0\x1f\0\"W\n\x0bParamChange\x12\x1a\n\x08subspace\
    \x18\x01\x20\x01(\tR\x08subspace\x12\x10\n\x03key\x18\x02\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x03\x20\x01(\tR\x05value:\x04\x98\xa0\x1f\
    \0B:Z4github.com/cosmos/cosmos-sdk/x/params/types/proposal\xa8\xe2\x1e\
    \x01J\xf7\x05\n\x06\x12\x04\0\0\x1a\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x01\0\x1e\n\x08\n\x01\x08\x12\x03\x03\0V\n\t\n\
    \x02\x08\x0b\x12\x03\x03\0V\n\x08\n\x01\x08\x12\x03\x04\0$\n\x0b\n\x04\
    \x08\xa5\xec\x03\x12\x03\x04\0$\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\nZ\n\
    \x02\x04\0\x12\x04\t\0\x10\x01\x1aN\x20ParameterChangeProposal\x20define\
    s\x20a\x20proposal\x20to\x20change\x20one\x20or\x20more\x20parameters.\n\
    \n\n\n\x03\x04\0\x01\x12\x03\t\x08\x1f\n\n\n\x03\x04\0\x07\x12\x03\n\x02\
    .\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\n\x02.\n\n\n\x03\x04\0\x07\x12\
    \x03\x0b\x02.\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\x03\x0b\x02.\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\r\x02'\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x17\x1c\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\r%&\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0e\x02'\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x0e\x17\"\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e%&\n\x0b\
    \n\x04\x04\0\x02\x02\x12\x03\x0f\x02F\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03\x0f\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x0f\x0b\x16\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x0f\x17\x1e\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x0f%&\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x0f'E\n\x0f\n\x08\
    \x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x0f(D\nf\n\x02\x04\x01\x12\x04\
    \x14\0\x1a\x01\x1aZ\x20ParamChange\x20defines\x20an\x20individual\x20par\
    ameter\x20change,\x20for\x20use\x20in\n\x20ParameterChangeProposal.\n\n\
    \n\n\x03\x04\x01\x01\x12\x03\x14\x08\x13\n\n\n\x03\x04\x01\x07\x12\x03\
    \x15\x02.\n\r\n\x06\x04\x01\x07\x83\xf4\x03\x12\x03\x15\x02.\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x17\x02\x16\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    \x17\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x17\t\x11\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x17\x14\x15\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\x18\x02\x16\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x18\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x18\t\x0c\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x18\x14\x15\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x19\x02\
    \x16\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03\x19\t\x0e\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\x19\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ParameterChangeProposal::generated_message_descriptor_data());
            messages.push(ParamChange::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
