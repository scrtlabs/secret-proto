// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/base/store/v1beta1/listening.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  StoreKVPair is a KVStore KVPair used for listening to state changes (Sets and Deletes)
///  It optionally includes the StoreKey for the originating KVStore and a Boolean flag to distinguish between Sets and
///  Deletes
///
///  Since: cosmos-sdk 0.43
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.store.v1beta1.StoreKVPair)
pub struct StoreKVPair {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.store.v1beta1.StoreKVPair.store_key)
    pub store_key: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.base.store.v1beta1.StoreKVPair.delete)
    pub delete: bool,
    // @@protoc_insertion_point(field:cosmos.base.store.v1beta1.StoreKVPair.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cosmos.base.store.v1beta1.StoreKVPair.value)
    pub value: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.store.v1beta1.StoreKVPair.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StoreKVPair {
    fn default() -> &'a StoreKVPair {
        <StoreKVPair as ::protobuf::Message>::default_instance()
    }
}

impl StoreKVPair {
    pub fn new() -> StoreKVPair {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "store_key",
            |m: &StoreKVPair| { &m.store_key },
            |m: &mut StoreKVPair| { &mut m.store_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delete",
            |m: &StoreKVPair| { &m.delete },
            |m: &mut StoreKVPair| { &mut m.delete },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &StoreKVPair| { &m.key },
            |m: &mut StoreKVPair| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &StoreKVPair| { &m.value },
            |m: &mut StoreKVPair| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StoreKVPair>(
            "StoreKVPair",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StoreKVPair {
    const NAME: &'static str = "StoreKVPair";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.store_key = is.read_string()?;
                },
                16 => {
                    self.delete = is.read_bool()?;
                },
                26 => {
                    self.key = is.read_bytes()?;
                },
                34 => {
                    self.value = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.store_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.store_key);
        }
        if self.delete != false {
            my_size += 1 + 1;
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.store_key.is_empty() {
            os.write_string(1, &self.store_key)?;
        }
        if self.delete != false {
            os.write_bool(2, self.delete)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(3, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(4, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StoreKVPair {
        StoreKVPair::new()
    }

    fn clear(&mut self) {
        self.store_key.clear();
        self.delete = false;
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StoreKVPair {
        static instance: StoreKVPair = StoreKVPair {
            store_key: ::std::string::String::new(),
            delete: false,
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StoreKVPair {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StoreKVPair").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StoreKVPair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreKVPair {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)cosmos/base/store/v1beta1/listening.proto\x12\x19cosmos.base.store.v1\
    beta1\"j\n\x0bStoreKVPair\x12\x1b\n\tstore_key\x18\x01\x20\x01(\tR\x08st\
    oreKey\x12\x16\n\x06delete\x18\x02\x20\x01(\x08R\x06delete\x12\x10\n\x03\
    key\x18\x03\x20\x01(\x0cR\x03key\x12\x14\n\x05value\x18\x04\x20\x01(\x0c\
    R\x05valueB*Z(github.com/cosmos/cosmos-sdk/store/typesJ\x98\x05\n\x06\
    \x12\x04\0\0\x0f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x01\0\"\n\x08\n\x01\x08\x12\x03\x03\0?\n\t\n\x02\x08\x0b\x12\x03\
    \x03\0?\n\xfb\x01\n\x02\x04\0\x12\x04\n\0\x0f\x01\x1a\xee\x01\x20StoreKV\
    Pair\x20is\x20a\x20KVStore\x20KVPair\x20used\x20for\x20listening\x20to\
    \x20state\x20changes\x20(Sets\x20and\x20Deletes)\n\x20It\x20optionally\
    \x20includes\x20the\x20StoreKey\x20for\x20the\x20originating\x20KVStore\
    \x20and\x20a\x20Boolean\x20flag\x20to\x20distinguish\x20between\x20Sets\
    \x20and\n\x20Deletes\n\n\x20Since:\x20cosmos-sdk\x200.43\n\n\n\n\x03\x04\
    \0\x01\x12\x03\n\x08\x13\nF\n\x04\x04\0\x02\0\x12\x03\x0b\x02\x17\"9\x20\
    the\x20store\x20key\x20for\x20the\x20KVStore\x20this\x20pair\x20originat\
    es\x20from\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0b\t\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0b\x15\x16\nQ\n\x04\x04\0\x02\x01\x12\x03\x0c\x02\x17\"D\x20true\x20in\
    dicates\x20a\x20delete\x20operation,\x20false\x20indicates\x20a\x20set\
    \x20operation\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0c\x02\x06\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x0c\x07\r\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x0c\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03\r\x02\x17\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\r\x08\x0b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\r\x15\x16\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03\x0e\x02\x17\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\x0e\x02\x07\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0e\x08\r\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0e\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(StoreKVPair::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
