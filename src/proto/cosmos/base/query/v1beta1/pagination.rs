// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/base/query/v1beta1/pagination.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.query.v1beta1.PageRequest)
pub struct PageRequest {
    // message fields
    ///  key is a value returned in PageResponse.next_key to begin
    ///  querying the next page most efficiently. Only one of offset or key
    ///  should be set.
    // @@protoc_insertion_point(field:cosmos.base.query.v1beta1.PageRequest.key)
    pub key: ::std::vec::Vec<u8>,
    ///  offset is a numeric offset that can be used when key is unavailable.
    ///  It is less efficient than using key. Only one of offset or key should
    ///  be set.
    // @@protoc_insertion_point(field:cosmos.base.query.v1beta1.PageRequest.offset)
    pub offset: u64,
    ///  limit is the total number of results to be returned in the result page.
    ///  If left empty it will default to a value to be set by each app.
    // @@protoc_insertion_point(field:cosmos.base.query.v1beta1.PageRequest.limit)
    pub limit: u64,
    ///  count_total is set to true  to indicate that the result set should include
    ///  a count of the total number of items available for pagination in UIs.
    ///  count_total is only respected when offset is used. It is ignored when key
    ///  is set.
    // @@protoc_insertion_point(field:cosmos.base.query.v1beta1.PageRequest.count_total)
    pub count_total: bool,
    ///  reverse is set to true if results are to be returned in the descending order.
    ///
    ///  Since: cosmos-sdk 0.43
    // @@protoc_insertion_point(field:cosmos.base.query.v1beta1.PageRequest.reverse)
    pub reverse: bool,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.query.v1beta1.PageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PageRequest {
    fn default() -> &'a PageRequest {
        <PageRequest as ::protobuf::Message>::default_instance()
    }
}

impl PageRequest {
    pub fn new() -> PageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &PageRequest| { &m.key },
            |m: &mut PageRequest| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &PageRequest| { &m.offset },
            |m: &mut PageRequest| { &mut m.offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "limit",
            |m: &PageRequest| { &m.limit },
            |m: &mut PageRequest| { &mut m.limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count_total",
            |m: &PageRequest| { &m.count_total },
            |m: &mut PageRequest| { &mut m.count_total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reverse",
            |m: &PageRequest| { &m.reverse },
            |m: &mut PageRequest| { &mut m.reverse },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PageRequest>(
            "PageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PageRequest {
    const NAME: &'static str = "PageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                16 => {
                    self.offset = is.read_uint64()?;
                },
                24 => {
                    self.limit = is.read_uint64()?;
                },
                32 => {
                    self.count_total = is.read_bool()?;
                },
                40 => {
                    self.reverse = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.offset);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.limit);
        }
        if self.count_total != false {
            my_size += 1 + 1;
        }
        if self.reverse != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if self.offset != 0 {
            os.write_uint64(2, self.offset)?;
        }
        if self.limit != 0 {
            os.write_uint64(3, self.limit)?;
        }
        if self.count_total != false {
            os.write_bool(4, self.count_total)?;
        }
        if self.reverse != false {
            os.write_bool(5, self.reverse)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PageRequest {
        PageRequest::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.offset = 0;
        self.limit = 0;
        self.count_total = false;
        self.reverse = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PageRequest {
        static instance: PageRequest = PageRequest {
            key: ::std::vec::Vec::new(),
            offset: 0,
            limit: 0,
            count_total: false,
            reverse: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.query.v1beta1.PageResponse)
pub struct PageResponse {
    // message fields
    ///  next_key is the key to be passed to PageRequest.key to
    ///  query the next page most efficiently
    // @@protoc_insertion_point(field:cosmos.base.query.v1beta1.PageResponse.next_key)
    pub next_key: ::std::vec::Vec<u8>,
    ///  total is total number of results available if PageRequest.count_total
    ///  was set, its value is undefined otherwise
    // @@protoc_insertion_point(field:cosmos.base.query.v1beta1.PageResponse.total)
    pub total: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.query.v1beta1.PageResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PageResponse {
    fn default() -> &'a PageResponse {
        <PageResponse as ::protobuf::Message>::default_instance()
    }
}

impl PageResponse {
    pub fn new() -> PageResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_key",
            |m: &PageResponse| { &m.next_key },
            |m: &mut PageResponse| { &mut m.next_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total",
            |m: &PageResponse| { &m.total },
            |m: &mut PageResponse| { &mut m.total },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PageResponse>(
            "PageResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PageResponse {
    const NAME: &'static str = "PageResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.next_key = is.read_bytes()?;
                },
                16 => {
                    self.total = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.next_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.next_key);
        }
        if self.total != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.total);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.next_key.is_empty() {
            os.write_bytes(1, &self.next_key)?;
        }
        if self.total != 0 {
            os.write_uint64(2, self.total)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PageResponse {
        PageResponse::new()
    }

    fn clear(&mut self) {
        self.next_key.clear();
        self.total = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PageResponse {
        static instance: PageResponse = PageResponse {
            next_key: ::std::vec::Vec::new(),
            total: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PageResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PageResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PageResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*cosmos/base/query/v1beta1/pagination.proto\x12\x19cosmos.base.query.v\
    1beta1\"\x88\x01\n\x0bPageRequest\x12\x10\n\x03key\x18\x01\x20\x01(\x0cR\
    \x03key\x12\x16\n\x06offset\x18\x02\x20\x01(\x04R\x06offset\x12\x14\n\
    \x05limit\x18\x03\x20\x01(\x04R\x05limit\x12\x1f\n\x0bcount_total\x18\
    \x04\x20\x01(\x08R\ncountTotal\x12\x18\n\x07reverse\x18\x05\x20\x01(\x08\
    R\x07reverse\"?\n\x0cPageResponse\x12\x19\n\x08next_key\x18\x01\x20\x01(\
    \x0cR\x07nextKey\x12\x14\n\x05total\x18\x02\x20\x01(\x04R\x05totalB*Z(gi\
    thub.com/cosmos/cosmos-sdk/types/queryJ\xe6\x0e\n\x06\x12\x04\0\06\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\"\n\x08\n\
    \x01\x08\x12\x03\x03\0?\n\t\n\x02\x08\x0b\x12\x03\x03\0?\n\xc9\x01\n\x02\
    \x04\0\x12\x04\x0c\0%\x01\x1a\xbc\x01\x20PageRequest\x20is\x20to\x20be\
    \x20embedded\x20in\x20gRPC\x20request\x20messages\x20for\x20efficient\n\
    \x20pagination.\x20Ex:\n\n\x20\x20message\x20SomeRequest\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20Foo\x20some_parameter\x20=\x201;\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20PageRequest\x20pagination\x20=\x202;\
    \n\x20\x20}\n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x13\n\x9d\x01\n\x04\
    \x04\0\x02\0\x12\x03\x10\x02\x10\x1a\x8f\x01\x20key\x20is\x20a\x20value\
    \x20returned\x20in\x20PageResponse.next_key\x20to\x20begin\n\x20querying\
    \x20the\x20next\x20page\x20most\x20efficiently.\x20Only\x20one\x20of\x20\
    offset\x20or\x20key\n\x20should\x20be\x20set.\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x10\x08\x0b\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x0e\x0f\n\xa4\x01\n\x04\x04\0\
    \x02\x01\x12\x03\x15\x02\x14\x1a\x96\x01\x20offset\x20is\x20a\x20numeric\
    \x20offset\x20that\x20can\x20be\x20used\x20when\x20key\x20is\x20unavaila\
    ble.\n\x20It\x20is\x20less\x20efficient\x20than\x20using\x20key.\x20Only\
    \x20one\x20of\x20offset\x20or\x20key\x20should\n\x20be\x20set.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x15\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x15\x12\x13\n\
    \x98\x01\n\x04\x04\0\x02\x02\x12\x03\x19\x02\x13\x1a\x8a\x01\x20limit\
    \x20is\x20the\x20total\x20number\x20of\x20results\x20to\x20be\x20returne\
    d\x20in\x20the\x20result\x20page.\n\x20If\x20left\x20empty\x20it\x20will\
    \x20default\x20to\x20a\x20value\x20to\x20be\x20set\x20by\x20each\x20app.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x19\t\x0e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x19\
    \x11\x12\n\xf5\x01\n\x04\x04\0\x02\x03\x12\x03\x1f\x02\x17\x1a\xe7\x01\
    \x20count_total\x20is\x20set\x20to\x20true\x20\x20to\x20indicate\x20that\
    \x20the\x20result\x20set\x20should\x20include\n\x20a\x20count\x20of\x20t\
    he\x20total\x20number\x20of\x20items\x20available\x20for\x20pagination\
    \x20in\x20UIs.\n\x20count_total\x20is\x20only\x20respected\x20when\x20of\
    fset\x20is\x20used.\x20It\x20is\x20ignored\x20when\x20key\n\x20is\x20set\
    .\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x1f\x02\x06\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\x1f\x07\x12\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x1f\x15\x16\nu\n\x04\x04\0\x02\x04\x12\x03$\x02\x13\x1ah\x20reverse\x20\
    is\x20set\x20to\x20true\x20if\x20results\x20are\x20to\x20be\x20returned\
    \x20in\x20the\x20descending\x20order.\n\n\x20Since:\x20cosmos-sdk\x200.4\
    3\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03$\x02\x06\n\x0c\n\x05\x04\0\x02\
    \x04\x01\x12\x03$\x07\x0e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03$\x11\x12\
    \n\xe9\x01\n\x02\x04\x01\x12\x04.\06\x01\x1a\xdc\x01\x20PageResponse\x20\
    is\x20to\x20be\x20embedded\x20in\x20gRPC\x20response\x20messages\x20wher\
    e\x20the\n\x20corresponding\x20request\x20message\x20has\x20used\x20Page\
    Request.\n\n\x20\x20message\x20SomeResponse\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20repeated\x20Bar\x20results\x20=\x201;\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20PageResponse\x20page\x20=\x202;\n\x20\x20}\n\
    \n\n\n\x03\x04\x01\x01\x12\x03.\x08\x14\nk\n\x04\x04\x01\x02\0\x12\x031\
    \x02\x15\x1a^\x20next_key\x20is\x20the\x20key\x20to\x20be\x20passed\x20t\
    o\x20PageRequest.key\x20to\n\x20query\x20the\x20next\x20page\x20most\x20\
    efficiently\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x031\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x031\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x031\x13\x14\n\x7f\n\x04\x04\x01\x02\x01\x12\x035\x02\x13\x1ar\x20total\
    \x20is\x20total\x20number\x20of\x20results\x20available\x20if\x20PageReq\
    uest.count_total\n\x20was\x20set,\x20its\x20value\x20is\x20undefined\x20\
    otherwise\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x035\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x035\t\x0e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x035\x11\x12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PageRequest::generated_message_descriptor_data());
            messages.push(PageResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
