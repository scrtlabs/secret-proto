// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/base/snapshots/v1beta1/snapshot.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Snapshot contains Tendermint state sync snapshot info.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.snapshots.v1beta1.Snapshot)
pub struct Snapshot {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.Snapshot.height)
    pub height: u64,
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.Snapshot.format)
    pub format: u32,
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.Snapshot.chunks)
    pub chunks: u32,
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.Snapshot.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.Snapshot.metadata)
    pub metadata: ::protobuf::MessageField<Metadata>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.snapshots.v1beta1.Snapshot.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Snapshot {
    fn default() -> &'a Snapshot {
        <Snapshot as ::protobuf::Message>::default_instance()
    }
}

impl Snapshot {
    pub fn new() -> Snapshot {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &Snapshot| { &m.height },
            |m: &mut Snapshot| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &Snapshot| { &m.format },
            |m: &mut Snapshot| { &mut m.format },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chunks",
            |m: &Snapshot| { &m.chunks },
            |m: &mut Snapshot| { &mut m.chunks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &Snapshot| { &m.hash },
            |m: &mut Snapshot| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Metadata>(
            "metadata",
            |m: &Snapshot| { &m.metadata },
            |m: &mut Snapshot| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Snapshot>(
            "Snapshot",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Snapshot {
    const NAME: &'static str = "Snapshot";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_uint64()?;
                },
                16 => {
                    self.format = is.read_uint32()?;
                },
                24 => {
                    self.chunks = is.read_uint32()?;
                },
                34 => {
                    self.hash = is.read_bytes()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.height);
        }
        if self.format != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.format);
        }
        if self.chunks != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.chunks);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.hash);
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        if self.format != 0 {
            os.write_uint32(2, self.format)?;
        }
        if self.chunks != 0 {
            os.write_uint32(3, self.chunks)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(4, &self.hash)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Snapshot {
        Snapshot::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.format = 0;
        self.chunks = 0;
        self.hash.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Snapshot {
        static instance: Snapshot = Snapshot {
            height: 0,
            format: 0,
            chunks: 0,
            hash: ::std::vec::Vec::new(),
            metadata: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Snapshot {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Snapshot").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Snapshot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Snapshot {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Metadata contains SDK-specific snapshot metadata.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.snapshots.v1beta1.Metadata)
pub struct Metadata {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.Metadata.chunk_hashes)
    pub chunk_hashes: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.snapshots.v1beta1.Metadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chunk_hashes",
            |m: &Metadata| { &m.chunk_hashes },
            |m: &mut Metadata| { &mut m.chunk_hashes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metadata>(
            "Metadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metadata {
    const NAME: &'static str = "Metadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chunk_hashes.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.chunk_hashes {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.chunk_hashes {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn clear(&mut self) {
        self.chunk_hashes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metadata {
        static instance: Metadata = Metadata {
            chunk_hashes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Metadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SnapshotItem is an item contained in a rootmulti.Store snapshot.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.snapshots.v1beta1.SnapshotItem)
pub struct SnapshotItem {
    // message oneof groups
    pub item: ::std::option::Option<snapshot_item::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.snapshots.v1beta1.SnapshotItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SnapshotItem {
    fn default() -> &'a SnapshotItem {
        <SnapshotItem as ::protobuf::Message>::default_instance()
    }
}

impl SnapshotItem {
    pub fn new() -> SnapshotItem {
        ::std::default::Default::default()
    }

    // .cosmos.base.snapshots.v1beta1.SnapshotStoreItem store = 1;

    pub fn store(&self) -> &SnapshotStoreItem {
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Store(ref v)) => v,
            _ => <SnapshotStoreItem as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_store(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_store(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Store(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_store(&mut self, v: SnapshotStoreItem) {
        self.item = ::std::option::Option::Some(snapshot_item::Item::Store(v))
    }

    // Mutable pointer to the field.
    pub fn mut_store(&mut self) -> &mut SnapshotStoreItem {
        if let ::std::option::Option::Some(snapshot_item::Item::Store(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(snapshot_item::Item::Store(SnapshotStoreItem::new()));
        }
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Store(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_store(&mut self) -> SnapshotStoreItem {
        if self.has_store() {
            match self.item.take() {
                ::std::option::Option::Some(snapshot_item::Item::Store(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotStoreItem::new()
        }
    }

    // .cosmos.base.snapshots.v1beta1.SnapshotIAVLItem iavl = 2;

    pub fn iavl(&self) -> &SnapshotIAVLItem {
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Iavl(ref v)) => v,
            _ => <SnapshotIAVLItem as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_iavl(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_iavl(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Iavl(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_iavl(&mut self, v: SnapshotIAVLItem) {
        self.item = ::std::option::Option::Some(snapshot_item::Item::Iavl(v))
    }

    // Mutable pointer to the field.
    pub fn mut_iavl(&mut self) -> &mut SnapshotIAVLItem {
        if let ::std::option::Option::Some(snapshot_item::Item::Iavl(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(snapshot_item::Item::Iavl(SnapshotIAVLItem::new()));
        }
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Iavl(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_iavl(&mut self) -> SnapshotIAVLItem {
        if self.has_iavl() {
            match self.item.take() {
                ::std::option::Option::Some(snapshot_item::Item::Iavl(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotIAVLItem::new()
        }
    }

    // .cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta extension = 3;

    pub fn extension(&self) -> &SnapshotExtensionMeta {
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Extension(ref v)) => v,
            _ => <SnapshotExtensionMeta as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_extension(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_extension(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Extension(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_extension(&mut self, v: SnapshotExtensionMeta) {
        self.item = ::std::option::Option::Some(snapshot_item::Item::Extension(v))
    }

    // Mutable pointer to the field.
    pub fn mut_extension(&mut self) -> &mut SnapshotExtensionMeta {
        if let ::std::option::Option::Some(snapshot_item::Item::Extension(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(snapshot_item::Item::Extension(SnapshotExtensionMeta::new()));
        }
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::Extension(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_extension(&mut self) -> SnapshotExtensionMeta {
        if self.has_extension() {
            match self.item.take() {
                ::std::option::Option::Some(snapshot_item::Item::Extension(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotExtensionMeta::new()
        }
    }

    // .cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload extension_payload = 4;

    pub fn extension_payload(&self) -> &SnapshotExtensionPayload {
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::ExtensionPayload(ref v)) => v,
            _ => <SnapshotExtensionPayload as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_extension_payload(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_extension_payload(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::ExtensionPayload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_extension_payload(&mut self, v: SnapshotExtensionPayload) {
        self.item = ::std::option::Option::Some(snapshot_item::Item::ExtensionPayload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_extension_payload(&mut self) -> &mut SnapshotExtensionPayload {
        if let ::std::option::Option::Some(snapshot_item::Item::ExtensionPayload(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(snapshot_item::Item::ExtensionPayload(SnapshotExtensionPayload::new()));
        }
        match self.item {
            ::std::option::Option::Some(snapshot_item::Item::ExtensionPayload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_extension_payload(&mut self) -> SnapshotExtensionPayload {
        if self.has_extension_payload() {
            match self.item.take() {
                ::std::option::Option::Some(snapshot_item::Item::ExtensionPayload(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotExtensionPayload::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SnapshotStoreItem>(
            "store",
            SnapshotItem::has_store,
            SnapshotItem::store,
            SnapshotItem::mut_store,
            SnapshotItem::set_store,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SnapshotIAVLItem>(
            "iavl",
            SnapshotItem::has_iavl,
            SnapshotItem::iavl,
            SnapshotItem::mut_iavl,
            SnapshotItem::set_iavl,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SnapshotExtensionMeta>(
            "extension",
            SnapshotItem::has_extension,
            SnapshotItem::extension,
            SnapshotItem::mut_extension,
            SnapshotItem::set_extension,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SnapshotExtensionPayload>(
            "extension_payload",
            SnapshotItem::has_extension_payload,
            SnapshotItem::extension_payload,
            SnapshotItem::mut_extension_payload,
            SnapshotItem::set_extension_payload,
        ));
        oneofs.push(snapshot_item::Item::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SnapshotItem>(
            "SnapshotItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SnapshotItem {
    const NAME: &'static str = "SnapshotItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.item = ::std::option::Option::Some(snapshot_item::Item::Store(is.read_message()?));
                },
                18 => {
                    self.item = ::std::option::Option::Some(snapshot_item::Item::Iavl(is.read_message()?));
                },
                26 => {
                    self.item = ::std::option::Option::Some(snapshot_item::Item::Extension(is.read_message()?));
                },
                34 => {
                    self.item = ::std::option::Option::Some(snapshot_item::Item::ExtensionPayload(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.item {
            match v {
                &snapshot_item::Item::Store(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &snapshot_item::Item::Iavl(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &snapshot_item::Item::Extension(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &snapshot_item::Item::ExtensionPayload(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.item {
            match v {
                &snapshot_item::Item::Store(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &snapshot_item::Item::Iavl(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &snapshot_item::Item::Extension(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &snapshot_item::Item::ExtensionPayload(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SnapshotItem {
        SnapshotItem::new()
    }

    fn clear(&mut self) {
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SnapshotItem {
        static instance: SnapshotItem = SnapshotItem {
            item: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SnapshotItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SnapshotItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SnapshotItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SnapshotItem`
pub mod snapshot_item {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:cosmos.base.snapshots.v1beta1.SnapshotItem.item)
    pub enum Item {
        // @@protoc_insertion_point(oneof_field:cosmos.base.snapshots.v1beta1.SnapshotItem.store)
        Store(super::SnapshotStoreItem),
        // @@protoc_insertion_point(oneof_field:cosmos.base.snapshots.v1beta1.SnapshotItem.iavl)
        Iavl(super::SnapshotIAVLItem),
        // @@protoc_insertion_point(oneof_field:cosmos.base.snapshots.v1beta1.SnapshotItem.extension)
        Extension(super::SnapshotExtensionMeta),
        // @@protoc_insertion_point(oneof_field:cosmos.base.snapshots.v1beta1.SnapshotItem.extension_payload)
        ExtensionPayload(super::SnapshotExtensionPayload),
    }

    impl ::protobuf::Oneof for Item {
    }

    impl ::protobuf::OneofFull for Item {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SnapshotItem as ::protobuf::MessageFull>::descriptor().oneof_by_name("item").unwrap()).clone()
        }
    }

    impl Item {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Item>("item")
        }
    }
}

///  SnapshotStoreItem contains metadata about a snapshotted store.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
pub struct SnapshotStoreItem {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.SnapshotStoreItem.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.snapshots.v1beta1.SnapshotStoreItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SnapshotStoreItem {
    fn default() -> &'a SnapshotStoreItem {
        <SnapshotStoreItem as ::protobuf::Message>::default_instance()
    }
}

impl SnapshotStoreItem {
    pub fn new() -> SnapshotStoreItem {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &SnapshotStoreItem| { &m.name },
            |m: &mut SnapshotStoreItem| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SnapshotStoreItem>(
            "SnapshotStoreItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SnapshotStoreItem {
    const NAME: &'static str = "SnapshotStoreItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SnapshotStoreItem {
        SnapshotStoreItem::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SnapshotStoreItem {
        static instance: SnapshotStoreItem = SnapshotStoreItem {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SnapshotStoreItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SnapshotStoreItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SnapshotStoreItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotStoreItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SnapshotIAVLItem is an exported IAVL node.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
pub struct SnapshotIAVLItem {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem.value)
    pub value: ::std::vec::Vec<u8>,
    ///  version is block height
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem.version)
    pub version: i64,
    ///  height is depth of the tree.
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem.height)
    pub height: i32,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SnapshotIAVLItem {
    fn default() -> &'a SnapshotIAVLItem {
        <SnapshotIAVLItem as ::protobuf::Message>::default_instance()
    }
}

impl SnapshotIAVLItem {
    pub fn new() -> SnapshotIAVLItem {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &SnapshotIAVLItem| { &m.key },
            |m: &mut SnapshotIAVLItem| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &SnapshotIAVLItem| { &m.value },
            |m: &mut SnapshotIAVLItem| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &SnapshotIAVLItem| { &m.version },
            |m: &mut SnapshotIAVLItem| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &SnapshotIAVLItem| { &m.height },
            |m: &mut SnapshotIAVLItem| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SnapshotIAVLItem>(
            "SnapshotIAVLItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SnapshotIAVLItem {
    const NAME: &'static str = "SnapshotIAVLItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                24 => {
                    self.version = is.read_int64()?;
                },
                32 => {
                    self.height = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.version);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if self.version != 0 {
            os.write_int64(3, self.version)?;
        }
        if self.height != 0 {
            os.write_int32(4, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SnapshotIAVLItem {
        SnapshotIAVLItem::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.version = 0;
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SnapshotIAVLItem {
        static instance: SnapshotIAVLItem = SnapshotIAVLItem {
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            version: 0,
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SnapshotIAVLItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SnapshotIAVLItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SnapshotIAVLItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotIAVLItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SnapshotExtensionMeta contains metadata about an external snapshotter.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
pub struct SnapshotExtensionMeta {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta.format)
    pub format: u32,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SnapshotExtensionMeta {
    fn default() -> &'a SnapshotExtensionMeta {
        <SnapshotExtensionMeta as ::protobuf::Message>::default_instance()
    }
}

impl SnapshotExtensionMeta {
    pub fn new() -> SnapshotExtensionMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &SnapshotExtensionMeta| { &m.name },
            |m: &mut SnapshotExtensionMeta| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &SnapshotExtensionMeta| { &m.format },
            |m: &mut SnapshotExtensionMeta| { &mut m.format },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SnapshotExtensionMeta>(
            "SnapshotExtensionMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SnapshotExtensionMeta {
    const NAME: &'static str = "SnapshotExtensionMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.format = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.format != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.format);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.format != 0 {
            os.write_uint32(2, self.format)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SnapshotExtensionMeta {
        SnapshotExtensionMeta::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.format = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SnapshotExtensionMeta {
        static instance: SnapshotExtensionMeta = SnapshotExtensionMeta {
            name: ::std::string::String::new(),
            format: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SnapshotExtensionMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SnapshotExtensionMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SnapshotExtensionMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotExtensionMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SnapshotExtensionPayload contains payloads of an external snapshotter.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
pub struct SnapshotExtensionPayload {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload.payload)
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SnapshotExtensionPayload {
    fn default() -> &'a SnapshotExtensionPayload {
        <SnapshotExtensionPayload as ::protobuf::Message>::default_instance()
    }
}

impl SnapshotExtensionPayload {
    pub fn new() -> SnapshotExtensionPayload {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &SnapshotExtensionPayload| { &m.payload },
            |m: &mut SnapshotExtensionPayload| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SnapshotExtensionPayload>(
            "SnapshotExtensionPayload",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SnapshotExtensionPayload {
    const NAME: &'static str = "SnapshotExtensionPayload";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payload = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SnapshotExtensionPayload {
        SnapshotExtensionPayload::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SnapshotExtensionPayload {
        static instance: SnapshotExtensionPayload = SnapshotExtensionPayload {
            payload: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SnapshotExtensionPayload {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SnapshotExtensionPayload").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SnapshotExtensionPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotExtensionPayload {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,cosmos/base/snapshots/v1beta1/snapshot.proto\x12\x1dcosmos.base.snaps\
    hots.v1beta1\x1a\x14gogoproto/gogo.proto\"\xb1\x01\n\x08Snapshot\x12\x16\
    \n\x06height\x18\x01\x20\x01(\x04R\x06height\x12\x16\n\x06format\x18\x02\
    \x20\x01(\rR\x06format\x12\x16\n\x06chunks\x18\x03\x20\x01(\rR\x06chunks\
    \x12\x12\n\x04hash\x18\x04\x20\x01(\x0cR\x04hash\x12I\n\x08metadata\x18\
    \x05\x20\x01(\x0b2'.cosmos.base.snapshots.v1beta1.MetadataR\x08metadataB\
    \x04\xc8\xde\x1f\0\"-\n\x08Metadata\x12!\n\x0cchunk_hashes\x18\x01\x20\
    \x03(\x0cR\x0bchunkHashes\"\xef\x02\n\x0cSnapshotItem\x12H\n\x05store\
    \x18\x01\x20\x01(\x0b20.cosmos.base.snapshots.v1beta1.SnapshotStoreItemH\
    \0R\x05store\x12O\n\x04iavl\x18\x02\x20\x01(\x0b2/.cosmos.base.snapshots\
    .v1beta1.SnapshotIAVLItemH\0R\x04iavlB\x08\xe2\xde\x1f\x04IAVL\x12T\n\te\
    xtension\x18\x03\x20\x01(\x0b24.cosmos.base.snapshots.v1beta1.SnapshotEx\
    tensionMetaH\0R\textension\x12f\n\x11extension_payload\x18\x04\x20\x01(\
    \x0b27.cosmos.base.snapshots.v1beta1.SnapshotExtensionPayloadH\0R\x10ext\
    ensionPayloadB\x06\n\x04item\"'\n\x11SnapshotStoreItem\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\"l\n\x10SnapshotIAVLItem\x12\x10\n\x03key\
    \x18\x01\x20\x01(\x0cR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\
    \x05value\x12\x18\n\x07version\x18\x03\x20\x01(\x03R\x07version\x12\x16\
    \n\x06height\x18\x04\x20\x01(\x05R\x06height\"C\n\x15SnapshotExtensionMe\
    ta\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x16\n\x06format\x18\
    \x02\x20\x01(\rR\x06format\"4\n\x18SnapshotExtensionPayload\x12\x18\n\
    \x07payload\x18\x01\x20\x01(\x0cR\x07payloadB.Z,github.com/cosmos/cosmos\
    -sdk/snapshots/typesJ\xe3\x0e\n\x06\x12\x04\0\08\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0&\n\t\n\x02\x03\0\x12\x03\x03\
    \0\x1e\n\x08\n\x01\x08\x12\x03\x05\0C\n\t\n\x02\x08\x0b\x12\x03\x05\0C\n\
    D\n\x02\x04\0\x12\x04\x08\0\x0e\x01\x1a8\x20Snapshot\x20contains\x20Tend\
    ermint\x20state\x20sync\x20snapshot\x20info.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x08\x08\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x02\x18\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\
    \x0b\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x16\x17\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\n\x02\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\x0b\x11\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\n\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0b\x02\
    \x18\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x0b\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x0b\x16\x17\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0c\x02\x18\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x0c\x0b\x0f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0c\x16\x17\n\x0b\
    \n\x04\x04\0\x02\x04\x12\x03\r\x027\n\x0c\n\x05\x04\0\x02\x04\x06\x12\
    \x03\r\x02\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\r\x0b\x13\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\r\x16\x17\n\x0c\n\x05\x04\0\x02\x04\x08\x12\
    \x03\r\x186\n\x0f\n\x08\x04\0\x02\x04\x08\xe9\xfb\x03\x12\x03\r\x195\n?\
    \n\x02\x04\x01\x12\x04\x11\0\x13\x01\x1a3\x20Metadata\x20contains\x20SDK\
    -specific\x20snapshot\x20metadata.\n\n\n\n\x03\x04\x01\x01\x12\x03\x11\
    \x08\x10\n#\n\x04\x04\x01\x02\0\x12\x03\x12\x02\"\"\x16\x20SHA-256\x20ch\
    unk\x20hashes\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x12\x02\n\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x12\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x12\x11\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x12\x20!\nN\n\
    \x02\x04\x02\x12\x04\x16\0\x1e\x01\x1aB\x20SnapshotItem\x20is\x20an\x20i\
    tem\x20contained\x20in\x20a\x20rootmulti.Store\x20snapshot.\n\n\n\n\x03\
    \x04\x02\x01\x12\x03\x16\x08\x14\n;\n\x04\x04\x02\x08\0\x12\x04\x18\x02\
    \x1d\x03\x1a-\x20item\x20is\x20the\x20specific\x20type\x20of\x20snapshot\
    \x20item.\n\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03\x18\x08\x0c\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x19\x043\n\x0c\n\x05\x04\x02\x02\0\x06\x12\
    \x03\x19\x04\x15\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x19\x1d\"\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x1912\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x1a\x04U\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x1a\x04\x14\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x1a\x1d!\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x1a12\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03\x1a3T\n\x0f\n\
    \x08\x04\x02\x02\x01\x08\xec\xfb\x03\x12\x03\x1a4S\n\x0b\n\x04\x04\x02\
    \x02\x02\x12\x03\x1b\x043\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x1b\
    \x04\x19\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1b\x1d&\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03\x1b12\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\
    \x1c\x043\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03\x1c\x04\x1c\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03\x1c\x1d.\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03\x1c12\nL\n\x02\x04\x03\x12\x04!\0#\x01\x1a@\x20SnapshotStor\
    eItem\x20contains\x20metadata\x20about\x20a\x20snapshotted\x20store.\n\n\
    \n\n\x03\x04\x03\x01\x12\x03!\x08\x19\n\x0b\n\x04\x04\x03\x02\0\x12\x03\
    \"\x02\x12\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\"\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\"\t\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\"\
    \x10\x11\n8\n\x02\x04\x04\x12\x04&\0-\x01\x1a,\x20SnapshotIAVLItem\x20is\
    \x20an\x20exported\x20IAVL\x20node.\n\n\n\n\x03\x04\x04\x01\x12\x03&\x08\
    \x18\n\x0b\n\x04\x04\x04\x02\0\x12\x03'\x02\x14\n\x0c\n\x05\x04\x04\x02\
    \0\x05\x12\x03'\x02\x07\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03'\x08\x0b\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03'\x12\x13\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03(\x02\x14\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03(\x02\x07\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03(\x08\r\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03(\x12\x13\n&\n\x04\x04\x04\x02\x02\x12\x03*\x02\x14\x1a\
    \x19\x20version\x20is\x20block\x20height\n\n\x0c\n\x05\x04\x04\x02\x02\
    \x05\x12\x03*\x02\x07\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03*\x08\x0f\n\
    \x0c\n\x05\x04\x04\x02\x02\x03\x12\x03*\x12\x13\n+\n\x04\x04\x04\x02\x03\
    \x12\x03,\x02\x14\x1a\x1e\x20height\x20is\x20depth\x20of\x20the\x20tree.\
    \n\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03,\x02\x07\n\x0c\n\x05\x04\x04\
    \x02\x03\x01\x12\x03,\x08\x0e\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03,\
    \x12\x13\nT\n\x02\x04\x05\x12\x040\03\x01\x1aH\x20SnapshotExtensionMeta\
    \x20contains\x20metadata\x20about\x20an\x20external\x20snapshotter.\n\n\
    \n\n\x03\x04\x05\x01\x12\x030\x08\x1d\n\x0b\n\x04\x04\x05\x02\0\x12\x031\
    \x02\x14\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x031\x02\x08\n\x0c\n\x05\x04\
    \x05\x02\0\x01\x12\x031\t\r\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x031\x12\
    \x13\n\x0b\n\x04\x04\x05\x02\x01\x12\x032\x02\x14\n\x0c\n\x05\x04\x05\
    \x02\x01\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x032\t\
    \x0f\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x032\x12\x13\nT\n\x02\x04\x06\
    \x12\x046\08\x01\x1aH\x20SnapshotExtensionPayload\x20contains\x20payload\
    s\x20of\x20an\x20external\x20snapshotter.\n\n\n\n\x03\x04\x06\x01\x12\
    \x036\x08\x20\n\x0b\n\x04\x04\x06\x02\0\x12\x037\x02\x14\n\x0c\n\x05\x04\
    \x06\x02\0\x05\x12\x037\x02\x07\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x037\
    \x08\x0f\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x037\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Snapshot::generated_message_descriptor_data());
            messages.push(Metadata::generated_message_descriptor_data());
            messages.push(SnapshotItem::generated_message_descriptor_data());
            messages.push(SnapshotStoreItem::generated_message_descriptor_data());
            messages.push(SnapshotIAVLItem::generated_message_descriptor_data());
            messages.push(SnapshotExtensionMeta::generated_message_descriptor_data());
            messages.push(SnapshotExtensionPayload::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
