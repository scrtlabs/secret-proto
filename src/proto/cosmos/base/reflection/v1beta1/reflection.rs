// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/base/reflection/v1beta1/reflection.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  ListAllInterfacesRequest is the request type of the ListAllInterfaces RPC.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.reflection.v1beta1.ListAllInterfacesRequest)
pub struct ListAllInterfacesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.reflection.v1beta1.ListAllInterfacesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListAllInterfacesRequest {
    fn default() -> &'a ListAllInterfacesRequest {
        <ListAllInterfacesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListAllInterfacesRequest {
    pub fn new() -> ListAllInterfacesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListAllInterfacesRequest>(
            "ListAllInterfacesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListAllInterfacesRequest {
    const NAME: &'static str = "ListAllInterfacesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListAllInterfacesRequest {
        ListAllInterfacesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListAllInterfacesRequest {
        static instance: ListAllInterfacesRequest = ListAllInterfacesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListAllInterfacesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListAllInterfacesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListAllInterfacesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAllInterfacesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ListAllInterfacesResponse is the response type of the ListAllInterfaces RPC.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse)
pub struct ListAllInterfacesResponse {
    // message fields
    ///  interface_names is an array of all the registered interfaces.
    // @@protoc_insertion_point(field:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
    pub interface_names: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListAllInterfacesResponse {
    fn default() -> &'a ListAllInterfacesResponse {
        <ListAllInterfacesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListAllInterfacesResponse {
    pub fn new() -> ListAllInterfacesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "interface_names",
            |m: &ListAllInterfacesResponse| { &m.interface_names },
            |m: &mut ListAllInterfacesResponse| { &mut m.interface_names },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListAllInterfacesResponse>(
            "ListAllInterfacesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListAllInterfacesResponse {
    const NAME: &'static str = "ListAllInterfacesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.interface_names.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.interface_names {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.interface_names {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListAllInterfacesResponse {
        ListAllInterfacesResponse::new()
    }

    fn clear(&mut self) {
        self.interface_names.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListAllInterfacesResponse {
        static instance: ListAllInterfacesResponse = ListAllInterfacesResponse {
            interface_names: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListAllInterfacesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListAllInterfacesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListAllInterfacesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAllInterfacesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ListImplementationsRequest is the request type of the ListImplementations
///  RPC.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.reflection.v1beta1.ListImplementationsRequest)
pub struct ListImplementationsRequest {
    // message fields
    ///  interface_name defines the interface to query the implementations for.
    // @@protoc_insertion_point(field:cosmos.base.reflection.v1beta1.ListImplementationsRequest.interface_name)
    pub interface_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.reflection.v1beta1.ListImplementationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListImplementationsRequest {
    fn default() -> &'a ListImplementationsRequest {
        <ListImplementationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListImplementationsRequest {
    pub fn new() -> ListImplementationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interface_name",
            |m: &ListImplementationsRequest| { &m.interface_name },
            |m: &mut ListImplementationsRequest| { &mut m.interface_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListImplementationsRequest>(
            "ListImplementationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListImplementationsRequest {
    const NAME: &'static str = "ListImplementationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.interface_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.interface_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.interface_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.interface_name.is_empty() {
            os.write_string(1, &self.interface_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListImplementationsRequest {
        ListImplementationsRequest::new()
    }

    fn clear(&mut self) {
        self.interface_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListImplementationsRequest {
        static instance: ListImplementationsRequest = ListImplementationsRequest {
            interface_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListImplementationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListImplementationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListImplementationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListImplementationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ListImplementationsResponse is the response type of the ListImplementations
///  RPC.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.reflection.v1beta1.ListImplementationsResponse)
pub struct ListImplementationsResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
    pub implementation_message_names: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.reflection.v1beta1.ListImplementationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListImplementationsResponse {
    fn default() -> &'a ListImplementationsResponse {
        <ListImplementationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListImplementationsResponse {
    pub fn new() -> ListImplementationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "implementation_message_names",
            |m: &ListImplementationsResponse| { &m.implementation_message_names },
            |m: &mut ListImplementationsResponse| { &mut m.implementation_message_names },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListImplementationsResponse>(
            "ListImplementationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListImplementationsResponse {
    const NAME: &'static str = "ListImplementationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.implementation_message_names.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.implementation_message_names {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.implementation_message_names {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListImplementationsResponse {
        ListImplementationsResponse::new()
    }

    fn clear(&mut self) {
        self.implementation_message_names.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListImplementationsResponse {
        static instance: ListImplementationsResponse = ListImplementationsResponse {
            implementation_message_names: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListImplementationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListImplementationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListImplementationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListImplementationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/cosmos/base/reflection/v1beta1/reflection.proto\x12\x1ecosmos.base.re\
    flection.v1beta1\x1a\x1cgoogle/api/annotations.proto\"\x1a\n\x18ListAllI\
    nterfacesRequest\"D\n\x19ListAllInterfacesResponse\x12'\n\x0finterface_n\
    ames\x18\x01\x20\x03(\tR\x0einterfaceNames\"C\n\x1aListImplementationsRe\
    quest\x12%\n\x0einterface_name\x18\x01\x20\x01(\tR\rinterfaceName\"_\n\
    \x1bListImplementationsResponse\x12@\n\x1cimplementation_message_names\
    \x18\x01\x20\x03(\tR\x1aimplementationMessageNames2\xb8\x03\n\x11Reflect\
    ionService\x12\xbc\x01\n\x11ListAllInterfaces\x128.cosmos.base.reflectio\
    n.v1beta1.ListAllInterfacesRequest\x1a9.cosmos.base.reflection.v1beta1.L\
    istAllInterfacesResponse\"2\x82\xd3\xe4\x93\x02,\x12*/cosmos/base/reflec\
    tion/v1beta1/interfaces\x12\xe3\x01\n\x13ListImplementations\x12:.cosmos\
    .base.reflection.v1beta1.ListImplementationsRequest\x1a;.cosmos.base.ref\
    lection.v1beta1.ListImplementationsResponse\"S\x82\xd3\xe4\x93\x02M\x12K\
    /cosmos/base/reflection/v1beta1/interfaces/{interface_name}/implementati\
    onsB5Z3github.com/cosmos/cosmos-sdk/client/grpc/reflectionJ\xe5\t\n\x06\
    \x12\x04\0\0+\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x01\0'\n\t\n\x02\x03\0\x12\x03\x03\0&\n\x08\n\x01\x08\x12\x03\x05\0\
    J\n\t\n\x02\x08\x0b\x12\x03\x05\0J\nK\n\x02\x06\0\x12\x04\x08\0\x15\x01\
    \x1a?\x20ReflectionService\x20defines\x20a\x20service\x20for\x20interfac\
    e\x20reflection.\n\n\n\n\x03\x06\0\x01\x12\x03\x08\x08\x19\na\n\x04\x06\
    \0\x02\0\x12\x04\x0b\x02\r\x03\x1aS\x20ListAllInterfaces\x20lists\x20all\
    \x20the\x20interfaces\x20registered\x20in\x20the\x20interface\n\x20regis\
    try.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0b\x06\x17\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x0b\x180\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0b;T\n\
    \x0c\n\x05\x06\0\x02\0\x04\x12\x03\x0c\x04P\n\x11\n\n\x06\0\x02\0\x04\
    \xb0\xca\xbc\"\x02\x12\x03\x0c\x04P\nb\n\x04\x06\0\x02\x01\x12\x04\x11\
    \x02\x14\x03\x1aT\x20ListImplementations\x20list\x20all\x20the\x20concre\
    te\x20types\x20that\x20implement\x20a\x20given\n\x20interface.\n\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x11\x06\x19\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x11\x1a4\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x11?Z\n\r\n\x05\
    \x06\0\x02\x01\x04\x12\x04\x12\x04\x13F\n\x12\n\n\x06\0\x02\x01\x04\xb0\
    \xca\xbc\"\x02\x12\x04\x12\x04\x13F\nW\n\x02\x04\0\x12\x03\x18\0#\x1aL\
    \x20ListAllInterfacesRequest\x20is\x20the\x20request\x20type\x20of\x20th\
    e\x20ListAllInterfaces\x20RPC.\n\n\n\n\x03\x04\0\x01\x12\x03\x18\x08\x20\
    \nZ\n\x02\x04\x01\x12\x04\x1b\0\x1e\x01\x1aN\x20ListAllInterfacesRespons\
    e\x20is\x20the\x20response\x20type\x20of\x20the\x20ListAllInterfaces\x20\
    RPC.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1b\x08!\nL\n\x04\x04\x01\x02\0\x12\
    \x03\x1d\x02&\x1a?\x20interface_names\x20is\x20an\x20array\x20of\x20all\
    \x20the\x20registered\x20interfaces.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x1d\x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1d\x0b\x11\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x1d\x12!\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1d$%\n]\n\x02\x04\x02\x12\x04\"\0%\x01\x1aQ\x20ListImplementat\
    ionsRequest\x20is\x20the\x20request\x20type\x20of\x20the\x20ListImplemen\
    tations\n\x20RPC.\n\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\"\nU\n\x04\x04\
    \x02\x02\0\x12\x03$\x02\x1c\x1aH\x20interface_name\x20defines\x20the\x20\
    interface\x20to\x20query\x20the\x20implementations\x20for.\n\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03$\t\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03$\x1a\x1b\n_\n\x02\x04\
    \x03\x12\x04)\0+\x01\x1aS\x20ListImplementationsResponse\x20is\x20the\
    \x20response\x20type\x20of\x20the\x20ListImplementations\n\x20RPC.\n\n\n\
    \n\x03\x04\x03\x01\x12\x03)\x08#\n\x0b\n\x04\x04\x03\x02\0\x12\x03*\x023\
    \n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03*\x02\n\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03*\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03*\x12.\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03*12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(ListAllInterfacesRequest::generated_message_descriptor_data());
            messages.push(ListAllInterfacesResponse::generated_message_descriptor_data());
            messages.push(ListImplementationsRequest::generated_message_descriptor_data());
            messages.push(ListImplementationsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
