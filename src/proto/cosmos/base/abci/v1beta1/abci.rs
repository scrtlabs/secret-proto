// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/base/abci/v1beta1/abci.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  TxResponse defines a structure containing relevant tx data and metadata. The
///  tags are stringified and the log is JSON decoded.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.TxResponse)
pub struct TxResponse {
    // message fields
    ///  The block height
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.height)
    pub height: i64,
    ///  The transaction hash.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.txhash)
    pub txhash: ::std::string::String,
    ///  Namespace for the Code
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.codespace)
    pub codespace: ::std::string::String,
    ///  Response code.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.code)
    pub code: u32,
    ///  Result bytes, if any.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.data)
    pub data: ::std::string::String,
    ///  The output of the application's logger (raw string). May be
    ///  non-deterministic.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.raw_log)
    pub raw_log: ::std::string::String,
    ///  The output of the application's logger (typed). May be non-deterministic.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.logs)
    pub logs: ::std::vec::Vec<ABCIMessageLog>,
    ///  Additional information. May be non-deterministic.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.info)
    pub info: ::std::string::String,
    ///  Amount of gas requested for transaction.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.gas_wanted)
    pub gas_wanted: i64,
    ///  Amount of gas consumed by transaction.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.gas_used)
    pub gas_used: i64,
    ///  The request transaction bytes.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.tx)
    pub tx: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  Time of the previous block. For heights > 1, it's the weighted median of
    ///  the timestamps of the valid votes in the block.LastCommit. For height == 1,
    ///  it's genesis time.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.timestamp)
    pub timestamp: ::std::string::String,
    ///  Events defines all the events emitted by processing a transaction. Note,
    ///  these events include those emitted by processing all the messages and those
    ///  emitted from the ante handler. Whereas Logs contains the events, with
    ///  additional metadata, emitted only by processing the messages.
    ///
    ///  Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxResponse.events)
    pub events: ::std::vec::Vec<super::types::Event>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.TxResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TxResponse {
    fn default() -> &'a TxResponse {
        <TxResponse as ::protobuf::Message>::default_instance()
    }
}

impl TxResponse {
    pub fn new() -> TxResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &TxResponse| { &m.height },
            |m: &mut TxResponse| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "txhash",
            |m: &TxResponse| { &m.txhash },
            |m: &mut TxResponse| { &mut m.txhash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "codespace",
            |m: &TxResponse| { &m.codespace },
            |m: &mut TxResponse| { &mut m.codespace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &TxResponse| { &m.code },
            |m: &mut TxResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &TxResponse| { &m.data },
            |m: &mut TxResponse| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "raw_log",
            |m: &TxResponse| { &m.raw_log },
            |m: &mut TxResponse| { &mut m.raw_log },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "logs",
            |m: &TxResponse| { &m.logs },
            |m: &mut TxResponse| { &mut m.logs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "info",
            |m: &TxResponse| { &m.info },
            |m: &mut TxResponse| { &mut m.info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_wanted",
            |m: &TxResponse| { &m.gas_wanted },
            |m: &mut TxResponse| { &mut m.gas_wanted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_used",
            |m: &TxResponse| { &m.gas_used },
            |m: &mut TxResponse| { &mut m.gas_used },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "tx",
            |m: &TxResponse| { &m.tx },
            |m: &mut TxResponse| { &mut m.tx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &TxResponse| { &m.timestamp },
            |m: &mut TxResponse| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "events",
            |m: &TxResponse| { &m.events },
            |m: &mut TxResponse| { &mut m.events },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TxResponse>(
            "TxResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TxResponse {
    const NAME: &'static str = "TxResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_int64()?;
                },
                18 => {
                    self.txhash = is.read_string()?;
                },
                26 => {
                    self.codespace = is.read_string()?;
                },
                32 => {
                    self.code = is.read_uint32()?;
                },
                42 => {
                    self.data = is.read_string()?;
                },
                50 => {
                    self.raw_log = is.read_string()?;
                },
                58 => {
                    self.logs.push(is.read_message()?);
                },
                66 => {
                    self.info = is.read_string()?;
                },
                72 => {
                    self.gas_wanted = is.read_int64()?;
                },
                80 => {
                    self.gas_used = is.read_int64()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tx)?;
                },
                98 => {
                    self.timestamp = is.read_string()?;
                },
                106 => {
                    self.events.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.height);
        }
        if !self.txhash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.txhash);
        }
        if !self.codespace.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.codespace);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.code);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.data);
        }
        if !self.raw_log.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.raw_log);
        }
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.info.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.info);
        }
        if self.gas_wanted != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.gas_wanted);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::int64_size(10, self.gas_used);
        }
        if let Some(v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.timestamp);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if !self.txhash.is_empty() {
            os.write_string(2, &self.txhash)?;
        }
        if !self.codespace.is_empty() {
            os.write_string(3, &self.codespace)?;
        }
        if self.code != 0 {
            os.write_uint32(4, self.code)?;
        }
        if !self.data.is_empty() {
            os.write_string(5, &self.data)?;
        }
        if !self.raw_log.is_empty() {
            os.write_string(6, &self.raw_log)?;
        }
        for v in &self.logs {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if !self.info.is_empty() {
            os.write_string(8, &self.info)?;
        }
        if self.gas_wanted != 0 {
            os.write_int64(9, self.gas_wanted)?;
        }
        if self.gas_used != 0 {
            os.write_int64(10, self.gas_used)?;
        }
        if let Some(v) = self.tx.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(12, &self.timestamp)?;
        }
        for v in &self.events {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TxResponse {
        TxResponse::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.txhash.clear();
        self.codespace.clear();
        self.code = 0;
        self.data.clear();
        self.raw_log.clear();
        self.logs.clear();
        self.info.clear();
        self.gas_wanted = 0;
        self.gas_used = 0;
        self.tx.clear();
        self.timestamp.clear();
        self.events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TxResponse {
        static instance: TxResponse = TxResponse {
            height: 0,
            txhash: ::std::string::String::new(),
            codespace: ::std::string::String::new(),
            code: 0,
            data: ::std::string::String::new(),
            raw_log: ::std::string::String::new(),
            logs: ::std::vec::Vec::new(),
            info: ::std::string::String::new(),
            gas_wanted: 0,
            gas_used: 0,
            tx: ::protobuf::MessageField::none(),
            timestamp: ::std::string::String::new(),
            events: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TxResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TxResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.ABCIMessageLog)
pub struct ABCIMessageLog {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.ABCIMessageLog.msg_index)
    pub msg_index: u32,
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
    pub log: ::std::string::String,
    ///  Events contains a slice of Event objects that were emitted during some
    ///  execution.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
    pub events: ::std::vec::Vec<StringEvent>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.ABCIMessageLog.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ABCIMessageLog {
    fn default() -> &'a ABCIMessageLog {
        <ABCIMessageLog as ::protobuf::Message>::default_instance()
    }
}

impl ABCIMessageLog {
    pub fn new() -> ABCIMessageLog {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_index",
            |m: &ABCIMessageLog| { &m.msg_index },
            |m: &mut ABCIMessageLog| { &mut m.msg_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "log",
            |m: &ABCIMessageLog| { &m.log },
            |m: &mut ABCIMessageLog| { &mut m.log },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "events",
            |m: &ABCIMessageLog| { &m.events },
            |m: &mut ABCIMessageLog| { &mut m.events },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ABCIMessageLog>(
            "ABCIMessageLog",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ABCIMessageLog {
    const NAME: &'static str = "ABCIMessageLog";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.msg_index = is.read_uint32()?;
                },
                18 => {
                    self.log = is.read_string()?;
                },
                26 => {
                    self.events.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.msg_index != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.msg_index);
        }
        if !self.log.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.log);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.msg_index != 0 {
            os.write_uint32(1, self.msg_index)?;
        }
        if !self.log.is_empty() {
            os.write_string(2, &self.log)?;
        }
        for v in &self.events {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ABCIMessageLog {
        ABCIMessageLog::new()
    }

    fn clear(&mut self) {
        self.msg_index = 0;
        self.log.clear();
        self.events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ABCIMessageLog {
        static instance: ABCIMessageLog = ABCIMessageLog {
            msg_index: 0,
            log: ::std::string::String::new(),
            events: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ABCIMessageLog {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ABCIMessageLog").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ABCIMessageLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ABCIMessageLog {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  StringEvent defines en Event object wrapper where all the attributes
///  contain key/value pairs that are strings instead of raw bytes.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.StringEvent)
pub struct StringEvent {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.StringEvent.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.StringEvent.attributes)
    pub attributes: ::std::vec::Vec<Attribute>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.StringEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StringEvent {
    fn default() -> &'a StringEvent {
        <StringEvent as ::protobuf::Message>::default_instance()
    }
}

impl StringEvent {
    pub fn new() -> StringEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &StringEvent| { &m.type_ },
            |m: &mut StringEvent| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &StringEvent| { &m.attributes },
            |m: &mut StringEvent| { &mut m.attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StringEvent>(
            "StringEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StringEvent {
    const NAME: &'static str = "StringEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = is.read_string()?;
                },
                18 => {
                    self.attributes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        for v in &self.attributes {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StringEvent {
        StringEvent::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.attributes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StringEvent {
        static instance: StringEvent = StringEvent {
            type_: ::std::string::String::new(),
            attributes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StringEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StringEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StringEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Attribute defines an attribute wrapper where the key and value are
///  strings instead of raw bytes.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.Attribute)
pub struct Attribute {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.Attribute.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.Attribute.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.Attribute.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Attribute {
    fn default() -> &'a Attribute {
        <Attribute as ::protobuf::Message>::default_instance()
    }
}

impl Attribute {
    pub fn new() -> Attribute {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &Attribute| { &m.key },
            |m: &mut Attribute| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Attribute| { &m.value },
            |m: &mut Attribute| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Attribute>(
            "Attribute",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Attribute {
    const NAME: &'static str = "Attribute";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Attribute {
        Attribute::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Attribute {
        static instance: Attribute = Attribute {
            key: ::std::string::String::new(),
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Attribute {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Attribute").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Attribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Attribute {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GasInfo defines tx execution gas context.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.GasInfo)
pub struct GasInfo {
    // message fields
    ///  GasWanted is the maximum units of work we allow this tx to perform.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.GasInfo.gas_wanted)
    pub gas_wanted: u64,
    ///  GasUsed is the amount of gas actually consumed.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.GasInfo.gas_used)
    pub gas_used: u64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.GasInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GasInfo {
    fn default() -> &'a GasInfo {
        <GasInfo as ::protobuf::Message>::default_instance()
    }
}

impl GasInfo {
    pub fn new() -> GasInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_wanted",
            |m: &GasInfo| { &m.gas_wanted },
            |m: &mut GasInfo| { &mut m.gas_wanted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_used",
            |m: &GasInfo| { &m.gas_used },
            |m: &mut GasInfo| { &mut m.gas_used },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GasInfo>(
            "GasInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GasInfo {
    const NAME: &'static str = "GasInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gas_wanted = is.read_uint64()?;
                },
                16 => {
                    self.gas_used = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.gas_wanted != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.gas_wanted);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.gas_used);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.gas_wanted != 0 {
            os.write_uint64(1, self.gas_wanted)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(2, self.gas_used)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GasInfo {
        GasInfo::new()
    }

    fn clear(&mut self) {
        self.gas_wanted = 0;
        self.gas_used = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GasInfo {
        static instance: GasInfo = GasInfo {
            gas_wanted: 0,
            gas_used: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GasInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GasInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GasInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GasInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Result is the union of ResponseFormat and ResponseCheckTx.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.Result)
pub struct Result {
    // message fields
    ///  Data is any data returned from message or handler execution. It MUST be
    ///  length prefixed in order to separate data from multiple message executions.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.Result.data)
    pub data: ::std::vec::Vec<u8>,
    ///  Log contains the log information from message or handler execution.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.Result.log)
    pub log: ::std::string::String,
    ///  Events contains a slice of Event objects that were emitted during message
    ///  or handler execution.
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.Result.events)
    pub events: ::std::vec::Vec<super::types::Event>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.Result.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Result {
    fn default() -> &'a Result {
        <Result as ::protobuf::Message>::default_instance()
    }
}

impl Result {
    pub fn new() -> Result {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Result| { &m.data },
            |m: &mut Result| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "log",
            |m: &Result| { &m.log },
            |m: &mut Result| { &mut m.log },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "events",
            |m: &Result| { &m.events },
            |m: &mut Result| { &mut m.events },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Result>(
            "Result",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Result {
    const NAME: &'static str = "Result";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                18 => {
                    self.log = is.read_string()?;
                },
                26 => {
                    self.events.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if !self.log.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.log);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if !self.log.is_empty() {
            os.write_string(2, &self.log)?;
        }
        for v in &self.events {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Result {
        Result::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.log.clear();
        self.events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Result {
        static instance: Result = Result {
            data: ::std::vec::Vec::new(),
            log: ::std::string::String::new(),
            events: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Result {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Result").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Result {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SimulationResponse defines the response generated when a transaction is
///  successfully simulated.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.SimulationResponse)
pub struct SimulationResponse {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
    pub gas_info: ::protobuf::MessageField<GasInfo>,
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.SimulationResponse.result)
    pub result: ::protobuf::MessageField<Result>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.SimulationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SimulationResponse {
    fn default() -> &'a SimulationResponse {
        <SimulationResponse as ::protobuf::Message>::default_instance()
    }
}

impl SimulationResponse {
    pub fn new() -> SimulationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, GasInfo>(
            "gas_info",
            |m: &SimulationResponse| { &m.gas_info },
            |m: &mut SimulationResponse| { &mut m.gas_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Result>(
            "result",
            |m: &SimulationResponse| { &m.result },
            |m: &mut SimulationResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SimulationResponse>(
            "SimulationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SimulationResponse {
    const NAME: &'static str = "SimulationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gas_info)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.result)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gas_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gas_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.result.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SimulationResponse {
        SimulationResponse::new()
    }

    fn clear(&mut self) {
        self.gas_info.clear();
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SimulationResponse {
        static instance: SimulationResponse = SimulationResponse {
            gas_info: ::protobuf::MessageField::none(),
            result: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SimulationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SimulationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SimulationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgData defines the data returned in a Result object during message
///  execution.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.MsgData)
pub struct MsgData {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.MsgData.msg_type)
    pub msg_type: ::std::string::String,
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.MsgData.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.MsgData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgData {
    fn default() -> &'a MsgData {
        <MsgData as ::protobuf::Message>::default_instance()
    }
}

impl MsgData {
    pub fn new() -> MsgData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_type",
            |m: &MsgData| { &m.msg_type },
            |m: &mut MsgData| { &mut m.msg_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &MsgData| { &m.data },
            |m: &mut MsgData| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgData>(
            "MsgData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgData {
    const NAME: &'static str = "MsgData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.msg_type = is.read_string()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.msg_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.msg_type.is_empty() {
            os.write_string(1, &self.msg_type)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgData {
        MsgData::new()
    }

    fn clear(&mut self) {
        self.msg_type.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgData {
        static instance: MsgData = MsgData {
            msg_type: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TxMsgData defines a list of MsgData. A transaction will have a MsgData object
///  for each message.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.TxMsgData)
pub struct TxMsgData {
    // message fields
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.TxMsgData.data)
    pub data: ::std::vec::Vec<MsgData>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.TxMsgData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TxMsgData {
    fn default() -> &'a TxMsgData {
        <TxMsgData as ::protobuf::Message>::default_instance()
    }
}

impl TxMsgData {
    pub fn new() -> TxMsgData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &TxMsgData| { &m.data },
            |m: &mut TxMsgData| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TxMsgData>(
            "TxMsgData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TxMsgData {
    const NAME: &'static str = "TxMsgData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TxMsgData {
        TxMsgData::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TxMsgData {
        static instance: TxMsgData = TxMsgData {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TxMsgData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TxMsgData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TxMsgData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxMsgData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SearchTxsResult defines a structure for querying txs pageable
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.base.abci.v1beta1.SearchTxsResult)
pub struct SearchTxsResult {
    // message fields
    ///  Count of all txs
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.SearchTxsResult.total_count)
    pub total_count: u64,
    ///  Count of txs in current page
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.SearchTxsResult.count)
    pub count: u64,
    ///  Index of current page, start from 1
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.SearchTxsResult.page_number)
    pub page_number: u64,
    ///  Count of total pages
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.SearchTxsResult.page_total)
    pub page_total: u64,
    ///  Max count txs per page
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.SearchTxsResult.limit)
    pub limit: u64,
    ///  List of txs in current page
    // @@protoc_insertion_point(field:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
    pub txs: ::std::vec::Vec<TxResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.base.abci.v1beta1.SearchTxsResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SearchTxsResult {
    fn default() -> &'a SearchTxsResult {
        <SearchTxsResult as ::protobuf::Message>::default_instance()
    }
}

impl SearchTxsResult {
    pub fn new() -> SearchTxsResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_count",
            |m: &SearchTxsResult| { &m.total_count },
            |m: &mut SearchTxsResult| { &mut m.total_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &SearchTxsResult| { &m.count },
            |m: &mut SearchTxsResult| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_number",
            |m: &SearchTxsResult| { &m.page_number },
            |m: &mut SearchTxsResult| { &mut m.page_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_total",
            |m: &SearchTxsResult| { &m.page_total },
            |m: &mut SearchTxsResult| { &mut m.page_total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "limit",
            |m: &SearchTxsResult| { &m.limit },
            |m: &mut SearchTxsResult| { &mut m.limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "txs",
            |m: &SearchTxsResult| { &m.txs },
            |m: &mut SearchTxsResult| { &mut m.txs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SearchTxsResult>(
            "SearchTxsResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SearchTxsResult {
    const NAME: &'static str = "SearchTxsResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.total_count = is.read_uint64()?;
                },
                16 => {
                    self.count = is.read_uint64()?;
                },
                24 => {
                    self.page_number = is.read_uint64()?;
                },
                32 => {
                    self.page_total = is.read_uint64()?;
                },
                40 => {
                    self.limit = is.read_uint64()?;
                },
                50 => {
                    self.txs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.total_count);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.count);
        }
        if self.page_number != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.page_number);
        }
        if self.page_total != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.page_total);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.limit);
        }
        for value in &self.txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.total_count != 0 {
            os.write_uint64(1, self.total_count)?;
        }
        if self.count != 0 {
            os.write_uint64(2, self.count)?;
        }
        if self.page_number != 0 {
            os.write_uint64(3, self.page_number)?;
        }
        if self.page_total != 0 {
            os.write_uint64(4, self.page_total)?;
        }
        if self.limit != 0 {
            os.write_uint64(5, self.limit)?;
        }
        for v in &self.txs {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SearchTxsResult {
        SearchTxsResult::new()
    }

    fn clear(&mut self) {
        self.total_count = 0;
        self.count = 0;
        self.page_number = 0;
        self.page_total = 0;
        self.limit = 0;
        self.txs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SearchTxsResult {
        static instance: SearchTxsResult = SearchTxsResult {
            total_count: 0,
            count: 0,
            page_number: 0,
            page_total: 0,
            limit: 0,
            txs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SearchTxsResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SearchTxsResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SearchTxsResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SearchTxsResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#cosmos/base/abci/v1beta1/abci.proto\x12\x18cosmos.base.abci.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x1btendermint/abci/types.proto\x1a\x19g\
    oogle/protobuf/any.proto\"\xcc\x03\n\nTxResponse\x12\x16\n\x06height\x18\
    \x01\x20\x01(\x03R\x06height\x12\"\n\x06txhash\x18\x02\x20\x01(\tR\x06tx\
    hashB\n\xe2\xde\x1f\x06TxHash\x12\x1c\n\tcodespace\x18\x03\x20\x01(\tR\t\
    codespace\x12\x12\n\x04code\x18\x04\x20\x01(\rR\x04code\x12\x12\n\x04dat\
    a\x18\x05\x20\x01(\tR\x04data\x12\x17\n\x07raw_log\x18\x06\x20\x01(\tR\
    \x06rawLog\x12U\n\x04logs\x18\x07\x20\x03(\x0b2(.cosmos.base.abci.v1beta\
    1.ABCIMessageLogR\x04logsB\x17\xaa\xdf\x1f\x0fABCIMessageLogs\xc8\xde\
    \x1f\0\x12\x12\n\x04info\x18\x08\x20\x01(\tR\x04info\x12\x1d\n\ngas_want\
    ed\x18\t\x20\x01(\x03R\tgasWanted\x12\x19\n\x08gas_used\x18\n\x20\x01(\
    \x03R\x07gasUsed\x12$\n\x02tx\x18\x0b\x20\x01(\x0b2\x14.google.protobuf.\
    AnyR\x02tx\x12\x1c\n\ttimestamp\x18\x0c\x20\x01(\tR\ttimestamp\x124\n\
    \x06events\x18\r\x20\x03(\x0b2\x16.tendermint.abci.EventR\x06eventsB\x04\
    \xc8\xde\x1f\0:\x04\x88\xa0\x1f\0\"\x9a\x01\n\x0eABCIMessageLog\x12\x1b\
    \n\tmsg_index\x18\x01\x20\x01(\rR\x08msgIndex\x12\x10\n\x03log\x18\x02\
    \x20\x01(\tR\x03log\x12S\n\x06events\x18\x03\x20\x03(\x0b2%.cosmos.base.\
    abci.v1beta1.StringEventR\x06eventsB\x14\xaa\xdf\x1f\x0cStringEvents\xc8\
    \xde\x1f\0:\x04\x80\xdc\x20\x01\"r\n\x0bStringEvent\x12\x12\n\x04type\
    \x18\x01\x20\x01(\tR\x04type\x12I\n\nattributes\x18\x02\x20\x03(\x0b2#.c\
    osmos.base.abci.v1beta1.AttributeR\nattributesB\x04\xc8\xde\x1f\0:\x04\
    \x80\xdc\x20\x01\"3\n\tAttribute\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"o\n\x07GasInfo\
    \x124\n\ngas_wanted\x18\x01\x20\x01(\x04R\tgasWantedB\x15\xf2\xde\x1f\
    \x11yaml:\"gas_wanted\"\x12.\n\x08gas_used\x18\x02\x20\x01(\x04R\x07gasU\
    sedB\x13\xf2\xde\x1f\x0fyaml:\"gas_used\"\"j\n\x06Result\x12\x12\n\x04da\
    ta\x18\x01\x20\x01(\x0cR\x04data\x12\x10\n\x03log\x18\x02\x20\x01(\tR\
    \x03log\x124\n\x06events\x18\x03\x20\x03(\x0b2\x16.tendermint.abci.Event\
    R\x06eventsB\x04\xc8\xde\x1f\0:\x04\x88\xa0\x1f\0\"\x96\x01\n\x12Simulat\
    ionResponse\x12F\n\x08gas_info\x18\x01\x20\x01(\x0b2!.cosmos.base.abci.v\
    1beta1.GasInfoR\x07gasInfoB\x08\xc8\xde\x1f\0\xd0\xde\x1f\x01\x128\n\x06\
    result\x18\x02\x20\x01(\x0b2\x20.cosmos.base.abci.v1beta1.ResultR\x06res\
    ult\">\n\x07MsgData\x12\x19\n\x08msg_type\x18\x01\x20\x01(\tR\x07msgType\
    \x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data:\x04\x80\xdc\x20\x01\"H\
    \n\tTxMsgData\x125\n\x04data\x18\x01\x20\x03(\x0b2!.cosmos.base.abci.v1b\
    eta1.MsgDataR\x04data:\x04\x80\xdc\x20\x01\"\xcf\x02\n\x0fSearchTxsResul\
    t\x12F\n\x0btotal_count\x18\x01\x20\x01(\x04R\ntotalCountB%\xf2\xde\x1f\
    \x12yaml:\"total_count\"\xea\xde\x1f\x0btotal_count\x12\x14\n\x05count\
    \x18\x02\x20\x01(\x04R\x05count\x12F\n\x0bpage_number\x18\x03\x20\x01(\
    \x04R\npageNumberB%\xf2\xde\x1f\x12yaml:\"page_number\"\xea\xde\x1f\x0bp\
    age_number\x12B\n\npage_total\x18\x04\x20\x01(\x04R\tpageTotalB#\xf2\xde\
    \x1f\x11yaml:\"page_total\"\xea\xde\x1f\npage_total\x12\x14\n\x05limit\
    \x18\x05\x20\x01(\x04R\x05limit\x126\n\x03txs\x18\x06\x20\x03(\x0b2$.cos\
    mos.base.abci.v1beta1.TxResponseR\x03txs:\x04\x80\xdc\x20\x01B(Z\"github\
    .com/cosmos/cosmos-sdk/types\xd8\xe1\x1e\0J\xbc,\n\x07\x12\x05\0\0\x8f\
    \x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0!\
    \n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\x12\x03\x04\0%\n\t\
    \n\x02\x03\x02\x12\x03\x05\0#\n\x08\n\x01\x08\x12\x03\x07\0O\n\t\n\x02\
    \x08\x0b\x12\x03\x07\0O\n\x08\n\x01\x08\x12\x03\x08\00\n\x0b\n\x04\x08\
    \x9b\xec\x03\x12\x03\x08\00\n\x8e\x01\n\x02\x04\0\x12\x04\x0c\00\x01\x1a\
    \x81\x01\x20TxResponse\x20defines\x20a\x20structure\x20containing\x20rel\
    evant\x20tx\x20data\x20and\x20metadata.\x20The\n\x20tags\x20are\x20strin\
    gified\x20and\x20the\x20log\x20is\x20JSON\x20decoded.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x0c\x08\x12\n\n\n\x03\x04\0\x07\x12\x03\r\x02-\n\r\n\x06\
    \x04\0\x07\x81\xf4\x03\x12\x03\r\x02-\n\x1f\n\x04\x04\0\x02\0\x12\x03\
    \x0f\x02\x13\x1a\x12\x20The\x20block\x20height\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x08\x0e\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x11\x12\n$\n\x04\x04\0\x02\x01\
    \x12\x03\x11\x028\x1a\x17\x20The\x20transaction\x20hash.\n\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x11\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x11\x12\x13\n\x0c\n\
    \x05\x04\0\x02\x01\x08\x12\x03\x11\x147\n\x0f\n\x08\x04\0\x02\x01\x08\
    \xec\xfb\x03\x12\x03\x11\x156\n%\n\x04\x04\0\x02\x02\x12\x03\x13\x02\x17\
    \x1a\x18\x20Namespace\x20for\x20the\x20Code\n\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x13\t\x12\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x13\x15\x16\n\x1d\n\x04\x04\0\x02\
    \x03\x12\x03\x15\x02\x12\x1a\x10\x20Response\x20code.\n\n\x0c\n\x05\x04\
    \0\x02\x03\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \x15\t\r\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x15\x10\x11\n$\n\x04\x04\
    \0\x02\x04\x12\x03\x17\x02\x12\x1a\x17\x20Result\x20bytes,\x20if\x20any.\
    \n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03\x17\t\r\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x17\
    \x10\x11\n^\n\x04\x04\0\x02\x05\x12\x03\x1a\x02\x15\x1aQ\x20The\x20outpu\
    t\x20of\x20the\x20application's\x20logger\x20(raw\x20string).\x20May\x20\
    be\n\x20non-deterministic.\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x1a\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x1a\t\x10\n\x0c\n\x05\x04\
    \0\x02\x05\x03\x12\x03\x1a\x13\x14\nX\n\x04\x04\0\x02\x06\x12\x03\x1c\
    \x02p\x1aK\x20The\x20output\x20of\x20the\x20application's\x20logger\x20(\
    typed).\x20May\x20be\x20non-deterministic.\n\n\x0c\n\x05\x04\0\x02\x06\
    \x04\x12\x03\x1c\x02\n\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x1c\x0b\x19\
    \n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x1c\x1a\x1e\n\x0c\n\x05\x04\0\x02\
    \x06\x03\x12\x03\x1c!\"\n\x0c\n\x05\x04\0\x02\x06\x08\x12\x03\x1c#o\n\
    \x0f\n\x08\x04\0\x02\x06\x08\xf5\xfb\x03\x12\x03\x1c$P\n\x0f\n\x08\x04\0\
    \x02\x06\x08\xe9\xfb\x03\x12\x03\x1cRn\n@\n\x04\x04\0\x02\x07\x12\x03\
    \x1e\x02\x12\x1a3\x20Additional\x20information.\x20May\x20be\x20non-dete\
    rministic.\n\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x1e\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x07\x01\x12\x03\x1e\t\r\n\x0c\n\x05\x04\0\x02\x07\x03\x12\
    \x03\x1e\x10\x11\n7\n\x04\x04\0\x02\x08\x12\x03\x20\x02\x17\x1a*\x20Amou\
    nt\x20of\x20gas\x20requested\x20for\x20transaction.\n\n\x0c\n\x05\x04\0\
    \x02\x08\x05\x12\x03\x20\x02\x07\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\
    \x20\x08\x12\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x20\x15\x16\n5\n\x04\
    \x04\0\x02\t\x12\x03\"\x02\x16\x1a(\x20Amount\x20of\x20gas\x20consumed\
    \x20by\x20transaction.\n\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\"\x02\x07\n\
    \x0c\n\x05\x04\0\x02\t\x01\x12\x03\"\x08\x10\n\x0c\n\x05\x04\0\x02\t\x03\
    \x12\x03\"\x13\x15\n-\n\x04\x04\0\x02\n\x12\x03$\x02\x1e\x1a\x20\x20The\
    \x20request\x20transaction\x20bytes.\n\n\x0c\n\x05\x04\0\x02\n\x06\x12\
    \x03$\x02\x15\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03$\x16\x18\n\x0c\n\x05\
    \x04\0\x02\n\x03\x12\x03$\x1b\x1d\n\xb9\x01\n\x04\x04\0\x02\x0b\x12\x03(\
    \x02\x18\x1a\xab\x01\x20Time\x20of\x20the\x20previous\x20block.\x20For\
    \x20heights\x20>\x201,\x20it's\x20the\x20weighted\x20median\x20of\n\x20t\
    he\x20timestamps\x20of\x20the\x20valid\x20votes\x20in\x20the\x20block.La\
    stCommit.\x20For\x20height\x20==\x201,\n\x20it's\x20genesis\x20time.\n\n\
    \x0c\n\x05\x04\0\x02\x0b\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\0\x02\x0b\
    \x01\x12\x03(\t\x12\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03(\x15\x17\n\xd5\
    \x02\n\x04\x04\0\x02\x0c\x12\x03/\x02L\x1a\xc7\x02\x20Events\x20defines\
    \x20all\x20the\x20events\x20emitted\x20by\x20processing\x20a\x20transact\
    ion.\x20Note,\n\x20these\x20events\x20include\x20those\x20emitted\x20by\
    \x20processing\x20all\x20the\x20messages\x20and\x20those\n\x20emitted\
    \x20from\x20the\x20ante\x20handler.\x20Whereas\x20Logs\x20contains\x20th\
    e\x20events,\x20with\n\x20additional\x20metadata,\x20emitted\x20only\x20\
    by\x20processing\x20the\x20messages.\n\n\x20Since:\x20cosmos-sdk\x200.42\
    .11,\x200.44.5,\x200.45\n\n\x0c\n\x05\x04\0\x02\x0c\x04\x12\x03/\x02\n\n\
    \x0c\n\x05\x04\0\x02\x0c\x06\x12\x03/\x0b\x20\n\x0c\n\x05\x04\0\x02\x0c\
    \x01\x12\x03/!'\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03/*,\n\x0c\n\x05\x04\
    \0\x02\x0c\x08\x12\x03/-K\n\x0f\n\x08\x04\0\x02\x0c\x08\xe9\xfb\x03\x12\
    \x03/.J\n[\n\x02\x04\x01\x12\x043\0<\x01\x1aO\x20ABCIMessageLog\x20defin\
    es\x20a\x20structure\x20containing\x20an\x20indexed\x20tx\x20ABCI\x20mes\
    sage\x20log.\n\n\n\n\x03\x04\x01\x01\x12\x033\x08\x16\n\n\n\x03\x04\x01\
    \x07\x12\x034\x02%\n\r\n\x06\x04\x01\x07\xc0\x8b\x04\x12\x034\x02%\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x036\x02\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x036\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x036\t\x12\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x036\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x037\
    \x02\x17\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x037\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x037\t\x0c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x037\x15\x16\na\n\x04\x04\x01\x02\x02\x12\x03;\x02l\x1aT\x20Events\x20c\
    ontains\x20a\x20slice\x20of\x20Event\x20objects\x20that\x20were\x20emitt\
    ed\x20during\x20some\n\x20execution.\n\n\x0c\n\x05\x04\x01\x02\x02\x04\
    \x12\x03;\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03;\x0b\x16\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03;\x17\x1d\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03;\x20!\n\x0c\n\x05\x04\x01\x02\x02\x08\x12\x03;\"k\n\x0f\n\
    \x08\x04\x01\x02\x02\x08\xf5\xfb\x03\x12\x03;#L\n\x0f\n\x08\x04\x01\x02\
    \x02\x08\xe9\xfb\x03\x12\x03;Nj\n\x93\x01\n\x02\x04\x02\x12\x04@\0E\x01\
    \x1a\x86\x01\x20StringEvent\x20defines\x20en\x20Event\x20object\x20wrapp\
    er\x20where\x20all\x20the\x20attributes\n\x20contain\x20key/value\x20pai\
    rs\x20that\x20are\x20strings\x20instead\x20of\x20raw\x20bytes.\n\n\n\n\
    \x03\x04\x02\x01\x12\x03@\x08\x13\n\n\n\x03\x04\x02\x07\x12\x03A\x02%\n\
    \r\n\x06\x04\x02\x07\xc0\x8b\x04\x12\x03A\x02%\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03C\x02$\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03C\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03C\x15\x19\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03C\"#\n\x0b\n\x04\x04\x02\x02\x01\x12\x03D\x02C\n\x0c\n\x05\x04\
    \x02\x02\x01\x04\x12\x03D\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03D\
    \x0b\x14\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03D\x15\x1f\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03D\"#\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03\
    D$B\n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\xfb\x03\x12\x03D%A\no\n\x02\x04\
    \x03\x12\x04I\0L\x01\x1ac\x20Attribute\x20defines\x20an\x20attribute\x20\
    wrapper\x20where\x20the\x20key\x20and\x20value\x20are\n\x20strings\x20in\
    stead\x20of\x20raw\x20bytes.\n\n\n\n\x03\x04\x03\x01\x12\x03I\x08\x11\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03J\x02\x13\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03J\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03J\t\x0c\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03J\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03K\x02\x13\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03K\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03K\t\x0e\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03K\x11\x12\n7\n\x02\x04\x04\x12\x04O\0U\x01\x1a+\x20GasInfo\x20de\
    fines\x20tx\x20execution\x20gas\x20context.\n\n\n\n\x03\x04\x04\x01\x12\
    \x03O\x08\x0f\nR\n\x04\x04\x04\x02\0\x12\x03Q\x02G\x1aE\x20GasWanted\x20\
    is\x20the\x20maximum\x20units\x20of\x20work\x20we\x20allow\x20this\x20tx\
    \x20to\x20perform.\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03Q\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03Q\t\x13\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03Q\x16\x17\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03Q\x18F\n\x0f\
    \n\x08\x04\x04\x02\0\x08\xee\xfb\x03\x12\x03Q\x19E\n>\n\x04\x04\x04\x02\
    \x01\x12\x03T\x02C\x1a1\x20GasUsed\x20is\x20the\x20amount\x20of\x20gas\
    \x20actually\x20consumed.\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03T\x02\
    \x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03T\t\x11\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03T\x14\x15\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03T\
    \x16B\n\x0f\n\x08\x04\x04\x02\x01\x08\xee\xfb\x03\x12\x03T\x17A\nH\n\x02\
    \x04\x05\x12\x04X\0e\x01\x1a<\x20Result\x20is\x20the\x20union\x20of\x20R\
    esponseFormat\x20and\x20ResponseCheckTx.\n\n\n\n\x03\x04\x05\x01\x12\x03\
    X\x08\x0e\n\n\n\x03\x04\x05\x07\x12\x03Y\x02-\n\r\n\x06\x04\x05\x07\x81\
    \xf4\x03\x12\x03Y\x02-\n\xa4\x01\n\x04\x04\x05\x02\0\x12\x03]\x02\x11\
    \x1a\x96\x01\x20Data\x20is\x20any\x20data\x20returned\x20from\x20message\
    \x20or\x20handler\x20execution.\x20It\x20MUST\x20be\n\x20length\x20prefi\
    xed\x20in\x20order\x20to\x20separate\x20data\x20from\x20multiple\x20mess\
    age\x20executions.\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03]\x02\x07\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03]\x08\x0c\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03]\x0f\x10\nR\n\x04\x04\x05\x02\x01\x12\x03`\x02\x11\x1aE\x20\
    Log\x20contains\x20the\x20log\x20information\x20from\x20message\x20or\
    \x20handler\x20execution.\n\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03`\x02\
    \x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03`\t\x0c\n\x0c\n\x05\x04\x05\
    \x02\x01\x03\x12\x03`\x0f\x10\no\n\x04\x04\x05\x02\x02\x12\x03d\x02K\x1a\
    b\x20Events\x20contains\x20a\x20slice\x20of\x20Event\x20objects\x20that\
    \x20were\x20emitted\x20during\x20message\n\x20or\x20handler\x20execution\
    .\n\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03d\x02\n\n\x0c\n\x05\x04\x05\
    \x02\x02\x06\x12\x03d\x0b\x20\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03d!'\
    \n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03d*+\n\x0c\n\x05\x04\x05\x02\x02\
    \x08\x12\x03d,J\n\x0f\n\x08\x04\x05\x02\x02\x08\xe9\xfb\x03\x12\x03d-I\n\
    n\n\x02\x04\x06\x12\x04i\0l\x01\x1ab\x20SimulationResponse\x20defines\
    \x20the\x20response\x20generated\x20when\x20a\x20transaction\x20is\n\x20\
    successfully\x20simulated.\n\n\n\n\x03\x04\x06\x01\x12\x03i\x08\x1a\n\
    \x0b\n\x04\x04\x06\x02\0\x12\x03j\x02P\n\x0c\n\x05\x04\x06\x02\0\x06\x12\
    \x03j\x02\t\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03j\n\x12\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03j\x15\x16\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03j\
    \x17O\n\x0f\n\x08\x04\x06\x02\0\x08\xea\xfb\x03\x12\x03j\x180\n\x0f\n\
    \x08\x04\x06\x02\0\x08\xe9\xfb\x03\x12\x03j2N\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03k\x02\x17\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03k\x02\x08\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03k\n\x10\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03k\x15\x16\n]\n\x02\x04\x07\x12\x04p\0u\x01\x1aQ\x20MsgDa\
    ta\x20defines\x20the\x20data\x20returned\x20in\x20a\x20Result\x20object\
    \x20during\x20message\n\x20execution.\n\n\n\n\x03\x04\x07\x01\x12\x03p\
    \x08\x0f\n\n\n\x03\x04\x07\x07\x12\x03q\x02%\n\r\n\x06\x04\x07\x07\xc0\
    \x8b\x04\x12\x03q\x02%\n\x0b\n\x04\x04\x07\x02\0\x12\x03s\x02\x16\n\x0c\
    \n\x05\x04\x07\x02\0\x05\x12\x03s\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03s\t\x11\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03s\x14\x15\n\x0b\n\
    \x04\x04\x07\x02\x01\x12\x03t\x02\x16\n\x0c\n\x05\x04\x07\x02\x01\x05\
    \x12\x03t\x02\x07\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03t\t\r\n\x0c\n\
    \x05\x04\x07\x02\x01\x03\x12\x03t\x14\x15\nn\n\x02\x04\x08\x12\x04y\0}\
    \x01\x1ab\x20TxMsgData\x20defines\x20a\x20list\x20of\x20MsgData.\x20A\
    \x20transaction\x20will\x20have\x20a\x20MsgData\x20object\n\x20for\x20ea\
    ch\x20message.\n\n\n\n\x03\x04\x08\x01\x12\x03y\x08\x11\n\n\n\x03\x04\
    \x08\x07\x12\x03z\x02%\n\r\n\x06\x04\x08\x07\xc0\x8b\x04\x12\x03z\x02%\n\
    \x0b\n\x04\x04\x08\x02\0\x12\x03|\x02\x1c\n\x0c\n\x05\x04\x08\x02\0\x04\
    \x12\x03|\x02\n\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03|\x0b\x12\n\x0c\n\
    \x05\x04\x08\x02\0\x01\x12\x03|\x13\x17\n\x0c\n\x05\x04\x08\x02\0\x03\
    \x12\x03|\x1a\x1b\nM\n\x02\x04\t\x12\x06\x80\x01\0\x8f\x01\x01\x1a?\x20S\
    earchTxsResult\x20defines\x20a\x20structure\x20for\x20querying\x20txs\
    \x20pageable\n\n\x0b\n\x03\x04\t\x01\x12\x04\x80\x01\x08\x17\n\x0b\n\x03\
    \x04\t\x07\x12\x04\x81\x01\x02%\n\x0e\n\x06\x04\t\x07\xc0\x8b\x04\x12\
    \x04\x81\x01\x02%\n\x20\n\x04\x04\t\x02\0\x12\x04\x84\x01\x02n\x1a\x12\
    \x20Count\x20of\x20all\x20txs\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\x84\
    \x01\x02\x08\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x84\x01\t\x14\n\r\n\x05\
    \x04\t\x02\0\x03\x12\x04\x84\x01\x17\x18\n\r\n\x05\x04\t\x02\0\x08\x12\
    \x04\x84\x01\x19m\n\x10\n\x08\x04\t\x02\0\x08\xee\xfb\x03\x12\x04\x84\
    \x01\x1aG\n\x10\n\x08\x04\t\x02\0\x08\xed\xfb\x03\x12\x04\x84\x01Il\n,\n\
    \x04\x04\t\x02\x01\x12\x04\x86\x01\x02\x13\x1a\x1e\x20Count\x20of\x20txs\
    \x20in\x20current\x20page\n\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\x86\x01\
    \x02\x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x86\x01\t\x0e\n\r\n\x05\x04\
    \t\x02\x01\x03\x12\x04\x86\x01\x11\x12\n3\n\x04\x04\t\x02\x02\x12\x04\
    \x88\x01\x02n\x1a%\x20Index\x20of\x20current\x20page,\x20start\x20from\
    \x201\n\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\x88\x01\x02\x08\n\r\n\x05\
    \x04\t\x02\x02\x01\x12\x04\x88\x01\t\x14\n\r\n\x05\x04\t\x02\x02\x03\x12\
    \x04\x88\x01\x17\x18\n\r\n\x05\x04\t\x02\x02\x08\x12\x04\x88\x01\x19m\n\
    \x10\n\x08\x04\t\x02\x02\x08\xee\xfb\x03\x12\x04\x88\x01\x1aG\n\x10\n\
    \x08\x04\t\x02\x02\x08\xed\xfb\x03\x12\x04\x88\x01Il\n$\n\x04\x04\t\x02\
    \x03\x12\x04\x8a\x01\x02k\x1a\x16\x20Count\x20of\x20total\x20pages\n\n\r\
    \n\x05\x04\t\x02\x03\x05\x12\x04\x8a\x01\x02\x08\n\r\n\x05\x04\t\x02\x03\
    \x01\x12\x04\x8a\x01\t\x13\n\r\n\x05\x04\t\x02\x03\x03\x12\x04\x8a\x01\
    \x16\x17\n\r\n\x05\x04\t\x02\x03\x08\x12\x04\x8a\x01\x18j\n\x10\n\x08\
    \x04\t\x02\x03\x08\xee\xfb\x03\x12\x04\x8a\x01\x19E\n\x10\n\x08\x04\t\
    \x02\x03\x08\xed\xfb\x03\x12\x04\x8a\x01Gi\n&\n\x04\x04\t\x02\x04\x12\
    \x04\x8c\x01\x02\x13\x1a\x18\x20Max\x20count\x20txs\x20per\x20page\n\n\r\
    \n\x05\x04\t\x02\x04\x05\x12\x04\x8c\x01\x02\x08\n\r\n\x05\x04\t\x02\x04\
    \x01\x12\x04\x8c\x01\t\x0e\n\r\n\x05\x04\t\x02\x04\x03\x12\x04\x8c\x01\
    \x11\x12\n+\n\x04\x04\t\x02\x05\x12\x04\x8e\x01\x02\x1e\x1a\x1d\x20List\
    \x20of\x20txs\x20in\x20current\x20page\n\n\r\n\x05\x04\t\x02\x05\x04\x12\
    \x04\x8e\x01\x02\n\n\r\n\x05\x04\t\x02\x05\x06\x12\x04\x8e\x01\x0b\x15\n\
    \r\n\x05\x04\t\x02\x05\x01\x12\x04\x8e\x01\x16\x19\n\r\n\x05\x04\t\x02\
    \x05\x03\x12\x04\x8e\x01\x1c\x1db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(TxResponse::generated_message_descriptor_data());
            messages.push(ABCIMessageLog::generated_message_descriptor_data());
            messages.push(StringEvent::generated_message_descriptor_data());
            messages.push(Attribute::generated_message_descriptor_data());
            messages.push(GasInfo::generated_message_descriptor_data());
            messages.push(Result::generated_message_descriptor_data());
            messages.push(SimulationResponse::generated_message_descriptor_data());
            messages.push(MsgData::generated_message_descriptor_data());
            messages.push(TxMsgData::generated_message_descriptor_data());
            messages.push(SearchTxsResult::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
