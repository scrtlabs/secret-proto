// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/slashing/v1beta1/slashing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  ValidatorSigningInfo defines a validator's signing info for monitoring their
///  liveness activity.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.slashing.v1beta1.ValidatorSigningInfo)
pub struct ValidatorSigningInfo {
    // message fields
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.ValidatorSigningInfo.address)
    pub address: ::std::string::String,
    ///  Height at which validator was first a candidate OR was unjailed
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.ValidatorSigningInfo.start_height)
    pub start_height: i64,
    ///  Index which is incremented each time the validator was a bonded
    ///  in a block and may have signed a precommit or not. This in conjunction with the
    ///  `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.ValidatorSigningInfo.index_offset)
    pub index_offset: i64,
    ///  Timestamp until which the validator is jailed due to liveness downtime.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.ValidatorSigningInfo.jailed_until)
    pub jailed_until: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  Whether or not a validator has been tombstoned (killed out of validator set). It is set
    ///  once the validator commits an equivocation or for any other configured misbehiavor.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.ValidatorSigningInfo.tombstoned)
    pub tombstoned: bool,
    ///  A counter kept to avoid unnecessary array reads.
    ///  Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.ValidatorSigningInfo.missed_blocks_counter)
    pub missed_blocks_counter: i64,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.slashing.v1beta1.ValidatorSigningInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorSigningInfo {
    fn default() -> &'a ValidatorSigningInfo {
        <ValidatorSigningInfo as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSigningInfo {
    pub fn new() -> ValidatorSigningInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &ValidatorSigningInfo| { &m.address },
            |m: &mut ValidatorSigningInfo| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_height",
            |m: &ValidatorSigningInfo| { &m.start_height },
            |m: &mut ValidatorSigningInfo| { &mut m.start_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index_offset",
            |m: &ValidatorSigningInfo| { &m.index_offset },
            |m: &mut ValidatorSigningInfo| { &mut m.index_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "jailed_until",
            |m: &ValidatorSigningInfo| { &m.jailed_until },
            |m: &mut ValidatorSigningInfo| { &mut m.jailed_until },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tombstoned",
            |m: &ValidatorSigningInfo| { &m.tombstoned },
            |m: &mut ValidatorSigningInfo| { &mut m.tombstoned },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "missed_blocks_counter",
            |m: &ValidatorSigningInfo| { &m.missed_blocks_counter },
            |m: &mut ValidatorSigningInfo| { &mut m.missed_blocks_counter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorSigningInfo>(
            "ValidatorSigningInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorSigningInfo {
    const NAME: &'static str = "ValidatorSigningInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                16 => {
                    self.start_height = is.read_int64()?;
                },
                24 => {
                    self.index_offset = is.read_int64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.jailed_until)?;
                },
                40 => {
                    self.tombstoned = is.read_bool()?;
                },
                48 => {
                    self.missed_blocks_counter = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if self.start_height != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.start_height);
        }
        if self.index_offset != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.index_offset);
        }
        if let Some(v) = self.jailed_until.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.tombstoned != false {
            my_size += 1 + 1;
        }
        if self.missed_blocks_counter != 0 {
            my_size += ::protobuf::rt::int64_size(6, self.missed_blocks_counter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if self.start_height != 0 {
            os.write_int64(2, self.start_height)?;
        }
        if self.index_offset != 0 {
            os.write_int64(3, self.index_offset)?;
        }
        if let Some(v) = self.jailed_until.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.tombstoned != false {
            os.write_bool(5, self.tombstoned)?;
        }
        if self.missed_blocks_counter != 0 {
            os.write_int64(6, self.missed_blocks_counter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorSigningInfo {
        ValidatorSigningInfo::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.start_height = 0;
        self.index_offset = 0;
        self.jailed_until.clear();
        self.tombstoned = false;
        self.missed_blocks_counter = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorSigningInfo {
        static instance: ValidatorSigningInfo = ValidatorSigningInfo {
            address: ::std::string::String::new(),
            start_height: 0,
            index_offset: 0,
            jailed_until: ::protobuf::MessageField::none(),
            tombstoned: false,
            missed_blocks_counter: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorSigningInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorSigningInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorSigningInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSigningInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Params represents the parameters used for by the slashing module.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.slashing.v1beta1.Params)
pub struct Params {
    // message fields
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.Params.signed_blocks_window)
    pub signed_blocks_window: i64,
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.Params.min_signed_per_window)
    pub min_signed_per_window: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.Params.downtime_jail_duration)
    pub downtime_jail_duration: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.Params.slash_fraction_double_sign)
    pub slash_fraction_double_sign: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.Params.slash_fraction_downtime)
    pub slash_fraction_downtime: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.slashing.v1beta1.Params.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signed_blocks_window",
            |m: &Params| { &m.signed_blocks_window },
            |m: &mut Params| { &mut m.signed_blocks_window },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_signed_per_window",
            |m: &Params| { &m.min_signed_per_window },
            |m: &mut Params| { &mut m.min_signed_per_window },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "downtime_jail_duration",
            |m: &Params| { &m.downtime_jail_duration },
            |m: &mut Params| { &mut m.downtime_jail_duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slash_fraction_double_sign",
            |m: &Params| { &m.slash_fraction_double_sign },
            |m: &mut Params| { &mut m.slash_fraction_double_sign },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slash_fraction_downtime",
            |m: &Params| { &m.slash_fraction_downtime },
            |m: &mut Params| { &mut m.slash_fraction_downtime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Params>(
            "Params",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Params {
    const NAME: &'static str = "Params";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.signed_blocks_window = is.read_int64()?;
                },
                18 => {
                    self.min_signed_per_window = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.downtime_jail_duration)?;
                },
                34 => {
                    self.slash_fraction_double_sign = is.read_bytes()?;
                },
                42 => {
                    self.slash_fraction_downtime = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.signed_blocks_window != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.signed_blocks_window);
        }
        if !self.min_signed_per_window.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.min_signed_per_window);
        }
        if let Some(v) = self.downtime_jail_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.slash_fraction_double_sign.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.slash_fraction_double_sign);
        }
        if !self.slash_fraction_downtime.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.slash_fraction_downtime);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.signed_blocks_window != 0 {
            os.write_int64(1, self.signed_blocks_window)?;
        }
        if !self.min_signed_per_window.is_empty() {
            os.write_bytes(2, &self.min_signed_per_window)?;
        }
        if let Some(v) = self.downtime_jail_duration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.slash_fraction_double_sign.is_empty() {
            os.write_bytes(4, &self.slash_fraction_double_sign)?;
        }
        if !self.slash_fraction_downtime.is_empty() {
            os.write_bytes(5, &self.slash_fraction_downtime)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Params {
        Params::new()
    }

    fn clear(&mut self) {
        self.signed_blocks_window = 0;
        self.min_signed_per_window.clear();
        self.downtime_jail_duration.clear();
        self.slash_fraction_double_sign.clear();
        self.slash_fraction_downtime.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Params {
        static instance: Params = Params {
            signed_blocks_window: 0,
            min_signed_per_window: ::std::vec::Vec::new(),
            downtime_jail_duration: ::protobuf::MessageField::none(),
            slash_fraction_double_sign: ::std::vec::Vec::new(),
            slash_fraction_downtime: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Params {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Params").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&cosmos/slashing/v1beta1/slashing.proto\x12\x17cosmos.slashing.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\
    \x1fgoogle/protobuf/timestamp.proto\"\x88\x03\n\x14ValidatorSigningInfo\
    \x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12:\n\x0cstart_hei\
    ght\x18\x02\x20\x01(\x03R\x0bstartHeightB\x17\xf2\xde\x1f\x13yaml:\"star\
    t_height\"\x12:\n\x0cindex_offset\x18\x03\x20\x01(\x03R\x0bindexOffsetB\
    \x17\xf2\xde\x1f\x13yaml:\"index_offset\"\x12^\n\x0cjailed_until\x18\x04\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0bjailedUntilB\x1f\xf2\
    \xde\x1f\x13yaml:\"jailed_until\"\x90\xdf\x1f\x01\xc8\xde\x1f\0\x12\x1e\
    \n\ntombstoned\x18\x05\x20\x01(\x08R\ntombstoned\x12T\n\x15missed_blocks\
    _counter\x18\x06\x20\x01(\x03R\x13missedBlocksCounterB\x20\xf2\xde\x1f\
    \x1cyaml:\"missed_blocks_counter\":\x08\xe8\xa0\x1f\x01\x98\xa0\x1f\0\"\
    \xf9\x04\n\x06Params\x12Q\n\x14signed_blocks_window\x18\x01\x20\x01(\x03\
    R\x12signedBlocksWindowB\x1f\xf2\xde\x1f\x1byaml:\"signed_blocks_window\
    \"\x12\x81\x01\n\x15min_signed_per_window\x18\x02\x20\x01(\x0cR\x12minSi\
    gnedPerWindowBN\xf2\xde\x1f\x1cyaml:\"min_signed_per_window\"\xda\xde\
    \x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12z\n\x16down\
    time_jail_duration\x18\x03\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \x14downtimeJailDurationB)\xf2\xde\x1f\x1dyaml:\"downtime_jail_duration\
    \"\xc8\xde\x1f\0\x98\xdf\x1f\x01\x12\x90\x01\n\x1aslash_fraction_double_\
    sign\x18\x04\x20\x01(\x0cR\x17slashFractionDoubleSignBS\xf2\xde\x1f!yaml\
    :\"slash_fraction_double_sign\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk\
    /types.Dec\xc8\xde\x1f\0\x12\x88\x01\n\x17slash_fraction_downtime\x18\
    \x05\x20\x01(\x0cR\x15slashFractionDowntimeBP\xf2\xde\x1f\x1eyaml:\"slas\
    h_fraction_downtime\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\
    \xc8\xde\x1f\0B3Z-github.com/cosmos/cosmos-sdk/x/slashing/types\xa8\xe2\
    \x1e\x01J\xc6\x10\n\x06\x12\x04\0\09\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x01\0\x20\n\x08\n\x01\x08\x12\x03\x03\0O\n\t\n\
    \x02\x08\x0b\x12\x03\x03\0O\n\x08\n\x01\x08\x12\x03\x04\0$\n\x0b\n\x04\
    \x08\xa5\xec\x03\x12\x03\x04\0$\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\
    \x02\x03\x01\x12\x03\x07\0(\n\t\n\x02\x03\x02\x12\x03\x08\0)\nn\n\x02\
    \x04\0\x12\x04\x0c\0\x20\x01\x1ab\x20ValidatorSigningInfo\x20defines\x20\
    a\x20validator's\x20signing\x20info\x20for\x20monitoring\x20their\n\x20l\
    iveness\x20activity.\n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x1c\n\n\n\x03\
    \x04\0\x07\x12\x03\r\x02-\n\r\n\x06\x04\0\x07\x8d\xf4\x03\x12\x03\r\x02-\
    \n\n\n\x03\x04\0\x07\x12\x03\x0e\x02.\n\r\n\x06\x04\0\x07\x83\xf4\x03\
    \x12\x03\x0e\x02.\n\x0b\n\x04\x04\0\x02\0\x12\x03\x10\x02\x15\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x10\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x13\x14\nN\n\x04\
    \x04\0\x02\x01\x12\x03\x12\x02J\x1aA\x20Height\x20at\x20which\x20validat\
    or\x20was\x20first\x20a\x20candidate\x20OR\x20was\x20unjailed\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x12\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x12\x08\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x12\x17\x18\n\
    \x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x12\x19I\n\x0f\n\x08\x04\0\x02\x01\
    \x08\xee\xfb\x03\x12\x03\x12\x1aH\n\xf0\x01\n\x04\x04\0\x02\x02\x12\x03\
    \x16\x02J\x1a\xe2\x01\x20Index\x20which\x20is\x20incremented\x20each\x20\
    time\x20the\x20validator\x20was\x20a\x20bonded\n\x20in\x20a\x20block\x20\
    and\x20may\x20have\x20signed\x20a\x20precommit\x20or\x20not.\x20This\x20\
    in\x20conjunction\x20with\x20the\n\x20`SignedBlocksWindow`\x20param\x20d\
    etermines\x20the\x20index\x20in\x20the\x20`MissedBlocksBitArray`.\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x16\x08\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x16\
    \x17\x18\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x16\x19I\n\x0f\n\x08\x04\
    \0\x02\x02\x08\xee\xfb\x03\x12\x03\x16\x1aH\nW\n\x04\x04\0\x02\x03\x12\
    \x04\x18\x02\x19q\x1aI\x20Timestamp\x20until\x20which\x20the\x20validato\
    r\x20is\x20jailed\x20due\x20to\x20liveness\x20downtime.\n\n\x0c\n\x05\
    \x04\0\x02\x03\x06\x12\x03\x18\x02\x1b\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x18\x1c(\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x18+,\n\x0c\n\x05\
    \x04\0\x02\x03\x08\x12\x03\x19\x06p\n\x0f\n\x08\x04\0\x02\x03\x08\xee\
    \xfb\x03\x12\x03\x19\x075\n\x0f\n\x08\x04\0\x02\x03\x08\xf2\xfb\x03\x12\
    \x03\x197Q\n\x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\x03\x12\x03\x19So\n\xbc\
    \x01\n\x04\x04\0\x02\x04\x12\x03\x1c\x02\x16\x1a\xae\x01\x20Whether\x20o\
    r\x20not\x20a\x20validator\x20has\x20been\x20tombstoned\x20(killed\x20ou\
    t\x20of\x20validator\x20set).\x20It\x20is\x20set\n\x20once\x20the\x20val\
    idator\x20commits\x20an\x20equivocation\x20or\x20for\x20any\x20other\x20\
    configured\x20misbehiavor.\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x1c\
    \x02\x06\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x1c\x07\x11\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\x1c\x14\x15\n\x8b\x01\n\x04\x04\0\x02\x05\x12\
    \x03\x1f\x02\\\x1a~\x20A\x20counter\x20kept\x20to\x20avoid\x20unnecessar\
    y\x20array\x20reads.\n\x20Note\x20that\x20`Sum(MissedBlocksBitArray)`\
    \x20always\x20equals\x20`MissedBlocksCounter`.\n\n\x0c\n\x05\x04\0\x02\
    \x05\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x1f\
    \x08\x1d\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x1f\x20!\n\x0c\n\x05\x04\
    \0\x02\x05\x08\x12\x03\x1f\"[\n\x0f\n\x08\x04\0\x02\x05\x08\xee\xfb\x03\
    \x12\x03\x1f#Z\nO\n\x02\x04\x01\x12\x04#\09\x01\x1aC\x20Params\x20repres\
    ents\x20the\x20parameters\x20used\x20for\x20by\x20the\x20slashing\x20mod\
    ule.\n\n\n\n\x03\x04\x01\x01\x12\x03#\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03$\x02[\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03$\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03$\x08\x1c\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03$\x20!\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03$\"Z\n\x0f\n\x08\x04\
    \x01\x02\0\x08\xee\xfb\x03\x12\x03$#Y\n\x0c\n\x04\x04\x01\x02\x01\x12\
    \x04%\x02)\x04\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03%\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03%\x08\x1d\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03%\x20!\n\r\n\x05\x04\x01\x02\x01\x08\x12\x04%\")\x03\n\x0f\n\
    \x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03&\x04=\n\x0f\n\x08\x04\x01\
    \x02\x01\x08\xeb\xfb\x03\x12\x03'\x04E\n\x0f\n\x08\x04\x01\x02\x01\x08\
    \xe9\xfb\x03\x12\x03(\x04\"\n\x0c\n\x04\x04\x01\x02\x02\x12\x04*\x02.\
    \x04\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03*\x02\x1a\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03*\x1b1\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03*4\
    5\n\r\n\x05\x04\x01\x02\x02\x08\x12\x04*6.\x03\n\x0f\n\x08\x04\x01\x02\
    \x02\x08\xe9\xfb\x03\x12\x03+\x04#\n\x0f\n\x08\x04\x01\x02\x02\x08\xf3\
    \xfb\x03\x12\x03,\x04\"\n\x0f\n\x08\x04\x01\x02\x02\x08\xee\xfb\x03\x12\
    \x03-\x04?\n\x0c\n\x04\x04\x01\x02\x03\x12\x04/\x023\x04\n\x0c\n\x05\x04\
    \x01\x02\x03\x05\x12\x03/\x02\x07\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03/\x08\"\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03/%&\n\r\n\x05\x04\x01\
    \x02\x03\x08\x12\x04/'3\x03\n\x0f\n\x08\x04\x01\x02\x03\x08\xee\xfb\x03\
    \x12\x030\x04B\n\x0f\n\x08\x04\x01\x02\x03\x08\xeb\xfb\x03\x12\x031\x04E\
    \n\x0f\n\x08\x04\x01\x02\x03\x08\xe9\xfb\x03\x12\x032\x04\"\n\x0c\n\x04\
    \x04\x01\x02\x04\x12\x044\x028\x04\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\
    \x034\x02\x07\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x034\x08\x1f\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x034\"#\n\r\n\x05\x04\x01\x02\x04\x08\x12\
    \x044$8\x03\n\x0f\n\x08\x04\x01\x02\x04\x08\xee\xfb\x03\x12\x035\x04?\n\
    \x0f\n\x08\x04\x01\x02\x04\x08\xeb\xfb\x03\x12\x036\x04E\n\x0f\n\x08\x04\
    \x01\x02\x04\x08\xe9\xfb\x03\x12\x037\x04\"b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ValidatorSigningInfo::generated_message_descriptor_data());
            messages.push(Params::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
