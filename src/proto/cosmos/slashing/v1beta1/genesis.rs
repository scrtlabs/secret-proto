// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cosmos/slashing/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState defines the slashing module's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.slashing.v1beta1.GenesisState)
pub struct GenesisState {
    // message fields
    ///  params defines all the paramaters of related to deposit.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.GenesisState.params)
    pub params: ::protobuf::MessageField<super::slashing::Params>,
    ///  signing_infos represents a map between validator addresses and their
    ///  signing infos.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.GenesisState.signing_infos)
    pub signing_infos: ::std::vec::Vec<SigningInfo>,
    ///  missed_blocks represents a map between validator addresses and their
    ///  missed blocks.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.GenesisState.missed_blocks)
    pub missed_blocks: ::std::vec::Vec<ValidatorMissedBlocks>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.slashing.v1beta1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::slashing::Params>(
            "params",
            |m: &GenesisState| { &m.params },
            |m: &mut GenesisState| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signing_infos",
            |m: &GenesisState| { &m.signing_infos },
            |m: &mut GenesisState| { &mut m.signing_infos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "missed_blocks",
            |m: &GenesisState| { &m.missed_blocks },
            |m: &mut GenesisState| { &mut m.missed_blocks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                18 => {
                    self.signing_infos.push(is.read_message()?);
                },
                26 => {
                    self.missed_blocks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.signing_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.missed_blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.signing_infos {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.missed_blocks {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.signing_infos.clear();
        self.missed_blocks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            params: ::protobuf::MessageField::none(),
            signing_infos: ::std::vec::Vec::new(),
            missed_blocks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SigningInfo stores validator signing info of corresponding address.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.slashing.v1beta1.SigningInfo)
pub struct SigningInfo {
    // message fields
    ///  address is the validator address.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.SigningInfo.address)
    pub address: ::std::string::String,
    ///  validator_signing_info represents the signing info of this validator.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.SigningInfo.validator_signing_info)
    pub validator_signing_info: ::protobuf::MessageField<super::slashing::ValidatorSigningInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.slashing.v1beta1.SigningInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SigningInfo {
    fn default() -> &'a SigningInfo {
        <SigningInfo as ::protobuf::Message>::default_instance()
    }
}

impl SigningInfo {
    pub fn new() -> SigningInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &SigningInfo| { &m.address },
            |m: &mut SigningInfo| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::slashing::ValidatorSigningInfo>(
            "validator_signing_info",
            |m: &SigningInfo| { &m.validator_signing_info },
            |m: &mut SigningInfo| { &mut m.validator_signing_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SigningInfo>(
            "SigningInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SigningInfo {
    const NAME: &'static str = "SigningInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.validator_signing_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(v) = self.validator_signing_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(v) = self.validator_signing_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SigningInfo {
        SigningInfo::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.validator_signing_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SigningInfo {
        static instance: SigningInfo = SigningInfo {
            address: ::std::string::String::new(),
            validator_signing_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SigningInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SigningInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SigningInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SigningInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ValidatorMissedBlocks contains array of missed blocks of corresponding
///  address.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
pub struct ValidatorMissedBlocks {
    // message fields
    ///  address is the validator address.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.ValidatorMissedBlocks.address)
    pub address: ::std::string::String,
    ///  missed_blocks is an array of missed blocks by the validator.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.ValidatorMissedBlocks.missed_blocks)
    pub missed_blocks: ::std::vec::Vec<MissedBlock>,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.slashing.v1beta1.ValidatorMissedBlocks.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorMissedBlocks {
    fn default() -> &'a ValidatorMissedBlocks {
        <ValidatorMissedBlocks as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorMissedBlocks {
    pub fn new() -> ValidatorMissedBlocks {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &ValidatorMissedBlocks| { &m.address },
            |m: &mut ValidatorMissedBlocks| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "missed_blocks",
            |m: &ValidatorMissedBlocks| { &m.missed_blocks },
            |m: &mut ValidatorMissedBlocks| { &mut m.missed_blocks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorMissedBlocks>(
            "ValidatorMissedBlocks",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorMissedBlocks {
    const NAME: &'static str = "ValidatorMissedBlocks";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = is.read_string()?;
                },
                18 => {
                    self.missed_blocks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        for value in &self.missed_blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        for v in &self.missed_blocks {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorMissedBlocks {
        ValidatorMissedBlocks::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.missed_blocks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorMissedBlocks {
        static instance: ValidatorMissedBlocks = ValidatorMissedBlocks {
            address: ::std::string::String::new(),
            missed_blocks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorMissedBlocks {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorMissedBlocks").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorMissedBlocks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorMissedBlocks {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MissedBlock contains height and missed status as boolean.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cosmos.slashing.v1beta1.MissedBlock)
pub struct MissedBlock {
    // message fields
    ///  index is the height at which the block was missed.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.MissedBlock.index)
    pub index: i64,
    ///  missed is the missed status.
    // @@protoc_insertion_point(field:cosmos.slashing.v1beta1.MissedBlock.missed)
    pub missed: bool,
    // special fields
    // @@protoc_insertion_point(special_field:cosmos.slashing.v1beta1.MissedBlock.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MissedBlock {
    fn default() -> &'a MissedBlock {
        <MissedBlock as ::protobuf::Message>::default_instance()
    }
}

impl MissedBlock {
    pub fn new() -> MissedBlock {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &MissedBlock| { &m.index },
            |m: &mut MissedBlock| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "missed",
            |m: &MissedBlock| { &m.missed },
            |m: &mut MissedBlock| { &mut m.missed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MissedBlock>(
            "MissedBlock",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MissedBlock {
    const NAME: &'static str = "MissedBlock";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_int64()?;
                },
                16 => {
                    self.missed = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.index);
        }
        if self.missed != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_int64(1, self.index)?;
        }
        if self.missed != false {
            os.write_bool(2, self.missed)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MissedBlock {
        MissedBlock::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.missed = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MissedBlock {
        static instance: MissedBlock = MissedBlock {
            index: 0,
            missed: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MissedBlock {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MissedBlock").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MissedBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MissedBlock {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%cosmos/slashing/v1beta1/genesis.proto\x12\x17cosmos.slashing.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a&cosmos/slashing/v1beta1/slashing.proto\
    \"\xa9\x02\n\x0cGenesisState\x12=\n\x06params\x18\x01\x20\x01(\x0b2\x1f.\
    cosmos.slashing.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\x1f\0\x12g\n\rsig\
    ning_infos\x18\x02\x20\x03(\x0b2$.cosmos.slashing.v1beta1.SigningInfoR\
    \x0csigningInfosB\x1c\xf2\xde\x1f\x14yaml:\"signing_infos\"\xc8\xde\x1f\
    \0\x12q\n\rmissed_blocks\x18\x03\x20\x03(\x0b2..cosmos.slashing.v1beta1.\
    ValidatorMissedBlocksR\x0cmissedBlocksB\x1c\xf2\xde\x1f\x14yaml:\"missed\
    _blocks\"\xc8\xde\x1f\0\"\xb4\x01\n\x0bSigningInfo\x12\x18\n\x07address\
    \x18\x01\x20\x01(\tR\x07address\x12\x8a\x01\n\x16validator_signing_info\
    \x18\x02\x20\x01(\x0b2-.cosmos.slashing.v1beta1.ValidatorSigningInfoR\
    \x14validatorSigningInfoB%\xf2\xde\x1f\x1dyaml:\"validator_signing_info\
    \"\xc8\xde\x1f\0\"\x9a\x01\n\x15ValidatorMissedBlocks\x12\x18\n\x07addre\
    ss\x18\x01\x20\x01(\tR\x07address\x12g\n\rmissed_blocks\x18\x02\x20\x03(\
    \x0b2$.cosmos.slashing.v1beta1.MissedBlockR\x0cmissedBlocksB\x1c\xf2\xde\
    \x1f\x14yaml:\"missed_blocks\"\xc8\xde\x1f\0\";\n\x0bMissedBlock\x12\x14\
    \n\x05index\x18\x01\x20\x01(\x03R\x05index\x12\x16\n\x06missed\x18\x02\
    \x20\x01(\x08R\x06missedB/Z-github.com/cosmos/cosmos-sdk/x/slashing/type\
    sJ\xcd\r\n\x06\x12\x04\0\01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\0\x20\n\x08\n\x01\x08\x12\x03\x03\0D\n\t\n\x02\x08\
    \x0b\x12\x03\x03\0D\n\t\n\x02\x03\0\x12\x03\x05\0\x1e\n\t\n\x02\x03\x01\
    \x12\x03\x06\00\nG\n\x02\x04\0\x12\x04\t\0\x16\x01\x1a;\x20GenesisState\
    \x20defines\x20the\x20slashing\x20module's\x20genesis\x20state.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\t\x08\x14\nG\n\x04\x04\0\x02\0\x12\x03\x0b\x023\
    \x1a:\x20params\x20defines\x20all\x20the\x20paramaters\x20of\x20related\
    \x20to\x20deposit.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0b\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x0b\x12\x13\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0b\x142\n\x0f\
    \n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\x0b\x151\nd\n\x04\x04\0\x02\
    \x01\x12\x04\x0f\x02\x10V\x1aV\x20signing_infos\x20represents\x20a\x20ma\
    p\x20between\x20validator\x20addresses\x20and\x20their\n\x20signing\x20i\
    nfos.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\x04\
    \0\x02\x01\x06\x12\x03\x0f\x0b\x16\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x0f\x17$\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f'(\n\x0c\n\x05\x04\0\
    \x02\x01\x08\x12\x03\x10\x06U\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\
    \x12\x03\x10\x076\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x108\
    T\nd\n\x04\x04\0\x02\x02\x12\x04\x14\x02\x15V\x1aV\x20missed_blocks\x20r\
    epresents\x20a\x20map\x20between\x20validator\x20addresses\x20and\x20the\
    ir\n\x20missed\x20blocks.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x14\
    \x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x14\x0b\x20\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03\x14!.\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1412\
    \n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x15\x06U\n\x0f\n\x08\x04\0\x02\
    \x02\x08\xee\xfb\x03\x12\x03\x15\x076\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\
    \xfb\x03\x12\x03\x158T\nQ\n\x02\x04\x01\x12\x04\x19\0\x1f\x01\x1aE\x20Si\
    gningInfo\x20stores\x20validator\x20signing\x20info\x20of\x20correspondi\
    ng\x20address.\n\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x13\n0\n\x04\x04\
    \x01\x02\0\x12\x03\x1b\x02\x15\x1a#\x20address\x20is\x20the\x20validator\
    \x20address.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1b\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x1b\t\x10\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1b\x13\x14\nU\n\x04\x04\x01\x02\x01\x12\x04\x1d\x02\x1e_\x1aG\
    \x20validator_signing_info\x20represents\x20the\x20signing\x20info\x20of\
    \x20this\x20validator.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x1d\x02\
    \x16\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1d\x17-\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x1d01\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\
    \x1e\x06^\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\x03\x12\x03\x1e\x07#\n\
    \x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03\x1e%]\n^\n\x02\x04\
    \x02\x12\x04#\0)\x01\x1aR\x20ValidatorMissedBlocks\x20contains\x20array\
    \x20of\x20missed\x20blocks\x20of\x20corresponding\n\x20address.\n\n\n\n\
    \x03\x04\x02\x01\x12\x03#\x08\x1d\n0\n\x04\x04\x02\x02\0\x12\x03%\x02\
    \x15\x1a#\x20address\x20is\x20the\x20validator\x20address.\n\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03%\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03%\t\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03%\x13\x14\nL\n\x04\x04\
    \x02\x02\x01\x12\x04'\x02(V\x1a>\x20missed_blocks\x20is\x20an\x20array\
    \x20of\x20missed\x20blocks\x20by\x20the\x20validator.\n\n\x0c\n\x05\x04\
    \x02\x02\x01\x04\x12\x03'\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03'\
    \x0b\x16\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03'\x17$\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03''(\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03(\x06\
    U\n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\xfb\x03\x12\x03(\x07#\n\x0f\n\x08\
    \x04\x02\x02\x01\x08\xee\xfb\x03\x12\x03(%T\nG\n\x02\x04\x03\x12\x04,\01\
    \x01\x1a;\x20MissedBlock\x20contains\x20height\x20and\x20missed\x20statu\
    s\x20as\x20boolean.\n\n\n\n\x03\x04\x03\x01\x12\x03,\x08\x13\nA\n\x04\
    \x04\x03\x02\0\x12\x03.\x02\x12\x1a4\x20index\x20is\x20the\x20height\x20\
    at\x20which\x20the\x20block\x20was\x20missed.\n\n\x0c\n\x05\x04\x03\x02\
    \0\x05\x12\x03.\x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03.\x08\r\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03.\x10\x11\n+\n\x04\x04\x03\x02\x01\
    \x12\x030\x02\x12\x1a\x1e\x20missed\x20is\x20the\x20missed\x20status.\n\
    \n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x030\x02\x06\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x030\x07\r\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x030\x10\
    \x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::slashing::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(GenesisState::generated_message_descriptor_data());
            messages.push(SigningInfo::generated_message_descriptor_data());
            messages.push(ValidatorMissedBlocks::generated_message_descriptor_data());
            messages.push(MissedBlock::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
