// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/core/channel/v1/channel.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Channel defines pipeline for exactly-once packet delivery between specific
///  modules on separate blockchains, which has at least one end capable of
///  sending packets and one end capable of receiving packets.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.channel.v1.Channel)
pub struct Channel {
    // message fields
    ///  current state of the channel end
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Channel.state)
    pub state: ::protobuf::EnumOrUnknown<State>,
    ///  whether the channel is ordered or unordered
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Channel.ordering)
    pub ordering: ::protobuf::EnumOrUnknown<Order>,
    ///  counterparty channel end
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Channel.counterparty)
    pub counterparty: ::protobuf::MessageField<Counterparty>,
    ///  list of connection identifiers, in order, along which packets sent on
    ///  this channel will travel
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Channel.connection_hops)
    pub connection_hops: ::std::vec::Vec<::std::string::String>,
    ///  opaque channel version, which is agreed upon during the handshake
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Channel.version)
    pub version: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.channel.v1.Channel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Channel {
    fn default() -> &'a Channel {
        <Channel as ::protobuf::Message>::default_instance()
    }
}

impl Channel {
    pub fn new() -> Channel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &Channel| { &m.state },
            |m: &mut Channel| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ordering",
            |m: &Channel| { &m.ordering },
            |m: &mut Channel| { &mut m.ordering },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Counterparty>(
            "counterparty",
            |m: &Channel| { &m.counterparty },
            |m: &mut Channel| { &mut m.counterparty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "connection_hops",
            |m: &Channel| { &m.connection_hops },
            |m: &mut Channel| { &mut m.connection_hops },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Channel| { &m.version },
            |m: &mut Channel| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Channel>(
            "Channel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Channel {
    const NAME: &'static str = "Channel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.ordering = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counterparty)?;
                },
                34 => {
                    self.connection_hops.push(is.read_string()?);
                },
                42 => {
                    self.version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        if self.ordering != ::protobuf::EnumOrUnknown::new(Order::ORDER_NONE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.ordering.value());
        }
        if let Some(v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.connection_hops {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.ordering != ::protobuf::EnumOrUnknown::new(Order::ORDER_NONE_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.ordering))?;
        }
        if let Some(v) = self.counterparty.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.connection_hops {
            os.write_string(4, &v)?;
        };
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Channel {
        Channel::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED);
        self.ordering = ::protobuf::EnumOrUnknown::new(Order::ORDER_NONE_UNSPECIFIED);
        self.counterparty.clear();
        self.connection_hops.clear();
        self.version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Channel {
        static instance: Channel = Channel {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            ordering: ::protobuf::EnumOrUnknown::from_i32(0),
            counterparty: ::protobuf::MessageField::none(),
            connection_hops: ::std::vec::Vec::new(),
            version: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Channel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Channel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Channel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Channel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  IdentifiedChannel defines a channel with additional port and channel
///  identifier fields.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.channel.v1.IdentifiedChannel)
pub struct IdentifiedChannel {
    // message fields
    ///  current state of the channel end
    // @@protoc_insertion_point(field:ibc.core.channel.v1.IdentifiedChannel.state)
    pub state: ::protobuf::EnumOrUnknown<State>,
    ///  whether the channel is ordered or unordered
    // @@protoc_insertion_point(field:ibc.core.channel.v1.IdentifiedChannel.ordering)
    pub ordering: ::protobuf::EnumOrUnknown<Order>,
    ///  counterparty channel end
    // @@protoc_insertion_point(field:ibc.core.channel.v1.IdentifiedChannel.counterparty)
    pub counterparty: ::protobuf::MessageField<Counterparty>,
    ///  list of connection identifiers, in order, along which packets sent on
    ///  this channel will travel
    // @@protoc_insertion_point(field:ibc.core.channel.v1.IdentifiedChannel.connection_hops)
    pub connection_hops: ::std::vec::Vec<::std::string::String>,
    ///  opaque channel version, which is agreed upon during the handshake
    // @@protoc_insertion_point(field:ibc.core.channel.v1.IdentifiedChannel.version)
    pub version: ::std::string::String,
    ///  port identifier
    // @@protoc_insertion_point(field:ibc.core.channel.v1.IdentifiedChannel.port_id)
    pub port_id: ::std::string::String,
    ///  channel identifier
    // @@protoc_insertion_point(field:ibc.core.channel.v1.IdentifiedChannel.channel_id)
    pub channel_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.channel.v1.IdentifiedChannel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IdentifiedChannel {
    fn default() -> &'a IdentifiedChannel {
        <IdentifiedChannel as ::protobuf::Message>::default_instance()
    }
}

impl IdentifiedChannel {
    pub fn new() -> IdentifiedChannel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &IdentifiedChannel| { &m.state },
            |m: &mut IdentifiedChannel| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ordering",
            |m: &IdentifiedChannel| { &m.ordering },
            |m: &mut IdentifiedChannel| { &mut m.ordering },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Counterparty>(
            "counterparty",
            |m: &IdentifiedChannel| { &m.counterparty },
            |m: &mut IdentifiedChannel| { &mut m.counterparty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "connection_hops",
            |m: &IdentifiedChannel| { &m.connection_hops },
            |m: &mut IdentifiedChannel| { &mut m.connection_hops },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &IdentifiedChannel| { &m.version },
            |m: &mut IdentifiedChannel| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port_id",
            |m: &IdentifiedChannel| { &m.port_id },
            |m: &mut IdentifiedChannel| { &mut m.port_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &IdentifiedChannel| { &m.channel_id },
            |m: &mut IdentifiedChannel| { &mut m.channel_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IdentifiedChannel>(
            "IdentifiedChannel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IdentifiedChannel {
    const NAME: &'static str = "IdentifiedChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.ordering = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counterparty)?;
                },
                34 => {
                    self.connection_hops.push(is.read_string()?);
                },
                42 => {
                    self.version = is.read_string()?;
                },
                50 => {
                    self.port_id = is.read_string()?;
                },
                58 => {
                    self.channel_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        if self.ordering != ::protobuf::EnumOrUnknown::new(Order::ORDER_NONE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.ordering.value());
        }
        if let Some(v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.connection_hops {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.channel_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.ordering != ::protobuf::EnumOrUnknown::new(Order::ORDER_NONE_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.ordering))?;
        }
        if let Some(v) = self.counterparty.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.connection_hops {
            os.write_string(4, &v)?;
        };
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        if !self.port_id.is_empty() {
            os.write_string(6, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(7, &self.channel_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IdentifiedChannel {
        IdentifiedChannel::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED);
        self.ordering = ::protobuf::EnumOrUnknown::new(Order::ORDER_NONE_UNSPECIFIED);
        self.counterparty.clear();
        self.connection_hops.clear();
        self.version.clear();
        self.port_id.clear();
        self.channel_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IdentifiedChannel {
        static instance: IdentifiedChannel = IdentifiedChannel {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            ordering: ::protobuf::EnumOrUnknown::from_i32(0),
            counterparty: ::protobuf::MessageField::none(),
            connection_hops: ::std::vec::Vec::new(),
            version: ::std::string::String::new(),
            port_id: ::std::string::String::new(),
            channel_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdentifiedChannel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IdentifiedChannel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IdentifiedChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentifiedChannel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Counterparty defines a channel end counterparty
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.channel.v1.Counterparty)
pub struct Counterparty {
    // message fields
    ///  port on the counterparty chain which owns the other end of the channel.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Counterparty.port_id)
    pub port_id: ::std::string::String,
    ///  channel end on the counterparty chain
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Counterparty.channel_id)
    pub channel_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.channel.v1.Counterparty.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Counterparty {
    fn default() -> &'a Counterparty {
        <Counterparty as ::protobuf::Message>::default_instance()
    }
}

impl Counterparty {
    pub fn new() -> Counterparty {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port_id",
            |m: &Counterparty| { &m.port_id },
            |m: &mut Counterparty| { &mut m.port_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &Counterparty| { &m.channel_id },
            |m: &mut Counterparty| { &mut m.channel_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Counterparty>(
            "Counterparty",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Counterparty {
    const NAME: &'static str = "Counterparty";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.port_id = is.read_string()?;
                },
                18 => {
                    self.channel_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.port_id.is_empty() {
            os.write_string(1, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(2, &self.channel_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Counterparty {
        Counterparty::new()
    }

    fn clear(&mut self) {
        self.port_id.clear();
        self.channel_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Counterparty {
        static instance: Counterparty = Counterparty {
            port_id: ::std::string::String::new(),
            channel_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Counterparty {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Counterparty").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Counterparty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Counterparty {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Packet defines a type that carries data across different chains through IBC
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.channel.v1.Packet)
pub struct Packet {
    // message fields
    ///  number corresponds to the order of sends and receives, where a Packet
    ///  with an earlier sequence number must be sent and received before a Packet
    ///  with a later sequence number.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Packet.sequence)
    pub sequence: u64,
    ///  identifies the port on the sending chain.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Packet.source_port)
    pub source_port: ::std::string::String,
    ///  identifies the channel end on the sending chain.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Packet.source_channel)
    pub source_channel: ::std::string::String,
    ///  identifies the port on the receiving chain.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Packet.destination_port)
    pub destination_port: ::std::string::String,
    ///  identifies the channel end on the receiving chain.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Packet.destination_channel)
    pub destination_channel: ::std::string::String,
    ///  actual opaque bytes transferred directly to the application module
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Packet.data)
    pub data: ::std::vec::Vec<u8>,
    ///  block height after which the packet times out
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Packet.timeout_height)
    pub timeout_height: ::protobuf::MessageField<super::client::Height>,
    ///  block timestamp (in nanoseconds) after which the packet times out
    // @@protoc_insertion_point(field:ibc.core.channel.v1.Packet.timeout_timestamp)
    pub timeout_timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.channel.v1.Packet.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Packet {
    fn default() -> &'a Packet {
        <Packet as ::protobuf::Message>::default_instance()
    }
}

impl Packet {
    pub fn new() -> Packet {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &Packet| { &m.sequence },
            |m: &mut Packet| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_port",
            |m: &Packet| { &m.source_port },
            |m: &mut Packet| { &mut m.source_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_channel",
            |m: &Packet| { &m.source_channel },
            |m: &mut Packet| { &mut m.source_channel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "destination_port",
            |m: &Packet| { &m.destination_port },
            |m: &mut Packet| { &mut m.destination_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "destination_channel",
            |m: &Packet| { &m.destination_channel },
            |m: &mut Packet| { &mut m.destination_channel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Packet| { &m.data },
            |m: &mut Packet| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "timeout_height",
            |m: &Packet| { &m.timeout_height },
            |m: &mut Packet| { &mut m.timeout_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timeout_timestamp",
            |m: &Packet| { &m.timeout_timestamp },
            |m: &mut Packet| { &mut m.timeout_timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Packet>(
            "Packet",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Packet {
    const NAME: &'static str = "Packet";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sequence = is.read_uint64()?;
                },
                18 => {
                    self.source_port = is.read_string()?;
                },
                26 => {
                    self.source_channel = is.read_string()?;
                },
                34 => {
                    self.destination_port = is.read_string()?;
                },
                42 => {
                    self.destination_channel = is.read_string()?;
                },
                50 => {
                    self.data = is.read_bytes()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timeout_height)?;
                },
                64 => {
                    self.timeout_timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.sequence);
        }
        if !self.source_port.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source_port);
        }
        if !self.source_channel.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source_channel);
        }
        if !self.destination_port.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.destination_port);
        }
        if !self.destination_channel.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.destination_channel);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.data);
        }
        if let Some(v) = self.timeout_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.timeout_timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.timeout_timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if !self.source_port.is_empty() {
            os.write_string(2, &self.source_port)?;
        }
        if !self.source_channel.is_empty() {
            os.write_string(3, &self.source_channel)?;
        }
        if !self.destination_port.is_empty() {
            os.write_string(4, &self.destination_port)?;
        }
        if !self.destination_channel.is_empty() {
            os.write_string(5, &self.destination_channel)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(6, &self.data)?;
        }
        if let Some(v) = self.timeout_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.timeout_timestamp != 0 {
            os.write_uint64(8, self.timeout_timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Packet {
        Packet::new()
    }

    fn clear(&mut self) {
        self.sequence = 0;
        self.source_port.clear();
        self.source_channel.clear();
        self.destination_port.clear();
        self.destination_channel.clear();
        self.data.clear();
        self.timeout_height.clear();
        self.timeout_timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Packet {
        static instance: Packet = Packet {
            sequence: 0,
            source_port: ::std::string::String::new(),
            source_channel: ::std::string::String::new(),
            destination_port: ::std::string::String::new(),
            destination_channel: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            timeout_height: ::protobuf::MessageField::none(),
            timeout_timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Packet {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Packet").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Packet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Packet {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PacketState defines the generic type necessary to retrieve and store
///  packet commitments, acknowledgements, and receipts.
///  Caller is responsible for knowing the context necessary to interpret this
///  state as a commitment, acknowledgement, or a receipt.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.channel.v1.PacketState)
pub struct PacketState {
    // message fields
    ///  channel port identifier.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.PacketState.port_id)
    pub port_id: ::std::string::String,
    ///  channel unique identifier.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.PacketState.channel_id)
    pub channel_id: ::std::string::String,
    ///  packet sequence.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.PacketState.sequence)
    pub sequence: u64,
    ///  embedded data that represents packet state.
    // @@protoc_insertion_point(field:ibc.core.channel.v1.PacketState.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.channel.v1.PacketState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PacketState {
    fn default() -> &'a PacketState {
        <PacketState as ::protobuf::Message>::default_instance()
    }
}

impl PacketState {
    pub fn new() -> PacketState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port_id",
            |m: &PacketState| { &m.port_id },
            |m: &mut PacketState| { &mut m.port_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &PacketState| { &m.channel_id },
            |m: &mut PacketState| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &PacketState| { &m.sequence },
            |m: &mut PacketState| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &PacketState| { &m.data },
            |m: &mut PacketState| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PacketState>(
            "PacketState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PacketState {
    const NAME: &'static str = "PacketState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.port_id = is.read_string()?;
                },
                18 => {
                    self.channel_id = is.read_string()?;
                },
                24 => {
                    self.sequence = is.read_uint64()?;
                },
                34 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel_id);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.sequence);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.port_id.is_empty() {
            os.write_string(1, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(2, &self.channel_id)?;
        }
        if self.sequence != 0 {
            os.write_uint64(3, self.sequence)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PacketState {
        PacketState::new()
    }

    fn clear(&mut self) {
        self.port_id.clear();
        self.channel_id.clear();
        self.sequence = 0;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PacketState {
        static instance: PacketState = PacketState {
            port_id: ::std::string::String::new(),
            channel_id: ::std::string::String::new(),
            sequence: 0,
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PacketState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PacketState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PacketState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Acknowledgement is the recommended acknowledgement format to be used by
///  app-specific protocols.
///  NOTE: The field numbers 21 and 22 were explicitly chosen to avoid accidental
///  conflicts with other protobuf message formats used for acknowledgements.
///  The first byte of any message with this format will be the non-ASCII values
///  `0xaa` (result) or `0xb2` (error). Implemented as defined by ICS:
///  https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#acknowledgement-envelope
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.channel.v1.Acknowledgement)
pub struct Acknowledgement {
    // message oneof groups
    pub response: ::std::option::Option<acknowledgement::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.channel.v1.Acknowledgement.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Acknowledgement {
    fn default() -> &'a Acknowledgement {
        <Acknowledgement as ::protobuf::Message>::default_instance()
    }
}

impl Acknowledgement {
    pub fn new() -> Acknowledgement {
        ::std::default::Default::default()
    }

    // bytes result = 21;

    pub fn result(&self) -> &[u8] {
        match self.response {
            ::std::option::Option::Some(acknowledgement::Response::Result(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_result(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(acknowledgement::Response::Result(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::std::vec::Vec<u8>) {
        self.response = ::std::option::Option::Some(acknowledgement::Response::Result(v))
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(acknowledgement::Response::Result(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(acknowledgement::Response::Result(::std::vec::Vec::new()));
        }
        match self.response {
            ::std::option::Option::Some(acknowledgement::Response::Result(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_result(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_result() {
            match self.response.take() {
                ::std::option::Option::Some(acknowledgement::Response::Result(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string error = 22;

    pub fn error(&self) -> &str {
        match self.response {
            ::std::option::Option::Some(acknowledgement::Response::Error(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_error(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(acknowledgement::Response::Error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.response = ::std::option::Option::Some(acknowledgement::Response::Error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(acknowledgement::Response::Error(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(acknowledgement::Response::Error(::std::string::String::new()));
        }
        match self.response {
            ::std::option::Option::Some(acknowledgement::Response::Error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        if self.has_error() {
            match self.response.take() {
                ::std::option::Option::Some(acknowledgement::Response::Error(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "result",
            Acknowledgement::has_result,
            Acknowledgement::result,
            Acknowledgement::set_result,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "error",
            Acknowledgement::has_error,
            Acknowledgement::error,
            Acknowledgement::set_error,
        ));
        oneofs.push(acknowledgement::Response::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Acknowledgement>(
            "Acknowledgement",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Acknowledgement {
    const NAME: &'static str = "Acknowledgement";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                170 => {
                    self.response = ::std::option::Option::Some(acknowledgement::Response::Result(is.read_bytes()?));
                },
                178 => {
                    self.response = ::std::option::Option::Some(acknowledgement::Response::Error(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &acknowledgement::Response::Result(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(21, &v);
                },
                &acknowledgement::Response::Error(ref v) => {
                    my_size += ::protobuf::rt::string_size(22, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &acknowledgement::Response::Result(ref v) => {
                    os.write_bytes(21, v)?;
                },
                &acknowledgement::Response::Error(ref v) => {
                    os.write_string(22, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Acknowledgement {
        Acknowledgement::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Acknowledgement {
        static instance: Acknowledgement = Acknowledgement {
            response: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Acknowledgement {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Acknowledgement").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Acknowledgement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Acknowledgement {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Acknowledgement`
pub mod acknowledgement {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ibc.core.channel.v1.Acknowledgement.response)
    pub enum Response {
        // @@protoc_insertion_point(oneof_field:ibc.core.channel.v1.Acknowledgement.result)
        Result(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:ibc.core.channel.v1.Acknowledgement.error)
        Error(::std::string::String),
    }

    impl ::protobuf::Oneof for Response {
    }

    impl ::protobuf::OneofFull for Response {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Acknowledgement as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
        }
    }

    impl Response {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
        }
    }
}

///  State defines if a channel is in one of the following states:
///  CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ibc.core.channel.v1.State)
pub enum State {
    // @@protoc_insertion_point(enum_value:ibc.core.channel.v1.State.STATE_UNINITIALIZED_UNSPECIFIED)
    STATE_UNINITIALIZED_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:ibc.core.channel.v1.State.STATE_INIT)
    STATE_INIT = 1,
    // @@protoc_insertion_point(enum_value:ibc.core.channel.v1.State.STATE_TRYOPEN)
    STATE_TRYOPEN = 2,
    // @@protoc_insertion_point(enum_value:ibc.core.channel.v1.State.STATE_OPEN)
    STATE_OPEN = 3,
    // @@protoc_insertion_point(enum_value:ibc.core.channel.v1.State.STATE_CLOSED)
    STATE_CLOSED = 4,
}

impl ::protobuf::Enum for State {
    const NAME: &'static str = "State";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<State> {
        match value {
            0 => ::std::option::Option::Some(State::STATE_UNINITIALIZED_UNSPECIFIED),
            1 => ::std::option::Option::Some(State::STATE_INIT),
            2 => ::std::option::Option::Some(State::STATE_TRYOPEN),
            3 => ::std::option::Option::Some(State::STATE_OPEN),
            4 => ::std::option::Option::Some(State::STATE_CLOSED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [State] = &[
        State::STATE_UNINITIALIZED_UNSPECIFIED,
        State::STATE_INIT,
        State::STATE_TRYOPEN,
        State::STATE_OPEN,
        State::STATE_CLOSED,
    ];
}

impl ::protobuf::EnumFull for State {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("State").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for State {
    fn default() -> Self {
        State::STATE_UNINITIALIZED_UNSPECIFIED
    }
}

impl State {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("State")
    }
}

///  Order defines if a channel is ORDERED or UNORDERED
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ibc.core.channel.v1.Order)
pub enum Order {
    // @@protoc_insertion_point(enum_value:ibc.core.channel.v1.Order.ORDER_NONE_UNSPECIFIED)
    ORDER_NONE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:ibc.core.channel.v1.Order.ORDER_UNORDERED)
    ORDER_UNORDERED = 1,
    // @@protoc_insertion_point(enum_value:ibc.core.channel.v1.Order.ORDER_ORDERED)
    ORDER_ORDERED = 2,
}

impl ::protobuf::Enum for Order {
    const NAME: &'static str = "Order";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Order> {
        match value {
            0 => ::std::option::Option::Some(Order::ORDER_NONE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Order::ORDER_UNORDERED),
            2 => ::std::option::Option::Some(Order::ORDER_ORDERED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Order] = &[
        Order::ORDER_NONE_UNSPECIFIED,
        Order::ORDER_UNORDERED,
        Order::ORDER_ORDERED,
    ];
}

impl ::protobuf::EnumFull for Order {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Order").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Order {
    fn default() -> Self {
        Order::ORDER_NONE_UNSPECIFIED
    }
}

impl Order {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Order>("Order")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!ibc/core/channel/v1/channel.proto\x12\x13ibc.core.channel.v1\x1a\x14g\
    ogoproto/gogo.proto\x1a\x1fibc/core/client/v1/client.proto\"\xa5\x02\n\
    \x07Channel\x120\n\x05state\x18\x01\x20\x01(\x0e2\x1a.ibc.core.channel.v\
    1.StateR\x05state\x126\n\x08ordering\x18\x02\x20\x01(\x0e2\x1a.ibc.core.\
    channel.v1.OrderR\x08ordering\x12K\n\x0ccounterparty\x18\x03\x20\x01(\
    \x0b2!.ibc.core.channel.v1.CounterpartyR\x0ccounterpartyB\x04\xc8\xde\
    \x1f\0\x12C\n\x0fconnection_hops\x18\x04\x20\x03(\tR\x0econnectionHopsB\
    \x1a\xf2\xde\x1f\x16yaml:\"connection_hops\"\x12\x18\n\x07version\x18\
    \x05\x20\x01(\tR\x07version:\x04\x88\xa0\x1f\0\"\xe7\x02\n\x11Identified\
    Channel\x120\n\x05state\x18\x01\x20\x01(\x0e2\x1a.ibc.core.channel.v1.St\
    ateR\x05state\x126\n\x08ordering\x18\x02\x20\x01(\x0e2\x1a.ibc.core.chan\
    nel.v1.OrderR\x08ordering\x12K\n\x0ccounterparty\x18\x03\x20\x01(\x0b2!.\
    ibc.core.channel.v1.CounterpartyR\x0ccounterpartyB\x04\xc8\xde\x1f\0\x12\
    C\n\x0fconnection_hops\x18\x04\x20\x03(\tR\x0econnectionHopsB\x1a\xf2\
    \xde\x1f\x16yaml:\"connection_hops\"\x12\x18\n\x07version\x18\x05\x20\
    \x01(\tR\x07version\x12\x17\n\x07port_id\x18\x06\x20\x01(\tR\x06portId\
    \x12\x1d\n\nchannel_id\x18\x07\x20\x01(\tR\tchannelId:\x04\x88\xa0\x1f\0\
    \"w\n\x0cCounterparty\x12+\n\x07port_id\x18\x01\x20\x01(\tR\x06portIdB\
    \x12\xf2\xde\x1f\x0eyaml:\"port_id\"\x124\n\nchannel_id\x18\x02\x20\x01(\
    \tR\tchannelIdB\x15\xf2\xde\x1f\x11yaml:\"channel_id\":\x04\x88\xa0\x1f\
    \0\"\xff\x03\n\x06Packet\x12\x1a\n\x08sequence\x18\x01\x20\x01(\x04R\x08\
    sequence\x127\n\x0bsource_port\x18\x02\x20\x01(\tR\nsourcePortB\x16\xf2\
    \xde\x1f\x12yaml:\"source_port\"\x12@\n\x0esource_channel\x18\x03\x20\
    \x01(\tR\rsourceChannelB\x19\xf2\xde\x1f\x15yaml:\"source_channel\"\x12F\
    \n\x10destination_port\x18\x04\x20\x01(\tR\x0fdestinationPortB\x1b\xf2\
    \xde\x1f\x17yaml:\"destination_port\"\x12O\n\x13destination_channel\x18\
    \x05\x20\x01(\tR\x12destinationChannelB\x1e\xf2\xde\x1f\x1ayaml:\"destin\
    ation_channel\"\x12\x12\n\x04data\x18\x06\x20\x01(\x0cR\x04data\x12`\n\
    \x0etimeout_height\x18\x07\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\
    \rtimeoutHeightB\x1d\xf2\xde\x1f\x15yaml:\"timeout_height\"\xc8\xde\x1f\
    \0\x12I\n\x11timeout_timestamp\x18\x08\x20\x01(\x04R\x10timeoutTimestamp\
    B\x1c\xf2\xde\x1f\x18yaml:\"timeout_timestamp\":\x04\x88\xa0\x1f\0\"\xa6\
    \x01\n\x0bPacketState\x12+\n\x07port_id\x18\x01\x20\x01(\tR\x06portIdB\
    \x12\xf2\xde\x1f\x0eyaml:\"port_id\"\x124\n\nchannel_id\x18\x02\x20\x01(\
    \tR\tchannelIdB\x15\xf2\xde\x1f\x11yaml:\"channel_id\"\x12\x1a\n\x08sequ\
    ence\x18\x03\x20\x01(\x04R\x08sequence\x12\x12\n\x04data\x18\x04\x20\x01\
    (\x0cR\x04data:\x04\x88\xa0\x1f\0\"O\n\x0fAcknowledgement\x12\x18\n\x06r\
    esult\x18\x15\x20\x01(\x0cH\0R\x06result\x12\x16\n\x05error\x18\x16\x20\
    \x01(\tH\0R\x05errorB\n\n\x08response*\xb7\x01\n\x05State\x126\n\x1fSTAT\
    E_UNINITIALIZED_UNSPECIFIED\x10\0\x1a\x11\x8a\x9d\x20\rUNINITIALIZED\x12\
    \x18\n\nSTATE_INIT\x10\x01\x1a\x08\x8a\x9d\x20\x04INIT\x12\x1e\n\rSTATE_\
    TRYOPEN\x10\x02\x1a\x0b\x8a\x9d\x20\x07TRYOPEN\x12\x18\n\nSTATE_OPEN\x10\
    \x03\x1a\x08\x8a\x9d\x20\x04OPEN\x12\x1c\n\x0cSTATE_CLOSED\x10\x04\x1a\n\
    \x8a\x9d\x20\x06CLOSED\x1a\x04\x88\xa3\x1e\0*w\n\x05Order\x12$\n\x16ORDE\
    R_NONE_UNSPECIFIED\x10\0\x1a\x08\x8a\x9d\x20\x04NONE\x12\"\n\x0fORDER_UN\
    ORDERED\x10\x01\x1a\r\x8a\x9d\x20\tUNORDERED\x12\x1e\n\rORDER_ORDERED\
    \x10\x02\x1a\x0b\x8a\x9d\x20\x07ORDERED\x1a\x04\x88\xa3\x1e\0B;Z9github.\
    com/cosmos/ibc-go/v3/modules/core/04-channel/typesJ\xcb2\n\x07\x12\x05\0\
    \0\x93\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x1c\n\x08\n\x01\x08\x12\x03\x04\0P\n\t\n\x02\x08\x0b\x12\x03\x04\
    \0P\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\x03\x07\0)\n\
    \xdc\x01\n\x02\x04\0\x12\x04\x0c\0\x1a\x01\x1a\xcf\x01\x20Channel\x20def\
    ines\x20pipeline\x20for\x20exactly-once\x20packet\x20delivery\x20between\
    \x20specific\n\x20modules\x20on\x20separate\x20blockchains,\x20which\x20\
    has\x20at\x20least\x20one\x20end\x20capable\x20of\n\x20sending\x20packet\
    s\x20and\x20one\x20end\x20capable\x20of\x20receiving\x20packets.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\x0c\x08\x0f\n\n\n\x03\x04\0\x07\x12\x03\r\x02-\n\
    \r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\r\x02-\n/\n\x04\x04\0\x02\0\x12\
    \x03\x10\x02\x12\x1a\"\x20current\x20state\x20of\x20the\x20channel\x20en\
    d\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x10\x08\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x10\
    \x11\n:\n\x04\x04\0\x02\x01\x12\x03\x12\x02\x15\x1a-\x20whether\x20the\
    \x20channel\x20is\x20ordered\x20or\x20unordered\n\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03\x12\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x12\
    \x08\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x12\x13\x14\n'\n\x04\x04\
    \0\x02\x02\x12\x03\x14\x02?\x1a\x1a\x20counterparty\x20channel\x20end\n\
    \n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x14\x02\x0e\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x14\x0f\x1b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x14\
    \x1e\x1f\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x14\x20>\n\x0f\n\x08\x04\
    \0\x02\x02\x08\xe9\xfb\x03\x12\x03\x14!=\nn\n\x04\x04\0\x02\x03\x12\x03\
    \x17\x02Z\x1aa\x20list\x20of\x20connection\x20identifiers,\x20in\x20orde\
    r,\x20along\x20which\x20packets\x20sent\x20on\n\x20this\x20channel\x20wi\
    ll\x20travel\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x17\x02\n\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03\x17\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\x17\x12!\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x17$%\n\x0c\n\
    \x05\x04\0\x02\x03\x08\x12\x03\x17&Y\n\x0f\n\x08\x04\0\x02\x03\x08\xee\
    \xfb\x03\x12\x03\x17'X\nP\n\x04\x04\0\x02\x04\x12\x03\x19\x02\x15\x1aC\
    \x20opaque\x20channel\x20version,\x20which\x20is\x20agreed\x20upon\x20du\
    ring\x20the\x20handshake\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x19\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x19\t\x10\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x03\x19\x13\x14\nf\n\x02\x04\x01\x12\x04\x1e\00\x01\x1a\
    Z\x20IdentifiedChannel\x20defines\x20a\x20channel\x20with\x20additional\
    \x20port\x20and\x20channel\n\x20identifier\x20fields.\n\n\n\n\x03\x04\
    \x01\x01\x12\x03\x1e\x08\x19\n\n\n\x03\x04\x01\x07\x12\x03\x1f\x02-\n\r\
    \n\x06\x04\x01\x07\x81\xf4\x03\x12\x03\x1f\x02-\n/\n\x04\x04\x01\x02\0\
    \x12\x03\"\x02\x12\x1a\"\x20current\x20state\x20of\x20the\x20channel\x20\
    end\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\"\x02\x07\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\"\x08\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\"\
    \x10\x11\n:\n\x04\x04\x01\x02\x01\x12\x03$\x02\x15\x1a-\x20whether\x20th\
    e\x20channel\x20is\x20ordered\x20or\x20unordered\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x06\x12\x03$\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03$\
    \x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03$\x13\x14\n'\n\x04\x04\
    \x01\x02\x02\x12\x03&\x02?\x1a\x1a\x20counterparty\x20channel\x20end\n\n\
    \x0c\n\x05\x04\x01\x02\x02\x06\x12\x03&\x02\x0e\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03&\x0f\x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03&\x1e\
    \x1f\n\x0c\n\x05\x04\x01\x02\x02\x08\x12\x03&\x20>\n\x0f\n\x08\x04\x01\
    \x02\x02\x08\xe9\xfb\x03\x12\x03&!=\nn\n\x04\x04\x01\x02\x03\x12\x03)\
    \x02Z\x1aa\x20list\x20of\x20connection\x20identifiers,\x20in\x20order,\
    \x20along\x20which\x20packets\x20sent\x20on\n\x20this\x20channel\x20will\
    \x20travel\n\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03)\x02\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03)\x0b\x11\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03)\x12!\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03)$%\n\x0c\n\x05\
    \x04\x01\x02\x03\x08\x12\x03)&Y\n\x0f\n\x08\x04\x01\x02\x03\x08\xee\xfb\
    \x03\x12\x03)'X\nP\n\x04\x04\x01\x02\x04\x12\x03+\x02\x15\x1aC\x20opaque\
    \x20channel\x20version,\x20which\x20is\x20agreed\x20upon\x20during\x20th\
    e\x20handshake\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03+\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x04\x01\x12\x03+\t\x10\n\x0c\n\x05\x04\x01\x02\x04\
    \x03\x12\x03+\x13\x14\n\x1e\n\x04\x04\x01\x02\x05\x12\x03-\x02\x15\x1a\
    \x11\x20port\x20identifier\n\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03-\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03-\t\x10\n\x0c\n\x05\x04\
    \x01\x02\x05\x03\x12\x03-\x13\x14\n!\n\x04\x04\x01\x02\x06\x12\x03/\x02\
    \x18\x1a\x14\x20channel\x20identifier\n\n\x0c\n\x05\x04\x01\x02\x06\x05\
    \x12\x03/\x02\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03/\t\x13\n\x0c\n\
    \x05\x04\x01\x02\x06\x03\x12\x03/\x16\x17\nz\n\x02\x05\0\x12\x044\0C\x01\
    \x1an\x20State\x20defines\x20if\x20a\x20channel\x20is\x20in\x20one\x20of\
    \x20the\x20following\x20states:\n\x20CLOSED,\x20INIT,\x20TRYOPEN,\x20OPE\
    N\x20or\x20UNINITIALIZED.\n\n\n\n\x03\x05\0\x01\x12\x034\x05\n\n\n\n\x03\
    \x05\0\x03\x12\x035\x021\n\r\n\x06\x05\0\x03\xb1\xe4\x03\x12\x035\x021\n\
    \x1c\n\x04\x05\0\x02\0\x12\x038\x02[\x1a\x0f\x20Default\x20State\n\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x038\x02!\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    8$%\n\x0c\n\x05\x05\0\x02\0\x03\x12\x038&Z\n\x0f\n\x08\x05\0\x02\0\x03\
    \xd1\x83\x04\x12\x038'Y\n@\n\x04\x05\0\x02\x01\x12\x03:\x02=\x1a3\x20A\
    \x20channel\x20has\x20just\x20started\x20the\x20opening\x20handshake.\n\
    \n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03:\x02\x0c\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03:\x0f\x10\n\x0c\n\x05\x05\0\x02\x01\x03\x12\x03:\x11<\n\
    \x0f\n\x08\x05\0\x02\x01\x03\xd1\x83\x04\x12\x03:\x12;\nW\n\x04\x05\0\
    \x02\x02\x12\x03<\x02C\x1aJ\x20A\x20channel\x20has\x20acknowledged\x20th\
    e\x20handshake\x20step\x20on\x20the\x20counterparty\x20chain.\n\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03<\x02\x0f\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03<\x12\x13\n\x0c\n\x05\x05\0\x02\x02\x03\x12\x03<\x14B\n\x0f\n\
    \x08\x05\0\x02\x02\x03\xd1\x83\x04\x12\x03<\x15A\nk\n\x04\x05\0\x02\x03\
    \x12\x03?\x02=\x1a^\x20A\x20channel\x20has\x20completed\x20the\x20handsh\
    ake.\x20Open\x20channels\x20are\n\x20ready\x20to\x20send\x20and\x20recei\
    ve\x20packets.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03?\x02\x0c\n\x0c\n\
    \x05\x05\0\x02\x03\x02\x12\x03?\x0f\x10\n\x0c\n\x05\x05\0\x02\x03\x03\
    \x12\x03?\x11<\n\x0f\n\x08\x05\0\x02\x03\x03\xd1\x83\x04\x12\x03?\x12;\n\
    _\n\x04\x05\0\x02\x04\x12\x03B\x02A\x1aR\x20A\x20channel\x20has\x20been\
    \x20closed\x20and\x20can\x20no\x20longer\x20be\x20used\x20to\x20send\x20\
    or\x20receive\n\x20packets.\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03B\x02\
    \x0e\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03B\x11\x12\n\x0c\n\x05\x05\0\
    \x02\x04\x03\x12\x03B\x13@\n\x0f\n\x08\x05\0\x02\x04\x03\xd1\x83\x04\x12\
    \x03B\x14?\n@\n\x02\x05\x01\x12\x04F\0P\x01\x1a4\x20Order\x20defines\x20\
    if\x20a\x20channel\x20is\x20ORDERED\x20or\x20UNORDERED\n\n\n\n\x03\x05\
    \x01\x01\x12\x03F\x05\n\n\n\n\x03\x05\x01\x03\x12\x03G\x021\n\r\n\x06\
    \x05\x01\x03\xb1\xe4\x03\x12\x03G\x021\n.\n\x04\x05\x01\x02\0\x12\x03J\
    \x02I\x1a!\x20zero-value\x20for\x20channel\x20ordering\n\n\x0c\n\x05\x05\
    \x01\x02\0\x01\x12\x03J\x02\x18\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03J\
    \x1b\x1c\n\x0c\n\x05\x05\x01\x02\0\x03\x12\x03J\x1dH\n\x0f\n\x08\x05\x01\
    \x02\0\x03\xd1\x83\x04\x12\x03J\x1eG\no\n\x04\x05\x01\x02\x01\x12\x03M\
    \x02G\x1ab\x20packets\x20can\x20be\x20delivered\x20in\x20any\x20order,\
    \x20which\x20may\x20differ\x20from\x20the\x20order\x20in\n\x20which\x20t\
    hey\x20were\x20sent.\n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03M\x02\x11\
    \n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03M\x14\x15\n\x0c\n\x05\x05\x01\
    \x02\x01\x03\x12\x03M\x16F\n\x0f\n\x08\x05\x01\x02\x01\x03\xd1\x83\x04\
    \x12\x03M\x17E\nN\n\x04\x05\x01\x02\x02\x12\x03O\x02C\x1aA\x20packets\
    \x20are\x20delivered\x20exactly\x20in\x20the\x20order\x20which\x20they\
    \x20were\x20sent\n\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03O\x02\x0f\n\
    \x0c\n\x05\x05\x01\x02\x02\x02\x12\x03O\x12\x13\n\x0c\n\x05\x05\x01\x02\
    \x02\x03\x12\x03O\x14B\n\x0f\n\x08\x05\x01\x02\x02\x03\xd1\x83\x04\x12\
    \x03O\x15A\n=\n\x02\x04\x02\x12\x04S\0Z\x01\x1a1\x20Counterparty\x20defi\
    nes\x20a\x20channel\x20end\x20counterparty\n\n\n\n\x03\x04\x02\x01\x12\
    \x03S\x08\x14\n\n\n\x03\x04\x02\x07\x12\x03T\x02-\n\r\n\x06\x04\x02\x07\
    \x81\xf4\x03\x12\x03T\x02-\nV\n\x04\x04\x02\x02\0\x12\x03W\x02A\x1aI\x20\
    port\x20on\x20the\x20counterparty\x20chain\x20which\x20owns\x20the\x20ot\
    her\x20end\x20of\x20the\x20channel.\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03W\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03W\t\x10\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03W\x13\x14\n\x0c\n\x05\x04\x02\x02\0\x08\x12\
    \x03W\x15@\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x03W\x16?\n4\n\
    \x04\x04\x02\x02\x01\x12\x03Y\x02G\x1a'\x20channel\x20end\x20on\x20the\
    \x20counterparty\x20chain\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03Y\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03Y\t\x13\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03Y\x16\x17\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03Y\
    \x18F\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\x03Y\x19E\nY\n\x02\
    \x04\x03\x12\x04]\0s\x01\x1aM\x20Packet\x20defines\x20a\x20type\x20that\
    \x20carries\x20data\x20across\x20different\x20chains\x20through\x20IBC\n\
    \n\n\n\x03\x04\x03\x01\x12\x03]\x08\x0e\n\n\n\x03\x04\x03\x07\x12\x03^\
    \x02-\n\r\n\x06\x04\x03\x07\x81\xf4\x03\x12\x03^\x02-\n\xbf\x01\n\x04\
    \x04\x03\x02\0\x12\x03c\x02\x16\x1a\xb1\x01\x20number\x20corresponds\x20\
    to\x20the\x20order\x20of\x20sends\x20and\x20receives,\x20where\x20a\x20P\
    acket\n\x20with\x20an\x20earlier\x20sequence\x20number\x20must\x20be\x20\
    sent\x20and\x20received\x20before\x20a\x20Packet\n\x20with\x20a\x20later\
    \x20sequence\x20number.\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03c\x02\x08\
    \n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03c\t\x11\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03c\x14\x15\n8\n\x04\x04\x03\x02\x01\x12\x03e\x02I\x1a+\x20ide\
    ntifies\x20the\x20port\x20on\x20the\x20sending\x20chain.\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03e\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03e\t\x14\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03e\x17\x18\n\x0c\n\
    \x05\x04\x03\x02\x01\x08\x12\x03e\x19H\n\x0f\n\x08\x04\x03\x02\x01\x08\
    \xee\xfb\x03\x12\x03e\x1aG\n?\n\x04\x04\x03\x02\x02\x12\x03g\x02O\x1a2\
    \x20identifies\x20the\x20channel\x20end\x20on\x20the\x20sending\x20chain\
    .\n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03g\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\x02\x01\x12\x03g\t\x17\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03g\x1a\
    \x1b\n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x03g\x1cN\n\x0f\n\x08\x04\x03\
    \x02\x02\x08\xee\xfb\x03\x12\x03g\x1dM\n:\n\x04\x04\x03\x02\x03\x12\x03i\
    \x02S\x1a-\x20identifies\x20the\x20port\x20on\x20the\x20receiving\x20cha\
    in.\n\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\x03\x01\x12\x03i\t\x19\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03i\
    \x1c\x1d\n\x0c\n\x05\x04\x03\x02\x03\x08\x12\x03i\x1eR\n\x0f\n\x08\x04\
    \x03\x02\x03\x08\xee\xfb\x03\x12\x03i\x1fQ\nA\n\x04\x04\x03\x02\x04\x12\
    \x03k\x02Y\x1a4\x20identifies\x20the\x20channel\x20end\x20on\x20the\x20r\
    eceiving\x20chain.\n\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03k\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\x04\x01\x12\x03k\t\x1c\n\x0c\n\x05\x04\x03\x02\
    \x04\x03\x12\x03k\x1f\x20\n\x0c\n\x05\x04\x03\x02\x04\x08\x12\x03k!X\n\
    \x0f\n\x08\x04\x03\x02\x04\x08\xee\xfb\x03\x12\x03k\"W\nQ\n\x04\x04\x03\
    \x02\x05\x12\x03m\x02\x11\x1aD\x20actual\x20opaque\x20bytes\x20transferr\
    ed\x20directly\x20to\x20the\x20application\x20module\n\n\x0c\n\x05\x04\
    \x03\x02\x05\x05\x12\x03m\x02\x07\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\
    \x03m\x08\x0c\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03m\x0f\x10\n=\n\x04\
    \x04\x03\x02\x06\x12\x04o\x02pW\x1a/\x20block\x20height\x20after\x20whic\
    h\x20the\x20packet\x20times\x20out\n\n\x0c\n\x05\x04\x03\x02\x06\x06\x12\
    \x03o\x02\x1b\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03o\x1c*\n\x0c\n\x05\
    \x04\x03\x02\x06\x03\x12\x03o-.\n\x0c\n\x05\x04\x03\x02\x06\x08\x12\x03p\
    \x06V\n\x0f\n\x08\x04\x03\x02\x06\x08\xee\xfb\x03\x12\x03p\x077\n\x0f\n\
    \x08\x04\x03\x02\x06\x08\xe9\xfb\x03\x12\x03p9U\nP\n\x04\x04\x03\x02\x07\
    \x12\x03r\x02U\x1aC\x20block\x20timestamp\x20(in\x20nanoseconds)\x20afte\
    r\x20which\x20the\x20packet\x20times\x20out\n\n\x0c\n\x05\x04\x03\x02\
    \x07\x05\x12\x03r\x02\x08\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x03r\t\x1a\
    \n\x0c\n\x05\x04\x03\x02\x07\x03\x12\x03r\x1d\x1e\n\x0c\n\x05\x04\x03\
    \x02\x07\x08\x12\x03r\x1fT\n\x0f\n\x08\x04\x03\x02\x07\x08\xee\xfb\x03\
    \x12\x03r\x20S\n\x8b\x02\n\x02\x04\x04\x12\x05y\0\x84\x01\x01\x1a\xfd\
    \x01\x20PacketState\x20defines\x20the\x20generic\x20type\x20necessary\
    \x20to\x20retrieve\x20and\x20store\n\x20packet\x20commitments,\x20acknow\
    ledgements,\x20and\x20receipts.\n\x20Caller\x20is\x20responsible\x20for\
    \x20knowing\x20the\x20context\x20necessary\x20to\x20interpret\x20this\n\
    \x20state\x20as\x20a\x20commitment,\x20acknowledgement,\x20or\x20a\x20re\
    ceipt.\n\n\n\n\x03\x04\x04\x01\x12\x03y\x08\x13\n\n\n\x03\x04\x04\x07\
    \x12\x03z\x02-\n\r\n\x06\x04\x04\x07\x81\xf4\x03\x12\x03z\x02-\n'\n\x04\
    \x04\x04\x02\0\x12\x03}\x02A\x1a\x1a\x20channel\x20port\x20identifier.\n\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03}\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03}\t\x10\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03}\x13\x14\n\
    \x0c\n\x05\x04\x04\x02\0\x08\x12\x03}\x15@\n\x0f\n\x08\x04\x04\x02\0\x08\
    \xee\xfb\x03\x12\x03}\x16?\n)\n\x04\x04\x04\x02\x01\x12\x03\x7f\x02G\x1a\
    \x1c\x20channel\x20unique\x20identifier.\n\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03\x7f\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x7f\t\
    \x13\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x7f\x16\x17\n\x0c\n\x05\x04\
    \x04\x02\x01\x08\x12\x03\x7f\x18F\n\x0f\n\x08\x04\x04\x02\x01\x08\xee\
    \xfb\x03\x12\x03\x7f\x19E\n\x20\n\x04\x04\x04\x02\x02\x12\x04\x81\x01\
    \x02\x16\x1a\x12\x20packet\x20sequence.\n\n\r\n\x05\x04\x04\x02\x02\x05\
    \x12\x04\x81\x01\x02\x08\n\r\n\x05\x04\x04\x02\x02\x01\x12\x04\x81\x01\t\
    \x11\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\x81\x01\x14\x15\n;\n\x04\x04\
    \x04\x02\x03\x12\x04\x83\x01\x02\x11\x1a-\x20embedded\x20data\x20that\
    \x20represents\x20packet\x20state.\n\n\r\n\x05\x04\x04\x02\x03\x05\x12\
    \x04\x83\x01\x02\x07\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\x83\x01\x08\
    \x0c\n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\x83\x01\x0f\x10\n\x8c\x04\n\
    \x02\x04\x05\x12\x06\x8d\x01\0\x93\x01\x01\x1a\xfd\x03\x20Acknowledgemen\
    t\x20is\x20the\x20recommended\x20acknowledgement\x20format\x20to\x20be\
    \x20used\x20by\n\x20app-specific\x20protocols.\n\x20NOTE:\x20The\x20fiel\
    d\x20numbers\x2021\x20and\x2022\x20were\x20explicitly\x20chosen\x20to\
    \x20avoid\x20accidental\n\x20conflicts\x20with\x20other\x20protobuf\x20m\
    essage\x20formats\x20used\x20for\x20acknowledgements.\n\x20The\x20first\
    \x20byte\x20of\x20any\x20message\x20with\x20this\x20format\x20will\x20be\
    \x20the\x20non-ASCII\x20values\n\x20`0xaa`\x20(result)\x20or\x20`0xb2`\
    \x20(error).\x20Implemented\x20as\x20defined\x20by\x20ICS:\n\x20https://\
    github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-s\
    emantics#acknowledgement-envelope\n\n\x0b\n\x03\x04\x05\x01\x12\x04\x8d\
    \x01\x08\x17\nU\n\x04\x04\x05\x08\0\x12\x06\x8f\x01\x02\x92\x01\x03\x1aE\
    \x20response\x20contains\x20either\x20a\x20result\x20or\x20an\x20error\
    \x20and\x20must\x20be\x20non-empty\n\n\r\n\x05\x04\x05\x08\0\x01\x12\x04\
    \x8f\x01\x08\x10\n\x0c\n\x04\x04\x05\x02\0\x12\x04\x90\x01\x04\x17\n\r\n\
    \x05\x04\x05\x02\0\x05\x12\x04\x90\x01\x04\t\n\r\n\x05\x04\x05\x02\0\x01\
    \x12\x04\x90\x01\x0b\x11\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x90\x01\x14\
    \x16\n\x0c\n\x04\x04\x05\x02\x01\x12\x04\x91\x01\x04\x17\n\r\n\x05\x04\
    \x05\x02\x01\x05\x12\x04\x91\x01\x04\n\n\r\n\x05\x04\x05\x02\x01\x01\x12\
    \x04\x91\x01\x0b\x10\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\x91\x01\x14\
    \x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Channel::generated_message_descriptor_data());
            messages.push(IdentifiedChannel::generated_message_descriptor_data());
            messages.push(Counterparty::generated_message_descriptor_data());
            messages.push(Packet::generated_message_descriptor_data());
            messages.push(PacketState::generated_message_descriptor_data());
            messages.push(Acknowledgement::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(State::generated_enum_descriptor_data());
            enums.push(Order::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
