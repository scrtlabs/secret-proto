// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/core/channel/v1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState defines the ibc channel submodule's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.channel.v1.GenesisState)
pub struct GenesisState {
    // message fields
    // @@protoc_insertion_point(field:ibc.core.channel.v1.GenesisState.channels)
    pub channels: ::std::vec::Vec<super::channel::IdentifiedChannel>,
    // @@protoc_insertion_point(field:ibc.core.channel.v1.GenesisState.acknowledgements)
    pub acknowledgements: ::std::vec::Vec<super::channel::PacketState>,
    // @@protoc_insertion_point(field:ibc.core.channel.v1.GenesisState.commitments)
    pub commitments: ::std::vec::Vec<super::channel::PacketState>,
    // @@protoc_insertion_point(field:ibc.core.channel.v1.GenesisState.receipts)
    pub receipts: ::std::vec::Vec<super::channel::PacketState>,
    // @@protoc_insertion_point(field:ibc.core.channel.v1.GenesisState.send_sequences)
    pub send_sequences: ::std::vec::Vec<PacketSequence>,
    // @@protoc_insertion_point(field:ibc.core.channel.v1.GenesisState.recv_sequences)
    pub recv_sequences: ::std::vec::Vec<PacketSequence>,
    // @@protoc_insertion_point(field:ibc.core.channel.v1.GenesisState.ack_sequences)
    pub ack_sequences: ::std::vec::Vec<PacketSequence>,
    ///  the sequence for the next generated channel identifier
    // @@protoc_insertion_point(field:ibc.core.channel.v1.GenesisState.next_channel_sequence)
    pub next_channel_sequence: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.channel.v1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "channels",
            |m: &GenesisState| { &m.channels },
            |m: &mut GenesisState| { &mut m.channels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "acknowledgements",
            |m: &GenesisState| { &m.acknowledgements },
            |m: &mut GenesisState| { &mut m.acknowledgements },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "commitments",
            |m: &GenesisState| { &m.commitments },
            |m: &mut GenesisState| { &mut m.commitments },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "receipts",
            |m: &GenesisState| { &m.receipts },
            |m: &mut GenesisState| { &mut m.receipts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "send_sequences",
            |m: &GenesisState| { &m.send_sequences },
            |m: &mut GenesisState| { &mut m.send_sequences },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recv_sequences",
            |m: &GenesisState| { &m.recv_sequences },
            |m: &mut GenesisState| { &mut m.recv_sequences },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ack_sequences",
            |m: &GenesisState| { &m.ack_sequences },
            |m: &mut GenesisState| { &mut m.ack_sequences },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_channel_sequence",
            |m: &GenesisState| { &m.next_channel_sequence },
            |m: &mut GenesisState| { &mut m.next_channel_sequence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.channels.push(is.read_message()?);
                },
                18 => {
                    self.acknowledgements.push(is.read_message()?);
                },
                26 => {
                    self.commitments.push(is.read_message()?);
                },
                34 => {
                    self.receipts.push(is.read_message()?);
                },
                42 => {
                    self.send_sequences.push(is.read_message()?);
                },
                50 => {
                    self.recv_sequences.push(is.read_message()?);
                },
                58 => {
                    self.ack_sequences.push(is.read_message()?);
                },
                64 => {
                    self.next_channel_sequence = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.acknowledgements {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.commitments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.receipts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.send_sequences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.recv_sequences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.ack_sequences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.next_channel_sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.next_channel_sequence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.channels {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.acknowledgements {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.commitments {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.receipts {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.send_sequences {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.recv_sequences {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.ack_sequences {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.next_channel_sequence != 0 {
            os.write_uint64(8, self.next_channel_sequence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.channels.clear();
        self.acknowledgements.clear();
        self.commitments.clear();
        self.receipts.clear();
        self.send_sequences.clear();
        self.recv_sequences.clear();
        self.ack_sequences.clear();
        self.next_channel_sequence = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            channels: ::std::vec::Vec::new(),
            acknowledgements: ::std::vec::Vec::new(),
            commitments: ::std::vec::Vec::new(),
            receipts: ::std::vec::Vec::new(),
            send_sequences: ::std::vec::Vec::new(),
            recv_sequences: ::std::vec::Vec::new(),
            ack_sequences: ::std::vec::Vec::new(),
            next_channel_sequence: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PacketSequence defines the genesis type necessary to retrieve and store
///  next send and receive sequences.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.channel.v1.PacketSequence)
pub struct PacketSequence {
    // message fields
    // @@protoc_insertion_point(field:ibc.core.channel.v1.PacketSequence.port_id)
    pub port_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.core.channel.v1.PacketSequence.channel_id)
    pub channel_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.core.channel.v1.PacketSequence.sequence)
    pub sequence: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.channel.v1.PacketSequence.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PacketSequence {
    fn default() -> &'a PacketSequence {
        <PacketSequence as ::protobuf::Message>::default_instance()
    }
}

impl PacketSequence {
    pub fn new() -> PacketSequence {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port_id",
            |m: &PacketSequence| { &m.port_id },
            |m: &mut PacketSequence| { &mut m.port_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &PacketSequence| { &m.channel_id },
            |m: &mut PacketSequence| { &mut m.channel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &PacketSequence| { &m.sequence },
            |m: &mut PacketSequence| { &mut m.sequence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PacketSequence>(
            "PacketSequence",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PacketSequence {
    const NAME: &'static str = "PacketSequence";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.port_id = is.read_string()?;
                },
                18 => {
                    self.channel_id = is.read_string()?;
                },
                24 => {
                    self.sequence = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel_id);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.sequence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.port_id.is_empty() {
            os.write_string(1, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(2, &self.channel_id)?;
        }
        if self.sequence != 0 {
            os.write_uint64(3, self.sequence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PacketSequence {
        PacketSequence::new()
    }

    fn clear(&mut self) {
        self.port_id.clear();
        self.channel_id.clear();
        self.sequence = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PacketSequence {
        static instance: PacketSequence = PacketSequence {
            port_id: ::std::string::String::new(),
            channel_id: ::std::string::String::new(),
            sequence: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PacketSequence {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PacketSequence").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PacketSequence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketSequence {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!ibc/core/channel/v1/genesis.proto\x12\x13ibc.core.channel.v1\x1a\x14g\
    ogoproto/gogo.proto\x1a!ibc/core/channel/v1/channel.proto\"\xe3\x05\n\
    \x0cGenesisState\x12]\n\x08channels\x18\x01\x20\x03(\x0b2&.ibc.core.chan\
    nel.v1.IdentifiedChannelR\x08channelsB\x19\xfa\xde\x1f\x11IdentifiedChan\
    nel\xc8\xde\x1f\0\x12R\n\x10acknowledgements\x18\x02\x20\x03(\x0b2\x20.i\
    bc.core.channel.v1.PacketStateR\x10acknowledgementsB\x04\xc8\xde\x1f\0\
    \x12H\n\x0bcommitments\x18\x03\x20\x03(\x0b2\x20.ibc.core.channel.v1.Pac\
    ketStateR\x0bcommitmentsB\x04\xc8\xde\x1f\0\x12B\n\x08receipts\x18\x04\
    \x20\x03(\x0b2\x20.ibc.core.channel.v1.PacketStateR\x08receiptsB\x04\xc8\
    \xde\x1f\0\x12i\n\x0esend_sequences\x18\x05\x20\x03(\x0b2#.ibc.core.chan\
    nel.v1.PacketSequenceR\rsendSequencesB\x1d\xf2\xde\x1f\x15yaml:\"send_se\
    quences\"\xc8\xde\x1f\0\x12i\n\x0erecv_sequences\x18\x06\x20\x03(\x0b2#.\
    ibc.core.channel.v1.PacketSequenceR\rrecvSequencesB\x1d\xf2\xde\x1f\x15y\
    aml:\"recv_sequences\"\xc8\xde\x1f\0\x12f\n\rack_sequences\x18\x07\x20\
    \x03(\x0b2#.ibc.core.channel.v1.PacketSequenceR\x0cackSequencesB\x1c\xf2\
    \xde\x1f\x14yaml:\"ack_sequences\"\xc8\xde\x1f\0\x12T\n\x15next_channel_\
    sequence\x18\x08\x20\x01(\x04R\x13nextChannelSequenceB\x20\xf2\xde\x1f\
    \x1cyaml:\"next_channel_sequence\"\"\x8f\x01\n\x0ePacketSequence\x12+\n\
    \x07port_id\x18\x01\x20\x01(\tR\x06portIdB\x12\xf2\xde\x1f\x0eyaml:\"por\
    t_id\"\x124\n\nchannel_id\x18\x02\x20\x01(\tR\tchannelIdB\x15\xf2\xde\
    \x1f\x11yaml:\"channel_id\"\x12\x1a\n\x08sequence\x18\x03\x20\x01(\x04R\
    \x08sequenceB;Z9github.com/cosmos/ibc-go/v3/modules/core/04-channel/type\
    sJ\x9d\x0b\n\x06\x12\x04\0\0\x1f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\0\x1c\n\x08\n\x01\x08\x12\x03\x04\0P\n\t\n\
    \x02\x08\x0b\x12\x03\x04\0P\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\x02\
    \x03\x01\x12\x03\x07\0+\nM\n\x02\x04\0\x12\x04\n\0\x17\x01\x1aA\x20Genes\
    isState\x20defines\x20the\x20ibc\x20channel\x20submodule's\x20genesis\
    \x20state.\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x14\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\x0b\x02u\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0b\x02\n\n\x0c\
    \n\x05\x04\0\x02\0\x06\x12\x03\x0b\x0b\x1c\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x0b\x1d%\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0b()\n\x0c\n\x05\
    \x04\0\x02\0\x08\x12\x03\x0b*t\n\x0f\n\x08\x04\0\x02\0\x08\xef\xfb\x03\
    \x12\x03\x0b+U\n\x0f\n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\x0bWs\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\x02Q\n\x0c\n\x05\x04\0\x02\x01\x04\
    \x12\x03\x0c\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0c\x0b\x16\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0c\x1d-\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x0c01\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x0c2P\n\x0f\n\
    \x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x0c3O\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\r\x02Q\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\r\x02\n\n\x0c\
    \n\x05\x04\0\x02\x02\x06\x12\x03\r\x0b\x16\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\r\x1d(\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\r01\n\x0c\n\x05\
    \x04\0\x02\x02\x08\x12\x03\r2P\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\xfb\x03\
    \x12\x03\r3O\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0e\x02Q\n\x0c\n\x05\x04\
    \0\x02\x03\x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\
    \x0e\x0b\x16\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0e\x1d%\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x0e01\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\
    \x0e2P\n\x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\x03\x12\x03\x0e3O\n\x0c\n\
    \x04\x04\0\x02\x04\x12\x04\x0f\x02\x10W\n\x0c\n\x05\x04\0\x02\x04\x04\
    \x12\x03\x0f\x02\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x0f\x0b\x19\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x0f\x1d+\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03\x0f01\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\x10\x06V\n\x0f\
    \n\x08\x04\0\x02\x04\x08\xe9\xfb\x03\x12\x03\x10\x07#\n\x0f\n\x08\x04\0\
    \x02\x04\x08\xee\xfb\x03\x12\x03\x10%U\n\x0c\n\x04\x04\0\x02\x05\x12\x04\
    \x11\x02\x12W\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x11\x02\n\n\x0c\n\
    \x05\x04\0\x02\x05\x06\x12\x03\x11\x0b\x19\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03\x11\x1a(\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x11+,\n\x0c\n\
    \x05\x04\0\x02\x05\x08\x12\x03\x12\x06V\n\x0f\n\x08\x04\0\x02\x05\x08\
    \xe9\xfb\x03\x12\x03\x12\x07#\n\x0f\n\x08\x04\0\x02\x05\x08\xee\xfb\x03\
    \x12\x03\x12%U\n\x0c\n\x04\x04\0\x02\x06\x12\x04\x13\x02\x14V\n\x0c\n\
    \x05\x04\0\x02\x06\x04\x12\x03\x13\x02\n\n\x0c\n\x05\x04\0\x02\x06\x06\
    \x12\x03\x13\x0b\x19\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x13\x1a'\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x13*+\n\x0c\n\x05\x04\0\x02\x06\x08\
    \x12\x03\x14\x06U\n\x0f\n\x08\x04\0\x02\x06\x08\xe9\xfb\x03\x12\x03\x14\
    \x07#\n\x0f\n\x08\x04\0\x02\x06\x08\xee\xfb\x03\x12\x03\x14%T\nE\n\x04\
    \x04\0\x02\x07\x12\x03\x16\x02]\x1a8\x20the\x20sequence\x20for\x20the\
    \x20next\x20generated\x20channel\x20identifier\n\n\x0c\n\x05\x04\0\x02\
    \x07\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x16\t\
    \x1e\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x16!\"\n\x0c\n\x05\x04\0\x02\
    \x07\x08\x12\x03\x16#\\\n\x0f\n\x08\x04\0\x02\x07\x08\xee\xfb\x03\x12\
    \x03\x16$[\nw\n\x02\x04\x01\x12\x04\x1b\0\x1f\x01\x1ak\x20PacketSequence\
    \x20defines\x20the\x20genesis\x20type\x20necessary\x20to\x20retrieve\x20\
    and\x20store\n\x20next\x20send\x20and\x20receive\x20sequences.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\x1b\x08\x16\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x1c\x02D\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x1c\t\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x1c\x16\x17\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x1c\x18C\n\x0f\n\
    \x08\x04\x01\x02\0\x08\xee\xfb\x03\x12\x03\x1c\x19B\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x1d\x02G\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1d\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1d\t\x13\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x1d\x16\x17\n\x0c\n\x05\x04\x01\x02\x01\x08\
    \x12\x03\x1d\x18F\n\x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03\
    \x1d\x19E\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1e\x02\x18\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x1e\t\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x1e\x16\x17b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::channel::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(GenesisState::generated_message_descriptor_data());
            messages.push(PacketSequence::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
