// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/core/client/v1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState defines the ibc client submodule's genesis state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.GenesisState)
pub struct GenesisState {
    // message fields
    ///  client states with their corresponding identifiers
    // @@protoc_insertion_point(field:ibc.core.client.v1.GenesisState.clients)
    pub clients: ::std::vec::Vec<super::client::IdentifiedClientState>,
    ///  consensus states from each client
    // @@protoc_insertion_point(field:ibc.core.client.v1.GenesisState.clients_consensus)
    pub clients_consensus: ::std::vec::Vec<super::client::ClientConsensusStates>,
    ///  metadata from each client
    // @@protoc_insertion_point(field:ibc.core.client.v1.GenesisState.clients_metadata)
    pub clients_metadata: ::std::vec::Vec<IdentifiedGenesisMetadata>,
    // @@protoc_insertion_point(field:ibc.core.client.v1.GenesisState.params)
    pub params: ::protobuf::MessageField<super::client::Params>,
    ///  create localhost on initialization
    // @@protoc_insertion_point(field:ibc.core.client.v1.GenesisState.create_localhost)
    pub create_localhost: bool,
    ///  the sequence for the next generated client identifier
    // @@protoc_insertion_point(field:ibc.core.client.v1.GenesisState.next_client_sequence)
    pub next_client_sequence: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "clients",
            |m: &GenesisState| { &m.clients },
            |m: &mut GenesisState| { &mut m.clients },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "clients_consensus",
            |m: &GenesisState| { &m.clients_consensus },
            |m: &mut GenesisState| { &mut m.clients_consensus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "clients_metadata",
            |m: &GenesisState| { &m.clients_metadata },
            |m: &mut GenesisState| { &mut m.clients_metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Params>(
            "params",
            |m: &GenesisState| { &m.params },
            |m: &mut GenesisState| { &mut m.params },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "create_localhost",
            |m: &GenesisState| { &m.create_localhost },
            |m: &mut GenesisState| { &mut m.create_localhost },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_client_sequence",
            |m: &GenesisState| { &m.next_client_sequence },
            |m: &mut GenesisState| { &mut m.next_client_sequence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.clients.push(is.read_message()?);
                },
                18 => {
                    self.clients_consensus.push(is.read_message()?);
                },
                26 => {
                    self.clients_metadata.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                40 => {
                    self.create_localhost = is.read_bool()?;
                },
                48 => {
                    self.next_client_sequence = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.clients {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.clients_consensus {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.clients_metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.create_localhost != false {
            my_size += 1 + 1;
        }
        if self.next_client_sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.next_client_sequence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.clients {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.clients_consensus {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.clients_metadata {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.create_localhost != false {
            os.write_bool(5, self.create_localhost)?;
        }
        if self.next_client_sequence != 0 {
            os.write_uint64(6, self.next_client_sequence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.clients.clear();
        self.clients_consensus.clear();
        self.clients_metadata.clear();
        self.params.clear();
        self.create_localhost = false;
        self.next_client_sequence = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            clients: ::std::vec::Vec::new(),
            clients_consensus: ::std::vec::Vec::new(),
            clients_metadata: ::std::vec::Vec::new(),
            params: ::protobuf::MessageField::none(),
            create_localhost: false,
            next_client_sequence: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  GenesisMetadata defines the genesis type for metadata that clients may return
///  with ExportMetadata
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.GenesisMetadata)
pub struct GenesisMetadata {
    // message fields
    ///  store key of metadata without clientID-prefix
    // @@protoc_insertion_point(field:ibc.core.client.v1.GenesisMetadata.key)
    pub key: ::std::vec::Vec<u8>,
    ///  metadata value
    // @@protoc_insertion_point(field:ibc.core.client.v1.GenesisMetadata.value)
    pub value: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.GenesisMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisMetadata {
    fn default() -> &'a GenesisMetadata {
        <GenesisMetadata as ::protobuf::Message>::default_instance()
    }
}

impl GenesisMetadata {
    pub fn new() -> GenesisMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &GenesisMetadata| { &m.key },
            |m: &mut GenesisMetadata| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &GenesisMetadata| { &m.value },
            |m: &mut GenesisMetadata| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisMetadata>(
            "GenesisMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisMetadata {
    const NAME: &'static str = "GenesisMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisMetadata {
        GenesisMetadata::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisMetadata {
        static instance: GenesisMetadata = GenesisMetadata {
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  IdentifiedGenesisMetadata has the client metadata with the corresponding
///  client id.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.IdentifiedGenesisMetadata)
pub struct IdentifiedGenesisMetadata {
    // message fields
    // @@protoc_insertion_point(field:ibc.core.client.v1.IdentifiedGenesisMetadata.client_id)
    pub client_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.core.client.v1.IdentifiedGenesisMetadata.client_metadata)
    pub client_metadata: ::std::vec::Vec<GenesisMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.IdentifiedGenesisMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IdentifiedGenesisMetadata {
    fn default() -> &'a IdentifiedGenesisMetadata {
        <IdentifiedGenesisMetadata as ::protobuf::Message>::default_instance()
    }
}

impl IdentifiedGenesisMetadata {
    pub fn new() -> IdentifiedGenesisMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &IdentifiedGenesisMetadata| { &m.client_id },
            |m: &mut IdentifiedGenesisMetadata| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "client_metadata",
            |m: &IdentifiedGenesisMetadata| { &m.client_metadata },
            |m: &mut IdentifiedGenesisMetadata| { &mut m.client_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IdentifiedGenesisMetadata>(
            "IdentifiedGenesisMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IdentifiedGenesisMetadata {
    const NAME: &'static str = "IdentifiedGenesisMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    self.client_metadata.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        for value in &self.client_metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        for v in &self.client_metadata {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IdentifiedGenesisMetadata {
        IdentifiedGenesisMetadata::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.client_metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IdentifiedGenesisMetadata {
        static instance: IdentifiedGenesisMetadata = IdentifiedGenesisMetadata {
            client_id: ::std::string::String::new(),
            client_metadata: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdentifiedGenesisMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IdentifiedGenesisMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IdentifiedGenesisMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentifiedGenesisMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20ibc/core/client/v1/genesis.proto\x12\x12ibc.core.client.v1\x1a\x1f\
    ibc/core/client/v1/client.proto\x1a\x14gogoproto/gogo.proto\"\xd8\x04\n\
    \x0cGenesisState\x12c\n\x07clients\x18\x01\x20\x03(\x0b2).ibc.core.clien\
    t.v1.IdentifiedClientStateR\x07clientsB\x1e\xaa\xdf\x1f\x16IdentifiedCli\
    entStates\xc8\xde\x1f\0\x12\x92\x01\n\x11clients_consensus\x18\x02\x20\
    \x03(\x0b2).ibc.core.client.v1.ClientConsensusStatesR\x10clientsConsensu\
    sB:\xaa\xdf\x1f\x16ClientsConsensusStates\xc8\xde\x1f\0\xf2\xde\x1f\x18y\
    aml:\"clients_consensus\"\x12y\n\x10clients_metadata\x18\x03\x20\x03(\
    \x0b2-.ibc.core.client.v1.IdentifiedGenesisMetadataR\x0fclientsMetadataB\
    \x1f\xf2\xde\x1f\x17yaml:\"clients_metadata\"\xc8\xde\x1f\0\x128\n\x06pa\
    rams\x18\x04\x20\x01(\x0b2\x1a.ibc.core.client.v1.ParamsR\x06paramsB\x04\
    \xc8\xde\x1f\0\x12F\n\x10create_localhost\x18\x05\x20\x01(\x08R\x0fcreat\
    eLocalhostB\x1b\xf2\xde\x1f\x17yaml:\"create_localhost\"\x12Q\n\x14next_\
    client_sequence\x18\x06\x20\x01(\x04R\x12nextClientSequenceB\x1f\xf2\xde\
    \x1f\x1byaml:\"next_client_sequence\"\"?\n\x0fGenesisMetadata\x12\x10\n\
    \x03key\x18\x01\x20\x01(\x0cR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \x0cR\x05value:\x04\x88\xa0\x1f\0\"\xbc\x01\n\x19IdentifiedGenesisMetada\
    ta\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\
    \x10yaml:\"client_id\"\x12l\n\x0fclient_metadata\x18\x02\x20\x03(\x0b2#.\
    ibc.core.client.v1.GenesisMetadataR\x0eclientMetadataB\x1e\xf2\xde\x1f\
    \x16yaml:\"client_metadata\"\xc8\xde\x1f\0B:Z8github.com/cosmos/ibc-go/v\
    3/modules/core/02-client/typesJ\xf4\x0c\n\x06\x12\x04\0\0/\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1b\n\x08\n\x01\
    \x08\x12\x03\x04\0O\n\t\n\x02\x08\x0b\x12\x03\x04\0O\n\t\n\x02\x03\0\x12\
    \x03\x06\0)\n\t\n\x02\x03\x01\x12\x03\x07\0\x1e\nL\n\x02\x04\0\x12\x04\n\
    \0\x1c\x01\x1a@\x20GenesisState\x20defines\x20the\x20ibc\x20client\x20su\
    bmodule's\x20genesis\x20state.\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x14\n\
    B\n\x04\x04\0\x02\0\x12\x04\x0c\x02\rZ\x1a4\x20client\x20states\x20with\
    \x20their\x20corresponding\x20identifiers\n\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03\x0c\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x0b\x20\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x0c!(\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0c+,\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\r\x06Y\n\x0f\n\x08\x04\0\x02\
    \0\x08\xe9\xfb\x03\x12\x03\r\x07#\n\x0f\n\x08\x04\0\x02\0\x08\xf5\xfb\
    \x03\x12\x03\r%X\n1\n\x04\x04\0\x02\x01\x12\x04\x0f\x02\x13\x04\x1a#\x20\
    consensus\x20states\x20from\x20each\x20client\n\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0f\x0b\
    \x20\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f!2\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0f56\n\r\n\x05\x04\0\x02\x01\x08\x12\x04\x0f7\x13\x03\
    \n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x10\x04$\n\x0f\n\x08\
    \x04\0\x02\x01\x08\xf5\xfb\x03\x12\x03\x11\x047\n\x0f\n\x08\x04\0\x02\
    \x01\x08\xee\xfb\x03\x12\x03\x12\x04;\n)\n\x04\x04\0\x02\x02\x12\x04\x15\
    \x02\x16Y\x1a\x1b\x20metadata\x20from\x20each\x20client\n\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\
    \x03\x15\x0b$\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x15%5\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x1589\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\
    \x16\x06X\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x16\x07#\n\
    \x0f\n\x08\x04\0\x02\x02\x08\xee\xfb\x03\x12\x03\x16%W\n\x0b\n\x04\x04\0\
    \x02\x03\x12\x03\x17\x023\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x17\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x17\t\x0f\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x17\x12\x13\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\
    \x17\x142\n\x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\x03\x12\x03\x17\x151\n1\
    \n\x04\x04\0\x02\x04\x12\x03\x19\x02Q\x1a$\x20create\x20localhost\x20on\
    \x20initialization\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x19\x02\x06\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x19\x07\x17\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\x19\x1a\x1b\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\x19\
    \x1cP\n\x0f\n\x08\x04\0\x02\x04\x08\xee\xfb\x03\x12\x03\x19\x1dO\nD\n\
    \x04\x04\0\x02\x05\x12\x03\x1b\x02[\x1a7\x20the\x20sequence\x20for\x20th\
    e\x20next\x20generated\x20client\x20identifier\n\n\x0c\n\x05\x04\0\x02\
    \x05\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x1b\t\
    \x1d\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x1b\x20!\n\x0c\n\x05\x04\0\
    \x02\x05\x08\x12\x03\x1b\"Z\n\x0f\n\x08\x04\0\x02\x05\x08\xee\xfb\x03\
    \x12\x03\x1b#Y\np\n\x02\x04\x01\x12\x04\x20\0'\x01\x1ad\x20GenesisMetada\
    ta\x20defines\x20the\x20genesis\x20type\x20for\x20metadata\x20that\x20cl\
    ients\x20may\x20return\n\x20with\x20ExportMetadata\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x20\x08\x17\n\n\n\x03\x04\x01\x07\x12\x03!\x02-\n\r\n\x06\
    \x04\x01\x07\x81\xf4\x03\x12\x03!\x02-\n<\n\x04\x04\x01\x02\0\x12\x03$\
    \x02\x10\x1a/\x20store\x20key\x20of\x20metadata\x20without\x20clientID-p\
    refix\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03$\x02\x07\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03$\x08\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03$\
    \x0e\x0f\n\x1d\n\x04\x04\x01\x02\x01\x12\x03&\x02\x12\x1a\x10\x20metadat\
    a\x20value\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03&\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03&\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03&\x10\x11\nb\n\x02\x04\x02\x12\x04+\0/\x01\x1aV\x20IdentifiedGen\
    esisMetadata\x20has\x20the\x20client\x20metadata\x20with\x20the\x20corre\
    sponding\n\x20client\x20id.\n\n\n\n\x03\x04\x02\x01\x12\x03+\x08!\n\x0b\
    \n\x04\x04\x02\x02\0\x12\x03,\x02]\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    ,\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03,\x1b$\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03,-.\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03,/\\\n\
    \x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x03,0[\n\x0c\n\x04\x04\x02\
    \x02\x01\x12\x04-\x02.X\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03-\x02\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x06\x12\x03-\x0b\x1a\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03-\x1b*\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03--.\n\x0c\
    \n\x05\x04\x02\x02\x01\x08\x12\x03.\x06W\n\x0f\n\x08\x04\x02\x02\x01\x08\
    \xe9\xfb\x03\x12\x03.\x07#\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\
    \x12\x03.%Vb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::client::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(GenesisState::generated_message_descriptor_data());
            messages.push(GenesisMetadata::generated_message_descriptor_data());
            messages.push(IdentifiedGenesisMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
