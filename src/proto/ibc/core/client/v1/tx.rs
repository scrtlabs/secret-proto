// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/core/client/v1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgCreateClient defines a message to create an IBC client
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.MsgCreateClient)
pub struct MsgCreateClient {
    // message fields
    ///  light client state
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgCreateClient.client_state)
    pub client_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  consensus state associated with the client that corresponds to a given
    ///  height.
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgCreateClient.consensus_state)
    pub consensus_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  signer address
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgCreateClient.signer)
    pub signer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.MsgCreateClient.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreateClient {
    fn default() -> &'a MsgCreateClient {
        <MsgCreateClient as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateClient {
    pub fn new() -> MsgCreateClient {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "client_state",
            |m: &MsgCreateClient| { &m.client_state },
            |m: &mut MsgCreateClient| { &mut m.client_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "consensus_state",
            |m: &MsgCreateClient| { &m.consensus_state },
            |m: &mut MsgCreateClient| { &mut m.consensus_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &MsgCreateClient| { &m.signer },
            |m: &mut MsgCreateClient| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreateClient>(
            "MsgCreateClient",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreateClient {
    const NAME: &'static str = "MsgCreateClient";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.client_state)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_state)?;
                },
                26 => {
                    self.signer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.client_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.consensus_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(3, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreateClient {
        MsgCreateClient::new()
    }

    fn clear(&mut self) {
        self.client_state.clear();
        self.consensus_state.clear();
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreateClient {
        static instance: MsgCreateClient = MsgCreateClient {
            client_state: ::protobuf::MessageField::none(),
            consensus_state: ::protobuf::MessageField::none(),
            signer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreateClient {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreateClient").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreateClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateClient {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgCreateClientResponse defines the Msg/CreateClient response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.MsgCreateClientResponse)
pub struct MsgCreateClientResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.MsgCreateClientResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgCreateClientResponse {
    fn default() -> &'a MsgCreateClientResponse {
        <MsgCreateClientResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateClientResponse {
    pub fn new() -> MsgCreateClientResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgCreateClientResponse>(
            "MsgCreateClientResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgCreateClientResponse {
    const NAME: &'static str = "MsgCreateClientResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgCreateClientResponse {
        MsgCreateClientResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgCreateClientResponse {
        static instance: MsgCreateClientResponse = MsgCreateClientResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgCreateClientResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgCreateClientResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgCreateClientResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateClientResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgUpdateClient defines an sdk.Msg to update a IBC client state using
///  the given header.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.MsgUpdateClient)
pub struct MsgUpdateClient {
    // message fields
    ///  client unique identifier
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpdateClient.client_id)
    pub client_id: ::std::string::String,
    ///  header to update the light client
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpdateClient.header)
    pub header: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  signer address
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpdateClient.signer)
    pub signer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.MsgUpdateClient.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUpdateClient {
    fn default() -> &'a MsgUpdateClient {
        <MsgUpdateClient as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateClient {
    pub fn new() -> MsgUpdateClient {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &MsgUpdateClient| { &m.client_id },
            |m: &mut MsgUpdateClient| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "header",
            |m: &MsgUpdateClient| { &m.header },
            |m: &mut MsgUpdateClient| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &MsgUpdateClient| { &m.signer },
            |m: &mut MsgUpdateClient| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUpdateClient>(
            "MsgUpdateClient",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUpdateClient {
    const NAME: &'static str = "MsgUpdateClient";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                26 => {
                    self.signer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(3, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUpdateClient {
        MsgUpdateClient::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.header.clear();
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUpdateClient {
        static instance: MsgUpdateClient = MsgUpdateClient {
            client_id: ::std::string::String::new(),
            header: ::protobuf::MessageField::none(),
            signer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUpdateClient {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUpdateClient").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUpdateClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateClient {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgUpdateClientResponse defines the Msg/UpdateClient response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.MsgUpdateClientResponse)
pub struct MsgUpdateClientResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.MsgUpdateClientResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUpdateClientResponse {
    fn default() -> &'a MsgUpdateClientResponse {
        <MsgUpdateClientResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateClientResponse {
    pub fn new() -> MsgUpdateClientResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUpdateClientResponse>(
            "MsgUpdateClientResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUpdateClientResponse {
    const NAME: &'static str = "MsgUpdateClientResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUpdateClientResponse {
        MsgUpdateClientResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUpdateClientResponse {
        static instance: MsgUpdateClientResponse = MsgUpdateClientResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUpdateClientResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUpdateClientResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUpdateClientResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateClientResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgUpgradeClient defines an sdk.Msg to upgrade an IBC client to a new client
///  state
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.MsgUpgradeClient)
pub struct MsgUpgradeClient {
    // message fields
    ///  client unique identifier
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpgradeClient.client_id)
    pub client_id: ::std::string::String,
    ///  upgraded client state
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpgradeClient.client_state)
    pub client_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  upgraded consensus state, only contains enough information to serve as a
    ///  basis of trust in update logic
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpgradeClient.consensus_state)
    pub consensus_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  proof that old chain committed to new client
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpgradeClient.proof_upgrade_client)
    pub proof_upgrade_client: ::std::vec::Vec<u8>,
    ///  proof that old chain committed to new consensus state
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpgradeClient.proof_upgrade_consensus_state)
    pub proof_upgrade_consensus_state: ::std::vec::Vec<u8>,
    ///  signer address
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgUpgradeClient.signer)
    pub signer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.MsgUpgradeClient.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUpgradeClient {
    fn default() -> &'a MsgUpgradeClient {
        <MsgUpgradeClient as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpgradeClient {
    pub fn new() -> MsgUpgradeClient {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &MsgUpgradeClient| { &m.client_id },
            |m: &mut MsgUpgradeClient| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "client_state",
            |m: &MsgUpgradeClient| { &m.client_state },
            |m: &mut MsgUpgradeClient| { &mut m.client_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "consensus_state",
            |m: &MsgUpgradeClient| { &m.consensus_state },
            |m: &mut MsgUpgradeClient| { &mut m.consensus_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_upgrade_client",
            |m: &MsgUpgradeClient| { &m.proof_upgrade_client },
            |m: &mut MsgUpgradeClient| { &mut m.proof_upgrade_client },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_upgrade_consensus_state",
            |m: &MsgUpgradeClient| { &m.proof_upgrade_consensus_state },
            |m: &mut MsgUpgradeClient| { &mut m.proof_upgrade_consensus_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &MsgUpgradeClient| { &m.signer },
            |m: &mut MsgUpgradeClient| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUpgradeClient>(
            "MsgUpgradeClient",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUpgradeClient {
    const NAME: &'static str = "MsgUpgradeClient";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.client_state)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_state)?;
                },
                34 => {
                    self.proof_upgrade_client = is.read_bytes()?;
                },
                42 => {
                    self.proof_upgrade_consensus_state = is.read_bytes()?;
                },
                50 => {
                    self.signer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.proof_upgrade_client.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.proof_upgrade_client);
        }
        if !self.proof_upgrade_consensus_state.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.proof_upgrade_consensus_state);
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(v) = self.client_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.consensus_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.proof_upgrade_client.is_empty() {
            os.write_bytes(4, &self.proof_upgrade_client)?;
        }
        if !self.proof_upgrade_consensus_state.is_empty() {
            os.write_bytes(5, &self.proof_upgrade_consensus_state)?;
        }
        if !self.signer.is_empty() {
            os.write_string(6, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUpgradeClient {
        MsgUpgradeClient::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.client_state.clear();
        self.consensus_state.clear();
        self.proof_upgrade_client.clear();
        self.proof_upgrade_consensus_state.clear();
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUpgradeClient {
        static instance: MsgUpgradeClient = MsgUpgradeClient {
            client_id: ::std::string::String::new(),
            client_state: ::protobuf::MessageField::none(),
            consensus_state: ::protobuf::MessageField::none(),
            proof_upgrade_client: ::std::vec::Vec::new(),
            proof_upgrade_consensus_state: ::std::vec::Vec::new(),
            signer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUpgradeClient {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUpgradeClient").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUpgradeClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpgradeClient {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgUpgradeClientResponse defines the Msg/UpgradeClient response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.MsgUpgradeClientResponse)
pub struct MsgUpgradeClientResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.MsgUpgradeClientResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgUpgradeClientResponse {
    fn default() -> &'a MsgUpgradeClientResponse {
        <MsgUpgradeClientResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpgradeClientResponse {
    pub fn new() -> MsgUpgradeClientResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgUpgradeClientResponse>(
            "MsgUpgradeClientResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgUpgradeClientResponse {
    const NAME: &'static str = "MsgUpgradeClientResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgUpgradeClientResponse {
        MsgUpgradeClientResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgUpgradeClientResponse {
        static instance: MsgUpgradeClientResponse = MsgUpgradeClientResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgUpgradeClientResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgUpgradeClientResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgUpgradeClientResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpgradeClientResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSubmitMisbehaviour defines an sdk.Msg type that submits Evidence for
///  light client misbehaviour.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.MsgSubmitMisbehaviour)
pub struct MsgSubmitMisbehaviour {
    // message fields
    ///  client unique identifier
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgSubmitMisbehaviour.client_id)
    pub client_id: ::std::string::String,
    ///  misbehaviour used for freezing the light client
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgSubmitMisbehaviour.misbehaviour)
    pub misbehaviour: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  signer address
    // @@protoc_insertion_point(field:ibc.core.client.v1.MsgSubmitMisbehaviour.signer)
    pub signer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.MsgSubmitMisbehaviour.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSubmitMisbehaviour {
    fn default() -> &'a MsgSubmitMisbehaviour {
        <MsgSubmitMisbehaviour as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitMisbehaviour {
    pub fn new() -> MsgSubmitMisbehaviour {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &MsgSubmitMisbehaviour| { &m.client_id },
            |m: &mut MsgSubmitMisbehaviour| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "misbehaviour",
            |m: &MsgSubmitMisbehaviour| { &m.misbehaviour },
            |m: &mut MsgSubmitMisbehaviour| { &mut m.misbehaviour },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &MsgSubmitMisbehaviour| { &m.signer },
            |m: &mut MsgSubmitMisbehaviour| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSubmitMisbehaviour>(
            "MsgSubmitMisbehaviour",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSubmitMisbehaviour {
    const NAME: &'static str = "MsgSubmitMisbehaviour";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.misbehaviour)?;
                },
                26 => {
                    self.signer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(v) = self.misbehaviour.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(v) = self.misbehaviour.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(3, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSubmitMisbehaviour {
        MsgSubmitMisbehaviour::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.misbehaviour.clear();
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSubmitMisbehaviour {
        static instance: MsgSubmitMisbehaviour = MsgSubmitMisbehaviour {
            client_id: ::std::string::String::new(),
            misbehaviour: ::protobuf::MessageField::none(),
            signer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSubmitMisbehaviour {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSubmitMisbehaviour").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSubmitMisbehaviour {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitMisbehaviour {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSubmitMisbehaviourResponse defines the Msg/SubmitMisbehaviour response
///  type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.client.v1.MsgSubmitMisbehaviourResponse)
pub struct MsgSubmitMisbehaviourResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.client.v1.MsgSubmitMisbehaviourResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSubmitMisbehaviourResponse {
    fn default() -> &'a MsgSubmitMisbehaviourResponse {
        <MsgSubmitMisbehaviourResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitMisbehaviourResponse {
    pub fn new() -> MsgSubmitMisbehaviourResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSubmitMisbehaviourResponse>(
            "MsgSubmitMisbehaviourResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSubmitMisbehaviourResponse {
    const NAME: &'static str = "MsgSubmitMisbehaviourResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSubmitMisbehaviourResponse {
        MsgSubmitMisbehaviourResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSubmitMisbehaviourResponse {
        static instance: MsgSubmitMisbehaviourResponse = MsgSubmitMisbehaviourResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSubmitMisbehaviourResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSubmitMisbehaviourResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSubmitMisbehaviourResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitMisbehaviourResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bibc/core/client/v1/tx.proto\x12\x12ibc.core.client.v1\x1a\x14gogop\
    roto/gogo.proto\x1a\x19google/protobuf/any.proto\"\xe0\x01\n\x0fMsgCreat\
    eClient\x12P\n\x0cclient_state\x18\x01\x20\x01(\x0b2\x14.google.protobuf\
    .AnyR\x0bclientStateB\x17\xf2\xde\x1f\x13yaml:\"client_state\"\x12Y\n\
    \x0fconsensus_state\x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0eco\
    nsensusStateB\x1a\xf2\xde\x1f\x16yaml:\"consensus_state\"\x12\x16\n\x06s\
    igner\x18\x03\x20\x01(\tR\x06signer:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\
    \x19\n\x17MsgCreateClientResponse\"\x94\x01\n\x0fMsgUpdateClient\x121\n\
    \tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"c\
    lient_id\"\x12,\n\x06header\x18\x02\x20\x01(\x0b2\x14.google.protobuf.An\
    yR\x06header\x12\x16\n\x06signer\x18\x03\x20\x01(\tR\x06signer:\x08\x88\
    \xa0\x1f\0\xe8\xa0\x1f\0\"\x19\n\x17MsgUpdateClientResponse\"\xd4\x03\n\
    \x10MsgUpgradeClient\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\
    \x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12P\n\x0cclient_state\x18\x02\
    \x20\x01(\x0b2\x14.google.protobuf.AnyR\x0bclientStateB\x17\xf2\xde\x1f\
    \x13yaml:\"client_state\"\x12Y\n\x0fconsensus_state\x18\x03\x20\x01(\x0b\
    2\x14.google.protobuf.AnyR\x0econsensusStateB\x1a\xf2\xde\x1f\x16yaml:\"\
    consensus_state\"\x12Q\n\x14proof_upgrade_client\x18\x04\x20\x01(\x0cR\
    \x12proofUpgradeClientB\x1f\xf2\xde\x1f\x1byaml:\"proof_upgrade_client\"\
    \x12k\n\x1dproof_upgrade_consensus_state\x18\x05\x20\x01(\x0cR\x1aproofU\
    pgradeConsensusStateB(\xf2\xde\x1f$yaml:\"proof_upgrade_consensus_state\
    \"\x12\x16\n\x06signer\x18\x06\x20\x01(\tR\x06signer:\x08\x88\xa0\x1f\0\
    \xe8\xa0\x1f\0\"\x1a\n\x18MsgUpgradeClientResponse\"\xa6\x01\n\x15MsgSub\
    mitMisbehaviour\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\
    \xf2\xde\x1f\x10yaml:\"client_id\"\x128\n\x0cmisbehaviour\x18\x02\x20\
    \x01(\x0b2\x14.google.protobuf.AnyR\x0cmisbehaviour\x12\x16\n\x06signer\
    \x18\x03\x20\x01(\tR\x06signer:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x1f\n\
    \x1dMsgSubmitMisbehaviourResponse2\xa2\x03\n\x03Msg\x12`\n\x0cCreateClie\
    nt\x12#.ibc.core.client.v1.MsgCreateClient\x1a+.ibc.core.client.v1.MsgCr\
    eateClientResponse\x12`\n\x0cUpdateClient\x12#.ibc.core.client.v1.MsgUpd\
    ateClient\x1a+.ibc.core.client.v1.MsgUpdateClientResponse\x12c\n\rUpgrad\
    eClient\x12$.ibc.core.client.v1.MsgUpgradeClient\x1a,.ibc.core.client.v1\
    .MsgUpgradeClientResponse\x12r\n\x12SubmitMisbehaviour\x12).ibc.core.cli\
    ent.v1.MsgSubmitMisbehaviour\x1a1.ibc.core.client.v1.MsgSubmitMisbehavio\
    urResponseB:Z8github.com/cosmos/ibc-go/v3/modules/core/02-client/typesJ\
    \xad\x1a\n\x06\x12\x04\0\0b(\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\0\x1b\n\x08\n\x01\x08\x12\x03\x04\0O\n\t\n\x02\x08\x0b\
    \x12\x03\x04\0O\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\
    \x03\x07\0#\n5\n\x02\x06\0\x12\x04\n\0\x16\x01\x1a)\x20Msg\x20defines\
    \x20the\x20ibc/client\x20Msg\x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\n\
    \x08\x0b\nM\n\x04\x06\0\x02\0\x12\x03\x0c\x02F\x1a@\x20CreateClient\x20d\
    efines\x20a\x20rpc\x20handler\x20method\x20for\x20MsgCreateClient.\n\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0c\x06\x12\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x0c\x13\"\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0c-D\nM\n\
    \x04\x06\0\x02\x01\x12\x03\x0f\x02F\x1a@\x20UpdateClient\x20defines\x20a\
    \x20rpc\x20handler\x20method\x20for\x20MsgUpdateClient.\n\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x0f\x06\x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x0f\x13\"\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0f-D\nO\n\x04\x06\
    \0\x02\x02\x12\x03\x12\x02I\x1aB\x20UpgradeClient\x20defines\x20a\x20rpc\
    \x20handler\x20method\x20for\x20MsgUpgradeClient.\n\n\x0c\n\x05\x06\0\
    \x02\x02\x01\x12\x03\x12\x06\x13\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\
    \x12\x14$\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x12/G\nY\n\x04\x06\0\x02\
    \x03\x12\x03\x15\x02X\x1aL\x20SubmitMisbehaviour\x20defines\x20a\x20rpc\
    \x20handler\x20method\x20for\x20MsgSubmitMisbehaviour.\n\n\x0c\n\x05\x06\
    \0\x02\x03\x01\x12\x03\x15\x06\x18\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\
    \x15\x19.\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x159V\nG\n\x02\x04\0\x12\
    \x04\x19\0$\x01\x1a;\x20MsgCreateClient\x20defines\x20a\x20message\x20to\
    \x20create\x20an\x20IBC\x20client\n\n\n\n\x03\x04\0\x01\x12\x03\x19\x08\
    \x17\n\n\n\x03\x04\0\x07\x12\x03\x1a\x02-\n\r\n\x06\x04\0\x07\x8d\xf4\
    \x03\x12\x03\x1a\x02-\n\n\n\x03\x04\0\x07\x12\x03\x1b\x02-\n\r\n\x06\x04\
    \0\x07\x81\xf4\x03\x12\x03\x1b\x02-\n!\n\x04\x04\0\x02\0\x12\x03\x1e\x02\
    X\x1a\x14\x20light\x20client\x20state\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\x1e\x02\x15\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1e\x16\"\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x1e%&\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\
    \x1e'W\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x1e(V\n^\n\x04\
    \x04\0\x02\x01\x12\x03!\x02^\x1aQ\x20consensus\x20state\x20associated\
    \x20with\x20the\x20client\x20that\x20corresponds\x20to\x20a\x20given\n\
    \x20height.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03!\x02\x15\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03!\x16%\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03!(\
    )\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03!*]\n\x0f\n\x08\x04\0\x02\x01\x08\
    \xee\xfb\x03\x12\x03!+\\\n\x1d\n\x04\x04\0\x02\x02\x12\x03#\x02\x14\x1a\
    \x10\x20signer\x20address\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03#\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03#\t\x0f\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03#\x12\x13\nP\n\x02\x04\x01\x12\x03'\0\"\x1aE\x20MsgCreat\
    eClientResponse\x20defines\x20the\x20Msg/CreateClient\x20response\x20typ\
    e.\n\n\n\n\x03\x04\x01\x01\x12\x03'\x08\x1f\nf\n\x02\x04\x02\x12\x04+\05\
    \x01\x1aZ\x20MsgUpdateClient\x20defines\x20an\x20sdk.Msg\x20to\x20update\
    \x20a\x20IBC\x20client\x20state\x20using\n\x20the\x20given\x20header.\n\
    \n\n\n\x03\x04\x02\x01\x12\x03+\x08\x17\n\n\n\x03\x04\x02\x07\x12\x03,\
    \x02-\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x03,\x02-\n\n\n\x03\x04\x02\
    \x07\x12\x03-\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x03-\x02-\n'\n\
    \x04\x04\x02\x02\0\x12\x030\x02E\x1a\x1a\x20client\x20unique\x20identifi\
    er\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x030\t\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x030\x15\x16\
    \n\x0c\n\x05\x04\x02\x02\0\x08\x12\x030\x17D\n\x0f\n\x08\x04\x02\x02\0\
    \x08\xee\xfb\x03\x12\x030\x18C\n0\n\x04\x04\x02\x02\x01\x12\x032\x02!\
    \x1a#\x20header\x20to\x20update\x20the\x20light\x20client\n\n\x0c\n\x05\
    \x04\x02\x02\x01\x06\x12\x032\x02\x15\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x032\x16\x1c\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x032\x1f\x20\n\x1d\
    \n\x04\x04\x02\x02\x02\x12\x034\x02\x14\x1a\x10\x20signer\x20address\n\n\
    \x0c\n\x05\x04\x02\x02\x02\x05\x12\x034\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x034\t\x0f\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x034\x12\x13\
    \nP\n\x02\x04\x03\x12\x038\0\"\x1aE\x20MsgUpdateClientResponse\x20define\
    s\x20the\x20Msg/UpdateClient\x20response\x20type.\n\n\n\n\x03\x04\x03\
    \x01\x12\x038\x08\x1f\na\n\x02\x04\x04\x12\x04<\0M\x01\x1aU\x20MsgUpgrad\
    eClient\x20defines\x20an\x20sdk.Msg\x20to\x20upgrade\x20an\x20IBC\x20cli\
    ent\x20to\x20a\x20new\x20client\n\x20state\n\n\n\n\x03\x04\x04\x01\x12\
    \x03<\x08\x18\n\n\n\x03\x04\x04\x07\x12\x03=\x02-\n\r\n\x06\x04\x04\x07\
    \x8d\xf4\x03\x12\x03=\x02-\n\n\n\x03\x04\x04\x07\x12\x03>\x02-\n\r\n\x06\
    \x04\x04\x07\x81\xf4\x03\x12\x03>\x02-\n'\n\x04\x04\x04\x02\0\x12\x03A\
    \x02E\x1a\x1a\x20client\x20unique\x20identifier\n\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03A\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03A\t\x12\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03A\x15\x16\n\x0c\n\x05\x04\x04\x02\
    \0\x08\x12\x03A\x17D\n\x0f\n\x08\x04\x04\x02\0\x08\xee\xfb\x03\x12\x03A\
    \x18C\n$\n\x04\x04\x04\x02\x01\x12\x03C\x02X\x1a\x17\x20upgraded\x20clie\
    nt\x20state\n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03C\x02\x15\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03C\x16\"\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03C%&\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03C'W\n\x0f\n\x08\x04\
    \x04\x02\x01\x08\xee\xfb\x03\x12\x03C(V\nw\n\x04\x04\x04\x02\x02\x12\x03\
    F\x02^\x1aj\x20upgraded\x20consensus\x20state,\x20only\x20contains\x20en\
    ough\x20information\x20to\x20serve\x20as\x20a\n\x20basis\x20of\x20trust\
    \x20in\x20update\x20logic\n\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03F\x02\
    \x15\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03F\x16%\n\x0c\n\x05\x04\x04\
    \x02\x02\x03\x12\x03F()\n\x0c\n\x05\x04\x04\x02\x02\x08\x12\x03F*]\n\x0f\
    \n\x08\x04\x04\x02\x02\x08\xee\xfb\x03\x12\x03F+\\\n;\n\x04\x04\x04\x02\
    \x03\x12\x03H\x02Z\x1a.\x20proof\x20that\x20old\x20chain\x20committed\
    \x20to\x20new\x20client\n\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03H\x02\
    \x07\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03H\x08\x1c\n\x0c\n\x05\x04\
    \x04\x02\x03\x03\x12\x03H\x1f\x20\n\x0c\n\x05\x04\x04\x02\x03\x08\x12\
    \x03H!Y\n\x0f\n\x08\x04\x04\x02\x03\x08\xee\xfb\x03\x12\x03H\"X\nD\n\x04\
    \x04\x04\x02\x04\x12\x03J\x02l\x1a7\x20proof\x20that\x20old\x20chain\x20\
    committed\x20to\x20new\x20consensus\x20state\n\n\x0c\n\x05\x04\x04\x02\
    \x04\x05\x12\x03J\x02\x07\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03J\x08%\
    \n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x03J()\n\x0c\n\x05\x04\x04\x02\x04\
    \x08\x12\x03J*k\n\x0f\n\x08\x04\x04\x02\x04\x08\xee\xfb\x03\x12\x03J+j\n\
    \x1d\n\x04\x04\x04\x02\x05\x12\x03L\x02\x14\x1a\x10\x20signer\x20address\
    \n\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03L\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\x05\x01\x12\x03L\t\x0f\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03L\x12\
    \x13\nR\n\x02\x04\x05\x12\x03P\0#\x1aG\x20MsgUpgradeClientResponse\x20de\
    fines\x20the\x20Msg/UpgradeClient\x20response\x20type.\n\n\n\n\x03\x04\
    \x05\x01\x12\x03P\x08\x20\nq\n\x02\x04\x06\x12\x04T\0^\x01\x1ae\x20MsgSu\
    bmitMisbehaviour\x20defines\x20an\x20sdk.Msg\x20type\x20that\x20submits\
    \x20Evidence\x20for\n\x20light\x20client\x20misbehaviour.\n\n\n\n\x03\
    \x04\x06\x01\x12\x03T\x08\x1d\n\n\n\x03\x04\x06\x07\x12\x03U\x02-\n\r\n\
    \x06\x04\x06\x07\x8d\xf4\x03\x12\x03U\x02-\n\n\n\x03\x04\x06\x07\x12\x03\
    V\x02-\n\r\n\x06\x04\x06\x07\x81\xf4\x03\x12\x03V\x02-\n'\n\x04\x04\x06\
    \x02\0\x12\x03Y\x02E\x1a\x1a\x20client\x20unique\x20identifier\n\n\x0c\n\
    \x05\x04\x06\x02\0\x05\x12\x03Y\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x03Y\t\x12\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03Y\x15\x16\n\x0c\n\
    \x05\x04\x06\x02\0\x08\x12\x03Y\x17D\n\x0f\n\x08\x04\x06\x02\0\x08\xee\
    \xfb\x03\x12\x03Y\x18C\n>\n\x04\x04\x06\x02\x01\x12\x03[\x02'\x1a1\x20mi\
    sbehaviour\x20used\x20for\x20freezing\x20the\x20light\x20client\n\n\x0c\
    \n\x05\x04\x06\x02\x01\x06\x12\x03[\x02\x15\n\x0c\n\x05\x04\x06\x02\x01\
    \x01\x12\x03[\x16\"\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03[%&\n\x1d\n\
    \x04\x04\x06\x02\x02\x12\x03]\x02\x14\x1a\x10\x20signer\x20address\n\n\
    \x0c\n\x05\x04\x06\x02\x02\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\x06\x02\
    \x02\x01\x12\x03]\t\x0f\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03]\x12\x13\
    \n]\n\x02\x04\x07\x12\x03b\0(\x1aR\x20MsgSubmitMisbehaviourResponse\x20d\
    efines\x20the\x20Msg/SubmitMisbehaviour\x20response\n\x20type.\n\n\n\n\
    \x03\x04\x07\x01\x12\x03b\x08%b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(MsgCreateClient::generated_message_descriptor_data());
            messages.push(MsgCreateClientResponse::generated_message_descriptor_data());
            messages.push(MsgUpdateClient::generated_message_descriptor_data());
            messages.push(MsgUpdateClientResponse::generated_message_descriptor_data());
            messages.push(MsgUpgradeClient::generated_message_descriptor_data());
            messages.push(MsgUpgradeClientResponse::generated_message_descriptor_data());
            messages.push(MsgSubmitMisbehaviour::generated_message_descriptor_data());
            messages.push(MsgSubmitMisbehaviourResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
