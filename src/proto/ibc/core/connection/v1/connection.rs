// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/core/connection/v1/connection.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  ConnectionEnd defines a stateful object on a chain connected to another
///  separate one.
///  NOTE: there must only be 2 defined ConnectionEnds to establish
///  a connection between two chains.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.ConnectionEnd)
pub struct ConnectionEnd {
    // message fields
    ///  client associated with this connection.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.ConnectionEnd.client_id)
    pub client_id: ::std::string::String,
    ///  IBC version which can be utilised to determine encodings or protocols for
    ///  channels or packets utilising this connection.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.ConnectionEnd.versions)
    pub versions: ::std::vec::Vec<Version>,
    ///  current state of the connection end.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.ConnectionEnd.state)
    pub state: ::protobuf::EnumOrUnknown<State>,
    ///  counterparty chain associated with this connection.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.ConnectionEnd.counterparty)
    pub counterparty: ::protobuf::MessageField<Counterparty>,
    ///  delay period that must pass before a consensus state can be used for
    ///  packet-verification NOTE: delay period logic is only implemented by some
    ///  clients.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.ConnectionEnd.delay_period)
    pub delay_period: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.ConnectionEnd.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectionEnd {
    fn default() -> &'a ConnectionEnd {
        <ConnectionEnd as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionEnd {
    pub fn new() -> ConnectionEnd {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &ConnectionEnd| { &m.client_id },
            |m: &mut ConnectionEnd| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "versions",
            |m: &ConnectionEnd| { &m.versions },
            |m: &mut ConnectionEnd| { &mut m.versions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &ConnectionEnd| { &m.state },
            |m: &mut ConnectionEnd| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Counterparty>(
            "counterparty",
            |m: &ConnectionEnd| { &m.counterparty },
            |m: &mut ConnectionEnd| { &mut m.counterparty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delay_period",
            |m: &ConnectionEnd| { &m.delay_period },
            |m: &mut ConnectionEnd| { &mut m.delay_period },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectionEnd>(
            "ConnectionEnd",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectionEnd {
    const NAME: &'static str = "ConnectionEnd";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    self.versions.push(is.read_message()?);
                },
                24 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counterparty)?;
                },
                40 => {
                    self.delay_period = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        for value in &self.versions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.state != ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.state.value());
        }
        if let Some(v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.delay_period != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.delay_period);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        for v in &self.versions {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.state != ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if let Some(v) = self.counterparty.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.delay_period != 0 {
            os.write_uint64(5, self.delay_period)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectionEnd {
        ConnectionEnd::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.versions.clear();
        self.state = ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED);
        self.counterparty.clear();
        self.delay_period = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectionEnd {
        static instance: ConnectionEnd = ConnectionEnd {
            client_id: ::std::string::String::new(),
            versions: ::std::vec::Vec::new(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            counterparty: ::protobuf::MessageField::none(),
            delay_period: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectionEnd {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectionEnd").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectionEnd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionEnd {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  IdentifiedConnection defines a connection with additional connection
///  identifier field.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.IdentifiedConnection)
pub struct IdentifiedConnection {
    // message fields
    ///  connection identifier.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.IdentifiedConnection.id)
    pub id: ::std::string::String,
    ///  client associated with this connection.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.IdentifiedConnection.client_id)
    pub client_id: ::std::string::String,
    ///  IBC version which can be utilised to determine encodings or protocols for
    ///  channels or packets utilising this connection
    // @@protoc_insertion_point(field:ibc.core.connection.v1.IdentifiedConnection.versions)
    pub versions: ::std::vec::Vec<Version>,
    ///  current state of the connection end.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.IdentifiedConnection.state)
    pub state: ::protobuf::EnumOrUnknown<State>,
    ///  counterparty chain associated with this connection.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.IdentifiedConnection.counterparty)
    pub counterparty: ::protobuf::MessageField<Counterparty>,
    ///  delay period associated with this connection.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.IdentifiedConnection.delay_period)
    pub delay_period: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.IdentifiedConnection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IdentifiedConnection {
    fn default() -> &'a IdentifiedConnection {
        <IdentifiedConnection as ::protobuf::Message>::default_instance()
    }
}

impl IdentifiedConnection {
    pub fn new() -> IdentifiedConnection {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &IdentifiedConnection| { &m.id },
            |m: &mut IdentifiedConnection| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &IdentifiedConnection| { &m.client_id },
            |m: &mut IdentifiedConnection| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "versions",
            |m: &IdentifiedConnection| { &m.versions },
            |m: &mut IdentifiedConnection| { &mut m.versions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &IdentifiedConnection| { &m.state },
            |m: &mut IdentifiedConnection| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Counterparty>(
            "counterparty",
            |m: &IdentifiedConnection| { &m.counterparty },
            |m: &mut IdentifiedConnection| { &mut m.counterparty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delay_period",
            |m: &IdentifiedConnection| { &m.delay_period },
            |m: &mut IdentifiedConnection| { &mut m.delay_period },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IdentifiedConnection>(
            "IdentifiedConnection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IdentifiedConnection {
    const NAME: &'static str = "IdentifiedConnection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.client_id = is.read_string()?;
                },
                26 => {
                    self.versions.push(is.read_message()?);
                },
                32 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counterparty)?;
                },
                48 => {
                    self.delay_period = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        for value in &self.versions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.state != ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.state.value());
        }
        if let Some(v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.delay_period != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.delay_period);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        for v in &self.versions {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.state != ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if let Some(v) = self.counterparty.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.delay_period != 0 {
            os.write_uint64(6, self.delay_period)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IdentifiedConnection {
        IdentifiedConnection::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.client_id.clear();
        self.versions.clear();
        self.state = ::protobuf::EnumOrUnknown::new(State::STATE_UNINITIALIZED_UNSPECIFIED);
        self.counterparty.clear();
        self.delay_period = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IdentifiedConnection {
        static instance: IdentifiedConnection = IdentifiedConnection {
            id: ::std::string::String::new(),
            client_id: ::std::string::String::new(),
            versions: ::std::vec::Vec::new(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            counterparty: ::protobuf::MessageField::none(),
            delay_period: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdentifiedConnection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IdentifiedConnection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IdentifiedConnection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentifiedConnection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Counterparty defines the counterparty chain associated with a connection end.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.Counterparty)
pub struct Counterparty {
    // message fields
    ///  identifies the client on the counterparty chain associated with a given
    ///  connection.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.Counterparty.client_id)
    pub client_id: ::std::string::String,
    ///  identifies the connection end on the counterparty chain associated with a
    ///  given connection.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.Counterparty.connection_id)
    pub connection_id: ::std::string::String,
    ///  commitment merkle prefix of the counterparty chain.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.Counterparty.prefix)
    pub prefix: ::protobuf::MessageField<super::commitment::MerklePrefix>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.Counterparty.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Counterparty {
    fn default() -> &'a Counterparty {
        <Counterparty as ::protobuf::Message>::default_instance()
    }
}

impl Counterparty {
    pub fn new() -> Counterparty {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &Counterparty| { &m.client_id },
            |m: &mut Counterparty| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &Counterparty| { &m.connection_id },
            |m: &mut Counterparty| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::commitment::MerklePrefix>(
            "prefix",
            |m: &Counterparty| { &m.prefix },
            |m: &mut Counterparty| { &mut m.prefix },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Counterparty>(
            "Counterparty",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Counterparty {
    const NAME: &'static str = "Counterparty";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    self.connection_id = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.prefix)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.connection_id);
        }
        if let Some(v) = self.prefix.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if !self.connection_id.is_empty() {
            os.write_string(2, &self.connection_id)?;
        }
        if let Some(v) = self.prefix.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Counterparty {
        Counterparty::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.connection_id.clear();
        self.prefix.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Counterparty {
        static instance: Counterparty = Counterparty {
            client_id: ::std::string::String::new(),
            connection_id: ::std::string::String::new(),
            prefix: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Counterparty {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Counterparty").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Counterparty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Counterparty {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ClientPaths define all the connection paths for a client state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.ClientPaths)
pub struct ClientPaths {
    // message fields
    ///  list of connection paths
    // @@protoc_insertion_point(field:ibc.core.connection.v1.ClientPaths.paths)
    pub paths: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.ClientPaths.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientPaths {
    fn default() -> &'a ClientPaths {
        <ClientPaths as ::protobuf::Message>::default_instance()
    }
}

impl ClientPaths {
    pub fn new() -> ClientPaths {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "paths",
            |m: &ClientPaths| { &m.paths },
            |m: &mut ClientPaths| { &mut m.paths },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientPaths>(
            "ClientPaths",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientPaths {
    const NAME: &'static str = "ClientPaths";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.paths.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.paths {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientPaths {
        ClientPaths::new()
    }

    fn clear(&mut self) {
        self.paths.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientPaths {
        static instance: ClientPaths = ClientPaths {
            paths: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientPaths {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientPaths").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientPaths {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientPaths {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ConnectionPaths define all the connection paths for a given client state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.ConnectionPaths)
pub struct ConnectionPaths {
    // message fields
    ///  client state unique identifier
    // @@protoc_insertion_point(field:ibc.core.connection.v1.ConnectionPaths.client_id)
    pub client_id: ::std::string::String,
    ///  list of connection paths
    // @@protoc_insertion_point(field:ibc.core.connection.v1.ConnectionPaths.paths)
    pub paths: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.ConnectionPaths.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectionPaths {
    fn default() -> &'a ConnectionPaths {
        <ConnectionPaths as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionPaths {
    pub fn new() -> ConnectionPaths {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &ConnectionPaths| { &m.client_id },
            |m: &mut ConnectionPaths| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "paths",
            |m: &ConnectionPaths| { &m.paths },
            |m: &mut ConnectionPaths| { &mut m.paths },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectionPaths>(
            "ConnectionPaths",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectionPaths {
    const NAME: &'static str = "ConnectionPaths";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    self.paths.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        for v in &self.paths {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectionPaths {
        ConnectionPaths::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.paths.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectionPaths {
        static instance: ConnectionPaths = ConnectionPaths {
            client_id: ::std::string::String::new(),
            paths: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectionPaths {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectionPaths").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectionPaths {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionPaths {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Version defines the versioning scheme used to negotiate the IBC verison in
///  the connection handshake.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.Version)
pub struct Version {
    // message fields
    ///  unique version identifier
    // @@protoc_insertion_point(field:ibc.core.connection.v1.Version.identifier)
    pub identifier: ::std::string::String,
    ///  list of features compatible with the specified identifier
    // @@protoc_insertion_point(field:ibc.core.connection.v1.Version.features)
    pub features: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.Version.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Version {
    fn default() -> &'a Version {
        <Version as ::protobuf::Message>::default_instance()
    }
}

impl Version {
    pub fn new() -> Version {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "identifier",
            |m: &Version| { &m.identifier },
            |m: &mut Version| { &mut m.identifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "features",
            |m: &Version| { &m.features },
            |m: &mut Version| { &mut m.features },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Version>(
            "Version",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Version {
    const NAME: &'static str = "Version";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.identifier = is.read_string()?;
                },
                18 => {
                    self.features.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.identifier.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.identifier);
        }
        for value in &self.features {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.identifier.is_empty() {
            os.write_string(1, &self.identifier)?;
        }
        for v in &self.features {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Version {
        Version::new()
    }

    fn clear(&mut self) {
        self.identifier.clear();
        self.features.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Version {
        static instance: Version = Version {
            identifier: ::std::string::String::new(),
            features: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Version {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Version").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Version {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Version {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Params defines the set of Connection parameters.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.Params)
pub struct Params {
    // message fields
    ///  maximum expected time per block (in nanoseconds), used to enforce block delay. This parameter should reflect the
    ///  largest amount of time that the chain might reasonably take to produce the next block under normal operating
    ///  conditions. A safe choice is 3-5x the expected time per block.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.Params.max_expected_time_per_block)
    pub max_expected_time_per_block: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.Params.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_expected_time_per_block",
            |m: &Params| { &m.max_expected_time_per_block },
            |m: &mut Params| { &mut m.max_expected_time_per_block },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Params>(
            "Params",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Params {
    const NAME: &'static str = "Params";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.max_expected_time_per_block = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.max_expected_time_per_block != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.max_expected_time_per_block);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.max_expected_time_per_block != 0 {
            os.write_uint64(1, self.max_expected_time_per_block)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Params {
        Params::new()
    }

    fn clear(&mut self) {
        self.max_expected_time_per_block = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Params {
        static instance: Params = Params {
            max_expected_time_per_block: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Params {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Params").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  State defines if a connection is in one of the following states:
///  INIT, TRYOPEN, OPEN or UNINITIALIZED.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ibc.core.connection.v1.State)
pub enum State {
    // @@protoc_insertion_point(enum_value:ibc.core.connection.v1.State.STATE_UNINITIALIZED_UNSPECIFIED)
    STATE_UNINITIALIZED_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:ibc.core.connection.v1.State.STATE_INIT)
    STATE_INIT = 1,
    // @@protoc_insertion_point(enum_value:ibc.core.connection.v1.State.STATE_TRYOPEN)
    STATE_TRYOPEN = 2,
    // @@protoc_insertion_point(enum_value:ibc.core.connection.v1.State.STATE_OPEN)
    STATE_OPEN = 3,
}

impl ::protobuf::Enum for State {
    const NAME: &'static str = "State";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<State> {
        match value {
            0 => ::std::option::Option::Some(State::STATE_UNINITIALIZED_UNSPECIFIED),
            1 => ::std::option::Option::Some(State::STATE_INIT),
            2 => ::std::option::Option::Some(State::STATE_TRYOPEN),
            3 => ::std::option::Option::Some(State::STATE_OPEN),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [State] = &[
        State::STATE_UNINITIALIZED_UNSPECIFIED,
        State::STATE_INIT,
        State::STATE_TRYOPEN,
        State::STATE_OPEN,
    ];
}

impl ::protobuf::EnumFull for State {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("State").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for State {
    fn default() -> Self {
        State::STATE_UNINITIALIZED_UNSPECIFIED
    }
}

impl State {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("State")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'ibc/core/connection/v1/connection.proto\x12\x16ibc.core.connection.v1\
    \x1a\x14gogoproto/gogo.proto\x1a'ibc/core/commitment/v1/commitment.proto\
    \"\xc6\x02\n\rConnectionEnd\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08cli\
    entIdB\x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12;\n\x08versions\x18\x02\
    \x20\x03(\x0b2\x1f.ibc.core.connection.v1.VersionR\x08versions\x123\n\
    \x05state\x18\x03\x20\x01(\x0e2\x1d.ibc.core.connection.v1.StateR\x05sta\
    te\x12N\n\x0ccounterparty\x18\x04\x20\x01(\x0b2$.ibc.core.connection.v1.\
    CounterpartyR\x0ccounterpartyB\x04\xc8\xde\x1f\0\x12:\n\x0cdelay_period\
    \x18\x05\x20\x01(\x04R\x0bdelayPeriodB\x17\xf2\xde\x1f\x13yaml:\"delay_p\
    eriod\":\x04\x88\xa0\x1f\0\"\xec\x02\n\x14IdentifiedConnection\x12\x1d\n\
    \x02id\x18\x01\x20\x01(\tR\x02idB\r\xf2\xde\x1f\tyaml:\"id\"\x121\n\tcli\
    ent_id\x18\x02\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"client\
    _id\"\x12;\n\x08versions\x18\x03\x20\x03(\x0b2\x1f.ibc.core.connection.v\
    1.VersionR\x08versions\x123\n\x05state\x18\x04\x20\x01(\x0e2\x1d.ibc.cor\
    e.connection.v1.StateR\x05state\x12N\n\x0ccounterparty\x18\x05\x20\x01(\
    \x0b2$.ibc.core.connection.v1.CounterpartyR\x0ccounterpartyB\x04\xc8\xde\
    \x1f\0\x12:\n\x0cdelay_period\x18\x06\x20\x01(\x04R\x0bdelayPeriodB\x17\
    \xf2\xde\x1f\x13yaml:\"delay_period\":\x04\x88\xa0\x1f\0\"\xca\x01\n\x0c\
    Counterparty\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\
    \xde\x1f\x10yaml:\"client_id\"\x12=\n\rconnection_id\x18\x02\x20\x01(\tR\
    \x0cconnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x12B\n\x06pr\
    efix\x18\x03\x20\x01(\x0b2$.ibc.core.commitment.v1.MerklePrefixR\x06pref\
    ixB\x04\xc8\xde\x1f\0:\x04\x88\xa0\x1f\0\"#\n\x0bClientPaths\x12\x14\n\
    \x05paths\x18\x01\x20\x03(\tR\x05paths\"Z\n\x0fConnectionPaths\x121\n\tc\
    lient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"clie\
    nt_id\"\x12\x14\n\x05paths\x18\x02\x20\x03(\tR\x05paths\"K\n\x07Version\
    \x12\x1e\n\nidentifier\x18\x01\x20\x01(\tR\nidentifier\x12\x1a\n\x08feat\
    ures\x18\x02\x20\x03(\tR\x08features:\x04\x88\xa0\x1f\0\"n\n\x06Params\
    \x12d\n\x1bmax_expected_time_per_block\x18\x01\x20\x01(\x04R\x17maxExpec\
    tedTimePerBlockB&\xf2\xde\x1f\"yaml:\"max_expected_time_per_block\"*\x99\
    \x01\n\x05State\x126\n\x1fSTATE_UNINITIALIZED_UNSPECIFIED\x10\0\x1a\x11\
    \x8a\x9d\x20\rUNINITIALIZED\x12\x18\n\nSTATE_INIT\x10\x01\x1a\x08\x8a\
    \x9d\x20\x04INIT\x12\x1e\n\rSTATE_TRYOPEN\x10\x02\x1a\x0b\x8a\x9d\x20\
    \x07TRYOPEN\x12\x18\n\nSTATE_OPEN\x10\x03\x1a\x08\x8a\x9d\x20\x04OPEN\
    \x1a\x04\x88\xa3\x1e\0B>Z<github.com/cosmos/ibc-go/v3/modules/core/03-co\
    nnection/typesJ\xde%\n\x06\x12\x04\0\0q\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0\x1f\n\x08\n\x01\x08\x12\x03\x04\0S\n\
    \t\n\x02\x08\x0b\x12\x03\x04\0S\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\
    \x02\x03\x01\x12\x03\x07\01\n\xde\x02\n\x02\x04\0\x12\x04\x10\0\x1f\x01\
    \x1a\xba\x01\x20ConnectionEnd\x20defines\x20a\x20stateful\x20object\x20o\
    n\x20a\x20chain\x20connected\x20to\x20another\n\x20separate\x20one.\n\
    \x20NOTE:\x20there\x20must\x20only\x20be\x202\x20defined\x20ConnectionEn\
    ds\x20to\x20establish\n\x20a\x20connection\x20between\x20two\x20chains.\
    \n2\x94\x01\x20ICS03\x20-\x20Connection\x20Data\x20Structures\x20as\x20d\
    efined\x20in\n\x20https://github.com/cosmos/ibc/blob/master/spec/core/ic\
    s-003-connection-semantics#data-structures\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x10\x08\x15\n\n\n\x03\x04\0\x07\x12\x03\x11\x02-\n\r\n\x06\x04\0\x07\
    \x81\xf4\x03\x12\x03\x11\x02-\n6\n\x04\x04\0\x02\0\x12\x03\x13\x02E\x1a)\
    \x20client\x20associated\x20with\x20this\x20connection.\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x13\t\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x13\x15\x16\n\x0c\n\x05\
    \x04\0\x02\0\x08\x12\x03\x13\x17D\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\
    \x03\x12\x03\x13\x18C\n\x88\x01\n\x04\x04\0\x02\x01\x12\x03\x16\x02\x20\
    \x1a{\x20IBC\x20version\x20which\x20can\x20be\x20utilised\x20to\x20deter\
    mine\x20encodings\x20or\x20protocols\x20for\n\x20channels\x20or\x20packe\
    ts\x20utilising\x20this\x20connection.\n\n\x0c\n\x05\x04\0\x02\x01\x04\
    \x12\x03\x16\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x16\x0b\x12\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x16\x13\x1b\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x16\x1e\x1f\n3\n\x04\x04\0\x02\x02\x12\x03\x18\x02\x12\
    \x1a&\x20current\x20state\x20of\x20the\x20connection\x20end.\n\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\x18\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x18\x08\r\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x18\x10\x11\nB\
    \n\x04\x04\0\x02\x03\x12\x03\x1a\x02?\x1a5\x20counterparty\x20chain\x20a\
    ssociated\x20with\x20this\x20connection.\n\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03\x1a\x02\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1a\x0f\x1b\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1a\x1e\x1f\n\x0c\n\x05\x04\0\x02\
    \x03\x08\x12\x03\x1a\x20>\n\x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\x03\x12\
    \x03\x1a!=\n\xa8\x01\n\x04\x04\0\x02\x04\x12\x03\x1e\x02K\x1a\x9a\x01\
    \x20delay\x20period\x20that\x20must\x20pass\x20before\x20a\x20consensus\
    \x20state\x20can\x20be\x20used\x20for\n\x20packet-verification\x20NOTE:\
    \x20delay\x20period\x20logic\x20is\x20only\x20implemented\x20by\x20some\
    \n\x20clients.\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x1e\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x04\x01\x12\x03\x1e\t\x15\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x1e\x18\x19\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\x1e\x1aJ\n\
    \x0f\n\x08\x04\0\x02\x04\x08\xee\xfb\x03\x12\x03\x1e\x1bI\ne\n\x02\x04\
    \x01\x12\x04#\02\x01\x1aY\x20IdentifiedConnection\x20defines\x20a\x20con\
    nection\x20with\x20additional\x20connection\n\x20identifier\x20field.\n\
    \n\n\n\x03\x04\x01\x01\x12\x03#\x08\x1c\n\n\n\x03\x04\x01\x07\x12\x03$\
    \x02-\n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03$\x02-\n%\n\x04\x04\x01\
    \x02\0\x12\x03&\x027\x1a\x18\x20connection\x20identifier.\n\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03&\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03&\x0e\x0f\n\x0c\n\x05\
    \x04\x01\x02\0\x08\x12\x03&\x106\n\x0f\n\x08\x04\x01\x02\0\x08\xee\xfb\
    \x03\x12\x03&\x115\n6\n\x04\x04\x01\x02\x01\x12\x03(\x02E\x1a)\x20client\
    \x20associated\x20with\x20this\x20connection.\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03(\t\x12\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03(\x15\x16\n\x0c\n\x05\x04\x01\
    \x02\x01\x08\x12\x03(\x17D\n\x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\
    \x12\x03(\x18C\n\x87\x01\n\x04\x04\x01\x02\x02\x12\x03+\x02\x20\x1az\x20\
    IBC\x20version\x20which\x20can\x20be\x20utilised\x20to\x20determine\x20e\
    ncodings\x20or\x20protocols\x20for\n\x20channels\x20or\x20packets\x20uti\
    lising\x20this\x20connection\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03+\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03+\x0b\x12\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03+\x13\x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03+\x1e\x1f\n3\n\x04\x04\x01\x02\x03\x12\x03-\x02\x12\x1a&\x20current\
    \x20state\x20of\x20the\x20connection\x20end.\n\n\x0c\n\x05\x04\x01\x02\
    \x03\x06\x12\x03-\x02\x07\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03-\x08\r\
    \n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03-\x10\x11\nB\n\x04\x04\x01\x02\
    \x04\x12\x03/\x02?\x1a5\x20counterparty\x20chain\x20associated\x20with\
    \x20this\x20connection.\n\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03/\x02\
    \x0e\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03/\x0f\x1b\n\x0c\n\x05\x04\
    \x01\x02\x04\x03\x12\x03/\x1e\x1f\n\x0c\n\x05\x04\x01\x02\x04\x08\x12\
    \x03/\x20>\n\x0f\n\x08\x04\x01\x02\x04\x08\xe9\xfb\x03\x12\x03/!=\n<\n\
    \x04\x04\x01\x02\x05\x12\x031\x02K\x1a/\x20delay\x20period\x20associated\
    \x20with\x20this\x20connection.\n\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\
    \x031\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x031\t\x15\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x031\x18\x19\n\x0c\n\x05\x04\x01\x02\x05\x08\
    \x12\x031\x1aJ\n\x0f\n\x08\x04\x01\x02\x05\x08\xee\xfb\x03\x12\x031\x1bI\
    \nu\n\x02\x05\0\x12\x046\0B\x01\x1ai\x20State\x20defines\x20if\x20a\x20c\
    onnection\x20is\x20in\x20one\x20of\x20the\x20following\x20states:\n\x20I\
    NIT,\x20TRYOPEN,\x20OPEN\x20or\x20UNINITIALIZED.\n\n\n\n\x03\x05\0\x01\
    \x12\x036\x05\n\n\n\n\x03\x05\0\x03\x12\x037\x021\n\r\n\x06\x05\0\x03\
    \xb1\xe4\x03\x12\x037\x021\n\x1c\n\x04\x05\0\x02\0\x12\x03:\x02[\x1a\x0f\
    \x20Default\x20State\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03:\x02!\n\x0c\n\
    \x05\x05\0\x02\0\x02\x12\x03:$%\n\x0c\n\x05\x05\0\x02\0\x03\x12\x03:&Z\n\
    \x0f\n\x08\x05\0\x02\0\x03\xd1\x83\x04\x12\x03:'Y\nG\n\x04\x05\0\x02\x01\
    \x12\x03<\x02=\x1a:\x20A\x20connection\x20end\x20has\x20just\x20started\
    \x20the\x20opening\x20handshake.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\
    <\x02\x0c\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03<\x0f\x10\n\x0c\n\x05\x05\
    \0\x02\x01\x03\x12\x03<\x11<\n\x0f\n\x08\x05\0\x02\x01\x03\xd1\x83\x04\
    \x12\x03<\x12;\n_\n\x04\x05\0\x02\x02\x12\x03?\x02C\x1aR\x20A\x20connect\
    ion\x20end\x20has\x20acknowledged\x20the\x20handshake\x20step\x20on\x20t\
    he\x20counterparty\n\x20chain.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03?\
    \x02\x0f\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03?\x12\x13\n\x0c\n\x05\x05\
    \0\x02\x02\x03\x12\x03?\x14B\n\x0f\n\x08\x05\0\x02\x02\x03\xd1\x83\x04\
    \x12\x03?\x15A\n<\n\x04\x05\0\x02\x03\x12\x03A\x02=\x1a/\x20A\x20connect\
    ion\x20end\x20has\x20completed\x20the\x20handshake.\n\n\x0c\n\x05\x05\0\
    \x02\x03\x01\x12\x03A\x02\x0c\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03A\x0f\
    \x10\n\x0c\n\x05\x05\0\x02\x03\x03\x12\x03A\x11<\n\x0f\n\x08\x05\0\x02\
    \x03\x03\xd1\x83\x04\x12\x03A\x12;\n[\n\x02\x04\x02\x12\x04E\0P\x01\x1aO\
    \x20Counterparty\x20defines\x20the\x20counterparty\x20chain\x20associate\
    d\x20with\x20a\x20connection\x20end.\n\n\n\n\x03\x04\x02\x01\x12\x03E\
    \x08\x14\n\n\n\x03\x04\x02\x07\x12\x03F\x02-\n\r\n\x06\x04\x02\x07\x81\
    \xf4\x03\x12\x03F\x02-\nc\n\x04\x04\x02\x02\0\x12\x03J\x02E\x1aV\x20iden\
    tifies\x20the\x20client\x20on\x20the\x20counterparty\x20chain\x20associa\
    ted\x20with\x20a\x20given\n\x20connection.\n\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03J\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03J\t\x12\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03J\x15\x16\n\x0c\n\x05\x04\x02\x02\0\x08\
    \x12\x03J\x17D\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x03J\x18C\n\
    k\n\x04\x04\x02\x02\x01\x12\x03M\x02M\x1a^\x20identifies\x20the\x20conne\
    ction\x20end\x20on\x20the\x20counterparty\x20chain\x20associated\x20with\
    \x20a\n\x20given\x20connection.\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03M\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03M\t\x16\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03M\x19\x1a\n\x0c\n\x05\x04\x02\x02\x01\x08\
    \x12\x03M\x1bL\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\x03M\x1cK\
    \nB\n\x04\x04\x02\x02\x02\x12\x03O\x02P\x1a5\x20commitment\x20merkle\x20\
    prefix\x20of\x20the\x20counterparty\x20chain.\n\n\x0c\n\x05\x04\x02\x02\
    \x02\x06\x12\x03O\x02%\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03O&,\n\x0c\
    \n\x05\x04\x02\x02\x02\x03\x12\x03O/0\n\x0c\n\x05\x04\x02\x02\x02\x08\
    \x12\x03O1O\n\x0f\n\x08\x04\x02\x02\x02\x08\xe9\xfb\x03\x12\x03O2N\nM\n\
    \x02\x04\x03\x12\x04S\0V\x01\x1aA\x20ClientPaths\x20define\x20all\x20the\
    \x20connection\x20paths\x20for\x20a\x20client\x20state.\n\n\n\n\x03\x04\
    \x03\x01\x12\x03S\x08\x13\n'\n\x04\x04\x03\x02\0\x12\x03U\x02\x1c\x1a\
    \x1a\x20list\x20of\x20connection\x20paths\n\n\x0c\n\x05\x04\x03\x02\0\
    \x04\x12\x03U\x02\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03U\x0b\x11\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03U\x12\x17\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03U\x1a\x1b\nW\n\x02\x04\x04\x12\x04Y\0^\x01\x1aK\x20ConnectionPat\
    hs\x20define\x20all\x20the\x20connection\x20paths\x20for\x20a\x20given\
    \x20client\x20state.\n\n\n\n\x03\x04\x04\x01\x12\x03Y\x08\x17\n-\n\x04\
    \x04\x04\x02\0\x12\x03[\x02E\x1a\x20\x20client\x20state\x20unique\x20ide\
    ntifier\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03[\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03[\t\x12\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03[\x15\
    \x16\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03[\x17D\n\x0f\n\x08\x04\x04\x02\
    \0\x08\xee\xfb\x03\x12\x03[\x18C\n'\n\x04\x04\x04\x02\x01\x12\x03]\x02\
    \x1c\x1a\x1a\x20list\x20of\x20connection\x20paths\n\n\x0c\n\x05\x04\x04\
    \x02\x01\x04\x12\x03]\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03]\x0b\
    \x11\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03]\x12\x17\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03]\x1a\x1b\ns\n\x02\x04\x05\x12\x04b\0i\x01\x1ag\
    \x20Version\x20defines\x20the\x20versioning\x20scheme\x20used\x20to\x20n\
    egotiate\x20the\x20IBC\x20verison\x20in\n\x20the\x20connection\x20handsh\
    ake.\n\n\n\n\x03\x04\x05\x01\x12\x03b\x08\x0f\n\n\n\x03\x04\x05\x07\x12\
    \x03c\x02-\n\r\n\x06\x04\x05\x07\x81\xf4\x03\x12\x03c\x02-\n(\n\x04\x04\
    \x05\x02\0\x12\x03f\x02\x18\x1a\x1b\x20unique\x20version\x20identifier\n\
    \n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03f\x02\x08\n\x0c\n\x05\x04\x05\x02\
    \0\x01\x12\x03f\t\x13\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03f\x16\x17\nH\
    \n\x04\x04\x05\x02\x01\x12\x03h\x02\x1f\x1a;\x20list\x20of\x20features\
    \x20compatible\x20with\x20the\x20specified\x20identifier\n\n\x0c\n\x05\
    \x04\x05\x02\x01\x04\x12\x03h\x02\n\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\
    \x03h\x0b\x11\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03h\x12\x1a\n\x0c\n\
    \x05\x04\x05\x02\x01\x03\x12\x03h\x1d\x1e\n>\n\x02\x04\x06\x12\x04l\0q\
    \x01\x1a2\x20Params\x20defines\x20the\x20set\x20of\x20Connection\x20para\
    meters.\n\n\n\n\x03\x04\x06\x01\x12\x03l\x08\x0e\n\xae\x02\n\x04\x04\x06\
    \x02\0\x12\x03p\x02i\x1a\xa0\x02\x20maximum\x20expected\x20time\x20per\
    \x20block\x20(in\x20nanoseconds),\x20used\x20to\x20enforce\x20block\x20d\
    elay.\x20This\x20parameter\x20should\x20reflect\x20the\n\x20largest\x20a\
    mount\x20of\x20time\x20that\x20the\x20chain\x20might\x20reasonably\x20ta\
    ke\x20to\x20produce\x20the\x20next\x20block\x20under\x20normal\x20operat\
    ing\n\x20conditions.\x20A\x20safe\x20choice\x20is\x203-5x\x20the\x20expe\
    cted\x20time\x20per\x20block.\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03p\
    \x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03p\t$\n\x0c\n\x05\x04\x06\
    \x02\0\x03\x12\x03p'(\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03p)h\n\x0f\n\
    \x08\x04\x06\x02\0\x08\xee\xfb\x03\x12\x03p*gb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::commitment::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(ConnectionEnd::generated_message_descriptor_data());
            messages.push(IdentifiedConnection::generated_message_descriptor_data());
            messages.push(Counterparty::generated_message_descriptor_data());
            messages.push(ClientPaths::generated_message_descriptor_data());
            messages.push(ConnectionPaths::generated_message_descriptor_data());
            messages.push(Version::generated_message_descriptor_data());
            messages.push(Params::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(State::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
