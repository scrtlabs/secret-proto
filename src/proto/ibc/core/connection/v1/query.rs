// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/core/connection/v1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryConnectionRequest is the request type for the Query/Connection RPC
///  method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryConnectionRequest)
pub struct QueryConnectionRequest {
    // message fields
    ///  connection unique identifier
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionRequest.connection_id)
    pub connection_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryConnectionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryConnectionRequest {
    fn default() -> &'a QueryConnectionRequest {
        <QueryConnectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionRequest {
    pub fn new() -> QueryConnectionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &QueryConnectionRequest| { &m.connection_id },
            |m: &mut QueryConnectionRequest| { &mut m.connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryConnectionRequest>(
            "QueryConnectionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryConnectionRequest {
    const NAME: &'static str = "QueryConnectionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryConnectionRequest {
        QueryConnectionRequest::new()
    }

    fn clear(&mut self) {
        self.connection_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryConnectionRequest {
        static instance: QueryConnectionRequest = QueryConnectionRequest {
            connection_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryConnectionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryConnectionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryConnectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionResponse is the response type for the Query/Connection RPC
///  method. Besides the connection end, it includes a proof and the height from
///  which the proof was retrieved.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryConnectionResponse)
pub struct QueryConnectionResponse {
    // message fields
    ///  connection associated with the request identifier
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionResponse.connection)
    pub connection: ::protobuf::MessageField<super::connection::ConnectionEnd>,
    ///  merkle proof of existence
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionResponse.proof)
    pub proof: ::std::vec::Vec<u8>,
    ///  height at which the proof was retrieved
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionResponse.proof_height)
    pub proof_height: ::protobuf::MessageField<super::client::Height>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryConnectionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryConnectionResponse {
    fn default() -> &'a QueryConnectionResponse {
        <QueryConnectionResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionResponse {
    pub fn new() -> QueryConnectionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::connection::ConnectionEnd>(
            "connection",
            |m: &QueryConnectionResponse| { &m.connection },
            |m: &mut QueryConnectionResponse| { &mut m.connection },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof",
            |m: &QueryConnectionResponse| { &m.proof },
            |m: &mut QueryConnectionResponse| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "proof_height",
            |m: &QueryConnectionResponse| { &m.proof_height },
            |m: &mut QueryConnectionResponse| { &mut m.proof_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryConnectionResponse>(
            "QueryConnectionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryConnectionResponse {
    const NAME: &'static str = "QueryConnectionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.connection)?;
                },
                18 => {
                    self.proof = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof_height)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof);
        }
        if let Some(v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.connection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(2, &self.proof)?;
        }
        if let Some(v) = self.proof_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryConnectionResponse {
        QueryConnectionResponse::new()
    }

    fn clear(&mut self) {
        self.connection.clear();
        self.proof.clear();
        self.proof_height.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryConnectionResponse {
        static instance: QueryConnectionResponse = QueryConnectionResponse {
            connection: ::protobuf::MessageField::none(),
            proof: ::std::vec::Vec::new(),
            proof_height: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryConnectionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryConnectionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryConnectionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionsRequest is the request type for the Query/Connections RPC
///  method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryConnectionsRequest)
pub struct QueryConnectionsRequest {
    // message fields
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionsRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryConnectionsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryConnectionsRequest {
    fn default() -> &'a QueryConnectionsRequest {
        <QueryConnectionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionsRequest {
    pub fn new() -> QueryConnectionsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryConnectionsRequest| { &m.pagination },
            |m: &mut QueryConnectionsRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryConnectionsRequest>(
            "QueryConnectionsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryConnectionsRequest {
    const NAME: &'static str = "QueryConnectionsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryConnectionsRequest {
        QueryConnectionsRequest::new()
    }

    fn clear(&mut self) {
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryConnectionsRequest {
        static instance: QueryConnectionsRequest = QueryConnectionsRequest {
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryConnectionsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryConnectionsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryConnectionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionsResponse is the response type for the Query/Connections RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryConnectionsResponse)
pub struct QueryConnectionsResponse {
    // message fields
    ///  list of stored connections of the chain.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionsResponse.connections)
    pub connections: ::std::vec::Vec<super::connection::IdentifiedConnection>,
    ///  pagination response
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionsResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    ///  query block height
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionsResponse.height)
    pub height: ::protobuf::MessageField<super::client::Height>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryConnectionsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryConnectionsResponse {
    fn default() -> &'a QueryConnectionsResponse {
        <QueryConnectionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionsResponse {
    pub fn new() -> QueryConnectionsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "connections",
            |m: &QueryConnectionsResponse| { &m.connections },
            |m: &mut QueryConnectionsResponse| { &mut m.connections },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryConnectionsResponse| { &m.pagination },
            |m: &mut QueryConnectionsResponse| { &mut m.pagination },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "height",
            |m: &QueryConnectionsResponse| { &m.height },
            |m: &mut QueryConnectionsResponse| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryConnectionsResponse>(
            "QueryConnectionsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryConnectionsResponse {
    const NAME: &'static str = "QueryConnectionsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connections.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.height)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.connections {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.connections {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryConnectionsResponse {
        QueryConnectionsResponse::new()
    }

    fn clear(&mut self) {
        self.connections.clear();
        self.pagination.clear();
        self.height.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryConnectionsResponse {
        static instance: QueryConnectionsResponse = QueryConnectionsResponse {
            connections: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            height: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryConnectionsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryConnectionsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryConnectionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryClientConnectionsRequest is the request type for the
///  Query/ClientConnections RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryClientConnectionsRequest)
pub struct QueryClientConnectionsRequest {
    // message fields
    ///  client identifier associated with a connection
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryClientConnectionsRequest.client_id)
    pub client_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryClientConnectionsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryClientConnectionsRequest {
    fn default() -> &'a QueryClientConnectionsRequest {
        <QueryClientConnectionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryClientConnectionsRequest {
    pub fn new() -> QueryClientConnectionsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &QueryClientConnectionsRequest| { &m.client_id },
            |m: &mut QueryClientConnectionsRequest| { &mut m.client_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryClientConnectionsRequest>(
            "QueryClientConnectionsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryClientConnectionsRequest {
    const NAME: &'static str = "QueryClientConnectionsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryClientConnectionsRequest {
        QueryClientConnectionsRequest::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryClientConnectionsRequest {
        static instance: QueryClientConnectionsRequest = QueryClientConnectionsRequest {
            client_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryClientConnectionsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryClientConnectionsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryClientConnectionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryClientConnectionsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryClientConnectionsResponse is the response type for the
///  Query/ClientConnections RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryClientConnectionsResponse)
pub struct QueryClientConnectionsResponse {
    // message fields
    ///  slice of all the connection paths associated with a client.
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryClientConnectionsResponse.connection_paths)
    pub connection_paths: ::std::vec::Vec<::std::string::String>,
    ///  merkle proof of existence
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryClientConnectionsResponse.proof)
    pub proof: ::std::vec::Vec<u8>,
    ///  height at which the proof was generated
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryClientConnectionsResponse.proof_height)
    pub proof_height: ::protobuf::MessageField<super::client::Height>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryClientConnectionsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryClientConnectionsResponse {
    fn default() -> &'a QueryClientConnectionsResponse {
        <QueryClientConnectionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryClientConnectionsResponse {
    pub fn new() -> QueryClientConnectionsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "connection_paths",
            |m: &QueryClientConnectionsResponse| { &m.connection_paths },
            |m: &mut QueryClientConnectionsResponse| { &mut m.connection_paths },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof",
            |m: &QueryClientConnectionsResponse| { &m.proof },
            |m: &mut QueryClientConnectionsResponse| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "proof_height",
            |m: &QueryClientConnectionsResponse| { &m.proof_height },
            |m: &mut QueryClientConnectionsResponse| { &mut m.proof_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryClientConnectionsResponse>(
            "QueryClientConnectionsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryClientConnectionsResponse {
    const NAME: &'static str = "QueryClientConnectionsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_paths.push(is.read_string()?);
                },
                18 => {
                    self.proof = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof_height)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.connection_paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof);
        }
        if let Some(v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.connection_paths {
            os.write_string(1, &v)?;
        };
        if !self.proof.is_empty() {
            os.write_bytes(2, &self.proof)?;
        }
        if let Some(v) = self.proof_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryClientConnectionsResponse {
        QueryClientConnectionsResponse::new()
    }

    fn clear(&mut self) {
        self.connection_paths.clear();
        self.proof.clear();
        self.proof_height.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryClientConnectionsResponse {
        static instance: QueryClientConnectionsResponse = QueryClientConnectionsResponse {
            connection_paths: ::std::vec::Vec::new(),
            proof: ::std::vec::Vec::new(),
            proof_height: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryClientConnectionsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryClientConnectionsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryClientConnectionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryClientConnectionsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionClientStateRequest is the request type for the
///  Query/ConnectionClientState RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryConnectionClientStateRequest)
pub struct QueryConnectionClientStateRequest {
    // message fields
    ///  connection identifier
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionClientStateRequest.connection_id)
    pub connection_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryConnectionClientStateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryConnectionClientStateRequest {
    fn default() -> &'a QueryConnectionClientStateRequest {
        <QueryConnectionClientStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionClientStateRequest {
    pub fn new() -> QueryConnectionClientStateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &QueryConnectionClientStateRequest| { &m.connection_id },
            |m: &mut QueryConnectionClientStateRequest| { &mut m.connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryConnectionClientStateRequest>(
            "QueryConnectionClientStateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryConnectionClientStateRequest {
    const NAME: &'static str = "QueryConnectionClientStateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryConnectionClientStateRequest {
        QueryConnectionClientStateRequest::new()
    }

    fn clear(&mut self) {
        self.connection_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryConnectionClientStateRequest {
        static instance: QueryConnectionClientStateRequest = QueryConnectionClientStateRequest {
            connection_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryConnectionClientStateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryConnectionClientStateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryConnectionClientStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionClientStateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionClientStateResponse is the response type for the
///  Query/ConnectionClientState RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryConnectionClientStateResponse)
pub struct QueryConnectionClientStateResponse {
    // message fields
    ///  client state associated with the channel
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionClientStateResponse.identified_client_state)
    pub identified_client_state: ::protobuf::MessageField<super::client::IdentifiedClientState>,
    ///  merkle proof of existence
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionClientStateResponse.proof)
    pub proof: ::std::vec::Vec<u8>,
    ///  height at which the proof was retrieved
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionClientStateResponse.proof_height)
    pub proof_height: ::protobuf::MessageField<super::client::Height>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryConnectionClientStateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryConnectionClientStateResponse {
    fn default() -> &'a QueryConnectionClientStateResponse {
        <QueryConnectionClientStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionClientStateResponse {
    pub fn new() -> QueryConnectionClientStateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::IdentifiedClientState>(
            "identified_client_state",
            |m: &QueryConnectionClientStateResponse| { &m.identified_client_state },
            |m: &mut QueryConnectionClientStateResponse| { &mut m.identified_client_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof",
            |m: &QueryConnectionClientStateResponse| { &m.proof },
            |m: &mut QueryConnectionClientStateResponse| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "proof_height",
            |m: &QueryConnectionClientStateResponse| { &m.proof_height },
            |m: &mut QueryConnectionClientStateResponse| { &mut m.proof_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryConnectionClientStateResponse>(
            "QueryConnectionClientStateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryConnectionClientStateResponse {
    const NAME: &'static str = "QueryConnectionClientStateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.identified_client_state)?;
                },
                18 => {
                    self.proof = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof_height)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.identified_client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof);
        }
        if let Some(v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.identified_client_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(2, &self.proof)?;
        }
        if let Some(v) = self.proof_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryConnectionClientStateResponse {
        QueryConnectionClientStateResponse::new()
    }

    fn clear(&mut self) {
        self.identified_client_state.clear();
        self.proof.clear();
        self.proof_height.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryConnectionClientStateResponse {
        static instance: QueryConnectionClientStateResponse = QueryConnectionClientStateResponse {
            identified_client_state: ::protobuf::MessageField::none(),
            proof: ::std::vec::Vec::new(),
            proof_height: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryConnectionClientStateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryConnectionClientStateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryConnectionClientStateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionClientStateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionConsensusStateRequest is the request type for the
///  Query/ConnectionConsensusState RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryConnectionConsensusStateRequest)
pub struct QueryConnectionConsensusStateRequest {
    // message fields
    ///  connection identifier
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionConsensusStateRequest.connection_id)
    pub connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionConsensusStateRequest.revision_number)
    pub revision_number: u64,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionConsensusStateRequest.revision_height)
    pub revision_height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryConnectionConsensusStateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryConnectionConsensusStateRequest {
    fn default() -> &'a QueryConnectionConsensusStateRequest {
        <QueryConnectionConsensusStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionConsensusStateRequest {
    pub fn new() -> QueryConnectionConsensusStateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &QueryConnectionConsensusStateRequest| { &m.connection_id },
            |m: &mut QueryConnectionConsensusStateRequest| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "revision_number",
            |m: &QueryConnectionConsensusStateRequest| { &m.revision_number },
            |m: &mut QueryConnectionConsensusStateRequest| { &mut m.revision_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "revision_height",
            |m: &QueryConnectionConsensusStateRequest| { &m.revision_height },
            |m: &mut QueryConnectionConsensusStateRequest| { &mut m.revision_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryConnectionConsensusStateRequest>(
            "QueryConnectionConsensusStateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryConnectionConsensusStateRequest {
    const NAME: &'static str = "QueryConnectionConsensusStateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_id = is.read_string()?;
                },
                16 => {
                    self.revision_number = is.read_uint64()?;
                },
                24 => {
                    self.revision_height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        if self.revision_number != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.revision_number);
        }
        if self.revision_height != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.revision_height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        if self.revision_number != 0 {
            os.write_uint64(2, self.revision_number)?;
        }
        if self.revision_height != 0 {
            os.write_uint64(3, self.revision_height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryConnectionConsensusStateRequest {
        QueryConnectionConsensusStateRequest::new()
    }

    fn clear(&mut self) {
        self.connection_id.clear();
        self.revision_number = 0;
        self.revision_height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryConnectionConsensusStateRequest {
        static instance: QueryConnectionConsensusStateRequest = QueryConnectionConsensusStateRequest {
            connection_id: ::std::string::String::new(),
            revision_number: 0,
            revision_height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryConnectionConsensusStateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryConnectionConsensusStateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryConnectionConsensusStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionConsensusStateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionConsensusStateResponse is the response type for the
///  Query/ConnectionConsensusState RPC method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.QueryConnectionConsensusStateResponse)
pub struct QueryConnectionConsensusStateResponse {
    // message fields
    ///  consensus state associated with the channel
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionConsensusStateResponse.consensus_state)
    pub consensus_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  client ID associated with the consensus state
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionConsensusStateResponse.client_id)
    pub client_id: ::std::string::String,
    ///  merkle proof of existence
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionConsensusStateResponse.proof)
    pub proof: ::std::vec::Vec<u8>,
    ///  height at which the proof was retrieved
    // @@protoc_insertion_point(field:ibc.core.connection.v1.QueryConnectionConsensusStateResponse.proof_height)
    pub proof_height: ::protobuf::MessageField<super::client::Height>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.QueryConnectionConsensusStateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryConnectionConsensusStateResponse {
    fn default() -> &'a QueryConnectionConsensusStateResponse {
        <QueryConnectionConsensusStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionConsensusStateResponse {
    pub fn new() -> QueryConnectionConsensusStateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "consensus_state",
            |m: &QueryConnectionConsensusStateResponse| { &m.consensus_state },
            |m: &mut QueryConnectionConsensusStateResponse| { &mut m.consensus_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &QueryConnectionConsensusStateResponse| { &m.client_id },
            |m: &mut QueryConnectionConsensusStateResponse| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof",
            |m: &QueryConnectionConsensusStateResponse| { &m.proof },
            |m: &mut QueryConnectionConsensusStateResponse| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "proof_height",
            |m: &QueryConnectionConsensusStateResponse| { &m.proof_height },
            |m: &mut QueryConnectionConsensusStateResponse| { &mut m.proof_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryConnectionConsensusStateResponse>(
            "QueryConnectionConsensusStateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryConnectionConsensusStateResponse {
    const NAME: &'static str = "QueryConnectionConsensusStateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_state)?;
                },
                18 => {
                    self.client_id = is.read_string()?;
                },
                26 => {
                    self.proof = is.read_bytes()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof_height)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.proof);
        }
        if let Some(v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.consensus_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(3, &self.proof)?;
        }
        if let Some(v) = self.proof_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryConnectionConsensusStateResponse {
        QueryConnectionConsensusStateResponse::new()
    }

    fn clear(&mut self) {
        self.consensus_state.clear();
        self.client_id.clear();
        self.proof.clear();
        self.proof_height.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryConnectionConsensusStateResponse {
        static instance: QueryConnectionConsensusStateResponse = QueryConnectionConsensusStateResponse {
            consensus_state: ::protobuf::MessageField::none(),
            client_id: ::std::string::String::new(),
            proof: ::std::vec::Vec::new(),
            proof_height: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryConnectionConsensusStateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryConnectionConsensusStateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryConnectionConsensusStateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionConsensusStateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"ibc/core/connection/v1/query.proto\x12\x16ibc.core.connection.v1\x1a\
    \x14gogoproto/gogo.proto\x1a*cosmos/base/query/v1beta1/pagination.proto\
    \x1a\x1fibc/core/client/v1/client.proto\x1a'ibc/core/connection/v1/conne\
    ction.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x19google/protobuf/a\
    ny.proto\"=\n\x16QueryConnectionRequest\x12#\n\rconnection_id\x18\x01\
    \x20\x01(\tR\x0cconnectionId\"\xbb\x01\n\x17QueryConnectionResponse\x12E\
    \n\nconnection\x18\x01\x20\x01(\x0b2%.ibc.core.connection.v1.ConnectionE\
    ndR\nconnection\x12\x14\n\x05proof\x18\x02\x20\x01(\x0cR\x05proof\x12C\n\
    \x0cproof_height\x18\x03\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\
    \x0bproofHeightB\x04\xc8\xde\x1f\0\"a\n\x17QueryConnectionsRequest\x12F\
    \n\npagination\x18\x01\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequ\
    estR\npagination\"\xed\x01\n\x18QueryConnectionsResponse\x12N\n\x0bconne\
    ctions\x18\x01\x20\x03(\x0b2,.ibc.core.connection.v1.IdentifiedConnectio\
    nR\x0bconnections\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cosmos.base.\
    query.v1beta1.PageResponseR\npagination\x128\n\x06height\x18\x03\x20\x01\
    (\x0b2\x1a.ibc.core.client.v1.HeightR\x06heightB\x04\xc8\xde\x1f\0\"<\n\
    \x1dQueryClientConnectionsRequest\x12\x1b\n\tclient_id\x18\x01\x20\x01(\
    \tR\x08clientId\"\xa6\x01\n\x1eQueryClientConnectionsResponse\x12)\n\x10\
    connection_paths\x18\x01\x20\x03(\tR\x0fconnectionPaths\x12\x14\n\x05pro\
    of\x18\x02\x20\x01(\x0cR\x05proof\x12C\n\x0cproof_height\x18\x03\x20\x01\
    (\x0b2\x1a.ibc.core.client.v1.HeightR\x0bproofHeightB\x04\xc8\xde\x1f\0\
    \"b\n!QueryConnectionClientStateRequest\x12=\n\rconnection_id\x18\x01\
    \x20\x01(\tR\x0cconnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\
    \"\xe2\x01\n\"QueryConnectionClientStateResponse\x12a\n\x17identified_cl\
    ient_state\x18\x01\x20\x01(\x0b2).ibc.core.client.v1.IdentifiedClientSta\
    teR\x15identifiedClientState\x12\x14\n\x05proof\x18\x02\x20\x01(\x0cR\
    \x05proof\x12C\n\x0cproof_height\x18\x03\x20\x01(\x0b2\x1a.ibc.core.clie\
    nt.v1.HeightR\x0bproofHeightB\x04\xc8\xde\x1f\0\"\xb7\x01\n$QueryConnect\
    ionConsensusStateRequest\x12=\n\rconnection_id\x18\x01\x20\x01(\tR\x0cco\
    nnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x12'\n\x0frevision\
    _number\x18\x02\x20\x01(\x04R\x0erevisionNumber\x12'\n\x0frevision_heigh\
    t\x18\x03\x20\x01(\x04R\x0erevisionHeight\"\xde\x01\n%QueryConnectionCon\
    sensusStateResponse\x12=\n\x0fconsensus_state\x18\x01\x20\x01(\x0b2\x14.\
    google.protobuf.AnyR\x0econsensusState\x12\x1b\n\tclient_id\x18\x02\x20\
    \x01(\tR\x08clientId\x12\x14\n\x05proof\x18\x03\x20\x01(\x0cR\x05proof\
    \x12C\n\x0cproof_height\x18\x04\x20\x01(\x0b2\x1a.ibc.core.client.v1.Hei\
    ghtR\x0bproofHeightB\x04\xc8\xde\x1f\02\x8f\x08\n\x05Query\x12\xaa\x01\n\
    \nConnection\x12..ibc.core.connection.v1.QueryConnectionRequest\x1a/.ibc\
    .core.connection.v1.QueryConnectionResponse\";\x82\xd3\xe4\x93\x025\x123\
    /ibc/core/connection/v1/connections/{connection_id}\x12\x9d\x01\n\x0bCon\
    nections\x12/.ibc.core.connection.v1.QueryConnectionsRequest\x1a0.ibc.co\
    re.connection.v1.QueryConnectionsResponse\"+\x82\xd3\xe4\x93\x02%\x12#/i\
    bc/core/connection/v1/connections\x12\xc2\x01\n\x11ClientConnections\x12\
    5.ibc.core.connection.v1.QueryClientConnectionsRequest\x1a6.ibc.core.con\
    nection.v1.QueryClientConnectionsResponse\">\x82\xd3\xe4\x93\x028\x126/i\
    bc/core/connection/v1/client_connections/{client_id}\x12\xd8\x01\n\x15Co\
    nnectionClientState\x129.ibc.core.connection.v1.QueryConnectionClientSta\
    teRequest\x1a:.ibc.core.connection.v1.QueryConnectionClientStateResponse\
    \"H\x82\xd3\xe4\x93\x02B\x12@/ibc/core/connection/v1/connections/{connec\
    tion_id}/client_state\x12\x98\x02\n\x18ConnectionConsensusState\x12<.ibc\
    .core.connection.v1.QueryConnectionConsensusStateRequest\x1a=.ibc.core.c\
    onnection.v1.QueryConnectionConsensusStateResponse\"\x7f\x82\xd3\xe4\x93\
    \x02y\x12w/ibc/core/connection/v1/connections/{connection_id}/consensus_\
    state/revision/{revision_number}/height/{revision_height}B>Z<github.com/\
    cosmos/ibc-go/v3/modules/core/03-connection/typesJ\x81$\n\x07\x12\x05\0\
    \0\x89\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x1f\n\x08\n\x01\x08\x12\x03\x04\0S\n\t\n\x02\x08\x0b\x12\x03\x04\
    \0S\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\x03\x07\04\n\
    \t\n\x02\x03\x02\x12\x03\x08\0)\n\t\n\x02\x03\x03\x12\x03\t\01\n\t\n\x02\
    \x03\x04\x12\x03\n\0&\n\t\n\x02\x03\x05\x12\x03\x0b\0#\n=\n\x02\x06\0\
    \x12\x04\x0e\0+\x01\x1a1\x20Query\x20provides\x20defines\x20the\x20gRPC\
    \x20querier\x20service\n\n\n\n\x03\x06\0\x01\x12\x03\x0e\x08\r\n9\n\x04\
    \x06\0\x02\0\x12\x04\x10\x02\x12\x03\x1a+\x20Connection\x20queries\x20an\
    \x20IBC\x20connection\x20end.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x10\
    \x06\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x10\x11'\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\x102I\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x11\x04Y\n\
    \x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x11\x04Y\nG\n\x04\x06\
    \0\x02\x01\x12\x04\x15\x02\x17\x03\x1a9\x20Connections\x20queries\x20all\
    \x20the\x20IBC\x20connections\x20of\x20a\x20chain.\n\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x15\x06\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x15\x12)\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x154L\n\x0c\n\x05\x06\0\
    \x02\x01\x04\x12\x03\x16\x04I\n\x11\n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\
    \x02\x12\x03\x16\x04I\n_\n\x04\x06\0\x02\x02\x12\x04\x1b\x02\x1d\x03\x1a\
    Q\x20ClientConnections\x20queries\x20the\x20connection\x20paths\x20assoc\
    iated\x20with\x20a\x20client\n\x20state.\n\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03\x1b\x06\x17\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1b\x185\n\
    \x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1b@^\n\x0c\n\x05\x06\0\x02\x02\x04\
    \x12\x03\x1c\x04\\\n\x11\n\n\x06\0\x02\x02\x04\xb0\xca\xbc\"\x02\x12\x03\
    \x1c\x04\\\n_\n\x04\x06\0\x02\x03\x12\x04!\x02#\x03\x1aQ\x20ConnectionCl\
    ientState\x20queries\x20the\x20client\x20state\x20associated\x20with\x20\
    the\n\x20connection.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03!\x06\x1b\n\
    \x0c\n\x05\x06\0\x02\x03\x02\x12\x03!\x1c=\n\x0c\n\x05\x06\0\x02\x03\x03\
    \x12\x03!Hj\n\x0c\n\x05\x06\0\x02\x03\x04\x12\x03\"\x04f\n\x11\n\n\x06\0\
    \x02\x03\x04\xb0\xca\xbc\"\x02\x12\x03\"\x04f\ne\n\x04\x06\0\x02\x04\x12\
    \x04'\x02*\x03\x1aW\x20ConnectionConsensusState\x20queries\x20the\x20con\
    sensus\x20state\x20associated\x20with\x20the\n\x20connection.\n\n\x0c\n\
    \x05\x06\0\x02\x04\x01\x12\x03'\x06\x1e\n\x0c\n\x05\x06\0\x02\x04\x02\
    \x12\x03'\x1fC\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03'Ns\n\r\n\x05\x06\0\
    \x02\x04\x04\x12\x04(\x04)Y\n\x12\n\n\x06\0\x02\x04\x04\xb0\xca\xbc\"\
    \x02\x12\x04(\x04)Y\n]\n\x02\x04\0\x12\x04/\02\x01\x1aQ\x20QueryConnecti\
    onRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Query/Connect\
    ion\x20RPC\n\x20method\n\n\n\n\x03\x04\0\x01\x12\x03/\x08\x1e\n+\n\x04\
    \x04\0\x02\0\x12\x031\x02\x1b\x1a\x1e\x20connection\x20unique\x20identif\
    ier\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x031\x02\x08\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x031\t\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x031\x19\x1a\n\xc5\
    \x01\n\x02\x04\x01\x12\x047\0>\x01\x1a\xb8\x01\x20QueryConnectionRespons\
    e\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Connection\x20\
    RPC\n\x20method.\x20Besides\x20the\x20connection\x20end,\x20it\x20includ\
    es\x20a\x20proof\x20and\x20the\x20height\x20from\n\x20which\x20the\x20pr\
    oof\x20was\x20retrieved.\n\n\n\n\x03\x04\x01\x01\x12\x037\x08\x1f\n@\n\
    \x04\x04\x01\x02\0\x12\x039\x026\x1a3\x20connection\x20associated\x20wit\
    h\x20the\x20request\x20identifier\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x039\x02&\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x039'1\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03945\n(\n\x04\x04\x01\x02\x01\x12\x03;\x02\x12\x1a\x1b\
    \x20merkle\x20proof\x20of\x20existence\n\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03;\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03;\x08\r\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03;\x10\x11\n6\n\x04\x04\x01\x02\x02\x12\
    \x03=\x02L\x1a)\x20height\x20at\x20which\x20the\x20proof\x20was\x20retri\
    eved\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03=\x02\x1b\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03=\x1c(\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03=+\
    ,\n\x0c\n\x05\x04\x01\x02\x02\x08\x12\x03=-K\n\x0f\n\x08\x04\x01\x02\x02\
    \x08\xe9\xfb\x03\x12\x03=.J\n_\n\x02\x04\x02\x12\x04B\0D\x01\x1aS\x20Que\
    ryConnectionsRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Qu\
    ery/Connections\x20RPC\n\x20method\n\n\n\n\x03\x04\x02\x01\x12\x03B\x08\
    \x1f\n\x0b\n\x04\x04\x02\x02\0\x12\x03C\x027\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03C\x02'\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03C(2\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03C56\nb\n\x02\x04\x03\x12\x04H\0O\x01\x1aV\x20Q\
    ueryConnectionsResponse\x20is\x20the\x20response\x20type\x20for\x20the\
    \x20Query/Connections\x20RPC\n\x20method.\n\n\n\n\x03\x04\x03\x01\x12\
    \x03H\x08\x20\n7\n\x04\x04\x03\x02\0\x12\x03J\x02G\x1a*\x20list\x20of\
    \x20stored\x20connections\x20of\x20the\x20chain.\n\n\x0c\n\x05\x04\x03\
    \x02\0\x04\x12\x03J\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03J\x0b6\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03J7B\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03JEF\n\"\n\x04\x04\x03\x02\x01\x12\x03L\x028\x1a\x15\x20paginatio\
    n\x20response\n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03L\x02(\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03L)3\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03L67\n!\n\x04\x04\x03\x02\x02\x12\x03N\x02F\x1a\x14\x20query\x20block\
    \x20height\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03N\x02\x1b\n\x0c\n\
    \x05\x04\x03\x02\x02\x01\x12\x03N\x1c\"\n\x0c\n\x05\x04\x03\x02\x02\x03\
    \x12\x03N%&\n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x03N'E\n\x0f\n\x08\x04\
    \x03\x02\x02\x08\xe9\xfb\x03\x12\x03N(D\nk\n\x02\x04\x04\x12\x04S\0V\x01\
    \x1a_\x20QueryClientConnectionsRequest\x20is\x20the\x20request\x20type\
    \x20for\x20the\n\x20Query/ClientConnections\x20RPC\x20method\n\n\n\n\x03\
    \x04\x04\x01\x12\x03S\x08%\n=\n\x04\x04\x04\x02\0\x12\x03U\x02\x17\x1a0\
    \x20client\x20identifier\x20associated\x20with\x20a\x20connection\n\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x03U\x02\x08\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03U\t\x12\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03U\x15\x16\nm\n\
    \x02\x04\x05\x12\x04Z\0a\x01\x1aa\x20QueryClientConnectionsResponse\x20i\
    s\x20the\x20response\x20type\x20for\x20the\n\x20Query/ClientConnections\
    \x20RPC\x20method\n\n\n\n\x03\x04\x05\x01\x12\x03Z\x08&\nJ\n\x04\x04\x05\
    \x02\0\x12\x03\\\x02'\x1a=\x20slice\x20of\x20all\x20the\x20connection\
    \x20paths\x20associated\x20with\x20a\x20client.\n\n\x0c\n\x05\x04\x05\
    \x02\0\x04\x12\x03\\\x02\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03\\\x0b\
    \x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03\\\x12\"\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03\\%&\n(\n\x04\x04\x05\x02\x01\x12\x03^\x02\x12\x1a\x1b\
    \x20merkle\x20proof\x20of\x20existence\n\n\x0c\n\x05\x04\x05\x02\x01\x05\
    \x12\x03^\x02\x07\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03^\x08\r\n\x0c\n\
    \x05\x04\x05\x02\x01\x03\x12\x03^\x10\x11\n6\n\x04\x04\x05\x02\x02\x12\
    \x03`\x02L\x1a)\x20height\x20at\x20which\x20the\x20proof\x20was\x20gener\
    ated\n\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x03`\x02\x1b\n\x0c\n\x05\x04\
    \x05\x02\x02\x01\x12\x03`\x1c(\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03`+\
    ,\n\x0c\n\x05\x04\x05\x02\x02\x08\x12\x03`-K\n\x0f\n\x08\x04\x05\x02\x02\
    \x08\xe9\xfb\x03\x12\x03`.J\ns\n\x02\x04\x06\x12\x04e\0h\x01\x1ag\x20Que\
    ryConnectionClientStateRequest\x20is\x20the\x20request\x20type\x20for\
    \x20the\n\x20Query/ConnectionClientState\x20RPC\x20method\n\n\n\n\x03\
    \x04\x06\x01\x12\x03e\x08)\n$\n\x04\x04\x06\x02\0\x12\x03g\x02M\x1a\x17\
    \x20connection\x20identifier\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03g\
    \x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03g\t\x16\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03g\x19\x1a\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03g\
    \x1bL\n\x0f\n\x08\x04\x06\x02\0\x08\xee\xfb\x03\x12\x03g\x1cK\nu\n\x02\
    \x04\x07\x12\x04l\0s\x01\x1ai\x20QueryConnectionClientStateResponse\x20i\
    s\x20the\x20response\x20type\x20for\x20the\n\x20Query/ConnectionClientSt\
    ate\x20RPC\x20method\n\n\n\n\x03\x04\x07\x01\x12\x03l\x08*\n7\n\x04\x04\
    \x07\x02\0\x12\x03n\x02G\x1a*\x20client\x20state\x20associated\x20with\
    \x20the\x20channel\n\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03n\x02*\n\x0c\n\
    \x05\x04\x07\x02\0\x01\x12\x03n+B\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03n\
    EF\n(\n\x04\x04\x07\x02\x01\x12\x03p\x02\x12\x1a\x1b\x20merkle\x20proof\
    \x20of\x20existence\n\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03p\x02\x07\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03p\x08\r\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03p\x10\x11\n6\n\x04\x04\x07\x02\x02\x12\x03r\x02L\x1a)\
    \x20height\x20at\x20which\x20the\x20proof\x20was\x20retrieved\n\n\x0c\n\
    \x05\x04\x07\x02\x02\x06\x12\x03r\x02\x1b\n\x0c\n\x05\x04\x07\x02\x02\
    \x01\x12\x03r\x1c(\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03r+,\n\x0c\n\
    \x05\x04\x07\x02\x02\x08\x12\x03r-K\n\x0f\n\x08\x04\x07\x02\x02\x08\xe9\
    \xfb\x03\x12\x03r.J\ny\n\x02\x04\x08\x12\x04w\0|\x01\x1am\x20QueryConnec\
    tionConsensusStateRequest\x20is\x20the\x20request\x20type\x20for\x20the\
    \n\x20Query/ConnectionConsensusState\x20RPC\x20method\n\n\n\n\x03\x04\
    \x08\x01\x12\x03w\x08,\n$\n\x04\x04\x08\x02\0\x12\x03y\x02O\x1a\x17\x20c\
    onnection\x20identifier\n\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03y\x02\x08\
    \n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03y\t\x16\n\x0c\n\x05\x04\x08\x02\0\
    \x03\x12\x03y\x1b\x1c\n\x0c\n\x05\x04\x08\x02\0\x08\x12\x03y\x1dN\n\x0f\
    \n\x08\x04\x08\x02\0\x08\xee\xfb\x03\x12\x03y\x1eM\n\x0b\n\x04\x04\x08\
    \x02\x01\x12\x03z\x02\x1d\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03z\x02\
    \x08\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03z\t\x18\n\x0c\n\x05\x04\x08\
    \x02\x01\x03\x12\x03z\x1b\x1c\n\x0b\n\x04\x04\x08\x02\x02\x12\x03{\x02\
    \x1d\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03{\x02\x08\n\x0c\n\x05\x04\
    \x08\x02\x02\x01\x12\x03{\t\x18\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03{\
    \x1b\x1c\n}\n\x02\x04\t\x12\x06\x80\x01\0\x89\x01\x01\x1ao\x20QueryConne\
    ctionConsensusStateResponse\x20is\x20the\x20response\x20type\x20for\x20t\
    he\n\x20Query/ConnectionConsensusState\x20RPC\x20method\n\n\x0b\n\x03\
    \x04\t\x01\x12\x04\x80\x01\x08-\n;\n\x04\x04\t\x02\0\x12\x04\x82\x01\x02\
    *\x1a-\x20consensus\x20state\x20associated\x20with\x20the\x20channel\n\n\
    \r\n\x05\x04\t\x02\0\x06\x12\x04\x82\x01\x02\x15\n\r\n\x05\x04\t\x02\0\
    \x01\x12\x04\x82\x01\x16%\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x82\x01()\n=\
    \n\x04\x04\t\x02\x01\x12\x04\x84\x01\x02\x17\x1a/\x20client\x20ID\x20ass\
    ociated\x20with\x20the\x20consensus\x20state\n\n\r\n\x05\x04\t\x02\x01\
    \x05\x12\x04\x84\x01\x02\x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x84\x01\
    \t\x12\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x84\x01\x15\x16\n)\n\x04\x04\
    \t\x02\x02\x12\x04\x86\x01\x02\x12\x1a\x1b\x20merkle\x20proof\x20of\x20e\
    xistence\n\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\x86\x01\x02\x07\n\r\n\x05\
    \x04\t\x02\x02\x01\x12\x04\x86\x01\x08\r\n\r\n\x05\x04\t\x02\x02\x03\x12\
    \x04\x86\x01\x10\x11\n7\n\x04\x04\t\x02\x03\x12\x04\x88\x01\x02L\x1a)\
    \x20height\x20at\x20which\x20the\x20proof\x20was\x20retrieved\n\n\r\n\
    \x05\x04\t\x02\x03\x06\x12\x04\x88\x01\x02\x1b\n\r\n\x05\x04\t\x02\x03\
    \x01\x12\x04\x88\x01\x1c(\n\r\n\x05\x04\t\x02\x03\x03\x12\x04\x88\x01+,\
    \n\r\n\x05\x04\t\x02\x03\x08\x12\x04\x88\x01-K\n\x10\n\x08\x04\t\x02\x03\
    \x08\xe9\xfb\x03\x12\x04\x88\x01.Jb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            deps.push(super::connection::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(QueryConnectionRequest::generated_message_descriptor_data());
            messages.push(QueryConnectionResponse::generated_message_descriptor_data());
            messages.push(QueryConnectionsRequest::generated_message_descriptor_data());
            messages.push(QueryConnectionsResponse::generated_message_descriptor_data());
            messages.push(QueryClientConnectionsRequest::generated_message_descriptor_data());
            messages.push(QueryClientConnectionsResponse::generated_message_descriptor_data());
            messages.push(QueryConnectionClientStateRequest::generated_message_descriptor_data());
            messages.push(QueryConnectionClientStateResponse::generated_message_descriptor_data());
            messages.push(QueryConnectionConsensusStateRequest::generated_message_descriptor_data());
            messages.push(QueryConnectionConsensusStateResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
