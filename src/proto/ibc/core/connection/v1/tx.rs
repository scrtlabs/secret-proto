// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/core/connection/v1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgConnectionOpenInit defines the msg sent by an account on Chain A to
///  initialize a connection with Chain B.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.MsgConnectionOpenInit)
pub struct MsgConnectionOpenInit {
    // message fields
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenInit.client_id)
    pub client_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenInit.counterparty)
    pub counterparty: ::protobuf::MessageField<super::connection::Counterparty>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenInit.version)
    pub version: ::protobuf::MessageField<super::connection::Version>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenInit.delay_period)
    pub delay_period: u64,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenInit.signer)
    pub signer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.MsgConnectionOpenInit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenInit {
    fn default() -> &'a MsgConnectionOpenInit {
        <MsgConnectionOpenInit as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenInit {
    pub fn new() -> MsgConnectionOpenInit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &MsgConnectionOpenInit| { &m.client_id },
            |m: &mut MsgConnectionOpenInit| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::connection::Counterparty>(
            "counterparty",
            |m: &MsgConnectionOpenInit| { &m.counterparty },
            |m: &mut MsgConnectionOpenInit| { &mut m.counterparty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::connection::Version>(
            "version",
            |m: &MsgConnectionOpenInit| { &m.version },
            |m: &mut MsgConnectionOpenInit| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delay_period",
            |m: &MsgConnectionOpenInit| { &m.delay_period },
            |m: &mut MsgConnectionOpenInit| { &mut m.delay_period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &MsgConnectionOpenInit| { &m.signer },
            |m: &mut MsgConnectionOpenInit| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgConnectionOpenInit>(
            "MsgConnectionOpenInit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgConnectionOpenInit {
    const NAME: &'static str = "MsgConnectionOpenInit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counterparty)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.version)?;
                },
                32 => {
                    self.delay_period = is.read_uint64()?;
                },
                42 => {
                    self.signer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.delay_period != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.delay_period);
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(v) = self.counterparty.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.version.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.delay_period != 0 {
            os.write_uint64(4, self.delay_period)?;
        }
        if !self.signer.is_empty() {
            os.write_string(5, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgConnectionOpenInit {
        MsgConnectionOpenInit::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.counterparty.clear();
        self.version.clear();
        self.delay_period = 0;
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgConnectionOpenInit {
        static instance: MsgConnectionOpenInit = MsgConnectionOpenInit {
            client_id: ::std::string::String::new(),
            counterparty: ::protobuf::MessageField::none(),
            version: ::protobuf::MessageField::none(),
            delay_period: 0,
            signer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgConnectionOpenInit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgConnectionOpenInit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgConnectionOpenInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenInit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit response
///  type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.MsgConnectionOpenInitResponse)
pub struct MsgConnectionOpenInitResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.MsgConnectionOpenInitResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenInitResponse {
    fn default() -> &'a MsgConnectionOpenInitResponse {
        <MsgConnectionOpenInitResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenInitResponse {
    pub fn new() -> MsgConnectionOpenInitResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgConnectionOpenInitResponse>(
            "MsgConnectionOpenInitResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgConnectionOpenInitResponse {
    const NAME: &'static str = "MsgConnectionOpenInitResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgConnectionOpenInitResponse {
        MsgConnectionOpenInitResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgConnectionOpenInitResponse {
        static instance: MsgConnectionOpenInitResponse = MsgConnectionOpenInitResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgConnectionOpenInitResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgConnectionOpenInitResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgConnectionOpenInitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenInitResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgConnectionOpenTry defines a msg sent by a Relayer to try to open a
///  connection on Chain B.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.MsgConnectionOpenTry)
pub struct MsgConnectionOpenTry {
    // message fields
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.client_id)
    pub client_id: ::std::string::String,
    ///  in the case of crossing hello's, when both chains call OpenInit, we need
    ///  the connection identifier of the previous connection in state INIT
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.previous_connection_id)
    pub previous_connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.client_state)
    pub client_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty)
    pub counterparty: ::protobuf::MessageField<super::connection::Counterparty>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.delay_period)
    pub delay_period: u64,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions)
    pub counterparty_versions: ::std::vec::Vec<super::connection::Version>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.proof_height)
    pub proof_height: ::protobuf::MessageField<super::client::Height>,
    ///  proof of the initialization the connection on Chain A: `UNITIALIZED ->
    ///  INIT`
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.proof_init)
    pub proof_init: ::std::vec::Vec<u8>,
    ///  proof of client state included in message
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.proof_client)
    pub proof_client: ::std::vec::Vec<u8>,
    ///  proof of client consensus state
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.proof_consensus)
    pub proof_consensus: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.consensus_height)
    pub consensus_height: ::protobuf::MessageField<super::client::Height>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenTry.signer)
    pub signer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.MsgConnectionOpenTry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenTry {
    fn default() -> &'a MsgConnectionOpenTry {
        <MsgConnectionOpenTry as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenTry {
    pub fn new() -> MsgConnectionOpenTry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &MsgConnectionOpenTry| { &m.client_id },
            |m: &mut MsgConnectionOpenTry| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "previous_connection_id",
            |m: &MsgConnectionOpenTry| { &m.previous_connection_id },
            |m: &mut MsgConnectionOpenTry| { &mut m.previous_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "client_state",
            |m: &MsgConnectionOpenTry| { &m.client_state },
            |m: &mut MsgConnectionOpenTry| { &mut m.client_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::connection::Counterparty>(
            "counterparty",
            |m: &MsgConnectionOpenTry| { &m.counterparty },
            |m: &mut MsgConnectionOpenTry| { &mut m.counterparty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delay_period",
            |m: &MsgConnectionOpenTry| { &m.delay_period },
            |m: &mut MsgConnectionOpenTry| { &mut m.delay_period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "counterparty_versions",
            |m: &MsgConnectionOpenTry| { &m.counterparty_versions },
            |m: &mut MsgConnectionOpenTry| { &mut m.counterparty_versions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "proof_height",
            |m: &MsgConnectionOpenTry| { &m.proof_height },
            |m: &mut MsgConnectionOpenTry| { &mut m.proof_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_init",
            |m: &MsgConnectionOpenTry| { &m.proof_init },
            |m: &mut MsgConnectionOpenTry| { &mut m.proof_init },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_client",
            |m: &MsgConnectionOpenTry| { &m.proof_client },
            |m: &mut MsgConnectionOpenTry| { &mut m.proof_client },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_consensus",
            |m: &MsgConnectionOpenTry| { &m.proof_consensus },
            |m: &mut MsgConnectionOpenTry| { &mut m.proof_consensus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "consensus_height",
            |m: &MsgConnectionOpenTry| { &m.consensus_height },
            |m: &mut MsgConnectionOpenTry| { &mut m.consensus_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &MsgConnectionOpenTry| { &m.signer },
            |m: &mut MsgConnectionOpenTry| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgConnectionOpenTry>(
            "MsgConnectionOpenTry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgConnectionOpenTry {
    const NAME: &'static str = "MsgConnectionOpenTry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                18 => {
                    self.previous_connection_id = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.client_state)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counterparty)?;
                },
                40 => {
                    self.delay_period = is.read_uint64()?;
                },
                50 => {
                    self.counterparty_versions.push(is.read_message()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof_height)?;
                },
                66 => {
                    self.proof_init = is.read_bytes()?;
                },
                74 => {
                    self.proof_client = is.read_bytes()?;
                },
                82 => {
                    self.proof_consensus = is.read_bytes()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_height)?;
                },
                98 => {
                    self.signer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if !self.previous_connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.previous_connection_id);
        }
        if let Some(v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.delay_period != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.delay_period);
        }
        for value in &self.counterparty_versions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.proof_init.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.proof_init);
        }
        if !self.proof_client.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.proof_client);
        }
        if !self.proof_consensus.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.proof_consensus);
        }
        if let Some(v) = self.consensus_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if !self.previous_connection_id.is_empty() {
            os.write_string(2, &self.previous_connection_id)?;
        }
        if let Some(v) = self.client_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.counterparty.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.delay_period != 0 {
            os.write_uint64(5, self.delay_period)?;
        }
        for v in &self.counterparty_versions {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.proof_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if !self.proof_init.is_empty() {
            os.write_bytes(8, &self.proof_init)?;
        }
        if !self.proof_client.is_empty() {
            os.write_bytes(9, &self.proof_client)?;
        }
        if !self.proof_consensus.is_empty() {
            os.write_bytes(10, &self.proof_consensus)?;
        }
        if let Some(v) = self.consensus_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(12, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgConnectionOpenTry {
        MsgConnectionOpenTry::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.previous_connection_id.clear();
        self.client_state.clear();
        self.counterparty.clear();
        self.delay_period = 0;
        self.counterparty_versions.clear();
        self.proof_height.clear();
        self.proof_init.clear();
        self.proof_client.clear();
        self.proof_consensus.clear();
        self.consensus_height.clear();
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgConnectionOpenTry {
        static instance: MsgConnectionOpenTry = MsgConnectionOpenTry {
            client_id: ::std::string::String::new(),
            previous_connection_id: ::std::string::String::new(),
            client_state: ::protobuf::MessageField::none(),
            counterparty: ::protobuf::MessageField::none(),
            delay_period: 0,
            counterparty_versions: ::std::vec::Vec::new(),
            proof_height: ::protobuf::MessageField::none(),
            proof_init: ::std::vec::Vec::new(),
            proof_client: ::std::vec::Vec::new(),
            proof_consensus: ::std::vec::Vec::new(),
            consensus_height: ::protobuf::MessageField::none(),
            signer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgConnectionOpenTry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgConnectionOpenTry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgConnectionOpenTry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenTry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.MsgConnectionOpenTryResponse)
pub struct MsgConnectionOpenTryResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.MsgConnectionOpenTryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenTryResponse {
    fn default() -> &'a MsgConnectionOpenTryResponse {
        <MsgConnectionOpenTryResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenTryResponse {
    pub fn new() -> MsgConnectionOpenTryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgConnectionOpenTryResponse>(
            "MsgConnectionOpenTryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgConnectionOpenTryResponse {
    const NAME: &'static str = "MsgConnectionOpenTryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgConnectionOpenTryResponse {
        MsgConnectionOpenTryResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgConnectionOpenTryResponse {
        static instance: MsgConnectionOpenTryResponse = MsgConnectionOpenTryResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgConnectionOpenTryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgConnectionOpenTryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgConnectionOpenTryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenTryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to
///  acknowledge the change of connection state to TRYOPEN on Chain B.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.MsgConnectionOpenAck)
pub struct MsgConnectionOpenAck {
    // message fields
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.connection_id)
    pub connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.counterparty_connection_id)
    pub counterparty_connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.version)
    pub version: ::protobuf::MessageField<super::connection::Version>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.client_state)
    pub client_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.proof_height)
    pub proof_height: ::protobuf::MessageField<super::client::Height>,
    ///  proof of the initialization the connection on Chain B: `UNITIALIZED ->
    ///  TRYOPEN`
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.proof_try)
    pub proof_try: ::std::vec::Vec<u8>,
    ///  proof of client state included in message
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.proof_client)
    pub proof_client: ::std::vec::Vec<u8>,
    ///  proof of client consensus state
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.proof_consensus)
    pub proof_consensus: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.consensus_height)
    pub consensus_height: ::protobuf::MessageField<super::client::Height>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenAck.signer)
    pub signer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.MsgConnectionOpenAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenAck {
    fn default() -> &'a MsgConnectionOpenAck {
        <MsgConnectionOpenAck as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenAck {
    pub fn new() -> MsgConnectionOpenAck {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &MsgConnectionOpenAck| { &m.connection_id },
            |m: &mut MsgConnectionOpenAck| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "counterparty_connection_id",
            |m: &MsgConnectionOpenAck| { &m.counterparty_connection_id },
            |m: &mut MsgConnectionOpenAck| { &mut m.counterparty_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::connection::Version>(
            "version",
            |m: &MsgConnectionOpenAck| { &m.version },
            |m: &mut MsgConnectionOpenAck| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "client_state",
            |m: &MsgConnectionOpenAck| { &m.client_state },
            |m: &mut MsgConnectionOpenAck| { &mut m.client_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "proof_height",
            |m: &MsgConnectionOpenAck| { &m.proof_height },
            |m: &mut MsgConnectionOpenAck| { &mut m.proof_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_try",
            |m: &MsgConnectionOpenAck| { &m.proof_try },
            |m: &mut MsgConnectionOpenAck| { &mut m.proof_try },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_client",
            |m: &MsgConnectionOpenAck| { &m.proof_client },
            |m: &mut MsgConnectionOpenAck| { &mut m.proof_client },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_consensus",
            |m: &MsgConnectionOpenAck| { &m.proof_consensus },
            |m: &mut MsgConnectionOpenAck| { &mut m.proof_consensus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "consensus_height",
            |m: &MsgConnectionOpenAck| { &m.consensus_height },
            |m: &mut MsgConnectionOpenAck| { &mut m.consensus_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &MsgConnectionOpenAck| { &m.signer },
            |m: &mut MsgConnectionOpenAck| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgConnectionOpenAck>(
            "MsgConnectionOpenAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgConnectionOpenAck {
    const NAME: &'static str = "MsgConnectionOpenAck";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_id = is.read_string()?;
                },
                18 => {
                    self.counterparty_connection_id = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.version)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.client_state)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof_height)?;
                },
                50 => {
                    self.proof_try = is.read_bytes()?;
                },
                58 => {
                    self.proof_client = is.read_bytes()?;
                },
                66 => {
                    self.proof_consensus = is.read_bytes()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_height)?;
                },
                82 => {
                    self.signer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        if !self.counterparty_connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.counterparty_connection_id);
        }
        if let Some(v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.proof_try.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.proof_try);
        }
        if !self.proof_client.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.proof_client);
        }
        if !self.proof_consensus.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.proof_consensus);
        }
        if let Some(v) = self.consensus_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        if !self.counterparty_connection_id.is_empty() {
            os.write_string(2, &self.counterparty_connection_id)?;
        }
        if let Some(v) = self.version.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.client_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.proof_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if !self.proof_try.is_empty() {
            os.write_bytes(6, &self.proof_try)?;
        }
        if !self.proof_client.is_empty() {
            os.write_bytes(7, &self.proof_client)?;
        }
        if !self.proof_consensus.is_empty() {
            os.write_bytes(8, &self.proof_consensus)?;
        }
        if let Some(v) = self.consensus_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(10, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgConnectionOpenAck {
        MsgConnectionOpenAck::new()
    }

    fn clear(&mut self) {
        self.connection_id.clear();
        self.counterparty_connection_id.clear();
        self.version.clear();
        self.client_state.clear();
        self.proof_height.clear();
        self.proof_try.clear();
        self.proof_client.clear();
        self.proof_consensus.clear();
        self.consensus_height.clear();
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgConnectionOpenAck {
        static instance: MsgConnectionOpenAck = MsgConnectionOpenAck {
            connection_id: ::std::string::String::new(),
            counterparty_connection_id: ::std::string::String::new(),
            version: ::protobuf::MessageField::none(),
            client_state: ::protobuf::MessageField::none(),
            proof_height: ::protobuf::MessageField::none(),
            proof_try: ::std::vec::Vec::new(),
            proof_client: ::std::vec::Vec::new(),
            proof_consensus: ::std::vec::Vec::new(),
            consensus_height: ::protobuf::MessageField::none(),
            signer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgConnectionOpenAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgConnectionOpenAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgConnectionOpenAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.MsgConnectionOpenAckResponse)
pub struct MsgConnectionOpenAckResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.MsgConnectionOpenAckResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenAckResponse {
    fn default() -> &'a MsgConnectionOpenAckResponse {
        <MsgConnectionOpenAckResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenAckResponse {
    pub fn new() -> MsgConnectionOpenAckResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgConnectionOpenAckResponse>(
            "MsgConnectionOpenAckResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgConnectionOpenAckResponse {
    const NAME: &'static str = "MsgConnectionOpenAckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgConnectionOpenAckResponse {
        MsgConnectionOpenAckResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgConnectionOpenAckResponse {
        static instance: MsgConnectionOpenAckResponse = MsgConnectionOpenAckResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgConnectionOpenAckResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgConnectionOpenAckResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgConnectionOpenAckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenAckResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain B to
///  acknowledge the change of connection state to OPEN on Chain A.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.MsgConnectionOpenConfirm)
pub struct MsgConnectionOpenConfirm {
    // message fields
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenConfirm.connection_id)
    pub connection_id: ::std::string::String,
    ///  proof for the change of the connection state on Chain A: `INIT -> OPEN`
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_ack)
    pub proof_ack: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_height)
    pub proof_height: ::protobuf::MessageField<super::client::Height>,
    // @@protoc_insertion_point(field:ibc.core.connection.v1.MsgConnectionOpenConfirm.signer)
    pub signer: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.MsgConnectionOpenConfirm.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenConfirm {
    fn default() -> &'a MsgConnectionOpenConfirm {
        <MsgConnectionOpenConfirm as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenConfirm {
    pub fn new() -> MsgConnectionOpenConfirm {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &MsgConnectionOpenConfirm| { &m.connection_id },
            |m: &mut MsgConnectionOpenConfirm| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proof_ack",
            |m: &MsgConnectionOpenConfirm| { &m.proof_ack },
            |m: &mut MsgConnectionOpenConfirm| { &mut m.proof_ack },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "proof_height",
            |m: &MsgConnectionOpenConfirm| { &m.proof_height },
            |m: &mut MsgConnectionOpenConfirm| { &mut m.proof_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &MsgConnectionOpenConfirm| { &m.signer },
            |m: &mut MsgConnectionOpenConfirm| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgConnectionOpenConfirm>(
            "MsgConnectionOpenConfirm",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgConnectionOpenConfirm {
    const NAME: &'static str = "MsgConnectionOpenConfirm";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_id = is.read_string()?;
                },
                18 => {
                    self.proof_ack = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof_height)?;
                },
                34 => {
                    self.signer = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        if !self.proof_ack.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof_ack);
        }
        if let Some(v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        if !self.proof_ack.is_empty() {
            os.write_bytes(2, &self.proof_ack)?;
        }
        if let Some(v) = self.proof_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(4, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgConnectionOpenConfirm {
        MsgConnectionOpenConfirm::new()
    }

    fn clear(&mut self) {
        self.connection_id.clear();
        self.proof_ack.clear();
        self.proof_height.clear();
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgConnectionOpenConfirm {
        static instance: MsgConnectionOpenConfirm = MsgConnectionOpenConfirm {
            connection_id: ::std::string::String::new(),
            proof_ack: ::std::vec::Vec::new(),
            proof_height: ::protobuf::MessageField::none(),
            signer: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgConnectionOpenConfirm {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgConnectionOpenConfirm").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgConnectionOpenConfirm {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenConfirm {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgConnectionOpenConfirmResponse defines the Msg/ConnectionOpenConfirm
///  response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.core.connection.v1.MsgConnectionOpenConfirmResponse)
pub struct MsgConnectionOpenConfirmResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenConfirmResponse {
    fn default() -> &'a MsgConnectionOpenConfirmResponse {
        <MsgConnectionOpenConfirmResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenConfirmResponse {
    pub fn new() -> MsgConnectionOpenConfirmResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgConnectionOpenConfirmResponse>(
            "MsgConnectionOpenConfirmResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgConnectionOpenConfirmResponse {
    const NAME: &'static str = "MsgConnectionOpenConfirmResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgConnectionOpenConfirmResponse {
        MsgConnectionOpenConfirmResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgConnectionOpenConfirmResponse {
        static instance: MsgConnectionOpenConfirmResponse = MsgConnectionOpenConfirmResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgConnectionOpenConfirmResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgConnectionOpenConfirmResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgConnectionOpenConfirmResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenConfirmResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fibc/core/connection/v1/tx.proto\x12\x16ibc.core.connection.v1\x1a\
    \x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\x1a\x1fibc/cor\
    e/client/v1/client.proto\x1a'ibc/core/connection/v1/connection.proto\"\
    \xb3\x02\n\x15MsgConnectionOpenInit\x121\n\tclient_id\x18\x01\x20\x01(\t\
    R\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12N\n\x0ccounterpa\
    rty\x18\x02\x20\x01(\x0b2$.ibc.core.connection.v1.CounterpartyR\x0ccount\
    erpartyB\x04\xc8\xde\x1f\0\x129\n\x07version\x18\x03\x20\x01(\x0b2\x1f.i\
    bc.core.connection.v1.VersionR\x07version\x12:\n\x0cdelay_period\x18\x04\
    \x20\x01(\x04R\x0bdelayPeriodB\x17\xf2\xde\x1f\x13yaml:\"delay_period\"\
    \x12\x16\n\x06signer\x18\x05\x20\x01(\tR\x06signer:\x08\x88\xa0\x1f\0\
    \xe8\xa0\x1f\0\"\x1f\n\x1dMsgConnectionOpenInitResponse\"\x95\x07\n\x14M\
    sgConnectionOpenTry\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\
    \x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12W\n\x16previous_connection_id\
    \x18\x02\x20\x01(\tR\x14previousConnectionIdB!\xf2\xde\x1f\x1dyaml:\"pre\
    vious_connection_id\"\x12P\n\x0cclient_state\x18\x03\x20\x01(\x0b2\x14.g\
    oogle.protobuf.AnyR\x0bclientStateB\x17\xf2\xde\x1f\x13yaml:\"client_sta\
    te\"\x12N\n\x0ccounterparty\x18\x04\x20\x01(\x0b2$.ibc.core.connection.v\
    1.CounterpartyR\x0ccounterpartyB\x04\xc8\xde\x1f\0\x12:\n\x0cdelay_perio\
    d\x18\x05\x20\x01(\x04R\x0bdelayPeriodB\x17\xf2\xde\x1f\x13yaml:\"delay_\
    period\"\x12v\n\x15counterparty_versions\x18\x06\x20\x03(\x0b2\x1f.ibc.c\
    ore.connection.v1.VersionR\x14counterpartyVersionsB\x20\xf2\xde\x1f\x1cy\
    aml:\"counterparty_versions\"\x12Z\n\x0cproof_height\x18\x07\x20\x01(\
    \x0b2\x1a.ibc.core.client.v1.HeightR\x0bproofHeightB\x1b\xf2\xde\x1f\x13\
    yaml:\"proof_height\"\xc8\xde\x1f\0\x124\n\nproof_init\x18\x08\x20\x01(\
    \x0cR\tproofInitB\x15\xf2\xde\x1f\x11yaml:\"proof_init\"\x12:\n\x0cproof\
    _client\x18\t\x20\x01(\x0cR\x0bproofClientB\x17\xf2\xde\x1f\x13yaml:\"pr\
    oof_client\"\x12C\n\x0fproof_consensus\x18\n\x20\x01(\x0cR\x0eproofConse\
    nsusB\x1a\xf2\xde\x1f\x16yaml:\"proof_consensus\"\x12f\n\x10consensus_he\
    ight\x18\x0b\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x0fconsensusHe\
    ightB\x1f\xf2\xde\x1f\x17yaml:\"consensus_height\"\xc8\xde\x1f\0\x12\x16\
    \n\x06signer\x18\x0c\x20\x01(\tR\x06signer:\x08\x88\xa0\x1f\0\xe8\xa0\
    \x1f\0\"\x1e\n\x1cMsgConnectionOpenTryResponse\"\xe1\x05\n\x14MsgConnect\
    ionOpenAck\x12=\n\rconnection_id\x18\x01\x20\x01(\tR\x0cconnectionIdB\
    \x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x12c\n\x1acounterparty_connec\
    tion_id\x18\x02\x20\x01(\tR\x18counterpartyConnectionIdB%\xf2\xde\x1f!ya\
    ml:\"counterparty_connection_id\"\x129\n\x07version\x18\x03\x20\x01(\x0b\
    2\x1f.ibc.core.connection.v1.VersionR\x07version\x12P\n\x0cclient_state\
    \x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0bclientStateB\x17\xf2\
    \xde\x1f\x13yaml:\"client_state\"\x12Z\n\x0cproof_height\x18\x05\x20\x01\
    (\x0b2\x1a.ibc.core.client.v1.HeightR\x0bproofHeightB\x1b\xf2\xde\x1f\
    \x13yaml:\"proof_height\"\xc8\xde\x1f\0\x121\n\tproof_try\x18\x06\x20\
    \x01(\x0cR\x08proofTryB\x14\xf2\xde\x1f\x10yaml:\"proof_try\"\x12:\n\x0c\
    proof_client\x18\x07\x20\x01(\x0cR\x0bproofClientB\x17\xf2\xde\x1f\x13ya\
    ml:\"proof_client\"\x12C\n\x0fproof_consensus\x18\x08\x20\x01(\x0cR\x0ep\
    roofConsensusB\x1a\xf2\xde\x1f\x16yaml:\"proof_consensus\"\x12f\n\x10con\
    sensus_height\x18\t\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x0fcons\
    ensusHeightB\x1f\xf2\xde\x1f\x17yaml:\"consensus_height\"\xc8\xde\x1f\0\
    \x12\x16\n\x06signer\x18\n\x20\x01(\tR\x06signer:\x08\x88\xa0\x1f\0\xe8\
    \xa0\x1f\0\"\x1e\n\x1cMsgConnectionOpenAckResponse\"\x8a\x02\n\x18MsgCon\
    nectionOpenConfirm\x12=\n\rconnection_id\x18\x01\x20\x01(\tR\x0cconnecti\
    onIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x121\n\tproof_ack\x18\
    \x02\x20\x01(\x0cR\x08proofAckB\x14\xf2\xde\x1f\x10yaml:\"proof_ack\"\
    \x12Z\n\x0cproof_height\x18\x03\x20\x01(\x0b2\x1a.ibc.core.client.v1.Hei\
    ghtR\x0bproofHeightB\x1b\xf2\xde\x1f\x13yaml:\"proof_height\"\xc8\xde\
    \x1f\0\x12\x16\n\x06signer\x18\x04\x20\x01(\tR\x06signer:\x08\x88\xa0\
    \x1f\0\xe8\xa0\x1f\0\"\"\n\x20MsgConnectionOpenConfirmResponse2\xf9\x03\
    \n\x03Msg\x12z\n\x12ConnectionOpenInit\x12-.ibc.core.connection.v1.MsgCo\
    nnectionOpenInit\x1a5.ibc.core.connection.v1.MsgConnectionOpenInitRespon\
    se\x12w\n\x11ConnectionOpenTry\x12,.ibc.core.connection.v1.MsgConnection\
    OpenTry\x1a4.ibc.core.connection.v1.MsgConnectionOpenTryResponse\x12w\n\
    \x11ConnectionOpenAck\x12,.ibc.core.connection.v1.MsgConnectionOpenAck\
    \x1a4.ibc.core.connection.v1.MsgConnectionOpenAckResponse\x12\x83\x01\n\
    \x15ConnectionOpenConfirm\x120.ibc.core.connection.v1.MsgConnectionOpenC\
    onfirm\x1a8.ibc.core.connection.v1.MsgConnectionOpenConfirmResponseB>Z<g\
    ithub.com/cosmos/ibc-go/v3/modules/core/03-connection/typesJ\xc2'\n\x06\
    \x12\x04\0\0v+\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x1f\n\x08\n\x01\x08\x12\x03\x04\0S\n\t\n\x02\x08\x0b\x12\x03\x04\
    \0S\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\x03\x07\0#\n\
    \t\n\x02\x03\x02\x12\x03\x08\0)\n\t\n\x02\x03\x03\x12\x03\t\01\n9\n\x02\
    \x06\0\x12\x04\x0c\0\x19\x01\x1a-\x20Msg\x20defines\x20the\x20ibc/connec\
    tion\x20Msg\x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\x0c\x08\x0b\nY\n\
    \x04\x06\0\x02\0\x12\x03\x0e\x02X\x1aL\x20ConnectionOpenInit\x20defines\
    \x20a\x20rpc\x20handler\x20method\x20for\x20MsgConnectionOpenInit.\n\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0e\x06\x18\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x0e\x19.\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0e9V\nW\n\x04\
    \x06\0\x02\x01\x12\x03\x11\x02U\x1aJ\x20ConnectionOpenTry\x20defines\x20\
    a\x20rpc\x20handler\x20method\x20for\x20MsgConnectionOpenTry.\n\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x11\x06\x17\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x11\x18,\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x117S\nW\n\x04\
    \x06\0\x02\x02\x12\x03\x14\x02U\x1aJ\x20ConnectionOpenAck\x20defines\x20\
    a\x20rpc\x20handler\x20method\x20for\x20MsgConnectionOpenAck.\n\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03\x14\x06\x17\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03\x14\x18,\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x147S\n`\n\x04\
    \x06\0\x02\x03\x12\x03\x18\x02a\x1aS\x20ConnectionOpenConfirm\x20defines\
    \x20a\x20rpc\x20handler\x20method\x20for\n\x20MsgConnectionOpenConfirm.\
    \n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x18\x06\x1b\n\x0c\n\x05\x06\0\
    \x02\x03\x02\x12\x03\x18\x1c4\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x18?\
    _\n{\n\x02\x04\0\x12\x04\x1d\0&\x01\x1ao\x20MsgConnectionOpenInit\x20def\
    ines\x20the\x20msg\x20sent\x20by\x20an\x20account\x20on\x20Chain\x20A\
    \x20to\n\x20initialize\x20a\x20connection\x20with\x20Chain\x20B.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\x1d\x08\x1d\n\n\n\x03\x04\0\x07\x12\x03\x1e\x02-\
    \n\r\n\x06\x04\0\x07\x8d\xf4\x03\x12\x03\x1e\x02-\n\n\n\x03\x04\0\x07\
    \x12\x03\x1f\x02-\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x1f\x02-\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03!\x02N\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03!\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03!\x0f\x18\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03!\x1e\x1f\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03!\x20M\n\
    \x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03!!L\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\"\x02?\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\"\x02\x0e\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\"\x0f\x1b\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\"\x1e\x1f\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\"\x20>\n\
    \x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\"!=\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03#\x02\x20\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03#\x02\t\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03#\x0f\x16\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03#\x1e\x1f\n\x0b\n\x04\x04\0\x02\x03\x12\x03$\x02Q\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03$\x0f\x1b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03$\x1e\x1f\n\x0c\n\
    \x05\x04\0\x02\x03\x08\x12\x03$\x20P\n\x0f\n\x08\x04\0\x02\x03\x08\xee\
    \xfb\x03\x12\x03$!O\n\x0b\n\x04\x04\0\x02\x04\x12\x03%\x02\x20\n\x0c\n\
    \x05\x04\0\x02\x04\x05\x12\x03%\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03%\x0f\x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03%\x1e\x1f\n]\n\
    \x02\x04\x01\x12\x03*\0(\x1aR\x20MsgConnectionOpenInitResponse\x20define\
    s\x20the\x20Msg/ConnectionOpenInit\x20response\n\x20type.\n\n\n\n\x03\
    \x04\x01\x01\x12\x03*\x08%\nk\n\x02\x04\x02\x12\x04.\0F\x01\x1a_\x20MsgC\
    onnectionOpenTry\x20defines\x20a\x20msg\x20sent\x20by\x20a\x20Relayer\
    \x20to\x20try\x20to\x20open\x20a\n\x20connection\x20on\x20Chain\x20B.\n\
    \n\n\n\x03\x04\x02\x01\x12\x03.\x08\x1c\n\n\n\x03\x04\x02\x07\x12\x03/\
    \x02-\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x03/\x02-\n\n\n\x03\x04\x02\
    \x07\x12\x030\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x030\x02-\n\x0b\
    \n\x04\x04\x02\x02\0\x12\x032\x02E\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    2\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x032\t\x12\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x032\x15\x16\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x032\
    \x17D\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x032\x18C\n\x9c\x01\
    \n\x04\x04\x02\x02\x01\x12\x035\x02r\x1a\x8e\x01\x20in\x20the\x20case\
    \x20of\x20crossing\x20hello's,\x20when\x20both\x20chains\x20call\x20Open\
    Init,\x20we\x20need\n\x20the\x20connection\x20identifier\x20of\x20the\
    \x20previous\x20connection\x20in\x20state\x20INIT\n\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x035\
    \x1c2\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03556\n\x0c\n\x05\x04\x02\x02\
    \x01\x08\x12\x0357q\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\x035\
    8p\n\x0b\n\x04\x04\x02\x02\x02\x12\x036\x02h\n\x0c\n\x05\x04\x02\x02\x02\
    \x06\x12\x036\x02\x15\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x036\x1c(\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03656\n\x0c\n\x05\x04\x02\x02\x02\
    \x08\x12\x0367g\n\x0f\n\x08\x04\x02\x02\x02\x08\xee\xfb\x03\x12\x0368f\n\
    \x0b\n\x04\x04\x02\x02\x03\x12\x037\x02V\n\x0c\n\x05\x04\x02\x02\x03\x06\
    \x12\x037\x02\x0e\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x037\x1c(\n\x0c\n\
    \x05\x04\x02\x02\x03\x03\x12\x03756\n\x0c\n\x05\x04\x02\x02\x03\x08\x12\
    \x0377U\n\x0f\n\x08\x04\x02\x02\x03\x08\xe9\xfb\x03\x12\x0378T\n\x0b\n\
    \x04\x04\x02\x02\x04\x12\x038\x02h\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\
    \x038\x02\x08\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x038\x1c(\n\x0c\n\x05\
    \x04\x02\x02\x04\x03\x12\x03856\n\x0c\n\x05\x04\x02\x02\x04\x08\x12\x038\
    7g\n\x0f\n\x08\x04\x02\x02\x04\x08\xee\xfb\x03\x12\x0388f\n\x0b\n\x04\
    \x04\x02\x02\x05\x12\x039\x02q\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x039\
    \x02\n\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\x039\x0b\x12\n\x0c\n\x05\x04\
    \x02\x02\x05\x01\x12\x039\x1c1\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x0395\
    6\n\x0c\n\x05\x04\x02\x02\x05\x08\x12\x0397p\n\x0f\n\x08\x04\x02\x02\x05\
    \x08\xee\xfb\x03\x12\x0398o\n\x0c\n\x04\x04\x02\x02\x06\x12\x04:\x02;U\n\
    \x0c\n\x05\x04\x02\x02\x06\x06\x12\x03:\x02\x1b\n\x0c\n\x05\x04\x02\x02\
    \x06\x01\x12\x03:\x1c(\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03:56\n\x0c\
    \n\x05\x04\x02\x02\x06\x08\x12\x03;\x06T\n\x0f\n\x08\x04\x02\x02\x06\x08\
    \xee\xfb\x03\x12\x03;\x075\n\x0f\n\x08\x04\x02\x02\x06\x08\xe9\xfb\x03\
    \x12\x03;7S\n\\\n\x04\x04\x02\x02\x07\x12\x03>\x02F\x1aO\x20proof\x20of\
    \x20the\x20initialization\x20the\x20connection\x20on\x20Chain\x20A:\x20`\
    UNITIALIZED\x20->\n\x20INIT`\n\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x03>\
    \x02\x07\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03>\x08\x12\n\x0c\n\x05\
    \x04\x02\x02\x07\x03\x12\x03>\x15\x16\n\x0c\n\x05\x04\x02\x02\x07\x08\
    \x12\x03>\x17E\n\x0f\n\x08\x04\x02\x02\x07\x08\xee\xfb\x03\x12\x03>\x18D\
    \n8\n\x04\x04\x02\x02\x08\x12\x03@\x02J\x1a+\x20proof\x20of\x20client\
    \x20state\x20included\x20in\x20message\n\n\x0c\n\x05\x04\x02\x02\x08\x05\
    \x12\x03@\x02\x07\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03@\x08\x14\n\x0c\
    \n\x05\x04\x02\x02\x08\x03\x12\x03@\x17\x18\n\x0c\n\x05\x04\x02\x02\x08\
    \x08\x12\x03@\x19I\n\x0f\n\x08\x04\x02\x02\x08\x08\xee\xfb\x03\x12\x03@\
    \x1aH\n.\n\x04\x04\x02\x02\t\x12\x03B\x02f\x1a!\x20proof\x20of\x20client\
    \x20consensus\x20state\n\n\x0c\n\x05\x04\x02\x02\t\x05\x12\x03B\x02\x07\
    \n\x0c\n\x05\x04\x02\x02\t\x01\x12\x03B\x1c+\n\x0c\n\x05\x04\x02\x02\t\
    \x03\x12\x03B/1\n\x0c\n\x05\x04\x02\x02\t\x08\x12\x03B2e\n\x0f\n\x08\x04\
    \x02\x02\t\x08\xee\xfb\x03\x12\x03B3d\n\x0c\n\x04\x04\x02\x02\n\x12\x04C\
    \x02DY\n\x0c\n\x05\x04\x02\x02\n\x06\x12\x03C\x02\x1b\n\x0c\n\x05\x04\
    \x02\x02\n\x01\x12\x03C\x1c,\n\x0c\n\x05\x04\x02\x02\n\x03\x12\x03C/1\n\
    \x0c\n\x05\x04\x02\x02\n\x08\x12\x03D\x06X\n\x0f\n\x08\x04\x02\x02\n\x08\
    \xee\xfb\x03\x12\x03D\x079\n\x0f\n\x08\x04\x02\x02\n\x08\xe9\xfb\x03\x12\
    \x03D;W\n\x0b\n\x04\x04\x02\x02\x0b\x12\x03E\x02\x15\n\x0c\n\x05\x04\x02\
    \x02\x0b\x05\x12\x03E\x02\x08\n\x0c\n\x05\x04\x02\x02\x0b\x01\x12\x03E\t\
    \x0f\n\x0c\n\x05\x04\x02\x02\x0b\x03\x12\x03E\x12\x14\nZ\n\x02\x04\x03\
    \x12\x03I\0'\x1aO\x20MsgConnectionOpenTryResponse\x20defines\x20the\x20M\
    sg/ConnectionOpenTry\x20response\x20type.\n\n\n\n\x03\x04\x03\x01\x12\
    \x03I\x08$\n\x94\x01\n\x02\x04\x04\x12\x04M\0a\x01\x1a\x87\x01\x20MsgCon\
    nectionOpenAck\x20defines\x20a\x20msg\x20sent\x20by\x20a\x20Relayer\x20t\
    o\x20Chain\x20A\x20to\n\x20acknowledge\x20the\x20change\x20of\x20connect\
    ion\x20state\x20to\x20TRYOPEN\x20on\x20Chain\x20B.\n\n\n\n\x03\x04\x04\
    \x01\x12\x03M\x08\x1c\n\n\n\x03\x04\x04\x07\x12\x03N\x02-\n\r\n\x06\x04\
    \x04\x07\x8d\xf4\x03\x12\x03N\x02-\n\n\n\x03\x04\x04\x07\x12\x03O\x02-\n\
    \r\n\x06\x04\x04\x07\x81\xf4\x03\x12\x03O\x02-\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03Q\x02g\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03Q\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03Q\x16#\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03Q34\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03Q5f\n\x0f\n\x08\x04\x04\x02\
    \0\x08\xee\xfb\x03\x12\x03Q6e\n\x0b\n\x04\x04\x04\x02\x01\x12\x03R\x02t\
    \n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03R\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03R\x160\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03R34\n\
    \x0c\n\x05\x04\x04\x02\x01\x08\x12\x03R5s\n\x0f\n\x08\x04\x04\x02\x01\
    \x08\xee\xfb\x03\x12\x03R6r\n\x0b\n\x04\x04\x04\x02\x02\x12\x03S\x025\n\
    \x0c\n\x05\x04\x04\x02\x02\x06\x12\x03S\x02\t\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03S\x16\x1d\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03S34\n\
    \x0b\n\x04\x04\x04\x02\x03\x12\x03T\x02f\n\x0c\n\x05\x04\x04\x02\x03\x06\
    \x12\x03T\x02\x15\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03T\x16\"\n\x0c\n\
    \x05\x04\x04\x02\x03\x03\x12\x03T34\n\x0c\n\x05\x04\x04\x02\x03\x08\x12\
    \x03T5e\n\x0f\n\x08\x04\x04\x02\x03\x08\xee\xfb\x03\x12\x03T6d\n\x0c\n\
    \x04\x04\x04\x02\x04\x12\x04U\x02VU\n\x0c\n\x05\x04\x04\x02\x04\x06\x12\
    \x03U\x02\x1b\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03U\x1c(\n\x0c\n\x05\
    \x04\x04\x02\x04\x03\x12\x03U34\n\x0c\n\x05\x04\x04\x02\x04\x08\x12\x03V\
    \x06T\n\x0f\n\x08\x04\x04\x02\x04\x08\xee\xfb\x03\x12\x03V\x075\n\x0f\n\
    \x08\x04\x04\x02\x04\x08\xe9\xfb\x03\x12\x03V7S\n_\n\x04\x04\x04\x02\x05\
    \x12\x03Y\x02D\x1aR\x20proof\x20of\x20the\x20initialization\x20the\x20co\
    nnection\x20on\x20Chain\x20B:\x20`UNITIALIZED\x20->\n\x20TRYOPEN`\n\n\
    \x0c\n\x05\x04\x04\x02\x05\x05\x12\x03Y\x02\x07\n\x0c\n\x05\x04\x04\x02\
    \x05\x01\x12\x03Y\x08\x11\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03Y\x14\
    \x15\n\x0c\n\x05\x04\x04\x02\x05\x08\x12\x03Y\x16C\n\x0f\n\x08\x04\x04\
    \x02\x05\x08\xee\xfb\x03\x12\x03Y\x17B\n8\n\x04\x04\x04\x02\x06\x12\x03[\
    \x02J\x1a+\x20proof\x20of\x20client\x20state\x20included\x20in\x20messag\
    e\n\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x03[\x02\x07\n\x0c\n\x05\x04\x04\
    \x02\x06\x01\x12\x03[\x08\x14\n\x0c\n\x05\x04\x04\x02\x06\x03\x12\x03[\
    \x17\x18\n\x0c\n\x05\x04\x04\x02\x06\x08\x12\x03[\x19I\n\x0f\n\x08\x04\
    \x04\x02\x06\x08\xee\xfb\x03\x12\x03[\x1aH\n.\n\x04\x04\x04\x02\x07\x12\
    \x03]\x02e\x1a!\x20proof\x20of\x20client\x20consensus\x20state\n\n\x0c\n\
    \x05\x04\x04\x02\x07\x05\x12\x03]\x02\x07\n\x0c\n\x05\x04\x04\x02\x07\
    \x01\x12\x03]\x1c+\n\x0c\n\x05\x04\x04\x02\x07\x03\x12\x03]/0\n\x0c\n\
    \x05\x04\x04\x02\x07\x08\x12\x03]1d\n\x0f\n\x08\x04\x04\x02\x07\x08\xee\
    \xfb\x03\x12\x03]2c\n\x0c\n\x04\x04\x04\x02\x08\x12\x04^\x02_Y\n\x0c\n\
    \x05\x04\x04\x02\x08\x06\x12\x03^\x02\x1b\n\x0c\n\x05\x04\x04\x02\x08\
    \x01\x12\x03^\x1c,\n\x0c\n\x05\x04\x04\x02\x08\x03\x12\x03^/0\n\x0c\n\
    \x05\x04\x04\x02\x08\x08\x12\x03_\x06X\n\x0f\n\x08\x04\x04\x02\x08\x08\
    \xee\xfb\x03\x12\x03_\x079\n\x0f\n\x08\x04\x04\x02\x08\x08\xe9\xfb\x03\
    \x12\x03_;W\n\x0b\n\x04\x04\x04\x02\t\x12\x03`\x02\x15\n\x0c\n\x05\x04\
    \x04\x02\t\x05\x12\x03`\x02\x08\n\x0c\n\x05\x04\x04\x02\t\x01\x12\x03`\t\
    \x0f\n\x0c\n\x05\x04\x04\x02\t\x03\x12\x03`\x12\x14\nZ\n\x02\x04\x05\x12\
    \x03d\0'\x1aO\x20MsgConnectionOpenAckResponse\x20defines\x20the\x20Msg/C\
    onnectionOpenAck\x20response\x20type.\n\n\n\n\x03\x04\x05\x01\x12\x03d\
    \x08$\n\x95\x01\n\x02\x04\x06\x12\x04h\0r\x01\x1a\x88\x01\x20MsgConnecti\
    onOpenConfirm\x20defines\x20a\x20msg\x20sent\x20by\x20a\x20Relayer\x20to\
    \x20Chain\x20B\x20to\n\x20acknowledge\x20the\x20change\x20of\x20connecti\
    on\x20state\x20to\x20OPEN\x20on\x20Chain\x20A.\n\n\n\n\x03\x04\x06\x01\
    \x12\x03h\x08\x20\n\n\n\x03\x04\x06\x07\x12\x03i\x02-\n\r\n\x06\x04\x06\
    \x07\x8d\xf4\x03\x12\x03i\x02-\n\n\n\x03\x04\x06\x07\x12\x03j\x02-\n\r\n\
    \x06\x04\x06\x07\x81\xf4\x03\x12\x03j\x02-\n\x0b\n\x04\x04\x06\x02\0\x12\
    \x03l\x02M\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03l\x02\x08\n\x0c\n\x05\
    \x04\x06\x02\0\x01\x12\x03l\t\x16\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03l\
    \x19\x1a\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03l\x1bL\n\x0f\n\x08\x04\x06\
    \x02\0\x08\xee\xfb\x03\x12\x03l\x1cK\nV\n\x04\x04\x06\x02\x01\x12\x03n\
    \x02[\x1aI\x20proof\x20for\x20the\x20change\x20of\x20the\x20connection\
    \x20state\x20on\x20Chain\x20A:\x20`INIT\x20->\x20OPEN`\n\n\x0c\n\x05\x04\
    \x06\x02\x01\x05\x12\x03n\x02\x07\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\
    \x03n\x1c%\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03n+,\n\x0c\n\x05\x04\
    \x06\x02\x01\x08\x12\x03n-Z\n\x0f\n\x08\x04\x06\x02\x01\x08\xee\xfb\x03\
    \x12\x03n.Y\n\x0c\n\x04\x04\x06\x02\x02\x12\x04o\x02pU\n\x0c\n\x05\x04\
    \x06\x02\x02\x06\x12\x03o\x02\x1b\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\
    \x03o\x1c(\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03o+,\n\x0c\n\x05\x04\
    \x06\x02\x02\x08\x12\x03p\x06T\n\x0f\n\x08\x04\x06\x02\x02\x08\xee\xfb\
    \x03\x12\x03p\x075\n\x0f\n\x08\x04\x06\x02\x02\x08\xe9\xfb\x03\x12\x03p7\
    S\n\x0b\n\x04\x04\x06\x02\x03\x12\x03q\x02\x14\n\x0c\n\x05\x04\x06\x02\
    \x03\x05\x12\x03q\x02\x08\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03q\t\x0f\
    \n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03q\x12\x13\nc\n\x02\x04\x07\x12\
    \x03v\0+\x1aX\x20MsgConnectionOpenConfirmResponse\x20defines\x20the\x20M\
    sg/ConnectionOpenConfirm\n\x20response\x20type.\n\n\n\n\x03\x04\x07\x01\
    \x12\x03v\x08(b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            deps.push(super::connection::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(MsgConnectionOpenInit::generated_message_descriptor_data());
            messages.push(MsgConnectionOpenInitResponse::generated_message_descriptor_data());
            messages.push(MsgConnectionOpenTry::generated_message_descriptor_data());
            messages.push(MsgConnectionOpenTryResponse::generated_message_descriptor_data());
            messages.push(MsgConnectionOpenAck::generated_message_descriptor_data());
            messages.push(MsgConnectionOpenAckResponse::generated_message_descriptor_data());
            messages.push(MsgConnectionOpenConfirm::generated_message_descriptor_data());
            messages.push(MsgConnectionOpenConfirmResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
