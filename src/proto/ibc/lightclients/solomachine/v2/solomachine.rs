// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/lightclients/solomachine/v2/solomachine.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  ClientState defines a solo machine client that tracks the current consensus
///  state and if the client is frozen.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.ClientState)
pub struct ClientState {
    // message fields
    ///  latest sequence of the client state
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ClientState.sequence)
    pub sequence: u64,
    ///  frozen sequence of the solo machine
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ClientState.is_frozen)
    pub is_frozen: bool,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ClientState.consensus_state)
    pub consensus_state: ::protobuf::MessageField<ConsensusState>,
    ///  when set to true, will allow governance to update a solo machine client.
    ///  The client will be unfrozen if it is frozen.
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ClientState.allow_update_after_proposal)
    pub allow_update_after_proposal: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.ClientState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientState {
    fn default() -> &'a ClientState {
        <ClientState as ::protobuf::Message>::default_instance()
    }
}

impl ClientState {
    pub fn new() -> ClientState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &ClientState| { &m.sequence },
            |m: &mut ClientState| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_frozen",
            |m: &ClientState| { &m.is_frozen },
            |m: &mut ClientState| { &mut m.is_frozen },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConsensusState>(
            "consensus_state",
            |m: &ClientState| { &m.consensus_state },
            |m: &mut ClientState| { &mut m.consensus_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "allow_update_after_proposal",
            |m: &ClientState| { &m.allow_update_after_proposal },
            |m: &mut ClientState| { &mut m.allow_update_after_proposal },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientState>(
            "ClientState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientState {
    const NAME: &'static str = "ClientState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sequence = is.read_uint64()?;
                },
                16 => {
                    self.is_frozen = is.read_bool()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_state)?;
                },
                32 => {
                    self.allow_update_after_proposal = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.sequence);
        }
        if self.is_frozen != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.allow_update_after_proposal != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if self.is_frozen != false {
            os.write_bool(2, self.is_frozen)?;
        }
        if let Some(v) = self.consensus_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.allow_update_after_proposal != false {
            os.write_bool(4, self.allow_update_after_proposal)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientState {
        ClientState::new()
    }

    fn clear(&mut self) {
        self.sequence = 0;
        self.is_frozen = false;
        self.consensus_state.clear();
        self.allow_update_after_proposal = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientState {
        static instance: ClientState = ClientState {
            sequence: 0,
            is_frozen: false,
            consensus_state: ::protobuf::MessageField::none(),
            allow_update_after_proposal: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ConsensusState defines a solo machine consensus state. The sequence of a
///  consensus state is contained in the "height" key used in storing the
///  consensus state.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.ConsensusState)
pub struct ConsensusState {
    // message fields
    ///  public key of the solo machine
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ConsensusState.public_key)
    pub public_key: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  diversifier allows the same public key to be re-used across different solo
    ///  machine clients (potentially on different chains) without being considered
    ///  misbehaviour.
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ConsensusState.diversifier)
    pub diversifier: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ConsensusState.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.ConsensusState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsensusState {
    fn default() -> &'a ConsensusState {
        <ConsensusState as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusState {
    pub fn new() -> ConsensusState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "public_key",
            |m: &ConsensusState| { &m.public_key },
            |m: &mut ConsensusState| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "diversifier",
            |m: &ConsensusState| { &m.diversifier },
            |m: &mut ConsensusState| { &mut m.diversifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &ConsensusState| { &m.timestamp },
            |m: &mut ConsensusState| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsensusState>(
            "ConsensusState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsensusState {
    const NAME: &'static str = "ConsensusState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.public_key)?;
                },
                18 => {
                    self.diversifier = is.read_string()?;
                },
                24 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.diversifier.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.diversifier);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.diversifier.is_empty() {
            os.write_string(2, &self.diversifier)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsensusState {
        ConsensusState::new()
    }

    fn clear(&mut self) {
        self.public_key.clear();
        self.diversifier.clear();
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsensusState {
        static instance: ConsensusState = ConsensusState {
            public_key: ::protobuf::MessageField::none(),
            diversifier: ::std::string::String::new(),
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsensusState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsensusState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsensusState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Header defines a solo machine consensus header
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.Header)
pub struct Header {
    // message fields
    ///  sequence to update solo machine public key at
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Header.sequence)
    pub sequence: u64,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Header.timestamp)
    pub timestamp: u64,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Header.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Header.new_public_key)
    pub new_public_key: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Header.new_diversifier)
    pub new_diversifier: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.Header.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &Header| { &m.sequence },
            |m: &mut Header| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &Header| { &m.timestamp },
            |m: &mut Header| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &Header| { &m.signature },
            |m: &mut Header| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "new_public_key",
            |m: &Header| { &m.new_public_key },
            |m: &mut Header| { &mut m.new_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "new_diversifier",
            |m: &Header| { &m.new_diversifier },
            |m: &mut Header| { &mut m.new_diversifier },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Header>(
            "Header",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Header {
    const NAME: &'static str = "Header";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sequence = is.read_uint64()?;
                },
                16 => {
                    self.timestamp = is.read_uint64()?;
                },
                26 => {
                    self.signature = is.read_bytes()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.new_public_key)?;
                },
                42 => {
                    self.new_diversifier = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.sequence);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.timestamp);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signature);
        }
        if let Some(v) = self.new_public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.new_diversifier.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.new_diversifier);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(3, &self.signature)?;
        }
        if let Some(v) = self.new_public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if !self.new_diversifier.is_empty() {
            os.write_string(5, &self.new_diversifier)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Header {
        Header::new()
    }

    fn clear(&mut self) {
        self.sequence = 0;
        self.timestamp = 0;
        self.signature.clear();
        self.new_public_key.clear();
        self.new_diversifier.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Header {
        static instance: Header = Header {
            sequence: 0,
            timestamp: 0,
            signature: ::std::vec::Vec::new(),
            new_public_key: ::protobuf::MessageField::none(),
            new_diversifier: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Header {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Header").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Misbehaviour defines misbehaviour for a solo machine which consists
///  of a sequence and two signatures over different messages at that sequence.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.Misbehaviour)
pub struct Misbehaviour {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Misbehaviour.client_id)
    pub client_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Misbehaviour.sequence)
    pub sequence: u64,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Misbehaviour.signature_one)
    pub signature_one: ::protobuf::MessageField<SignatureAndData>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.Misbehaviour.signature_two)
    pub signature_two: ::protobuf::MessageField<SignatureAndData>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.Misbehaviour.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Misbehaviour {
    fn default() -> &'a Misbehaviour {
        <Misbehaviour as ::protobuf::Message>::default_instance()
    }
}

impl Misbehaviour {
    pub fn new() -> Misbehaviour {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_id",
            |m: &Misbehaviour| { &m.client_id },
            |m: &mut Misbehaviour| { &mut m.client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &Misbehaviour| { &m.sequence },
            |m: &mut Misbehaviour| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SignatureAndData>(
            "signature_one",
            |m: &Misbehaviour| { &m.signature_one },
            |m: &mut Misbehaviour| { &mut m.signature_one },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SignatureAndData>(
            "signature_two",
            |m: &Misbehaviour| { &m.signature_two },
            |m: &mut Misbehaviour| { &mut m.signature_two },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Misbehaviour>(
            "Misbehaviour",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Misbehaviour {
    const NAME: &'static str = "Misbehaviour";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.client_id = is.read_string()?;
                },
                16 => {
                    self.sequence = is.read_uint64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature_one)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature_two)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.sequence);
        }
        if let Some(v) = self.signature_one.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.signature_two.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if self.sequence != 0 {
            os.write_uint64(2, self.sequence)?;
        }
        if let Some(v) = self.signature_one.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.signature_two.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Misbehaviour {
        Misbehaviour::new()
    }

    fn clear(&mut self) {
        self.client_id.clear();
        self.sequence = 0;
        self.signature_one.clear();
        self.signature_two.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Misbehaviour {
        static instance: Misbehaviour = Misbehaviour {
            client_id: ::std::string::String::new(),
            sequence: 0,
            signature_one: ::protobuf::MessageField::none(),
            signature_two: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Misbehaviour {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Misbehaviour").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Misbehaviour {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Misbehaviour {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SignatureAndData contains a signature and the data signed over to create that
///  signature.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.SignatureAndData)
pub struct SignatureAndData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignatureAndData.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignatureAndData.data_type)
    pub data_type: ::protobuf::EnumOrUnknown<DataType>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignatureAndData.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignatureAndData.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.SignatureAndData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignatureAndData {
    fn default() -> &'a SignatureAndData {
        <SignatureAndData as ::protobuf::Message>::default_instance()
    }
}

impl SignatureAndData {
    pub fn new() -> SignatureAndData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignatureAndData| { &m.signature },
            |m: &mut SignatureAndData| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data_type",
            |m: &SignatureAndData| { &m.data_type },
            |m: &mut SignatureAndData| { &mut m.data_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &SignatureAndData| { &m.data },
            |m: &mut SignatureAndData| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &SignatureAndData| { &m.timestamp },
            |m: &mut SignatureAndData| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignatureAndData>(
            "SignatureAndData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignatureAndData {
    const NAME: &'static str = "SignatureAndData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = is.read_bytes()?;
                },
                16 => {
                    self.data_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                32 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        if self.data_type != ::protobuf::EnumOrUnknown::new(DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.data_type.value());
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        if self.data_type != ::protobuf::EnumOrUnknown::new(DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.data_type))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(4, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignatureAndData {
        SignatureAndData::new()
    }

    fn clear(&mut self) {
        self.signature.clear();
        self.data_type = ::protobuf::EnumOrUnknown::new(DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED);
        self.data.clear();
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignatureAndData {
        static instance: SignatureAndData = SignatureAndData {
            signature: ::std::vec::Vec::new(),
            data_type: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::vec::Vec::new(),
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignatureAndData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignatureAndData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignatureAndData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureAndData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TimestampedSignatureData contains the signature data and the timestamp of the
///  signature.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
pub struct TimestampedSignatureData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.TimestampedSignatureData.signature_data)
    pub signature_data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.TimestampedSignatureData.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.TimestampedSignatureData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TimestampedSignatureData {
    fn default() -> &'a TimestampedSignatureData {
        <TimestampedSignatureData as ::protobuf::Message>::default_instance()
    }
}

impl TimestampedSignatureData {
    pub fn new() -> TimestampedSignatureData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature_data",
            |m: &TimestampedSignatureData| { &m.signature_data },
            |m: &mut TimestampedSignatureData| { &mut m.signature_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &TimestampedSignatureData| { &m.timestamp },
            |m: &mut TimestampedSignatureData| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TimestampedSignatureData>(
            "TimestampedSignatureData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TimestampedSignatureData {
    const NAME: &'static str = "TimestampedSignatureData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature_data = is.read_bytes()?;
                },
                16 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.signature_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature_data);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.signature_data.is_empty() {
            os.write_bytes(1, &self.signature_data)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TimestampedSignatureData {
        TimestampedSignatureData::new()
    }

    fn clear(&mut self) {
        self.signature_data.clear();
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TimestampedSignatureData {
        static instance: TimestampedSignatureData = TimestampedSignatureData {
            signature_data: ::std::vec::Vec::new(),
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TimestampedSignatureData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TimestampedSignatureData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TimestampedSignatureData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimestampedSignatureData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SignBytes defines the signed bytes used for signature verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.SignBytes)
pub struct SignBytes {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignBytes.sequence)
    pub sequence: u64,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignBytes.timestamp)
    pub timestamp: u64,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignBytes.diversifier)
    pub diversifier: ::std::string::String,
    ///  type of the data used
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignBytes.data_type)
    pub data_type: ::protobuf::EnumOrUnknown<DataType>,
    ///  marshaled data
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.SignBytes.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.SignBytes.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignBytes {
    fn default() -> &'a SignBytes {
        <SignBytes as ::protobuf::Message>::default_instance()
    }
}

impl SignBytes {
    pub fn new() -> SignBytes {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequence",
            |m: &SignBytes| { &m.sequence },
            |m: &mut SignBytes| { &mut m.sequence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &SignBytes| { &m.timestamp },
            |m: &mut SignBytes| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "diversifier",
            |m: &SignBytes| { &m.diversifier },
            |m: &mut SignBytes| { &mut m.diversifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data_type",
            |m: &SignBytes| { &m.data_type },
            |m: &mut SignBytes| { &mut m.data_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &SignBytes| { &m.data },
            |m: &mut SignBytes| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignBytes>(
            "SignBytes",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignBytes {
    const NAME: &'static str = "SignBytes";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sequence = is.read_uint64()?;
                },
                16 => {
                    self.timestamp = is.read_uint64()?;
                },
                26 => {
                    self.diversifier = is.read_string()?;
                },
                32 => {
                    self.data_type = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.sequence);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.timestamp);
        }
        if !self.diversifier.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.diversifier);
        }
        if self.data_type != ::protobuf::EnumOrUnknown::new(DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.data_type.value());
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if !self.diversifier.is_empty() {
            os.write_string(3, &self.diversifier)?;
        }
        if self.data_type != ::protobuf::EnumOrUnknown::new(DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.data_type))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(5, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignBytes {
        SignBytes::new()
    }

    fn clear(&mut self) {
        self.sequence = 0;
        self.timestamp = 0;
        self.diversifier.clear();
        self.data_type = ::protobuf::EnumOrUnknown::new(DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED);
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignBytes {
        static instance: SignBytes = SignBytes {
            sequence: 0,
            timestamp: 0,
            diversifier: ::std::string::String::new(),
            data_type: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignBytes {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignBytes").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignBytes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignBytes {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  HeaderData returns the SignBytes data for update verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.HeaderData)
pub struct HeaderData {
    // message fields
    ///  header public key
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.HeaderData.new_pub_key)
    pub new_pub_key: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    ///  header diversifier
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.HeaderData.new_diversifier)
    pub new_diversifier: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.HeaderData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HeaderData {
    fn default() -> &'a HeaderData {
        <HeaderData as ::protobuf::Message>::default_instance()
    }
}

impl HeaderData {
    pub fn new() -> HeaderData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "new_pub_key",
            |m: &HeaderData| { &m.new_pub_key },
            |m: &mut HeaderData| { &mut m.new_pub_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "new_diversifier",
            |m: &HeaderData| { &m.new_diversifier },
            |m: &mut HeaderData| { &mut m.new_diversifier },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeaderData>(
            "HeaderData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HeaderData {
    const NAME: &'static str = "HeaderData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.new_pub_key)?;
                },
                18 => {
                    self.new_diversifier = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.new_pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.new_diversifier.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.new_diversifier);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.new_pub_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.new_diversifier.is_empty() {
            os.write_string(2, &self.new_diversifier)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HeaderData {
        HeaderData::new()
    }

    fn clear(&mut self) {
        self.new_pub_key.clear();
        self.new_diversifier.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HeaderData {
        static instance: HeaderData = HeaderData {
            new_pub_key: ::protobuf::MessageField::none(),
            new_diversifier: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HeaderData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HeaderData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HeaderData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeaderData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ClientStateData returns the SignBytes data for client state verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.ClientStateData)
pub struct ClientStateData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ClientStateData.path)
    pub path: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ClientStateData.client_state)
    pub client_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.ClientStateData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientStateData {
    fn default() -> &'a ClientStateData {
        <ClientStateData as ::protobuf::Message>::default_instance()
    }
}

impl ClientStateData {
    pub fn new() -> ClientStateData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &ClientStateData| { &m.path },
            |m: &mut ClientStateData| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "client_state",
            |m: &ClientStateData| { &m.client_state },
            |m: &mut ClientStateData| { &mut m.client_state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientStateData>(
            "ClientStateData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientStateData {
    const NAME: &'static str = "ClientStateData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.client_state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(v) = self.client_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientStateData {
        ClientStateData::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.client_state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientStateData {
        static instance: ClientStateData = ClientStateData {
            path: ::std::vec::Vec::new(),
            client_state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientStateData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientStateData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientStateData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ConsensusStateData returns the SignBytes data for consensus state
///  verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.ConsensusStateData)
pub struct ConsensusStateData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ConsensusStateData.path)
    pub path: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state)
    pub consensus_state: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.ConsensusStateData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsensusStateData {
    fn default() -> &'a ConsensusStateData {
        <ConsensusStateData as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusStateData {
    pub fn new() -> ConsensusStateData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &ConsensusStateData| { &m.path },
            |m: &mut ConsensusStateData| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "consensus_state",
            |m: &ConsensusStateData| { &m.consensus_state },
            |m: &mut ConsensusStateData| { &mut m.consensus_state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsensusStateData>(
            "ConsensusStateData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsensusStateData {
    const NAME: &'static str = "ConsensusStateData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.consensus_state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(v) = self.consensus_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsensusStateData {
        ConsensusStateData::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.consensus_state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsensusStateData {
        static instance: ConsensusStateData = ConsensusStateData {
            path: ::std::vec::Vec::new(),
            consensus_state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsensusStateData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsensusStateData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsensusStateData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusStateData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ConnectionStateData returns the SignBytes data for connection state
///  verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.ConnectionStateData)
pub struct ConnectionStateData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ConnectionStateData.path)
    pub path: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ConnectionStateData.connection)
    pub connection: ::protobuf::MessageField<super::connection::ConnectionEnd>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.ConnectionStateData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectionStateData {
    fn default() -> &'a ConnectionStateData {
        <ConnectionStateData as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionStateData {
    pub fn new() -> ConnectionStateData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &ConnectionStateData| { &m.path },
            |m: &mut ConnectionStateData| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::connection::ConnectionEnd>(
            "connection",
            |m: &ConnectionStateData| { &m.connection },
            |m: &mut ConnectionStateData| { &mut m.connection },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectionStateData>(
            "ConnectionStateData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectionStateData {
    const NAME: &'static str = "ConnectionStateData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.connection)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(v) = self.connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(v) = self.connection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectionStateData {
        ConnectionStateData::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.connection.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectionStateData {
        static instance: ConnectionStateData = ConnectionStateData {
            path: ::std::vec::Vec::new(),
            connection: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectionStateData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectionStateData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectionStateData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionStateData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ChannelStateData returns the SignBytes data for channel state
///  verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.ChannelStateData)
pub struct ChannelStateData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ChannelStateData.path)
    pub path: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.ChannelStateData.channel)
    pub channel: ::protobuf::MessageField<super::channel::Channel>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.ChannelStateData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChannelStateData {
    fn default() -> &'a ChannelStateData {
        <ChannelStateData as ::protobuf::Message>::default_instance()
    }
}

impl ChannelStateData {
    pub fn new() -> ChannelStateData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &ChannelStateData| { &m.path },
            |m: &mut ChannelStateData| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::channel::Channel>(
            "channel",
            |m: &ChannelStateData| { &m.channel },
            |m: &mut ChannelStateData| { &mut m.channel },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChannelStateData>(
            "ChannelStateData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChannelStateData {
    const NAME: &'static str = "ChannelStateData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.channel)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(v) = self.channel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(v) = self.channel.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChannelStateData {
        ChannelStateData::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.channel.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChannelStateData {
        static instance: ChannelStateData = ChannelStateData {
            path: ::std::vec::Vec::new(),
            channel: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChannelStateData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChannelStateData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChannelStateData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelStateData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PacketCommitmentData returns the SignBytes data for packet commitment
///  verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.PacketCommitmentData)
pub struct PacketCommitmentData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.PacketCommitmentData.path)
    pub path: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.PacketCommitmentData.commitment)
    pub commitment: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.PacketCommitmentData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PacketCommitmentData {
    fn default() -> &'a PacketCommitmentData {
        <PacketCommitmentData as ::protobuf::Message>::default_instance()
    }
}

impl PacketCommitmentData {
    pub fn new() -> PacketCommitmentData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &PacketCommitmentData| { &m.path },
            |m: &mut PacketCommitmentData| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "commitment",
            |m: &PacketCommitmentData| { &m.commitment },
            |m: &mut PacketCommitmentData| { &mut m.commitment },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PacketCommitmentData>(
            "PacketCommitmentData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PacketCommitmentData {
    const NAME: &'static str = "PacketCommitmentData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_bytes()?;
                },
                18 => {
                    self.commitment = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if !self.commitment.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.commitment);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if !self.commitment.is_empty() {
            os.write_bytes(2, &self.commitment)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PacketCommitmentData {
        PacketCommitmentData::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.commitment.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PacketCommitmentData {
        static instance: PacketCommitmentData = PacketCommitmentData {
            path: ::std::vec::Vec::new(),
            commitment: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PacketCommitmentData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PacketCommitmentData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PacketCommitmentData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketCommitmentData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PacketAcknowledgementData returns the SignBytes data for acknowledgement
///  verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
pub struct PacketAcknowledgementData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.path)
    pub path: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.acknowledgement)
    pub acknowledgement: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PacketAcknowledgementData {
    fn default() -> &'a PacketAcknowledgementData {
        <PacketAcknowledgementData as ::protobuf::Message>::default_instance()
    }
}

impl PacketAcknowledgementData {
    pub fn new() -> PacketAcknowledgementData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &PacketAcknowledgementData| { &m.path },
            |m: &mut PacketAcknowledgementData| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "acknowledgement",
            |m: &PacketAcknowledgementData| { &m.acknowledgement },
            |m: &mut PacketAcknowledgementData| { &mut m.acknowledgement },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PacketAcknowledgementData>(
            "PacketAcknowledgementData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PacketAcknowledgementData {
    const NAME: &'static str = "PacketAcknowledgementData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_bytes()?;
                },
                18 => {
                    self.acknowledgement = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if !self.acknowledgement.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.acknowledgement);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if !self.acknowledgement.is_empty() {
            os.write_bytes(2, &self.acknowledgement)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PacketAcknowledgementData {
        PacketAcknowledgementData::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.acknowledgement.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PacketAcknowledgementData {
        static instance: PacketAcknowledgementData = PacketAcknowledgementData {
            path: ::std::vec::Vec::new(),
            acknowledgement: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PacketAcknowledgementData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PacketAcknowledgementData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PacketAcknowledgementData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketAcknowledgementData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PacketReceiptAbsenceData returns the SignBytes data for
///  packet receipt absence verification.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
pub struct PacketReceiptAbsenceData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.path)
    pub path: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PacketReceiptAbsenceData {
    fn default() -> &'a PacketReceiptAbsenceData {
        <PacketReceiptAbsenceData as ::protobuf::Message>::default_instance()
    }
}

impl PacketReceiptAbsenceData {
    pub fn new() -> PacketReceiptAbsenceData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &PacketReceiptAbsenceData| { &m.path },
            |m: &mut PacketReceiptAbsenceData| { &mut m.path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PacketReceiptAbsenceData>(
            "PacketReceiptAbsenceData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PacketReceiptAbsenceData {
    const NAME: &'static str = "PacketReceiptAbsenceData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PacketReceiptAbsenceData {
        PacketReceiptAbsenceData::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PacketReceiptAbsenceData {
        static instance: PacketReceiptAbsenceData = PacketReceiptAbsenceData {
            path: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PacketReceiptAbsenceData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PacketReceiptAbsenceData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PacketReceiptAbsenceData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketReceiptAbsenceData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  NextSequenceRecvData returns the SignBytes data for verification of the next
///  sequence to be received.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
pub struct NextSequenceRecvData {
    // message fields
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.NextSequenceRecvData.path)
    pub path: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.lightclients.solomachine.v2.NextSequenceRecvData.next_seq_recv)
    pub next_seq_recv: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.solomachine.v2.NextSequenceRecvData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NextSequenceRecvData {
    fn default() -> &'a NextSequenceRecvData {
        <NextSequenceRecvData as ::protobuf::Message>::default_instance()
    }
}

impl NextSequenceRecvData {
    pub fn new() -> NextSequenceRecvData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &NextSequenceRecvData| { &m.path },
            |m: &mut NextSequenceRecvData| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_seq_recv",
            |m: &NextSequenceRecvData| { &m.next_seq_recv },
            |m: &mut NextSequenceRecvData| { &mut m.next_seq_recv },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NextSequenceRecvData>(
            "NextSequenceRecvData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NextSequenceRecvData {
    const NAME: &'static str = "NextSequenceRecvData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_bytes()?;
                },
                16 => {
                    self.next_seq_recv = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if self.next_seq_recv != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.next_seq_recv);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if self.next_seq_recv != 0 {
            os.write_uint64(2, self.next_seq_recv)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NextSequenceRecvData {
        NextSequenceRecvData::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.next_seq_recv = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NextSequenceRecvData {
        static instance: NextSequenceRecvData = NextSequenceRecvData {
            path: ::std::vec::Vec::new(),
            next_seq_recv: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NextSequenceRecvData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NextSequenceRecvData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NextSequenceRecvData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NextSequenceRecvData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  DataType defines the type of solo machine proof being created. This is done
///  to preserve uniqueness of different data sign byte encodings.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ibc.lightclients.solomachine.v2.DataType)
pub enum DataType {
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_UNINITIALIZED_UNSPECIFIED)
    DATA_TYPE_UNINITIALIZED_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_CLIENT_STATE)
    DATA_TYPE_CLIENT_STATE = 1,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_CONSENSUS_STATE)
    DATA_TYPE_CONSENSUS_STATE = 2,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_CONNECTION_STATE)
    DATA_TYPE_CONNECTION_STATE = 3,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_CHANNEL_STATE)
    DATA_TYPE_CHANNEL_STATE = 4,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_PACKET_COMMITMENT)
    DATA_TYPE_PACKET_COMMITMENT = 5,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_PACKET_ACKNOWLEDGEMENT)
    DATA_TYPE_PACKET_ACKNOWLEDGEMENT = 6,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_PACKET_RECEIPT_ABSENCE)
    DATA_TYPE_PACKET_RECEIPT_ABSENCE = 7,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_NEXT_SEQUENCE_RECV)
    DATA_TYPE_NEXT_SEQUENCE_RECV = 8,
    // @@protoc_insertion_point(enum_value:ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_HEADER)
    DATA_TYPE_HEADER = 9,
}

impl ::protobuf::Enum for DataType {
    const NAME: &'static str = "DataType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataType> {
        match value {
            0 => ::std::option::Option::Some(DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED),
            1 => ::std::option::Option::Some(DataType::DATA_TYPE_CLIENT_STATE),
            2 => ::std::option::Option::Some(DataType::DATA_TYPE_CONSENSUS_STATE),
            3 => ::std::option::Option::Some(DataType::DATA_TYPE_CONNECTION_STATE),
            4 => ::std::option::Option::Some(DataType::DATA_TYPE_CHANNEL_STATE),
            5 => ::std::option::Option::Some(DataType::DATA_TYPE_PACKET_COMMITMENT),
            6 => ::std::option::Option::Some(DataType::DATA_TYPE_PACKET_ACKNOWLEDGEMENT),
            7 => ::std::option::Option::Some(DataType::DATA_TYPE_PACKET_RECEIPT_ABSENCE),
            8 => ::std::option::Option::Some(DataType::DATA_TYPE_NEXT_SEQUENCE_RECV),
            9 => ::std::option::Option::Some(DataType::DATA_TYPE_HEADER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DataType] = &[
        DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED,
        DataType::DATA_TYPE_CLIENT_STATE,
        DataType::DATA_TYPE_CONSENSUS_STATE,
        DataType::DATA_TYPE_CONNECTION_STATE,
        DataType::DATA_TYPE_CHANNEL_STATE,
        DataType::DATA_TYPE_PACKET_COMMITMENT,
        DataType::DATA_TYPE_PACKET_ACKNOWLEDGEMENT,
        DataType::DATA_TYPE_PACKET_RECEIPT_ABSENCE,
        DataType::DATA_TYPE_NEXT_SEQUENCE_RECV,
        DataType::DATA_TYPE_HEADER,
    ];
}

impl ::protobuf::EnumFull for DataType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DataType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DataType {
    fn default() -> Self {
        DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED
    }
}

impl DataType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataType>("DataType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1ibc/lightclients/solomachine/v2/solomachine.proto\x12\x1fibc.lightcli\
    ents.solomachine.v2\x1a'ibc/core/connection/v1/connection.proto\x1a!ibc/\
    core/channel/v1/channel.proto\x1a\x14gogoproto/gogo.proto\x1a\x19google/\
    protobuf/any.proto\"\xbf\x02\n\x0bClientState\x12\x1a\n\x08sequence\x18\
    \x01\x20\x01(\x04R\x08sequence\x121\n\tis_frozen\x18\x02\x20\x01(\x08R\
    \x08isFrozenB\x14\xf2\xde\x1f\x10yaml:\"is_frozen\"\x12t\n\x0fconsensus_\
    state\x18\x03\x20\x01(\x0b2/.ibc.lightclients.solomachine.v2.ConsensusSt\
    ateR\x0econsensusStateB\x1a\xf2\xde\x1f\x16yaml:\"consensus_state\"\x12e\
    \n\x1ballow_update_after_proposal\x18\x04\x20\x01(\x08R\x18allowUpdateAf\
    terProposalB&\xf2\xde\x1f\"yaml:\"allow_update_after_proposal\":\x04\x88\
    \xa0\x1f\0\"\xa2\x01\n\x0eConsensusState\x12J\n\npublic_key\x18\x01\x20\
    \x01(\x0b2\x14.google.protobuf.AnyR\tpublicKeyB\x15\xf2\xde\x1f\x11yaml:\
    \"public_key\"\x12\x20\n\x0bdiversifier\x18\x02\x20\x01(\tR\x0bdiversifi\
    er\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x04R\ttimestamp:\x04\x88\xa0\
    \x1f\0\"\x82\x02\n\x06Header\x12\x1a\n\x08sequence\x18\x01\x20\x01(\x04R\
    \x08sequence\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\x04R\ttimestamp\x12\
    \x1c\n\tsignature\x18\x03\x20\x01(\x0cR\tsignature\x12U\n\x0enew_public_\
    key\x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0cnewPublicKeyB\x19\
    \xf2\xde\x1f\x15yaml:\"new_public_key\"\x12C\n\x0fnew_diversifier\x18\
    \x05\x20\x01(\tR\x0enewDiversifierB\x1a\xf2\xde\x1f\x16yaml:\"new_divers\
    ifier\":\x04\x88\xa0\x1f\0\"\xc7\x02\n\x0cMisbehaviour\x121\n\tclient_id\
    \x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"client_id\"\
    \x12\x1a\n\x08sequence\x18\x02\x20\x01(\x04R\x08sequence\x12p\n\rsignatu\
    re_one\x18\x03\x20\x01(\x0b21.ibc.lightclients.solomachine.v2.SignatureA\
    ndDataR\x0csignatureOneB\x18\xf2\xde\x1f\x14yaml:\"signature_one\"\x12p\
    \n\rsignature_two\x18\x04\x20\x01(\x0b21.ibc.lightclients.solomachine.v2\
    .SignatureAndDataR\x0csignatureTwoB\x18\xf2\xde\x1f\x14yaml:\"signature_\
    two\":\x04\x88\xa0\x1f\0\"\xc6\x01\n\x10SignatureAndData\x12\x1c\n\tsign\
    ature\x18\x01\x20\x01(\x0cR\tsignature\x12\\\n\tdata_type\x18\x02\x20\
    \x01(\x0e2).ibc.lightclients.solomachine.v2.DataTypeR\x08dataTypeB\x14\
    \xf2\xde\x1f\x10yaml:\"data_type\"\x12\x12\n\x04data\x18\x03\x20\x01(\
    \x0cR\x04data\x12\x1c\n\ttimestamp\x18\x04\x20\x01(\x04R\ttimestamp:\x04\
    \x88\xa0\x1f\0\"\x80\x01\n\x18TimestampedSignatureData\x12@\n\x0esignatu\
    re_data\x18\x01\x20\x01(\x0cR\rsignatureDataB\x19\xf2\xde\x1f\x15yaml:\"\
    signature_data\"\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\x04R\ttimestamp:\
    \x04\x88\xa0\x1f\0\"\xdf\x01\n\tSignBytes\x12\x1a\n\x08sequence\x18\x01\
    \x20\x01(\x04R\x08sequence\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\x04R\tt\
    imestamp\x12\x20\n\x0bdiversifier\x18\x03\x20\x01(\tR\x0bdiversifier\x12\
    \\\n\tdata_type\x18\x04\x20\x01(\x0e2).ibc.lightclients.solomachine.v2.D\
    ataTypeR\x08dataTypeB\x14\xf2\xde\x1f\x10yaml:\"data_type\"\x12\x12\n\
    \x04data\x18\x05\x20\x01(\x0cR\x04data:\x04\x88\xa0\x1f\0\"\xa5\x01\n\nH\
    eaderData\x12L\n\x0bnew_pub_key\x18\x01\x20\x01(\x0b2\x14.google.protobu\
    f.AnyR\tnewPubKeyB\x16\xf2\xde\x1f\x12yaml:\"new_pub_key\"\x12C\n\x0fnew\
    _diversifier\x18\x02\x20\x01(\tR\x0enewDiversifierB\x1a\xf2\xde\x1f\x16y\
    aml:\"new_diversifier\":\x04\x88\xa0\x1f\0\"}\n\x0fClientStateData\x12\
    \x12\n\x04path\x18\x01\x20\x01(\x0cR\x04path\x12P\n\x0cclient_state\x18\
    \x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0bclientStateB\x17\xf2\xde\
    \x1f\x13yaml:\"client_state\":\x04\x88\xa0\x1f\0\"\x89\x01\n\x12Consensu\
    sStateData\x12\x12\n\x04path\x18\x01\x20\x01(\x0cR\x04path\x12Y\n\x0fcon\
    sensus_state\x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0econsensus\
    StateB\x1a\xf2\xde\x1f\x16yaml:\"consensus_state\":\x04\x88\xa0\x1f\0\"v\
    \n\x13ConnectionStateData\x12\x12\n\x04path\x18\x01\x20\x01(\x0cR\x04pat\
    h\x12E\n\nconnection\x18\x02\x20\x01(\x0b2%.ibc.core.connection.v1.Conne\
    ctionEndR\nconnection:\x04\x88\xa0\x1f\0\"d\n\x10ChannelStateData\x12\
    \x12\n\x04path\x18\x01\x20\x01(\x0cR\x04path\x126\n\x07channel\x18\x02\
    \x20\x01(\x0b2\x1c.ibc.core.channel.v1.ChannelR\x07channel:\x04\x88\xa0\
    \x1f\0\"J\n\x14PacketCommitmentData\x12\x12\n\x04path\x18\x01\x20\x01(\
    \x0cR\x04path\x12\x1e\n\ncommitment\x18\x02\x20\x01(\x0cR\ncommitment\"Y\
    \n\x19PacketAcknowledgementData\x12\x12\n\x04path\x18\x01\x20\x01(\x0cR\
    \x04path\x12(\n\x0facknowledgement\x18\x02\x20\x01(\x0cR\x0facknowledgem\
    ent\".\n\x18PacketReceiptAbsenceData\x12\x12\n\x04path\x18\x01\x20\x01(\
    \x0cR\x04path\"h\n\x14NextSequenceRecvData\x12\x12\n\x04path\x18\x01\x20\
    \x01(\x0cR\x04path\x12<\n\rnext_seq_recv\x18\x02\x20\x01(\x04R\x0bnextSe\
    qRecvB\x18\xf2\xde\x1f\x14yaml:\"next_seq_recv\"*\x8c\x04\n\x08DataType\
    \x128\n#DATA_TYPE_UNINITIALIZED_UNSPECIFIED\x10\0\x1a\x0f\x8a\x9d\x20\
    \x0bUNSPECIFIED\x12&\n\x16DATA_TYPE_CLIENT_STATE\x10\x01\x1a\n\x8a\x9d\
    \x20\x06CLIENT\x12,\n\x19DATA_TYPE_CONSENSUS_STATE\x10\x02\x1a\r\x8a\x9d\
    \x20\tCONSENSUS\x12.\n\x1aDATA_TYPE_CONNECTION_STATE\x10\x03\x1a\x0e\x8a\
    \x9d\x20\nCONNECTION\x12(\n\x17DATA_TYPE_CHANNEL_STATE\x10\x04\x1a\x0b\
    \x8a\x9d\x20\x07CHANNEL\x125\n\x1bDATA_TYPE_PACKET_COMMITMENT\x10\x05\
    \x1a\x14\x8a\x9d\x20\x10PACKETCOMMITMENT\x12?\n\x20DATA_TYPE_PACKET_ACKN\
    OWLEDGEMENT\x10\x06\x1a\x19\x8a\x9d\x20\x15PACKETACKNOWLEDGEMENT\x12>\n\
    \x20DATA_TYPE_PACKET_RECEIPT_ABSENCE\x10\x07\x1a\x18\x8a\x9d\x20\x14PACK\
    ETRECEIPTABSENCE\x126\n\x1cDATA_TYPE_NEXT_SEQUENCE_RECV\x10\x08\x1a\x14\
    \x8a\x9d\x20\x10NEXTSEQUENCERECV\x12\x20\n\x10DATA_TYPE_HEADER\x10\t\x1a\
    \n\x8a\x9d\x20\x06HEADER\x1a\x04\x88\xa3\x1e\0BHZFgithub.com/cosmos/ibc-\
    go/v3/modules/light-clients/06-solomachine/typesJ\xd48\n\x07\x12\x05\0\0\
    \xbc\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\
    \0(\n\x08\n\x01\x08\x12\x03\x04\0]\n\t\n\x02\x08\x0b\x12\x03\x04\0]\n\t\
    \n\x02\x03\0\x12\x03\x06\01\n\t\n\x02\x03\x01\x12\x03\x07\0+\n\t\n\x02\
    \x03\x02\x12\x03\x08\0\x1e\n\t\n\x02\x03\x03\x12\x03\t\0#\n}\n\x02\x04\0\
    \x12\x04\r\0\x17\x01\x1aq\x20ClientState\x20defines\x20a\x20solo\x20mach\
    ine\x20client\x20that\x20tracks\x20the\x20current\x20consensus\n\x20stat\
    e\x20and\x20if\x20the\x20client\x20is\x20frozen.\n\n\n\n\x03\x04\0\x01\
    \x12\x03\r\x08\x13\n\n\n\x03\x04\0\x07\x12\x03\x0e\x02-\n\r\n\x06\x04\0\
    \x07\x81\xf4\x03\x12\x03\x0e\x02-\n2\n\x04\x04\0\x02\0\x12\x03\x10\x02\
    \x16\x1a%\x20latest\x20sequence\x20of\x20the\x20client\x20state\n\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x10\t\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x14\x15\n2\n\
    \x04\x04\0\x02\x01\x12\x03\x12\x02S\x1a%\x20frozen\x20sequence\x20of\x20\
    the\x20solo\x20machine\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x12\x02\
    \x06\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x12\x11\x1a\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x12#$\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x12%R\n\
    \x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x12&Q\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x13\x02Y\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x13\x02\
    \x10\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x13\x11\x20\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x13#$\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x13%X\n\
    \x0f\n\x08\x04\0\x02\x02\x08\xee\xfb\x03\x12\x03\x13&W\n\x85\x01\n\x04\
    \x04\0\x02\x03\x12\x03\x16\x02g\x1ax\x20when\x20set\x20to\x20true,\x20wi\
    ll\x20allow\x20governance\x20to\x20update\x20a\x20solo\x20machine\x20cli\
    ent.\n\x20The\x20client\x20will\x20be\x20unfrozen\x20if\x20it\x20is\x20f\
    rozen.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x16\x02\x06\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03\x16\x07\"\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\x16%&\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x16'f\n\x0f\n\x08\x04\0\
    \x02\x03\x08\xee\xfb\x03\x12\x03\x16(e\n\xaf\x01\n\x02\x04\x01\x12\x04\
    \x1c\0%\x01\x1a\xa2\x01\x20ConsensusState\x20defines\x20a\x20solo\x20mac\
    hine\x20consensus\x20state.\x20The\x20sequence\x20of\x20a\n\x20consensus\
    \x20state\x20is\x20contained\x20in\x20the\x20\"height\"\x20key\x20used\
    \x20in\x20storing\x20the\n\x20consensus\x20state.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1c\x08\x16\n\n\n\x03\x04\x01\x07\x12\x03\x1d\x02-\n\r\n\
    \x06\x04\x01\x07\x81\xf4\x03\x12\x03\x1d\x02-\n-\n\x04\x04\x01\x02\0\x12\
    \x03\x1f\x02T\x1a\x20\x20public\x20key\x20of\x20the\x20solo\x20machine\n\
    \n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1f\x02\x15\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\x1f\x16\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1f\
    #$\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x1f%S\n\x0f\n\x08\x04\x01\x02\0\
    \x08\xee\xfb\x03\x12\x03\x1f&R\n\xb5\x01\n\x04\x04\x01\x02\x01\x12\x03#\
    \x02\x19\x1a\xa7\x01\x20diversifier\x20allows\x20the\x20same\x20public\
    \x20key\x20to\x20be\x20re-used\x20across\x20different\x20solo\n\x20machi\
    ne\x20clients\x20(potentially\x20on\x20different\x20chains)\x20without\
    \x20being\x20considered\n\x20misbehaviour.\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03#\t\x14\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03#\x17\x18\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03$\x02\x19\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03$\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03$\t\x12\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03$\x17\x18\n<\n\x02\x04\x02\x12\x04(\00\x01\x1a0\x20Heade\
    r\x20defines\x20a\x20solo\x20machine\x20consensus\x20header\n\n\n\n\x03\
    \x04\x02\x01\x12\x03(\x08\x0e\n\n\n\x03\x04\x02\x07\x12\x03)\x02-\n\r\n\
    \x06\x04\x02\x07\x81\xf4\x03\x12\x03)\x02-\n<\n\x04\x04\x02\x02\0\x12\
    \x03+\x02*\x1a/\x20sequence\x20to\x20update\x20solo\x20machine\x20public\
    \x20key\x20at\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03+\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03+\x16\x1e\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03+()\n\x0b\n\x04\x04\x02\x02\x01\x12\x03,\x02*\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03,\x16\x1f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03,()\n\x0b\n\x04\x04\
    \x02\x02\x02\x12\x03-\x02*\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03-\x02\
    \x07\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03-\x16\x1f\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03-()\n\x0b\n\x04\x04\x02\x02\x03\x12\x03.\x02]\n\
    \x0c\n\x05\x04\x02\x02\x03\x06\x12\x03.\x02\x15\n\x0c\n\x05\x04\x02\x02\
    \x03\x01\x12\x03.\x16$\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03.()\n\x0c\
    \n\x05\x04\x02\x02\x03\x08\x12\x03.*\\\n\x0f\n\x08\x04\x02\x02\x03\x08\
    \xee\xfb\x03\x12\x03.+[\n\x0b\n\x04\x04\x02\x02\x04\x12\x03/\x02^\n\x0c\
    \n\x05\x04\x02\x02\x04\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x03/\x16%\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03/()\n\x0c\n\
    \x05\x04\x02\x02\x04\x08\x12\x03/*]\n\x0f\n\x08\x04\x02\x02\x04\x08\xee\
    \xfb\x03\x12\x03/+\\\n\x9e\x01\n\x02\x04\x03\x12\x044\0:\x01\x1a\x91\x01\
    \x20Misbehaviour\x20defines\x20misbehaviour\x20for\x20a\x20solo\x20machi\
    ne\x20which\x20consists\n\x20of\x20a\x20sequence\x20and\x20two\x20signat\
    ures\x20over\x20different\x20messages\x20at\x20that\x20sequence.\n\n\n\n\
    \x03\x04\x03\x01\x12\x034\x08\x14\n\n\n\x03\x04\x03\x07\x12\x035\x02-\n\
    \r\n\x06\x04\x03\x07\x81\xf4\x03\x12\x035\x02-\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x036\x02W\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x036\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x036\x13\x1c\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x036'(\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x036)V\n\x0f\n\x08\x04\x03\
    \x02\0\x08\xee\xfb\x03\x12\x036*U\n\x0b\n\x04\x04\x03\x02\x01\x12\x037\
    \x02)\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x037\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x037\x13\x1b\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x037'(\n\x0b\n\x04\x04\x03\x02\x02\x12\x038\x02[\n\x0c\n\x05\x04\x03\
    \x02\x02\x06\x12\x038\x02\x12\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x038\
    \x13\x20\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x038'(\n\x0c\n\x05\x04\x03\
    \x02\x02\x08\x12\x038)Z\n\x0f\n\x08\x04\x03\x02\x02\x08\xee\xfb\x03\x12\
    \x038*Y\n\x0b\n\x04\x04\x03\x02\x03\x12\x039\x02[\n\x0c\n\x05\x04\x03\
    \x02\x03\x06\x12\x039\x02\x12\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x039\
    \x13\x20\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x039'(\n\x0c\n\x05\x04\x03\
    \x02\x03\x08\x12\x039)Z\n\x0f\n\x08\x04\x03\x02\x03\x08\xee\xfb\x03\x12\
    \x039*Y\ng\n\x02\x04\x04\x12\x04>\0D\x01\x1a[\x20SignatureAndData\x20con\
    tains\x20a\x20signature\x20and\x20the\x20data\x20signed\x20over\x20to\
    \x20create\x20that\n\x20signature.\n\n\n\n\x03\x04\x04\x01\x12\x03>\x08\
    \x18\n\n\n\x03\x04\x04\x07\x12\x03?\x02-\n\r\n\x06\x04\x04\x07\x81\xf4\
    \x03\x12\x03?\x02-\n\x0b\n\x04\x04\x04\x02\0\x12\x03@\x02)\n\x0c\n\x05\
    \x04\x04\x02\0\x05\x12\x03@\x02\x07\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x03@\x0b\x14\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03@'(\n\x0b\n\x04\x04\
    \x04\x02\x01\x12\x03A\x02W\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03A\x02\
    \n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03A\x0b\x14\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03A'(\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03A)V\n\x0f\
    \n\x08\x04\x04\x02\x01\x08\xee\xfb\x03\x12\x03A*U\n\x0b\n\x04\x04\x04\
    \x02\x02\x12\x03B\x02)\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03B\x02\x07\
    \n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03B\x0b\x0f\n\x0c\n\x05\x04\x04\
    \x02\x02\x03\x12\x03B'(\n\x0b\n\x04\x04\x04\x02\x03\x12\x03C\x02)\n\x0c\
    \n\x05\x04\x04\x02\x03\x05\x12\x03C\x02\x08\n\x0c\n\x05\x04\x04\x02\x03\
    \x01\x12\x03C\x0b\x14\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03C'(\ng\n\
    \x02\x04\x05\x12\x04H\0L\x01\x1a[\x20TimestampedSignatureData\x20contain\
    s\x20the\x20signature\x20data\x20and\x20the\x20timestamp\x20of\x20the\n\
    \x20signature.\n\n\n\n\x03\x04\x05\x01\x12\x03H\x08\x20\n\n\n\x03\x04\
    \x05\x07\x12\x03I\x02-\n\r\n\x06\x04\x05\x07\x81\xf4\x03\x12\x03I\x02-\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03J\x02\\\n\x0c\n\x05\x04\x05\x02\0\x05\
    \x12\x03J\x02\x07\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03J\t\x17\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03J'(\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x03J\
    )[\n\x0f\n\x08\x04\x05\x02\0\x08\xee\xfb\x03\x12\x03J*Z\n\x0b\n\x04\x04\
    \x05\x02\x01\x12\x03K\x02)\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03K\x02\
    \x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03K\t\x12\n\x0c\n\x05\x04\x05\
    \x02\x01\x03\x12\x03K'(\nQ\n\x02\x04\x06\x12\x04O\0Y\x01\x1aE\x20SignByt\
    es\x20defines\x20the\x20signed\x20bytes\x20used\x20for\x20signature\x20v\
    erification.\n\n\n\n\x03\x04\x06\x01\x12\x03O\x08\x11\n\n\n\x03\x04\x06\
    \x07\x12\x03P\x02-\n\r\n\x06\x04\x06\x07\x81\xf4\x03\x12\x03P\x02-\n\x0b\
    \n\x04\x04\x06\x02\0\x12\x03R\x02\x19\n\x0c\n\x05\x04\x06\x02\0\x05\x12\
    \x03R\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03R\t\x11\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x03R\x17\x18\n\x0b\n\x04\x04\x06\x02\x01\x12\x03S\
    \x02\x19\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03S\x02\x08\n\x0c\n\x05\
    \x04\x06\x02\x01\x01\x12\x03S\t\x12\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\
    \x03S\x17\x18\n\x0b\n\x04\x04\x06\x02\x02\x12\x03T\x02\x19\n\x0c\n\x05\
    \x04\x06\x02\x02\x05\x12\x03T\x02\x08\n\x0c\n\x05\x04\x06\x02\x02\x01\
    \x12\x03T\t\x14\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03T\x17\x18\n$\n\
    \x04\x04\x06\x02\x03\x12\x03V\x02G\x1a\x17\x20type\x20of\x20the\x20data\
    \x20used\n\n\x0c\n\x05\x04\x06\x02\x03\x06\x12\x03V\x02\n\n\x0c\n\x05\
    \x04\x06\x02\x03\x01\x12\x03V\x0b\x14\n\x0c\n\x05\x04\x06\x02\x03\x03\
    \x12\x03V\x17\x18\n\x0c\n\x05\x04\x06\x02\x03\x08\x12\x03V\x19F\n\x0f\n\
    \x08\x04\x06\x02\x03\x08\xee\xfb\x03\x12\x03V\x1aE\n\x1d\n\x04\x04\x06\
    \x02\x04\x12\x03X\x02\x11\x1a\x10\x20marshaled\x20data\n\n\x0c\n\x05\x04\
    \x06\x02\x04\x05\x12\x03X\x02\x07\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\
    \x03X\x08\x0c\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03X\x0f\x10\n\x99\x01\
    \n\x02\x05\0\x12\x04]\0t\x01\x1a\x8c\x01\x20DataType\x20defines\x20the\
    \x20type\x20of\x20solo\x20machine\x20proof\x20being\x20created.\x20This\
    \x20is\x20done\n\x20to\x20preserve\x20uniqueness\x20of\x20different\x20d\
    ata\x20sign\x20byte\x20encodings.\n\n\n\n\x03\x05\0\x01\x12\x03]\x05\r\n\
    \n\n\x03\x05\0\x03\x12\x03^\x021\n\r\n\x06\x05\0\x03\xb1\xe4\x03\x12\x03\
    ^\x021\n\x1c\n\x04\x05\0\x02\0\x12\x03a\x02]\x1a\x0f\x20Default\x20State\
    \n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03a\x02%\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03a()\n\x0c\n\x05\x05\0\x02\0\x03\x12\x03a*\\\n\x0f\n\x08\x05\0\
    \x02\0\x03\xd1\x83\x04\x12\x03a+[\n6\n\x04\x05\0\x02\x01\x12\x03c\x02K\
    \x1a)\x20Data\x20type\x20for\x20client\x20state\x20verification\n\n\x0c\
    \n\x05\x05\0\x02\x01\x01\x12\x03c\x02\x18\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03c\x1b\x1c\n\x0c\n\x05\x05\0\x02\x01\x03\x12\x03c\x1dJ\n\x0f\n\
    \x08\x05\0\x02\x01\x03\xd1\x83\x04\x12\x03c\x1eI\n9\n\x04\x05\0\x02\x02\
    \x12\x03e\x02Q\x1a,\x20Data\x20type\x20for\x20consensus\x20state\x20veri\
    fication\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03e\x02\x1b\n\x0c\n\x05\
    \x05\0\x02\x02\x02\x12\x03e\x1e\x1f\n\x0c\n\x05\x05\0\x02\x02\x03\x12\
    \x03e\x20P\n\x0f\n\x08\x05\0\x02\x02\x03\xd1\x83\x04\x12\x03e!O\n:\n\x04\
    \x05\0\x02\x03\x12\x03g\x02S\x1a-\x20Data\x20type\x20for\x20connection\
    \x20state\x20verification\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03g\x02\
    \x1c\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03g\x1f\x20\n\x0c\n\x05\x05\0\
    \x02\x03\x03\x12\x03g!R\n\x0f\n\x08\x05\0\x02\x03\x03\xd1\x83\x04\x12\
    \x03g\"Q\n7\n\x04\x05\0\x02\x04\x12\x03i\x02M\x1a*\x20Data\x20type\x20fo\
    r\x20channel\x20state\x20verification\n\n\x0c\n\x05\x05\0\x02\x04\x01\
    \x12\x03i\x02\x19\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03i\x1c\x1d\n\x0c\n\
    \x05\x05\0\x02\x04\x03\x12\x03i\x1eL\n\x0f\n\x08\x05\0\x02\x04\x03\xd1\
    \x83\x04\x12\x03i\x1fK\n;\n\x04\x05\0\x02\x05\x12\x03k\x02Z\x1a.\x20Data\
    \x20type\x20for\x20packet\x20commitment\x20verification\n\n\x0c\n\x05\
    \x05\0\x02\x05\x01\x12\x03k\x02\x1d\n\x0c\n\x05\x05\0\x02\x05\x02\x12\
    \x03k\x20!\n\x0c\n\x05\x05\0\x02\x05\x03\x12\x03k\"Y\n\x0f\n\x08\x05\0\
    \x02\x05\x03\xd1\x83\x04\x12\x03k#X\n@\n\x04\x05\0\x02\x06\x12\x03m\x02d\
    \x1a3\x20Data\x20type\x20for\x20packet\x20acknowledgement\x20verificatio\
    n\n\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03m\x02\"\n\x0c\n\x05\x05\0\x02\
    \x06\x02\x12\x03m%&\n\x0c\n\x05\x05\0\x02\x06\x03\x12\x03m'c\n\x0f\n\x08\
    \x05\0\x02\x06\x03\xd1\x83\x04\x12\x03m(b\n@\n\x04\x05\0\x02\x07\x12\x03\
    o\x02c\x1a3\x20Data\x20type\x20for\x20packet\x20receipt\x20absence\x20ve\
    rification\n\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03o\x02\"\n\x0c\n\x05\
    \x05\0\x02\x07\x02\x12\x03o%&\n\x0c\n\x05\x05\0\x02\x07\x03\x12\x03o'b\n\
    \x0f\n\x08\x05\0\x02\x07\x03\xd1\x83\x04\x12\x03o(a\n<\n\x04\x05\0\x02\
    \x08\x12\x03q\x02[\x1a/\x20Data\x20type\x20for\x20next\x20sequence\x20re\
    cv\x20verification\n\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03q\x02\x1e\n\
    \x0c\n\x05\x05\0\x02\x08\x02\x12\x03q!\"\n\x0c\n\x05\x05\0\x02\x08\x03\
    \x12\x03q#Z\n\x0f\n\x08\x05\0\x02\x08\x03\xd1\x83\x04\x12\x03q$Y\n0\n\
    \x04\x05\0\x02\t\x12\x03s\x02E\x1a#\x20Data\x20type\x20for\x20header\x20\
    verification\n\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03s\x02\x12\n\x0c\n\x05\
    \x05\0\x02\t\x02\x12\x03s\x15\x16\n\x0c\n\x05\x05\0\x02\t\x03\x12\x03s\
    \x17D\n\x0f\n\x08\x05\0\x02\t\x03\xd1\x83\x04\x12\x03s\x18C\nL\n\x02\x04\
    \x07\x12\x04w\0~\x01\x1a@\x20HeaderData\x20returns\x20the\x20SignBytes\
    \x20data\x20for\x20update\x20verification.\n\n\n\n\x03\x04\x07\x01\x12\
    \x03w\x08\x12\n\n\n\x03\x04\x07\x07\x12\x03x\x02-\n\r\n\x06\x04\x07\x07\
    \x81\xf4\x03\x12\x03x\x02-\n\x20\n\x04\x04\x07\x02\0\x12\x03{\x02V\x1a\
    \x13\x20header\x20public\x20key\n\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03{\
    \x02\x15\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03{\x16!\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03{$%\n\x0c\n\x05\x04\x07\x02\0\x08\x12\x03{&U\n\x0f\n\
    \x08\x04\x07\x02\0\x08\xee\xfb\x03\x12\x03{'T\n!\n\x04\x04\x07\x02\x01\
    \x12\x03}\x02Q\x1a\x14\x20header\x20diversifier\n\n\x0c\n\x05\x04\x07\
    \x02\x01\x05\x12\x03}\x02\x08\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03}\t\
    \x18\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03}\x1b\x1c\n\x0c\n\x05\x04\
    \x07\x02\x01\x08\x12\x03}\x1dP\n\x0f\n\x08\x04\x07\x02\x01\x08\xee\xfb\
    \x03\x12\x03}\x1eO\nY\n\x02\x04\x08\x12\x06\x81\x01\0\x86\x01\x01\x1aK\
    \x20ClientStateData\x20returns\x20the\x20SignBytes\x20data\x20for\x20cli\
    ent\x20state\x20verification.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\x81\x01\
    \x08\x17\n\x0b\n\x03\x04\x08\x07\x12\x04\x82\x01\x02-\n\x0e\n\x06\x04\
    \x08\x07\x81\xf4\x03\x12\x04\x82\x01\x02-\n\x0c\n\x04\x04\x08\x02\0\x12\
    \x04\x84\x01\x02'\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x84\x01\x02\x07\n\
    \r\n\x05\x04\x08\x02\0\x01\x12\x04\x84\x01\x16\x1a\n\r\n\x05\x04\x08\x02\
    \0\x03\x12\x04\x84\x01%&\n\x0c\n\x04\x04\x08\x02\x01\x12\x04\x85\x01\x02\
    X\n\r\n\x05\x04\x08\x02\x01\x06\x12\x04\x85\x01\x02\x15\n\r\n\x05\x04\
    \x08\x02\x01\x01\x12\x04\x85\x01\x16\"\n\r\n\x05\x04\x08\x02\x01\x03\x12\
    \x04\x85\x01%&\n\r\n\x05\x04\x08\x02\x01\x08\x12\x04\x85\x01'W\n\x10\n\
    \x08\x04\x08\x02\x01\x08\xee\xfb\x03\x12\x04\x85\x01(V\n`\n\x02\x04\t\
    \x12\x06\x8a\x01\0\x8f\x01\x01\x1aR\x20ConsensusStateData\x20returns\x20\
    the\x20SignBytes\x20data\x20for\x20consensus\x20state\n\x20verification.\
    \n\n\x0b\n\x03\x04\t\x01\x12\x04\x8a\x01\x08\x1a\n\x0b\n\x03\x04\t\x07\
    \x12\x04\x8b\x01\x02-\n\x0e\n\x06\x04\t\x07\x81\xf4\x03\x12\x04\x8b\x01\
    \x02-\n\x0c\n\x04\x04\t\x02\0\x12\x04\x8d\x01\x02*\n\r\n\x05\x04\t\x02\0\
    \x05\x12\x04\x8d\x01\x02\x07\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x8d\x01\
    \x16\x1a\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x8d\x01()\n\x0c\n\x04\x04\t\
    \x02\x01\x12\x04\x8e\x01\x02^\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\x8e\
    \x01\x02\x15\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x8e\x01\x16%\n\r\n\x05\
    \x04\t\x02\x01\x03\x12\x04\x8e\x01()\n\r\n\x05\x04\t\x02\x01\x08\x12\x04\
    \x8e\x01*]\n\x10\n\x08\x04\t\x02\x01\x08\xee\xfb\x03\x12\x04\x8e\x01+\\\
    \nb\n\x02\x04\n\x12\x06\x93\x01\0\x98\x01\x01\x1aT\x20ConnectionStateDat\
    a\x20returns\x20the\x20SignBytes\x20data\x20for\x20connection\x20state\n\
    \x20verification.\n\n\x0b\n\x03\x04\n\x01\x12\x04\x93\x01\x08\x1b\n\x0b\
    \n\x03\x04\n\x07\x12\x04\x94\x01\x02-\n\x0e\n\x06\x04\n\x07\x81\xf4\x03\
    \x12\x04\x94\x01\x02-\n\x0c\n\x04\x04\n\x02\0\x12\x04\x96\x01\x026\n\r\n\
    \x05\x04\n\x02\0\x05\x12\x04\x96\x01\x02\x07\n\r\n\x05\x04\n\x02\0\x01\
    \x12\x04\x96\x01'+\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x96\x0145\n\x0c\n\
    \x04\x04\n\x02\x01\x12\x04\x97\x01\x026\n\r\n\x05\x04\n\x02\x01\x06\x12\
    \x04\x97\x01\x02&\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x97\x01'1\n\r\n\
    \x05\x04\n\x02\x01\x03\x12\x04\x97\x0145\n\\\n\x02\x04\x0b\x12\x06\x9c\
    \x01\0\xa1\x01\x01\x1aN\x20ChannelStateData\x20returns\x20the\x20SignByt\
    es\x20data\x20for\x20channel\x20state\n\x20verification.\n\n\x0b\n\x03\
    \x04\x0b\x01\x12\x04\x9c\x01\x08\x18\n\x0b\n\x03\x04\x0b\x07\x12\x04\x9d\
    \x01\x02-\n\x0e\n\x06\x04\x0b\x07\x81\xf4\x03\x12\x04\x9d\x01\x02-\n\x0c\
    \n\x04\x04\x0b\x02\0\x12\x04\x9f\x01\x02*\n\r\n\x05\x04\x0b\x02\0\x05\
    \x12\x04\x9f\x01\x02\x07\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\x9f\x01\x1e\
    \"\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x9f\x01()\n\x0c\n\x04\x04\x0b\x02\
    \x01\x12\x04\xa0\x01\x02*\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\xa0\x01\
    \x02\x1d\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xa0\x01\x1e%\n\r\n\x05\
    \x04\x0b\x02\x01\x03\x12\x04\xa0\x01()\nd\n\x02\x04\x0c\x12\x06\xa5\x01\
    \0\xa8\x01\x01\x1aV\x20PacketCommitmentData\x20returns\x20the\x20SignByt\
    es\x20data\x20for\x20packet\x20commitment\n\x20verification.\n\n\x0b\n\
    \x03\x04\x0c\x01\x12\x04\xa5\x01\x08\x1c\n\x0c\n\x04\x04\x0c\x02\0\x12\
    \x04\xa6\x01\x02\x17\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xa6\x01\x02\x07\
    \n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xa6\x01\x08\x0c\n\r\n\x05\x04\x0c\
    \x02\0\x03\x12\x04\xa6\x01\x15\x16\n\x0c\n\x04\x04\x0c\x02\x01\x12\x04\
    \xa7\x01\x02\x17\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xa7\x01\x02\x07\n\
    \r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xa7\x01\x08\x12\n\r\n\x05\x04\x0c\
    \x02\x01\x03\x12\x04\xa7\x01\x15\x16\ng\n\x02\x04\r\x12\x06\xac\x01\0\
    \xaf\x01\x01\x1aY\x20PacketAcknowledgementData\x20returns\x20the\x20Sign\
    Bytes\x20data\x20for\x20acknowledgement\n\x20verification.\n\n\x0b\n\x03\
    \x04\r\x01\x12\x04\xac\x01\x08!\n\x0c\n\x04\x04\r\x02\0\x12\x04\xad\x01\
    \x02\x1c\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xad\x01\x02\x07\n\r\n\x05\x04\
    \r\x02\0\x01\x12\x04\xad\x01\x08\x0c\n\r\n\x05\x04\r\x02\0\x03\x12\x04\
    \xad\x01\x1a\x1b\n\x0c\n\x04\x04\r\x02\x01\x12\x04\xae\x01\x02\x1c\n\r\n\
    \x05\x04\r\x02\x01\x05\x12\x04\xae\x01\x02\x07\n\r\n\x05\x04\r\x02\x01\
    \x01\x12\x04\xae\x01\x08\x17\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\xae\x01\
    \x1a\x1b\nm\n\x02\x04\x0e\x12\x06\xb3\x01\0\xb5\x01\x01\x1a_\x20PacketRe\
    ceiptAbsenceData\x20returns\x20the\x20SignBytes\x20data\x20for\n\x20pack\
    et\x20receipt\x20absence\x20verification.\n\n\x0b\n\x03\x04\x0e\x01\x12\
    \x04\xb3\x01\x08\x20\n\x0c\n\x04\x04\x0e\x02\0\x12\x04\xb4\x01\x02\x11\n\
    \r\n\x05\x04\x0e\x02\0\x05\x12\x04\xb4\x01\x02\x07\n\r\n\x05\x04\x0e\x02\
    \0\x01\x12\x04\xb4\x01\x08\x0c\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xb4\
    \x01\x0f\x10\nv\n\x02\x04\x0f\x12\x06\xb9\x01\0\xbc\x01\x01\x1ah\x20Next\
    SequenceRecvData\x20returns\x20the\x20SignBytes\x20data\x20for\x20verifi\
    cation\x20of\x20the\x20next\n\x20sequence\x20to\x20be\x20received.\n\n\
    \x0b\n\x03\x04\x0f\x01\x12\x04\xb9\x01\x08\x1c\n\x0c\n\x04\x04\x0f\x02\0\
    \x12\x04\xba\x01\x02\x1b\n\r\n\x05\x04\x0f\x02\0\x05\x12\x04\xba\x01\x02\
    \x07\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\xba\x01\t\r\n\r\n\x05\x04\x0f\
    \x02\0\x03\x12\x04\xba\x01\x19\x1a\n\x0c\n\x04\x04\x0f\x02\x01\x12\x04\
    \xbb\x01\x02M\n\r\n\x05\x04\x0f\x02\x01\x05\x12\x04\xbb\x01\x02\x08\n\r\
    \n\x05\x04\x0f\x02\x01\x01\x12\x04\xbb\x01\t\x16\n\r\n\x05\x04\x0f\x02\
    \x01\x03\x12\x04\xbb\x01\x19\x1a\n\r\n\x05\x04\x0f\x02\x01\x08\x12\x04\
    \xbb\x01\x1bL\n\x10\n\x08\x04\x0f\x02\x01\x08\xee\xfb\x03\x12\x04\xbb\
    \x01\x1cKb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::connection::file_descriptor().clone());
            deps.push(super::channel::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(ClientState::generated_message_descriptor_data());
            messages.push(ConsensusState::generated_message_descriptor_data());
            messages.push(Header::generated_message_descriptor_data());
            messages.push(Misbehaviour::generated_message_descriptor_data());
            messages.push(SignatureAndData::generated_message_descriptor_data());
            messages.push(TimestampedSignatureData::generated_message_descriptor_data());
            messages.push(SignBytes::generated_message_descriptor_data());
            messages.push(HeaderData::generated_message_descriptor_data());
            messages.push(ClientStateData::generated_message_descriptor_data());
            messages.push(ConsensusStateData::generated_message_descriptor_data());
            messages.push(ConnectionStateData::generated_message_descriptor_data());
            messages.push(ChannelStateData::generated_message_descriptor_data());
            messages.push(PacketCommitmentData::generated_message_descriptor_data());
            messages.push(PacketAcknowledgementData::generated_message_descriptor_data());
            messages.push(PacketReceiptAbsenceData::generated_message_descriptor_data());
            messages.push(NextSequenceRecvData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(DataType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
