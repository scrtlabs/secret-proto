// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/lightclients/localhost/v1/localhost.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  ClientState defines a loopback (localhost) client. It requires (read-only)
///  access to keys outside the client prefix.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.lightclients.localhost.v1.ClientState)
pub struct ClientState {
    // message fields
    ///  self chain ID
    // @@protoc_insertion_point(field:ibc.lightclients.localhost.v1.ClientState.chain_id)
    pub chain_id: ::std::string::String,
    ///  self latest block height
    // @@protoc_insertion_point(field:ibc.lightclients.localhost.v1.ClientState.height)
    pub height: ::protobuf::MessageField<super::client::Height>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.lightclients.localhost.v1.ClientState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientState {
    fn default() -> &'a ClientState {
        <ClientState as ::protobuf::Message>::default_instance()
    }
}

impl ClientState {
    pub fn new() -> ClientState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &ClientState| { &m.chain_id },
            |m: &mut ClientState| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "height",
            |m: &ClientState| { &m.height },
            |m: &mut ClientState| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientState>(
            "ClientState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientState {
    const NAME: &'static str = "ClientState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chain_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.height)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.chain_id);
        }
        if let Some(v) = self.height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.chain_id.is_empty() {
            os.write_string(1, &self.chain_id)?;
        }
        if let Some(v) = self.height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientState {
        ClientState::new()
    }

    fn clear(&mut self) {
        self.chain_id.clear();
        self.height.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientState {
        static instance: ClientState = ClientState {
            chain_id: ::std::string::String::new(),
            height: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-ibc/lightclients/localhost/v1/localhost.proto\x12\x1dibc.lightclients\
    .localhost.v1\x1a\x14gogoproto/gogo.proto\x1a\x1fibc/core/client/v1/clie\
    nt.proto\"}\n\x0bClientState\x12.\n\x08chain_id\x18\x01\x20\x01(\tR\x07c\
    hainIdB\x13\xf2\xde\x1f\x0fyaml:\"chain_id\"\x128\n\x06height\x18\x02\
    \x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x06heightB\x04\xc8\xde\x1f\
    \0:\x04\x88\xa0\x1f\0BFZDgithub.com/cosmos/ibc-go/v3/modules/light-clien\
    ts/09-localhost/typesJ\xcd\x03\n\x06\x12\x04\0\0\x11\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0&\n\x08\n\x01\x08\x12\x03\
    \x04\0[\n\t\n\x02\x08\x0b\x12\x03\x04\0[\n\t\n\x02\x03\0\x12\x03\x06\0\
    \x1e\n\t\n\x02\x03\x01\x12\x03\x07\0)\n\x83\x01\n\x02\x04\0\x12\x04\x0b\
    \0\x11\x01\x1aw\x20ClientState\x20defines\x20a\x20loopback\x20(localhost\
    )\x20client.\x20It\x20requires\x20(read-only)\n\x20access\x20to\x20keys\
    \x20outside\x20the\x20client\x20prefix.\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x0b\x08\x13\n\n\n\x03\x04\0\x07\x12\x03\x0c\x02-\n\r\n\x06\x04\0\x07\
    \x81\xf4\x03\x12\x03\x0c\x02-\n\x1c\n\x04\x04\0\x02\0\x12\x03\x0e\x02C\
    \x1a\x0f\x20self\x20chain\x20ID\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x0e\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\t\x11\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x0e\x14\x15\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\
    \x0e\x16B\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x0e\x17A\n'\n\
    \x04\x04\0\x02\x01\x12\x03\x10\x02F\x1a\x1a\x20self\x20latest\x20block\
    \x20height\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x10\x02\x1b\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x10\x1c\"\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x10%&\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x10'E\n\x0f\n\x08\
    \x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x10(Db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ClientState::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
