// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/applications/interchain_accounts/v1/packet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  InterchainAccountPacketData is comprised of a raw transaction, type of transaction and optional memo field.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData)
pub struct InterchainAccountPacketData {
    // message fields
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.type)
    pub type_: ::protobuf::EnumOrUnknown<Type>,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.memo)
    pub memo: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InterchainAccountPacketData {
    fn default() -> &'a InterchainAccountPacketData {
        <InterchainAccountPacketData as ::protobuf::Message>::default_instance()
    }
}

impl InterchainAccountPacketData {
    pub fn new() -> InterchainAccountPacketData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &InterchainAccountPacketData| { &m.type_ },
            |m: &mut InterchainAccountPacketData| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &InterchainAccountPacketData| { &m.data },
            |m: &mut InterchainAccountPacketData| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memo",
            |m: &InterchainAccountPacketData| { &m.memo },
            |m: &mut InterchainAccountPacketData| { &mut m.memo },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InterchainAccountPacketData>(
            "InterchainAccountPacketData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InterchainAccountPacketData {
    const NAME: &'static str = "InterchainAccountPacketData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                26 => {
                    self.memo = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(Type::TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.memo);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(Type::TYPE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if !self.memo.is_empty() {
            os.write_string(3, &self.memo)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InterchainAccountPacketData {
        InterchainAccountPacketData::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(Type::TYPE_UNSPECIFIED);
        self.data.clear();
        self.memo.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InterchainAccountPacketData {
        static instance: InterchainAccountPacketData = InterchainAccountPacketData {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::vec::Vec::new(),
            memo: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InterchainAccountPacketData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InterchainAccountPacketData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InterchainAccountPacketData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InterchainAccountPacketData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  CosmosTx contains a list of sdk.Msg's. It should be used when sending transactions to an SDK host chain.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.CosmosTx)
pub struct CosmosTx {
    // message fields
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.CosmosTx.messages)
    pub messages: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.CosmosTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosTx {
    fn default() -> &'a CosmosTx {
        <CosmosTx as ::protobuf::Message>::default_instance()
    }
}

impl CosmosTx {
    pub fn new() -> CosmosTx {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &CosmosTx| { &m.messages },
            |m: &mut CosmosTx| { &mut m.messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosTx>(
            "CosmosTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosTx {
    const NAME: &'static str = "CosmosTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.messages.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosTx {
        CosmosTx::new()
    }

    fn clear(&mut self) {
        self.messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosTx {
        static instance: CosmosTx = CosmosTx {
            messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Type defines a classification of message issued from a controller chain to its associated interchain accounts
///  host
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ibc.applications.interchain_accounts.v1.Type)
pub enum Type {
    // @@protoc_insertion_point(enum_value:ibc.applications.interchain_accounts.v1.Type.TYPE_UNSPECIFIED)
    TYPE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:ibc.applications.interchain_accounts.v1.Type.TYPE_EXECUTE_TX)
    TYPE_EXECUTE_TX = 1,
}

impl ::protobuf::Enum for Type {
    const NAME: &'static str = "Type";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Type> {
        match value {
            0 => ::std::option::Option::Some(Type::TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Type::TYPE_EXECUTE_TX),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Type] = &[
        Type::TYPE_UNSPECIFIED,
        Type::TYPE_EXECUTE_TX,
    ];
}

impl ::protobuf::EnumFull for Type {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Type").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Type {
    fn default() -> Self {
        Type::TYPE_UNSPECIFIED
    }
}

impl Type {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("Type")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n4ibc/applications/interchain_accounts/v1/packet.proto\x12'ibc.applicat\
    ions.interchain_accounts.v1\x1a\x19google/protobuf/any.proto\x1a\x14gogo\
    proto/gogo.proto\"\x88\x01\n\x1bInterchainAccountPacketData\x12A\n\x04ty\
    pe\x18\x01\x20\x01(\x0e2-.ibc.applications.interchain_accounts.v1.TypeR\
    \x04type\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\x12\x12\n\x04me\
    mo\x18\x03\x20\x01(\tR\x04memo\"<\n\x08CosmosTx\x120\n\x08messages\x18\
    \x01\x20\x03(\x0b2\x14.google.protobuf.AnyR\x08messages*X\n\x04Type\x12%\
    \n\x10TYPE_UNSPECIFIED\x10\0\x1a\x0f\x8a\x9d\x20\x0bUNSPECIFIED\x12#\n\
    \x0fTYPE_EXECUTE_TX\x10\x01\x1a\x0e\x8a\x9d\x20\nEXECUTE_TX\x1a\x04\x88\
    \xa3\x1e\0BGZEgithub.com/cosmos/ibc-go/v3/modules/apps/27-interchain-acc\
    ounts/typesJ\xd7\x07\n\x06\x12\x04\0\0\x1e\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x02\00\n\x08\n\x01\x08\x12\x03\x04\0\\\n\
    \t\n\x02\x08\x0b\x12\x03\x04\0\\\n\t\n\x02\x03\0\x12\x03\x06\0#\n\t\n\
    \x02\x03\x01\x12\x03\x07\0\x1e\n\x81\x01\n\x02\x05\0\x12\x04\x0b\0\x12\
    \x01\x1au\x20Type\x20defines\x20a\x20classification\x20of\x20message\x20\
    issued\x20from\x20a\x20controller\x20chain\x20to\x20its\x20associated\
    \x20interchain\x20accounts\n\x20host\n\n\n\n\x03\x05\0\x01\x12\x03\x0b\
    \x05\t\n\n\n\x03\x05\0\x03\x12\x03\x0c\x021\n\r\n\x06\x05\0\x03\xb1\xe4\
    \x03\x12\x03\x0c\x021\n-\n\x04\x05\0\x02\0\x12\x03\x0f\x02J\x1a\x20\x20D\
    efault\x20zero\x20value\x20enumeration\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\
    \x03\x0f\x02\x12\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x0f\x15\x16\n\x0c\n\
    \x05\x05\0\x02\0\x03\x12\x03\x0f\x17I\n\x0f\n\x08\x05\0\x02\0\x03\xd1\
    \x83\x04\x12\x03\x0f\x18H\nI\n\x04\x05\0\x02\x01\x12\x03\x11\x02H\x1a<\
    \x20Execute\x20a\x20transaction\x20on\x20an\x20interchain\x20accounts\
    \x20host\x20chain\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x11\x02\x11\n\
    \x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x11\x14\x15\n\x0c\n\x05\x05\0\x02\
    \x01\x03\x12\x03\x11\x16G\n\x0f\n\x08\x05\0\x02\x01\x03\xd1\x83\x04\x12\
    \x03\x11\x17F\ny\n\x02\x04\0\x12\x04\x15\0\x19\x01\x1am\x20InterchainAcc\
    ountPacketData\x20is\x20comprised\x20of\x20a\x20raw\x20transaction,\x20t\
    ype\x20of\x20transaction\x20and\x20optional\x20memo\x20field.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\x15\x08#\n\x0b\n\x04\x04\0\x02\0\x12\x03\x16\x02\
    \x12\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x16\x02\x06\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x16\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x16\x10\
    \x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x17\x02\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x17\t\
    \r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x17\x10\x11\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x18\x02\x12\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x18\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x18\t\r\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x18\x10\x11\nv\n\x02\x04\x01\x12\x04\x1c\0\x1e\x01\
    \x1aj\x20CosmosTx\x20contains\x20a\x20list\x20of\x20sdk.Msg's.\x20It\x20\
    should\x20be\x20used\x20when\x20sending\x20transactions\x20to\x20an\x20S\
    DK\x20host\x20chain.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1c\x08\x10\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x1d\x02,\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x1d\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1d\x0b\x1e\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x1d\x1f'\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1d*+b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(InterchainAccountPacketData::generated_message_descriptor_data());
            messages.push(CosmosTx::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
