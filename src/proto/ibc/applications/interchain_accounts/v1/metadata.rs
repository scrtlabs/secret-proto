// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/applications/interchain_accounts/v1/metadata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Metadata defines a set of protocol specific data encoded into the ICS27 channel version bytestring
///  See ICS004: https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#Versioning
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.Metadata)
pub struct Metadata {
    // message fields
    ///  version defines the ICS27 protocol version
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.Metadata.version)
    pub version: ::std::string::String,
    ///  controller_connection_id is the connection identifier associated with the controller chain
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.Metadata.controller_connection_id)
    pub controller_connection_id: ::std::string::String,
    ///  host_connection_id is the connection identifier associated with the host chain
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.Metadata.host_connection_id)
    pub host_connection_id: ::std::string::String,
    ///  address defines the interchain account address to be fulfilled upon the OnChanOpenTry handshake step
    ///  NOTE: the address field is empty on the OnChanOpenInit handshake step
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.Metadata.address)
    pub address: ::std::string::String,
    ///  encoding defines the supported codec format
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.Metadata.encoding)
    pub encoding: ::std::string::String,
    ///  tx_type defines the type of transactions the interchain account can execute
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.Metadata.tx_type)
    pub tx_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.Metadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Metadata| { &m.version },
            |m: &mut Metadata| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "controller_connection_id",
            |m: &Metadata| { &m.controller_connection_id },
            |m: &mut Metadata| { &mut m.controller_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "host_connection_id",
            |m: &Metadata| { &m.host_connection_id },
            |m: &mut Metadata| { &mut m.host_connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &Metadata| { &m.address },
            |m: &mut Metadata| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encoding",
            |m: &Metadata| { &m.encoding },
            |m: &mut Metadata| { &mut m.encoding },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_type",
            |m: &Metadata| { &m.tx_type },
            |m: &mut Metadata| { &mut m.tx_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metadata>(
            "Metadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metadata {
    const NAME: &'static str = "Metadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = is.read_string()?;
                },
                18 => {
                    self.controller_connection_id = is.read_string()?;
                },
                26 => {
                    self.host_connection_id = is.read_string()?;
                },
                34 => {
                    self.address = is.read_string()?;
                },
                42 => {
                    self.encoding = is.read_string()?;
                },
                50 => {
                    self.tx_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.controller_connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.controller_connection_id);
        }
        if !self.host_connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.host_connection_id);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address);
        }
        if !self.encoding.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.encoding);
        }
        if !self.tx_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.tx_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.controller_connection_id.is_empty() {
            os.write_string(2, &self.controller_connection_id)?;
        }
        if !self.host_connection_id.is_empty() {
            os.write_string(3, &self.host_connection_id)?;
        }
        if !self.address.is_empty() {
            os.write_string(4, &self.address)?;
        }
        if !self.encoding.is_empty() {
            os.write_string(5, &self.encoding)?;
        }
        if !self.tx_type.is_empty() {
            os.write_string(6, &self.tx_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn clear(&mut self) {
        self.version.clear();
        self.controller_connection_id.clear();
        self.host_connection_id.clear();
        self.address.clear();
        self.encoding.clear();
        self.tx_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metadata {
        static instance: Metadata = Metadata {
            version: ::std::string::String::new(),
            controller_connection_id: ::std::string::String::new(),
            host_connection_id: ::std::string::String::new(),
            address: ::std::string::String::new(),
            encoding: ::std::string::String::new(),
            tx_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Metadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n6ibc/applications/interchain_accounts/v1/metadata.proto\x12'ibc.applic\
    ations.interchain_accounts.v1\x1a\x14gogoproto/gogo.proto\"\x9f\x02\n\
    \x08Metadata\x12\x18\n\x07version\x18\x01\x20\x01(\tR\x07version\x12]\n\
    \x18controller_connection_id\x18\x02\x20\x01(\tR\x16controllerConnection\
    IdB#\xf2\xde\x1f\x1fyaml:\"controller_connection_id\"\x12K\n\x12host_con\
    nection_id\x18\x03\x20\x01(\tR\x10hostConnectionIdB\x1d\xf2\xde\x1f\x19y\
    aml:\"host_connection_id\"\x12\x18\n\x07address\x18\x04\x20\x01(\tR\x07a\
    ddress\x12\x1a\n\x08encoding\x18\x05\x20\x01(\tR\x08encoding\x12\x17\n\
    \x07tx_type\x18\x06\x20\x01(\tR\x06txTypeBGZEgithub.com/cosmos/ibc-go/v3\
    /modules/apps/27-interchain-accounts/typesJ\xc2\t\n\x06\x12\x04\0\0\x18\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\00\n\
    \x08\n\x01\x08\x12\x03\x04\0\\\n\t\n\x02\x08\x0b\x12\x03\x04\0\\\n\t\n\
    \x02\x03\0\x12\x03\x06\0\x1e\n\xe2\x01\n\x02\x04\0\x12\x04\n\0\x18\x01\
    \x1a\xd5\x01\x20Metadata\x20defines\x20a\x20set\x20of\x20protocol\x20spe\
    cific\x20data\x20encoded\x20into\x20the\x20ICS27\x20channel\x20version\
    \x20bytestring\n\x20See\x20ICS004:\x20https://github.com/cosmos/ibc/tree\
    /master/spec/core/ics-004-channel-and-packet-semantics#Versioning\n\n\n\
    \n\x03\x04\0\x01\x12\x03\n\x08\x10\n9\n\x04\x04\0\x02\0\x12\x03\x0c\x02\
    \x15\x1a,\x20version\x20defines\x20the\x20ICS27\x20protocol\x20version\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0c\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\x13\x14\n\
    i\n\x04\x04\0\x02\x01\x12\x03\x0e\x02c\x1a\\\x20controller_connection_id\
    \x20is\x20the\x20connection\x20identifier\x20associated\x20with\x20the\
    \x20controller\x20chain\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\t!\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0e$%\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x0e&b\n\x0f\
    \n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x0e'a\n]\n\x04\x04\0\x02\
    \x02\x12\x03\x10\x02W\x1aP\x20host_connection_id\x20is\x20the\x20connect\
    ion\x20identifier\x20associated\x20with\x20the\x20host\x20chain\n\n\x0c\
    \n\x05\x04\0\x02\x02\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x10\t\x1b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x10\x1e\x1f\
    \n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x10\x20V\n\x0f\n\x08\x04\0\x02\
    \x02\x08\xee\xfb\x03\x12\x03\x10!U\n\xbb\x01\n\x04\x04\0\x02\x03\x12\x03\
    \x13\x02\x15\x1a\xad\x01\x20address\x20defines\x20the\x20interchain\x20a\
    ccount\x20address\x20to\x20be\x20fulfilled\x20upon\x20the\x20OnChanOpenT\
    ry\x20handshake\x20step\n\x20NOTE:\x20the\x20address\x20field\x20is\x20e\
    mpty\x20on\x20the\x20OnChanOpenInit\x20handshake\x20step\n\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x13\t\x10\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x13\x13\x14\n:\n\
    \x04\x04\0\x02\x04\x12\x03\x15\x02\x16\x1a-\x20encoding\x20defines\x20th\
    e\x20supported\x20codec\x20format\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03\x15\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x15\t\x11\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03\x15\x14\x15\nZ\n\x04\x04\0\x02\x05\x12\
    \x03\x17\x02\x15\x1aM\x20tx_type\x20defines\x20the\x20type\x20of\x20tran\
    sactions\x20the\x20interchain\x20account\x20can\x20execute\n\n\x0c\n\x05\
    \x04\0\x02\x05\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\x17\t\x10\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x17\x13\x14b\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Metadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
