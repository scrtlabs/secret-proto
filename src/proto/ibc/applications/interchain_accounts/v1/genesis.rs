// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/applications/interchain_accounts/v1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState defines the interchain accounts genesis state
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.GenesisState)
pub struct GenesisState {
    // message fields
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.GenesisState.controller_genesis_state)
    pub controller_genesis_state: ::protobuf::MessageField<ControllerGenesisState>,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.GenesisState.host_genesis_state)
    pub host_genesis_state: ::protobuf::MessageField<HostGenesisState>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControllerGenesisState>(
            "controller_genesis_state",
            |m: &GenesisState| { &m.controller_genesis_state },
            |m: &mut GenesisState| { &mut m.controller_genesis_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, HostGenesisState>(
            "host_genesis_state",
            |m: &GenesisState| { &m.host_genesis_state },
            |m: &mut GenesisState| { &mut m.host_genesis_state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.controller_genesis_state)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.host_genesis_state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.controller_genesis_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.host_genesis_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.controller_genesis_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.host_genesis_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.controller_genesis_state.clear();
        self.host_genesis_state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            controller_genesis_state: ::protobuf::MessageField::none(),
            host_genesis_state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ControllerGenesisState defines the interchain accounts controller genesis state
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.ControllerGenesisState)
pub struct ControllerGenesisState {
    // message fields
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.ControllerGenesisState.active_channels)
    pub active_channels: ::std::vec::Vec<ActiveChannel>,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.ControllerGenesisState.interchain_accounts)
    pub interchain_accounts: ::std::vec::Vec<RegisteredInterchainAccount>,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.ControllerGenesisState.ports)
    pub ports: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.ControllerGenesisState.params)
    pub params: ::protobuf::MessageField<super::controller::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.ControllerGenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControllerGenesisState {
    fn default() -> &'a ControllerGenesisState {
        <ControllerGenesisState as ::protobuf::Message>::default_instance()
    }
}

impl ControllerGenesisState {
    pub fn new() -> ControllerGenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "active_channels",
            |m: &ControllerGenesisState| { &m.active_channels },
            |m: &mut ControllerGenesisState| { &mut m.active_channels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "interchain_accounts",
            |m: &ControllerGenesisState| { &m.interchain_accounts },
            |m: &mut ControllerGenesisState| { &mut m.interchain_accounts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ports",
            |m: &ControllerGenesisState| { &m.ports },
            |m: &mut ControllerGenesisState| { &mut m.ports },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::controller::Params>(
            "params",
            |m: &ControllerGenesisState| { &m.params },
            |m: &mut ControllerGenesisState| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControllerGenesisState>(
            "ControllerGenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControllerGenesisState {
    const NAME: &'static str = "ControllerGenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.active_channels.push(is.read_message()?);
                },
                18 => {
                    self.interchain_accounts.push(is.read_message()?);
                },
                26 => {
                    self.ports.push(is.read_string()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.active_channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.interchain_accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.ports {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.active_channels {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.interchain_accounts {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.ports {
            os.write_string(3, &v)?;
        };
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControllerGenesisState {
        ControllerGenesisState::new()
    }

    fn clear(&mut self) {
        self.active_channels.clear();
        self.interchain_accounts.clear();
        self.ports.clear();
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControllerGenesisState {
        static instance: ControllerGenesisState = ControllerGenesisState {
            active_channels: ::std::vec::Vec::new(),
            interchain_accounts: ::std::vec::Vec::new(),
            ports: ::std::vec::Vec::new(),
            params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ControllerGenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControllerGenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControllerGenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControllerGenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  HostGenesisState defines the interchain accounts host genesis state
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.HostGenesisState)
pub struct HostGenesisState {
    // message fields
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.HostGenesisState.active_channels)
    pub active_channels: ::std::vec::Vec<ActiveChannel>,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.HostGenesisState.interchain_accounts)
    pub interchain_accounts: ::std::vec::Vec<RegisteredInterchainAccount>,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.HostGenesisState.port)
    pub port: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.HostGenesisState.params)
    pub params: ::protobuf::MessageField<super::host::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.HostGenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HostGenesisState {
    fn default() -> &'a HostGenesisState {
        <HostGenesisState as ::protobuf::Message>::default_instance()
    }
}

impl HostGenesisState {
    pub fn new() -> HostGenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "active_channels",
            |m: &HostGenesisState| { &m.active_channels },
            |m: &mut HostGenesisState| { &mut m.active_channels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "interchain_accounts",
            |m: &HostGenesisState| { &m.interchain_accounts },
            |m: &mut HostGenesisState| { &mut m.interchain_accounts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &HostGenesisState| { &m.port },
            |m: &mut HostGenesisState| { &mut m.port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::host::Params>(
            "params",
            |m: &HostGenesisState| { &m.params },
            |m: &mut HostGenesisState| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HostGenesisState>(
            "HostGenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HostGenesisState {
    const NAME: &'static str = "HostGenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.active_channels.push(is.read_message()?);
                },
                18 => {
                    self.interchain_accounts.push(is.read_message()?);
                },
                26 => {
                    self.port = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.active_channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.interchain_accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.port.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.port);
        }
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.active_channels {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.interchain_accounts {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.port.is_empty() {
            os.write_string(3, &self.port)?;
        }
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HostGenesisState {
        HostGenesisState::new()
    }

    fn clear(&mut self) {
        self.active_channels.clear();
        self.interchain_accounts.clear();
        self.port.clear();
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HostGenesisState {
        static instance: HostGenesisState = HostGenesisState {
            active_channels: ::std::vec::Vec::new(),
            interchain_accounts: ::std::vec::Vec::new(),
            port: ::std::string::String::new(),
            params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HostGenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HostGenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HostGenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HostGenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ActiveChannel contains a connection ID, port ID and associated active channel ID
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.ActiveChannel)
pub struct ActiveChannel {
    // message fields
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.ActiveChannel.connection_id)
    pub connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.ActiveChannel.port_id)
    pub port_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.ActiveChannel.channel_id)
    pub channel_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.ActiveChannel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ActiveChannel {
    fn default() -> &'a ActiveChannel {
        <ActiveChannel as ::protobuf::Message>::default_instance()
    }
}

impl ActiveChannel {
    pub fn new() -> ActiveChannel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &ActiveChannel| { &m.connection_id },
            |m: &mut ActiveChannel| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port_id",
            |m: &ActiveChannel| { &m.port_id },
            |m: &mut ActiveChannel| { &mut m.port_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "channel_id",
            |m: &ActiveChannel| { &m.channel_id },
            |m: &mut ActiveChannel| { &mut m.channel_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ActiveChannel>(
            "ActiveChannel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ActiveChannel {
    const NAME: &'static str = "ActiveChannel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_id = is.read_string()?;
                },
                18 => {
                    self.port_id = is.read_string()?;
                },
                26 => {
                    self.channel_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.channel_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        if !self.port_id.is_empty() {
            os.write_string(2, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(3, &self.channel_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ActiveChannel {
        ActiveChannel::new()
    }

    fn clear(&mut self) {
        self.connection_id.clear();
        self.port_id.clear();
        self.channel_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ActiveChannel {
        static instance: ActiveChannel = ActiveChannel {
            connection_id: ::std::string::String::new(),
            port_id: ::std::string::String::new(),
            channel_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ActiveChannel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ActiveChannel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ActiveChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActiveChannel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  RegisteredInterchainAccount contains a connection ID, port ID and associated interchain account address
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.interchain_accounts.v1.RegisteredInterchainAccount)
pub struct RegisteredInterchainAccount {
    // message fields
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.RegisteredInterchainAccount.connection_id)
    pub connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.RegisteredInterchainAccount.port_id)
    pub port_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.applications.interchain_accounts.v1.RegisteredInterchainAccount.account_address)
    pub account_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.interchain_accounts.v1.RegisteredInterchainAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisteredInterchainAccount {
    fn default() -> &'a RegisteredInterchainAccount {
        <RegisteredInterchainAccount as ::protobuf::Message>::default_instance()
    }
}

impl RegisteredInterchainAccount {
    pub fn new() -> RegisteredInterchainAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &RegisteredInterchainAccount| { &m.connection_id },
            |m: &mut RegisteredInterchainAccount| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port_id",
            |m: &RegisteredInterchainAccount| { &m.port_id },
            |m: &mut RegisteredInterchainAccount| { &mut m.port_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_address",
            |m: &RegisteredInterchainAccount| { &m.account_address },
            |m: &mut RegisteredInterchainAccount| { &mut m.account_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisteredInterchainAccount>(
            "RegisteredInterchainAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisteredInterchainAccount {
    const NAME: &'static str = "RegisteredInterchainAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.connection_id = is.read_string()?;
                },
                18 => {
                    self.port_id = is.read_string()?;
                },
                26 => {
                    self.account_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.port_id);
        }
        if !self.account_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.account_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        if !self.port_id.is_empty() {
            os.write_string(2, &self.port_id)?;
        }
        if !self.account_address.is_empty() {
            os.write_string(3, &self.account_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisteredInterchainAccount {
        RegisteredInterchainAccount::new()
    }

    fn clear(&mut self) {
        self.connection_id.clear();
        self.port_id.clear();
        self.account_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisteredInterchainAccount {
        static instance: RegisteredInterchainAccount = RegisteredInterchainAccount {
            connection_id: ::std::string::String::new(),
            port_id: ::std::string::String::new(),
            account_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisteredInterchainAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisteredInterchainAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisteredInterchainAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisteredInterchainAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n5ibc/applications/interchain_accounts/v1/genesis.proto\x12'ibc.applica\
    tions.interchain_accounts.v1\x1a\x14gogoproto/gogo.proto\x1aCibc/applica\
    tions/interchain_accounts/controller/v1/controller.proto\x1a7ibc/applica\
    tions/interchain_accounts/host/v1/host.proto\"\xc0\x02\n\x0cGenesisState\
    \x12\xa2\x01\n\x18controller_genesis_state\x18\x01\x20\x01(\x0b2?.ibc.ap\
    plications.interchain_accounts.v1.ControllerGenesisStateR\x16controllerG\
    enesisStateB'\xf2\xde\x1f\x1fyaml:\"controller_genesis_state\"\xc8\xde\
    \x1f\0\x12\x8a\x01\n\x12host_genesis_state\x18\x02\x20\x01(\x0b29.ibc.ap\
    plications.interchain_accounts.v1.HostGenesisStateR\x10hostGenesisStateB\
    !\xf2\xde\x1f\x19yaml:\"host_genesis_state\"\xc8\xde\x1f\0\"\xa5\x03\n\
    \x16ControllerGenesisState\x12\x7f\n\x0factive_channels\x18\x01\x20\x03(\
    \x0b26.ibc.applications.interchain_accounts.v1.ActiveChannelR\x0eactiveC\
    hannelsB\x1e\xf2\xde\x1f\x16yaml:\"active_channels\"\xc8\xde\x1f\0\x12\
    \x99\x01\n\x13interchain_accounts\x18\x02\x20\x03(\x0b2D.ibc.application\
    s.interchain_accounts.v1.RegisteredInterchainAccountR\x12interchainAccou\
    ntsB\"\xf2\xde\x1f\x1ayaml:\"interchain_accounts\"\xc8\xde\x1f\0\x12\x14\
    \n\x05ports\x18\x03\x20\x03(\tR\x05ports\x12X\n\x06params\x18\x04\x20\
    \x01(\x0b2:.ibc.applications.interchain_accounts.controller.v1.ParamsR\
    \x06paramsB\x04\xc8\xde\x1f\0\"\x97\x03\n\x10HostGenesisState\x12\x7f\n\
    \x0factive_channels\x18\x01\x20\x03(\x0b26.ibc.applications.interchain_a\
    ccounts.v1.ActiveChannelR\x0eactiveChannelsB\x1e\xf2\xde\x1f\x16yaml:\"a\
    ctive_channels\"\xc8\xde\x1f\0\x12\x99\x01\n\x13interchain_accounts\x18\
    \x02\x20\x03(\x0b2D.ibc.applications.interchain_accounts.v1.RegisteredIn\
    terchainAccountR\x12interchainAccountsB\"\xf2\xde\x1f\x1ayaml:\"intercha\
    in_accounts\"\xc8\xde\x1f\0\x12\x12\n\x04port\x18\x03\x20\x01(\tR\x04por\
    t\x12R\n\x06params\x18\x04\x20\x01(\x0b24.ibc.applications.interchain_ac\
    counts.host.v1.ParamsR\x06paramsB\x04\xc8\xde\x1f\0\"\xb1\x01\n\rActiveC\
    hannel\x12=\n\rconnection_id\x18\x01\x20\x01(\tR\x0cconnectionIdB\x18\
    \xf2\xde\x1f\x14yaml:\"connection_id\"\x12+\n\x07port_id\x18\x02\x20\x01\
    (\tR\x06portIdB\x12\xf2\xde\x1f\x0eyaml:\"port_id\"\x124\n\nchannel_id\
    \x18\x03\x20\x01(\tR\tchannelIdB\x15\xf2\xde\x1f\x11yaml:\"channel_id\"\
    \"\xce\x01\n\x1bRegisteredInterchainAccount\x12=\n\rconnection_id\x18\
    \x01\x20\x01(\tR\x0cconnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_i\
    d\"\x12+\n\x07port_id\x18\x02\x20\x01(\tR\x06portIdB\x12\xf2\xde\x1f\x0e\
    yaml:\"port_id\"\x12C\n\x0faccount_address\x18\x03\x20\x01(\tR\x0eaccoun\
    tAddressB\x1a\xf2\xde\x1f\x16yaml:\"account_address\"BGZEgithub.com/cosm\
    os/ibc-go/v3/modules/apps/27-interchain-accounts/typesJ\xb5\x10\n\x06\
    \x12\x04\0\02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\00\n\x08\n\x01\x08\x12\x03\x04\0\\\n\t\n\x02\x08\x0b\x12\x03\
    \x04\0\\\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\x03\x07\
    \0M\n\t\n\x02\x03\x02\x12\x03\x08\0A\nH\n\x02\x04\0\x12\x04\x0b\0\x10\
    \x01\x1a<\x20GenesisState\x20defines\x20the\x20interchain\x20accounts\
    \x20genesis\x20state\n\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x14\n\x0c\n\
    \x04\x04\0\x02\0\x12\x04\x0c\x02\ra\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\
    \x0c\x02\x18\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\x191\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x0c45\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\r\x06\
    `\n\x0f\n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\r\x07#\n\x0f\n\x08\x04\
    \0\x02\0\x08\xee\xfb\x03\x12\x03\r%_\n\x0c\n\x04\x04\0\x02\x01\x12\x04\
    \x0e\x02\x0f[\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0e\x02\x12\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x0e\x13%\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x0e()\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x0f\x06Z\n\x0f\n\
    \x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x0f\x07#\n\x0f\n\x08\x04\0\
    \x02\x01\x08\xee\xfb\x03\x12\x03\x0f%Y\n]\n\x02\x04\x01\x12\x04\x13\0\
    \x1a\x01\x1aQ\x20ControllerGenesisState\x20defines\x20the\x20interchain\
    \x20accounts\x20controller\x20genesis\x20state\n\n\n\n\x03\x04\x01\x01\
    \x12\x03\x13\x08\x1e\n\x0c\n\x04\x04\x01\x02\0\x12\x04\x14\x02\x15X\n\
    \x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x14\x02\n\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x14\x0b\x18\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x14\x19(\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x14+,\n\x0c\n\x05\x04\x01\x02\0\
    \x08\x12\x03\x15\x06W\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03\
    \x15\x07#\n\x0f\n\x08\x04\x01\x02\0\x08\xee\xfb\x03\x12\x03\x15%V\n\x0c\
    \n\x04\x04\x01\x02\x01\x12\x04\x16\x02\x17\\\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03\x16\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x16\x0b&\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x16':\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x16=>\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\x17\x06[\
    \n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\x03\x12\x03\x17\x07#\n\x0f\n\
    \x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03\x17%Z\n\x0b\n\x04\x04\x01\
    \x02\x02\x12\x03\x18\x02G\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x18\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x18\x0b\x11\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x18<A\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\x18EF\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x19\x02f\n\x0c\n\x05\x04\
    \x01\x02\x03\x06\x12\x03\x19\x02;\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03\x19<B\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x19EF\n\x0c\n\x05\x04\
    \x01\x02\x03\x08\x12\x03\x19Ge\n\x0f\n\x08\x04\x01\x02\x03\x08\xe9\xfb\
    \x03\x12\x03\x19Hd\nQ\n\x02\x04\x02\x12\x04\x1d\0$\x01\x1aE\x20HostGenes\
    isState\x20defines\x20the\x20interchain\x20accounts\x20host\x20genesis\
    \x20state\n\n\n\n\x03\x04\x02\x01\x12\x03\x1d\x08\x18\n\x0c\n\x04\x04\
    \x02\x02\0\x12\x04\x1e\x02\x1fX\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\
    \x1e\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1e\x0b\x18\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x1e\x19(\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x1e+,\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03\x1f\x06W\n\x0f\n\x08\
    \x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03\x1f\x07#\n\x0f\n\x08\x04\x02\x02\
    \0\x08\xee\xfb\x03\x12\x03\x1f%V\n\x0c\n\x04\x04\x02\x02\x01\x12\x04\x20\
    \x02!\\\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x20\x02\n\n\x0c\n\x05\
    \x04\x02\x02\x01\x06\x12\x03\x20\x0b&\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03\x20':\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x20=>\n\x0c\n\x05\
    \x04\x02\x02\x01\x08\x12\x03!\x06[\n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\
    \xfb\x03\x12\x03!\x07#\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\
    \x03!%Z\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\"\x02A\n\x0c\n\x05\x04\x02\
    \x02\x02\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\"\
    6:\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\"?@\n\x0b\n\x04\x04\x02\x02\
    \x03\x12\x03#\x02`\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03#\x025\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03#6<\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\
    \x03#?@\n\x0c\n\x05\x04\x02\x02\x03\x08\x12\x03#A_\n\x0f\n\x08\x04\x02\
    \x02\x03\x08\xe9\xfb\x03\x12\x03#B^\n^\n\x02\x04\x03\x12\x04'\0+\x01\x1a\
    R\x20ActiveChannel\x20contains\x20a\x20connection\x20ID,\x20port\x20ID\
    \x20and\x20associated\x20active\x20channel\x20ID\n\n\n\n\x03\x04\x03\x01\
    \x12\x03'\x08\x15\n\x0b\n\x04\x04\x03\x02\0\x12\x03(\x02M\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03(\t\x16\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03(\x19\x1a\n\x0c\n\x05\
    \x04\x03\x02\0\x08\x12\x03(\x1bL\n\x0f\n\x08\x04\x03\x02\0\x08\xee\xfb\
    \x03\x12\x03(\x1cK\n\x0b\n\x04\x04\x03\x02\x01\x12\x03)\x02G\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03)\t\x10\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03)\x19\x1a\n\x0c\n\
    \x05\x04\x03\x02\x01\x08\x12\x03)\x1bF\n\x0f\n\x08\x04\x03\x02\x01\x08\
    \xee\xfb\x03\x12\x03)\x1cE\n\x0b\n\x04\x04\x03\x02\x02\x12\x03*\x02J\n\
    \x0c\n\x05\x04\x03\x02\x02\x05\x12\x03*\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x02\x01\x12\x03*\t\x13\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03*\x19\x1a\
    \n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x03*\x1bI\n\x0f\n\x08\x04\x03\x02\
    \x02\x08\xee\xfb\x03\x12\x03*\x1cH\nu\n\x02\x04\x04\x12\x04.\02\x01\x1ai\
    \x20RegisteredInterchainAccount\x20contains\x20a\x20connection\x20ID,\
    \x20port\x20ID\x20and\x20associated\x20interchain\x20account\x20address\
    \n\n\n\n\x03\x04\x04\x01\x12\x03.\x08#\n\x0b\n\x04\x04\x04\x02\0\x12\x03\
    /\x02O\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03/\t\x16\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03/\x1b\
    \x1c\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03/\x1dN\n\x0f\n\x08\x04\x04\x02\
    \0\x08\xee\xfb\x03\x12\x03/\x1eM\n\x0b\n\x04\x04\x04\x02\x01\x12\x030\
    \x02I\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\x01\x01\x12\x030\t\x10\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x030\
    \x1b\x1c\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x030\x1dH\n\x0f\n\x08\x04\
    \x04\x02\x01\x08\xee\xfb\x03\x12\x030\x1eG\n\x0b\n\x04\x04\x04\x02\x02\
    \x12\x031\x02Q\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x031\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x031\t\x18\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x031\x1b\x1c\n\x0c\n\x05\x04\x04\x02\x02\x08\x12\x031\x1dP\n\x0f\n\
    \x08\x04\x04\x02\x02\x08\xee\xfb\x03\x12\x031\x1eOb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::controller::file_descriptor().clone());
            deps.push(super::host::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(GenesisState::generated_message_descriptor_data());
            messages.push(ControllerGenesisState::generated_message_descriptor_data());
            messages.push(HostGenesisState::generated_message_descriptor_data());
            messages.push(ActiveChannel::generated_message_descriptor_data());
            messages.push(RegisteredInterchainAccount::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
