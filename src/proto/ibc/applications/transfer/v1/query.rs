// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/applications/transfer/v1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryDenomTraceRequest is the request type for the Query/DenomTrace RPC
///  method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.QueryDenomTraceRequest)
pub struct QueryDenomTraceRequest {
    // message fields
    ///  hash (in hex format) of the denomination trace information.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.QueryDenomTraceRequest.hash)
    pub hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.QueryDenomTraceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomTraceRequest {
    fn default() -> &'a QueryDenomTraceRequest {
        <QueryDenomTraceRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomTraceRequest {
    pub fn new() -> QueryDenomTraceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &QueryDenomTraceRequest| { &m.hash },
            |m: &mut QueryDenomTraceRequest| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomTraceRequest>(
            "QueryDenomTraceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomTraceRequest {
    const NAME: &'static str = "QueryDenomTraceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomTraceRequest {
        QueryDenomTraceRequest::new()
    }

    fn clear(&mut self) {
        self.hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomTraceRequest {
        static instance: QueryDenomTraceRequest = QueryDenomTraceRequest {
            hash: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomTraceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomTraceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomTraceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomTraceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.QueryDenomTraceResponse)
pub struct QueryDenomTraceResponse {
    // message fields
    ///  denom_trace returns the requested denomination trace information.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace)
    pub denom_trace: ::protobuf::MessageField<super::transfer::DenomTrace>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.QueryDenomTraceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomTraceResponse {
    fn default() -> &'a QueryDenomTraceResponse {
        <QueryDenomTraceResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomTraceResponse {
    pub fn new() -> QueryDenomTraceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::transfer::DenomTrace>(
            "denom_trace",
            |m: &QueryDenomTraceResponse| { &m.denom_trace },
            |m: &mut QueryDenomTraceResponse| { &mut m.denom_trace },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomTraceResponse>(
            "QueryDenomTraceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomTraceResponse {
    const NAME: &'static str = "QueryDenomTraceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.denom_trace)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.denom_trace.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.denom_trace.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomTraceResponse {
        QueryDenomTraceResponse::new()
    }

    fn clear(&mut self) {
        self.denom_trace.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomTraceResponse {
        static instance: QueryDenomTraceResponse = QueryDenomTraceResponse {
            denom_trace: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomTraceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomTraceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomTraceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomTraceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionsRequest is the request type for the Query/DenomTraces RPC
///  method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.QueryDenomTracesRequest)
pub struct QueryDenomTracesRequest {
    // message fields
    ///  pagination defines an optional pagination for the request.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.QueryDenomTracesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomTracesRequest {
    fn default() -> &'a QueryDenomTracesRequest {
        <QueryDenomTracesRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomTracesRequest {
    pub fn new() -> QueryDenomTracesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageRequest>(
            "pagination",
            |m: &QueryDenomTracesRequest| { &m.pagination },
            |m: &mut QueryDenomTracesRequest| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomTracesRequest>(
            "QueryDenomTracesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomTracesRequest {
    const NAME: &'static str = "QueryDenomTracesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomTracesRequest {
        QueryDenomTracesRequest::new()
    }

    fn clear(&mut self) {
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomTracesRequest {
        static instance: QueryDenomTracesRequest = QueryDenomTracesRequest {
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomTracesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomTracesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomTracesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomTracesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.QueryDenomTracesResponse)
pub struct QueryDenomTracesResponse {
    // message fields
    ///  denom_traces returns all denominations trace information.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces)
    pub denom_traces: ::std::vec::Vec<super::transfer::DenomTrace>,
    ///  pagination defines the pagination in the response.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination)
    pub pagination: ::protobuf::MessageField<super::pagination::PageResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.QueryDenomTracesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomTracesResponse {
    fn default() -> &'a QueryDenomTracesResponse {
        <QueryDenomTracesResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomTracesResponse {
    pub fn new() -> QueryDenomTracesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "denom_traces",
            |m: &QueryDenomTracesResponse| { &m.denom_traces },
            |m: &mut QueryDenomTracesResponse| { &mut m.denom_traces },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pagination::PageResponse>(
            "pagination",
            |m: &QueryDenomTracesResponse| { &m.pagination },
            |m: &mut QueryDenomTracesResponse| { &mut m.pagination },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomTracesResponse>(
            "QueryDenomTracesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomTracesResponse {
    const NAME: &'static str = "QueryDenomTracesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.denom_traces.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pagination)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.denom_traces {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.denom_traces {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pagination.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomTracesResponse {
        QueryDenomTracesResponse::new()
    }

    fn clear(&mut self) {
        self.denom_traces.clear();
        self.pagination.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomTracesResponse {
        static instance: QueryDenomTracesResponse = QueryDenomTracesResponse {
            denom_traces: ::std::vec::Vec::new(),
            pagination: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomTracesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomTracesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomTracesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomTracesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.QueryParamsRequest)
pub struct QueryParamsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.QueryParamsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsRequest>(
            "QueryParamsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: QueryParamsRequest = QueryParamsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.QueryParamsResponse)
pub struct QueryParamsResponse {
    // message fields
    ///  params defines the parameters of the module.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.QueryParamsResponse.params)
    pub params: ::protobuf::MessageField<super::transfer::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.QueryParamsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::transfer::Params>(
            "params",
            |m: &QueryParamsResponse| { &m.params },
            |m: &mut QueryParamsResponse| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryParamsResponse>(
            "QueryParamsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn clear(&mut self) {
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: QueryParamsResponse = QueryParamsResponse {
            params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryParamsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryParamsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDenomHashRequest is the request type for the Query/DenomHash RPC
///  method
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.QueryDenomHashRequest)
pub struct QueryDenomHashRequest {
    // message fields
    ///  The denomination trace ([port_id]/[channel_id])+/[denom]
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.QueryDenomHashRequest.trace)
    pub trace: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.QueryDenomHashRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomHashRequest {
    fn default() -> &'a QueryDenomHashRequest {
        <QueryDenomHashRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomHashRequest {
    pub fn new() -> QueryDenomHashRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "trace",
            |m: &QueryDenomHashRequest| { &m.trace },
            |m: &mut QueryDenomHashRequest| { &mut m.trace },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomHashRequest>(
            "QueryDenomHashRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomHashRequest {
    const NAME: &'static str = "QueryDenomHashRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.trace = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.trace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.trace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.trace.is_empty() {
            os.write_string(1, &self.trace)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomHashRequest {
        QueryDenomHashRequest::new()
    }

    fn clear(&mut self) {
        self.trace.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomHashRequest {
        static instance: QueryDenomHashRequest = QueryDenomHashRequest {
            trace: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomHashRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomHashRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomHashRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomHashRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryDenomHashResponse is the response type for the Query/DenomHash RPC
///  method.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.QueryDenomHashResponse)
pub struct QueryDenomHashResponse {
    // message fields
    ///  hash (in hex format) of the denomination trace information.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.QueryDenomHashResponse.hash)
    pub hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.QueryDenomHashResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryDenomHashResponse {
    fn default() -> &'a QueryDenomHashResponse {
        <QueryDenomHashResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDenomHashResponse {
    pub fn new() -> QueryDenomHashResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &QueryDenomHashResponse| { &m.hash },
            |m: &mut QueryDenomHashResponse| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryDenomHashResponse>(
            "QueryDenomHashResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryDenomHashResponse {
    const NAME: &'static str = "QueryDenomHashResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryDenomHashResponse {
        QueryDenomHashResponse::new()
    }

    fn clear(&mut self) {
        self.hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryDenomHashResponse {
        static instance: QueryDenomHashResponse = QueryDenomHashResponse {
            hash: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryDenomHashResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryDenomHashResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryDenomHashResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDenomHashResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(ibc/applications/transfer/v1/query.proto\x12\x1cibc.applications.tran\
    sfer.v1\x1a\x14gogoproto/gogo.proto\x1a*cosmos/base/query/v1beta1/pagina\
    tion.proto\x1a+ibc/applications/transfer/v1/transfer.proto\x1a\x1cgoogle\
    /api/annotations.proto\",\n\x16QueryDenomTraceRequest\x12\x12\n\x04hash\
    \x18\x01\x20\x01(\tR\x04hash\"d\n\x17QueryDenomTraceResponse\x12I\n\x0bd\
    enom_trace\x18\x01\x20\x01(\x0b2(.ibc.applications.transfer.v1.DenomTrac\
    eR\ndenomTrace\"a\n\x17QueryDenomTracesRequest\x12F\n\npagination\x18\
    \x01\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagination\"\
    \xc0\x01\n\x18QueryDenomTracesResponse\x12[\n\x0cdenom_traces\x18\x01\
    \x20\x03(\x0b2(.ibc.applications.transfer.v1.DenomTraceR\x0bdenomTracesB\
    \x0e\xaa\xdf\x1f\x06Traces\xc8\xde\x1f\0\x12G\n\npagination\x18\x02\x20\
    \x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination\"\x14\n\
    \x12QueryParamsRequest\"S\n\x13QueryParamsResponse\x12<\n\x06params\x18\
    \x01\x20\x01(\x0b2$.ibc.applications.transfer.v1.ParamsR\x06params\"-\n\
    \x15QueryDenomHashRequest\x12\x14\n\x05trace\x18\x01\x20\x01(\tR\x05trac\
    e\",\n\x16QueryDenomHashResponse\x12\x12\n\x04hash\x18\x01\x20\x01(\tR\
    \x04hash2\xa4\x05\n\x05Query\x12\xac\x01\n\nDenomTrace\x124.ibc.applicat\
    ions.transfer.v1.QueryDenomTraceRequest\x1a5.ibc.applications.transfer.v\
    1.QueryDenomTraceResponse\"1\x82\xd3\xe4\x93\x02+\x12)/ibc/apps/transfer\
    /v1/denom_traces/{hash}\x12\xa8\x01\n\x0bDenomTraces\x125.ibc.applicatio\
    ns.transfer.v1.QueryDenomTracesRequest\x1a6.ibc.applications.transfer.v1\
    .QueryDenomTracesResponse\"*\x82\xd3\xe4\x93\x02$\x12\"/ibc/apps/transfe\
    r/v1/denom_traces\x12\x93\x01\n\x06Params\x120.ibc.applications.transfer\
    .v1.QueryParamsRequest\x1a1.ibc.applications.transfer.v1.QueryParamsResp\
    onse\"$\x82\xd3\xe4\x93\x02\x1e\x12\x1c/ibc/apps/transfer/v1/params\x12\
    \xaa\x01\n\tDenomHash\x123.ibc.applications.transfer.v1.QueryDenomHashRe\
    quest\x1a4.ibc.applications.transfer.v1.QueryDenomHashResponse\"2\x82\
    \xd3\xe4\x93\x02,\x12*/ibc/apps/transfer/v1/denom_hashes/{trace}B9Z7gith\
    ub.com/cosmos/ibc-go/v3/modules/apps/transfer/typesJ\x90\x14\n\x06\x12\
    \x04\0\0U\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0%\n\t\n\x02\x03\0\x12\x03\x04\0\x1e\n\t\n\x02\x03\x01\x12\x03\x05\
    \04\n\t\n\x02\x03\x02\x12\x03\x06\05\n\t\n\x02\x03\x03\x12\x03\x07\0&\n\
    \x08\n\x01\x08\x12\x03\t\0N\n\t\n\x02\x08\x0b\x12\x03\t\0N\n>\n\x02\x06\
    \0\x12\x04\x0c\0\x20\x01\x1a2\x20Query\x20provides\x20defines\x20the\x20\
    gRPC\x20querier\x20service.\n\n\n\n\x03\x06\0\x01\x12\x03\x0c\x08\r\nD\n\
    \x04\x06\0\x02\0\x12\x04\x0e\x02\x10\x03\x1a6\x20DenomTrace\x20queries\
    \x20a\x20denomination\x20trace\x20information.\n\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\x0e\x06\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0e\x11'\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0e2I\n\x0c\n\x05\x06\0\x02\0\x04\x12\
    \x03\x0f\x04O\n\x11\n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x0f\
    \x04O\n<\n\x04\x06\0\x02\x01\x12\x04\x13\x02\x15\x03\x1a.\x20DenomTraces\
    \x20queries\x20all\x20denomination\x20traces.\n\n\x0c\n\x05\x06\0\x02\
    \x01\x01\x12\x03\x13\x06\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x13\
    \x12)\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x134L\n\x0c\n\x05\x06\0\x02\
    \x01\x04\x12\x03\x14\x04H\n\x11\n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\x02\
    \x12\x03\x14\x04H\nI\n\x04\x06\0\x02\x02\x12\x04\x18\x02\x1a\x03\x1a;\
    \x20Params\x20queries\x20all\x20parameters\x20of\x20the\x20ibc-transfer\
    \x20module.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x18\x06\x0c\n\x0c\n\
    \x05\x06\0\x02\x02\x02\x12\x03\x18\r\x1f\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03\x18*=\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03\x19\x04B\n\x11\n\n\
    \x06\0\x02\x02\x04\xb0\xca\xbc\"\x02\x12\x03\x19\x04B\nB\n\x04\x06\0\x02\
    \x03\x12\x04\x1d\x02\x1f\x03\x1a4\x20DenomHash\x20queries\x20a\x20denomi\
    nation\x20hash\x20information.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \x1d\x06\x0f\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x1d\x10%\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03\x1d0F\n\x0c\n\x05\x06\0\x02\x03\x04\x12\x03\
    \x1e\x04P\n\x11\n\n\x06\0\x02\x03\x04\xb0\xca\xbc\"\x02\x12\x03\x1e\x04P\
    \n]\n\x02\x04\0\x12\x04$\0'\x01\x1aQ\x20QueryDenomTraceRequest\x20is\x20\
    the\x20request\x20type\x20for\x20the\x20Query/DenomTrace\x20RPC\n\x20met\
    hod\n\n\n\n\x03\x04\0\x01\x12\x03$\x08\x1e\nJ\n\x04\x04\0\x02\0\x12\x03&\
    \x02\x12\x1a=\x20hash\x20(in\x20hex\x20format)\x20of\x20the\x20denominat\
    ion\x20trace\x20information.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03&\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03&\t\r\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03&\x10\x11\n`\n\x02\x04\x01\x12\x04+\0.\x01\x1aT\x20QueryDeno\
    mTraceResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/D\
    enomTrace\x20RPC\n\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03+\x08\x1f\n\
    P\n\x04\x04\x01\x02\0\x12\x03-\x02\x1d\x1aC\x20denom_trace\x20returns\
    \x20the\x20requested\x20denomination\x20trace\x20information.\n\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03-\x02\x0c\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03-\r\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03-\x1b\x1c\n_\n\x02\
    \x04\x02\x12\x042\05\x01\x1aS\x20QueryConnectionsRequest\x20is\x20the\
    \x20request\x20type\x20for\x20the\x20Query/DenomTraces\x20RPC\n\x20metho\
    d\n\n\n\n\x03\x04\x02\x01\x12\x032\x08\x1f\nI\n\x04\x04\x02\x02\0\x12\
    \x034\x027\x1a<\x20pagination\x20defines\x20an\x20optional\x20pagination\
    \x20for\x20the\x20request.\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x034\x02'\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x034(2\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03456\nb\n\x02\x04\x03\x12\x049\0>\x01\x1aV\x20QueryConnectionsRes\
    ponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/DenomTrace\
    s\x20RPC\n\x20method.\n\n\n\n\x03\x04\x03\x01\x12\x039\x08\x20\nH\n\x04\
    \x04\x03\x02\0\x12\x03;\x02k\x1a;\x20denom_traces\x20returns\x20all\x20d\
    enominations\x20trace\x20information.\n\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x03;\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03;\x0b\x15\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03;\x16\"\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03;%&\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03;'j\n\x0f\n\x08\x04\x03\x02\
    \0\x08\xf5\xfb\x03\x12\x03;(K\n\x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\
    \x12\x03;Mi\nA\n\x04\x04\x03\x02\x01\x12\x03=\x028\x1a4\x20pagination\
    \x20defines\x20the\x20pagination\x20in\x20the\x20response.\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x06\x12\x03=\x02(\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03=)3\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03=67\nT\n\x02\x04\x04\x12\
    \x03A\0\x1d\x1aI\x20QueryParamsRequest\x20is\x20the\x20request\x20type\
    \x20for\x20the\x20Query/Params\x20RPC\x20method.\n\n\n\n\x03\x04\x04\x01\
    \x12\x03A\x08\x1a\nW\n\x02\x04\x05\x12\x04D\0G\x01\x1aK\x20QueryParamsRe\
    sponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Params\
    \x20RPC\x20method.\n\n\n\n\x03\x04\x05\x01\x12\x03D\x08\x1b\n;\n\x04\x04\
    \x05\x02\0\x12\x03F\x02\x14\x1a.\x20params\x20defines\x20the\x20paramete\
    rs\x20of\x20the\x20module.\n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03F\x02\
    \x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03F\t\x0f\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03F\x12\x13\n[\n\x02\x04\x06\x12\x04K\0N\x01\x1aO\x20Que\
    ryDenomHashRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Quer\
    y/DenomHash\x20RPC\n\x20method\n\n\n\n\x03\x04\x06\x01\x12\x03K\x08\x1d\
    \nG\n\x04\x04\x06\x02\0\x12\x03M\x02\x13\x1a:\x20The\x20denomination\x20\
    trace\x20([port_id]/[channel_id])+/[denom]\n\n\x0c\n\x05\x04\x06\x02\0\
    \x05\x12\x03M\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03M\t\x0e\n\x0c\
    \n\x05\x04\x06\x02\0\x03\x12\x03M\x11\x12\n^\n\x02\x04\x07\x12\x04R\0U\
    \x01\x1aR\x20QueryDenomHashResponse\x20is\x20the\x20response\x20type\x20\
    for\x20the\x20Query/DenomHash\x20RPC\n\x20method.\n\n\n\n\x03\x04\x07\
    \x01\x12\x03R\x08\x1e\nJ\n\x04\x04\x07\x02\0\x12\x03T\x02\x12\x1a=\x20ha\
    sh\x20(in\x20hex\x20format)\x20of\x20the\x20denomination\x20trace\x20inf\
    ormation.\n\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03T\x02\x08\n\x0c\n\x05\
    \x04\x07\x02\0\x01\x12\x03T\t\r\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03T\
    \x10\x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::pagination::file_descriptor().clone());
            deps.push(super::transfer::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(QueryDenomTraceRequest::generated_message_descriptor_data());
            messages.push(QueryDenomTraceResponse::generated_message_descriptor_data());
            messages.push(QueryDenomTracesRequest::generated_message_descriptor_data());
            messages.push(QueryDenomTracesResponse::generated_message_descriptor_data());
            messages.push(QueryParamsRequest::generated_message_descriptor_data());
            messages.push(QueryParamsResponse::generated_message_descriptor_data());
            messages.push(QueryDenomHashRequest::generated_message_descriptor_data());
            messages.push(QueryDenomHashResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
