// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/applications/transfer/v1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between
///  ICS20 enabled chains. See ICS Spec here:
///  https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.MsgTransfer)
pub struct MsgTransfer {
    // message fields
    ///  the port on which the packet will be sent
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.MsgTransfer.source_port)
    pub source_port: ::std::string::String,
    ///  the channel by which the packet will be sent
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.MsgTransfer.source_channel)
    pub source_channel: ::std::string::String,
    ///  the tokens to be transferred
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.MsgTransfer.token)
    pub token: ::protobuf::MessageField<super::coin::Coin>,
    ///  the sender address
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.MsgTransfer.sender)
    pub sender: ::std::string::String,
    ///  the recipient address on the destination chain
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.MsgTransfer.receiver)
    pub receiver: ::std::string::String,
    ///  Timeout height relative to the current block height.
    ///  The timeout is disabled when set to 0.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.MsgTransfer.timeout_height)
    pub timeout_height: ::protobuf::MessageField<super::client::Height>,
    ///  Timeout timestamp in absolute nanoseconds since unix epoch.
    ///  The timeout is disabled when set to 0.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.MsgTransfer.timeout_timestamp)
    pub timeout_timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.MsgTransfer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgTransfer {
    fn default() -> &'a MsgTransfer {
        <MsgTransfer as ::protobuf::Message>::default_instance()
    }
}

impl MsgTransfer {
    pub fn new() -> MsgTransfer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_port",
            |m: &MsgTransfer| { &m.source_port },
            |m: &mut MsgTransfer| { &mut m.source_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_channel",
            |m: &MsgTransfer| { &m.source_channel },
            |m: &mut MsgTransfer| { &mut m.source_channel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "token",
            |m: &MsgTransfer| { &m.token },
            |m: &mut MsgTransfer| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &MsgTransfer| { &m.sender },
            |m: &mut MsgTransfer| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "receiver",
            |m: &MsgTransfer| { &m.receiver },
            |m: &mut MsgTransfer| { &mut m.receiver },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::client::Height>(
            "timeout_height",
            |m: &MsgTransfer| { &m.timeout_height },
            |m: &mut MsgTransfer| { &mut m.timeout_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timeout_timestamp",
            |m: &MsgTransfer| { &m.timeout_timestamp },
            |m: &mut MsgTransfer| { &mut m.timeout_timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgTransfer>(
            "MsgTransfer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgTransfer {
    const NAME: &'static str = "MsgTransfer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_port = is.read_string()?;
                },
                18 => {
                    self.source_channel = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.token)?;
                },
                34 => {
                    self.sender = is.read_string()?;
                },
                42 => {
                    self.receiver = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timeout_height)?;
                },
                56 => {
                    self.timeout_timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.source_port.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.source_port);
        }
        if !self.source_channel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source_channel);
        }
        if let Some(v) = self.token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.sender);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.receiver);
        }
        if let Some(v) = self.timeout_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.timeout_timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.timeout_timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.source_port.is_empty() {
            os.write_string(1, &self.source_port)?;
        }
        if !self.source_channel.is_empty() {
            os.write_string(2, &self.source_channel)?;
        }
        if let Some(v) = self.token.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.sender.is_empty() {
            os.write_string(4, &self.sender)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(5, &self.receiver)?;
        }
        if let Some(v) = self.timeout_height.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if self.timeout_timestamp != 0 {
            os.write_uint64(7, self.timeout_timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgTransfer {
        MsgTransfer::new()
    }

    fn clear(&mut self) {
        self.source_port.clear();
        self.source_channel.clear();
        self.token.clear();
        self.sender.clear();
        self.receiver.clear();
        self.timeout_height.clear();
        self.timeout_timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgTransfer {
        static instance: MsgTransfer = MsgTransfer {
            source_port: ::std::string::String::new(),
            source_channel: ::std::string::String::new(),
            token: ::protobuf::MessageField::none(),
            sender: ::std::string::String::new(),
            receiver: ::std::string::String::new(),
            timeout_height: ::protobuf::MessageField::none(),
            timeout_timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgTransfer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgTransfer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgTransfer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgTransferResponse defines the Msg/Transfer response type.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.MsgTransferResponse)
pub struct MsgTransferResponse {
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.MsgTransferResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgTransferResponse {
    fn default() -> &'a MsgTransferResponse {
        <MsgTransferResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgTransferResponse {
    pub fn new() -> MsgTransferResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgTransferResponse>(
            "MsgTransferResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgTransferResponse {
    const NAME: &'static str = "MsgTransferResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgTransferResponse {
        MsgTransferResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgTransferResponse {
        static instance: MsgTransferResponse = MsgTransferResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgTransferResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgTransferResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgTransferResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgTransferResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%ibc/applications/transfer/v1/tx.proto\x12\x1cibc.applications.transfe\
    r.v1\x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\
    \x1a\x1fibc/core/client/v1/client.proto\"\xaa\x03\n\x0bMsgTransfer\x127\
    \n\x0bsource_port\x18\x01\x20\x01(\tR\nsourcePortB\x16\xf2\xde\x1f\x12ya\
    ml:\"source_port\"\x12@\n\x0esource_channel\x18\x02\x20\x01(\tR\rsourceC\
    hannelB\x19\xf2\xde\x1f\x15yaml:\"source_channel\"\x125\n\x05token\x18\
    \x03\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x05tokenB\x04\xc8\xde\
    \x1f\0\x12\x16\n\x06sender\x18\x04\x20\x01(\tR\x06sender\x12\x1a\n\x08re\
    ceiver\x18\x05\x20\x01(\tR\x08receiver\x12`\n\x0etimeout_height\x18\x06\
    \x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\rtimeoutHeightB\x1d\xf2\
    \xde\x1f\x15yaml:\"timeout_height\"\xc8\xde\x1f\0\x12I\n\x11timeout_time\
    stamp\x18\x07\x20\x01(\x04R\x10timeoutTimestampB\x1c\xf2\xde\x1f\x18yaml\
    :\"timeout_timestamp\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x15\n\x13MsgTr\
    ansferResponse2o\n\x03Msg\x12h\n\x08Transfer\x12).ibc.applications.trans\
    fer.v1.MsgTransfer\x1a1.ibc.applications.transfer.v1.MsgTransferResponse\
    B9Z7github.com/cosmos/ibc-go/v3/modules/apps/transfer/typesJ\xc3\x0c\n\
    \x06\x12\x04\0\0+\x1e\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0%\n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\x0b\x12\x03\
    \x04\0N\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\x02\x03\x01\x12\x03\x07\
    \0(\n\t\n\x02\x03\x02\x12\x03\x08\0)\n7\n\x02\x06\0\x12\x04\x0b\0\x0e\
    \x01\x1a+\x20Msg\x20defines\x20the\x20ibc/transfer\x20Msg\x20service.\n\
    \n\n\n\x03\x06\0\x01\x12\x03\x0b\x08\x0b\nE\n\x04\x06\0\x02\0\x12\x03\r\
    \x02:\x1a8\x20Transfer\x20defines\x20a\x20rpc\x20handler\x20method\x20fo\
    r\x20MsgTransfer.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\r\x06\x0e\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\r\x0f\x1a\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\r%8\n\xe6\x01\n\x02\x04\0\x12\x04\x13\0(\x01\x1a\xd9\x01\x20MsgTran\
    sfer\x20defines\x20a\x20msg\x20to\x20transfer\x20fungible\x20tokens\x20(\
    i.e\x20Coins)\x20between\n\x20ICS20\x20enabled\x20chains.\x20See\x20ICS\
    \x20Spec\x20here:\n\x20https://github.com/cosmos/ibc/tree/master/spec/ap\
    p/ics-020-fungible-token-transfer#data-structures\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x13\x08\x13\n\n\n\x03\x04\0\x07\x12\x03\x14\x02-\n\r\n\x06\x04\
    \0\x07\x8d\xf4\x03\x12\x03\x14\x02-\n\n\n\x03\x04\0\x07\x12\x03\x15\x02-\
    \n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x15\x02-\n8\n\x04\x04\0\x02\0\
    \x12\x03\x18\x02I\x1a+\x20the\x20port\x20on\x20which\x20the\x20packet\
    \x20will\x20be\x20sent\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x18\x02\x08\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x18\t\x14\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x18\x17\x18\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x18\x19H\n\
    \x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x18\x1aG\n;\n\x04\x04\0\
    \x02\x01\x12\x03\x1a\x02O\x1a.\x20the\x20channel\x20by\x20which\x20the\
    \x20packet\x20will\x20be\x20sent\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x1a\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1a\t\x17\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x1a\x1a\x1b\n\x0c\n\x05\x04\0\x02\x01\x08\x12\
    \x03\x1a\x1cN\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x1a\x1dM\
    \n+\n\x04\x04\0\x02\x02\x12\x03\x1c\x02D\x1a\x1e\x20the\x20tokens\x20to\
    \x20be\x20transferred\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x1c\x02\
    \x1a\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x1c\x1b\x20\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x1c#$\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x1c%C\n\
    \x0f\n\x08\x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x1c&B\n!\n\x04\x04\0\
    \x02\x03\x12\x03\x1e\x02\x14\x1a\x14\x20the\x20sender\x20address\n\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x1e\t\x0f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1e\x12\x13\
    \n=\n\x04\x04\0\x02\x04\x12\x03\x20\x02\x16\x1a0\x20the\x20recipient\x20\
    address\x20on\x20the\x20destination\x20chain\n\n\x0c\n\x05\x04\0\x02\x04\
    \x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x20\t\x11\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x20\x14\x15\nl\n\x04\x04\0\x02\
    \x05\x12\x04#\x02$W\x1a^\x20Timeout\x20height\x20relative\x20to\x20the\
    \x20current\x20block\x20height.\n\x20The\x20timeout\x20is\x20disabled\
    \x20when\x20set\x20to\x200.\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03#\x02\
    \x1b\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03#\x1c*\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03#-.\n\x0c\n\x05\x04\0\x02\x05\x08\x12\x03$\x06V\n\x0f\n\
    \x08\x04\0\x02\x05\x08\xee\xfb\x03\x12\x03$\x077\n\x0f\n\x08\x04\0\x02\
    \x05\x08\xe9\xfb\x03\x12\x03$9U\nr\n\x04\x04\0\x02\x06\x12\x03'\x02U\x1a\
    e\x20Timeout\x20timestamp\x20in\x20absolute\x20nanoseconds\x20since\x20u\
    nix\x20epoch.\n\x20The\x20timeout\x20is\x20disabled\x20when\x20set\x20to\
    \x200.\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x06\x01\x12\x03'\t\x1a\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03'\x1d\
    \x1e\n\x0c\n\x05\x04\0\x02\x06\x08\x12\x03'\x1fT\n\x0f\n\x08\x04\0\x02\
    \x06\x08\xee\xfb\x03\x12\x03'\x20S\nH\n\x02\x04\x01\x12\x03+\0\x1e\x1a=\
    \x20MsgTransferResponse\x20defines\x20the\x20Msg/Transfer\x20response\
    \x20type.\n\n\n\n\x03\x04\x01\x01\x12\x03+\x08\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(MsgTransfer::generated_message_descriptor_data());
            messages.push(MsgTransferResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
