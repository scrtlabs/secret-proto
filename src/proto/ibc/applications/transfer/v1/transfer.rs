// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/applications/transfer/v1/transfer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  DenomTrace contains the base denomination for ICS20 fungible tokens and the
///  source tracing information path.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.DenomTrace)
pub struct DenomTrace {
    // message fields
    ///  path defines the chain of port/channel identifiers used for tracing the
    ///  source of the fungible token.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.DenomTrace.path)
    pub path: ::std::string::String,
    ///  base denomination of the relayed fungible token.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.DenomTrace.base_denom)
    pub base_denom: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.DenomTrace.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DenomTrace {
    fn default() -> &'a DenomTrace {
        <DenomTrace as ::protobuf::Message>::default_instance()
    }
}

impl DenomTrace {
    pub fn new() -> DenomTrace {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &DenomTrace| { &m.path },
            |m: &mut DenomTrace| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_denom",
            |m: &DenomTrace| { &m.base_denom },
            |m: &mut DenomTrace| { &mut m.base_denom },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DenomTrace>(
            "DenomTrace",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DenomTrace {
    const NAME: &'static str = "DenomTrace";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_string()?;
                },
                18 => {
                    self.base_denom = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.base_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.base_denom.is_empty() {
            os.write_string(2, &self.base_denom)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DenomTrace {
        DenomTrace::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.base_denom.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DenomTrace {
        static instance: DenomTrace = DenomTrace {
            path: ::std::string::String::new(),
            base_denom: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DenomTrace {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DenomTrace").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DenomTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DenomTrace {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Params defines the set of IBC transfer parameters.
///  NOTE: To prevent a single token from being transferred, set the
///  TransfersEnabled parameter to true and then set the bank module's SendEnabled
///  parameter for the denomination to false.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.Params)
pub struct Params {
    // message fields
    ///  send_enabled enables or disables all cross-chain token transfers from this
    ///  chain.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.Params.send_enabled)
    pub send_enabled: bool,
    ///  receive_enabled enables or disables all cross-chain token transfers to this
    ///  chain.
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.Params.receive_enabled)
    pub receive_enabled: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.Params.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "send_enabled",
            |m: &Params| { &m.send_enabled },
            |m: &mut Params| { &mut m.send_enabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "receive_enabled",
            |m: &Params| { &m.receive_enabled },
            |m: &mut Params| { &mut m.receive_enabled },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Params>(
            "Params",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Params {
    const NAME: &'static str = "Params";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.send_enabled = is.read_bool()?;
                },
                16 => {
                    self.receive_enabled = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.send_enabled != false {
            my_size += 1 + 1;
        }
        if self.receive_enabled != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.send_enabled != false {
            os.write_bool(1, self.send_enabled)?;
        }
        if self.receive_enabled != false {
            os.write_bool(2, self.receive_enabled)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Params {
        Params::new()
    }

    fn clear(&mut self) {
        self.send_enabled = false;
        self.receive_enabled = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Params {
        static instance: Params = Params {
            send_enabled: false,
            receive_enabled: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Params {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Params").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+ibc/applications/transfer/v1/transfer.proto\x12\x1cibc.applications.t\
    ransfer.v1\x1a\x14gogoproto/gogo.proto\"?\n\nDenomTrace\x12\x12\n\x04pat\
    h\x18\x01\x20\x01(\tR\x04path\x12\x1d\n\nbase_denom\x18\x02\x20\x01(\tR\
    \tbaseDenom\"\x89\x01\n\x06Params\x12:\n\x0csend_enabled\x18\x01\x20\x01\
    (\x08R\x0bsendEnabledB\x17\xf2\xde\x1f\x13yaml:\"send_enabled\"\x12C\n\
    \x0freceive_enabled\x18\x02\x20\x01(\x08R\x0ereceiveEnabledB\x1a\xf2\xde\
    \x1f\x16yaml:\"receive_enabled\"B9Z7github.com/cosmos/ibc-go/v3/modules/\
    apps/transfer/typesJ\xb4\x08\n\x06\x12\x04\0\0\x1d\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0%\n\x08\n\x01\x08\x12\x03\
    \x04\0N\n\t\n\x02\x08\x0b\x12\x03\x04\0N\n\t\n\x02\x03\0\x12\x03\x06\0\
    \x1e\n{\n\x02\x04\0\x12\x04\n\0\x10\x01\x1ao\x20DenomTrace\x20contains\
    \x20the\x20base\x20denomination\x20for\x20ICS20\x20fungible\x20tokens\
    \x20and\x20the\n\x20source\x20tracing\x20information\x20path.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\n\x08\x12\nu\n\x04\x04\0\x02\0\x12\x03\r\x02\x12\
    \x1ah\x20path\x20defines\x20the\x20chain\x20of\x20port/channel\x20identi\
    fiers\x20used\x20for\x20tracing\x20the\n\x20source\x20of\x20the\x20fungi\
    ble\x20token.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\r\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\
    \x10\x11\n?\n\x04\x04\0\x02\x01\x12\x03\x0f\x02\x18\x1a2\x20base\x20deno\
    mination\x20of\x20the\x20relayed\x20fungible\x20token.\n\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x0f\t\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f\x16\x17\n\xfb\x01\n\
    \x02\x04\x01\x12\x04\x16\0\x1d\x01\x1a\xee\x01\x20Params\x20defines\x20t\
    he\x20set\x20of\x20IBC\x20transfer\x20parameters.\n\x20NOTE:\x20To\x20pr\
    event\x20a\x20single\x20token\x20from\x20being\x20transferred,\x20set\
    \x20the\n\x20TransfersEnabled\x20parameter\x20to\x20true\x20and\x20then\
    \x20set\x20the\x20bank\x20module's\x20SendEnabled\n\x20parameter\x20for\
    \x20the\x20denomination\x20to\x20false.\n\n\n\n\x03\x04\x01\x01\x12\x03\
    \x16\x08\x0e\na\n\x04\x04\x01\x02\0\x12\x03\x19\x02I\x1aT\x20send_enable\
    d\x20enables\x20or\x20disables\x20all\x20cross-chain\x20token\x20transfe\
    rs\x20from\x20this\n\x20chain.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    \x19\x02\x06\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x19\x07\x13\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x19\x16\x17\n\x0c\n\x05\x04\x01\x02\0\x08\
    \x12\x03\x19\x18H\n\x0f\n\x08\x04\x01\x02\0\x08\xee\xfb\x03\x12\x03\x19\
    \x19G\nb\n\x04\x04\x01\x02\x01\x12\x03\x1c\x02O\x1aU\x20receive_enabled\
    \x20enables\x20or\x20disables\x20all\x20cross-chain\x20token\x20transfer\
    s\x20to\x20this\n\x20chain.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\
    \x1c\x02\x06\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1c\x07\x16\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03\x1c\x19\x1a\n\x0c\n\x05\x04\x01\x02\x01\
    \x08\x12\x03\x1c\x1bN\n\x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\
    \x03\x1c\x1cMb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(DenomTrace::generated_message_descriptor_data());
            messages.push(Params::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
