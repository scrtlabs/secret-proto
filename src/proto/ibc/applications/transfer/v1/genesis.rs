// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/applications/transfer/v1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState defines the ibc-transfer genesis state
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v1.GenesisState)
pub struct GenesisState {
    // message fields
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.GenesisState.port_id)
    pub port_id: ::std::string::String,
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.GenesisState.denom_traces)
    pub denom_traces: ::std::vec::Vec<super::transfer::DenomTrace>,
    // @@protoc_insertion_point(field:ibc.applications.transfer.v1.GenesisState.params)
    pub params: ::protobuf::MessageField<super::transfer::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port_id",
            |m: &GenesisState| { &m.port_id },
            |m: &mut GenesisState| { &mut m.port_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "denom_traces",
            |m: &GenesisState| { &m.denom_traces },
            |m: &mut GenesisState| { &mut m.denom_traces },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::transfer::Params>(
            "params",
            |m: &GenesisState| { &m.params },
            |m: &mut GenesisState| { &mut m.params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.port_id = is.read_string()?;
                },
                18 => {
                    self.denom_traces.push(is.read_message()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.params)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.port_id);
        }
        for value in &self.denom_traces {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.port_id.is_empty() {
            os.write_string(1, &self.port_id)?;
        }
        for v in &self.denom_traces {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.port_id.clear();
        self.denom_traces.clear();
        self.params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            port_id: ::std::string::String::new(),
            denom_traces: ::std::vec::Vec::new(),
            params: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*ibc/applications/transfer/v1/genesis.proto\x12\x1cibc.applications.tr\
    ansfer.v1\x1a+ibc/applications/transfer/v1/transfer.proto\x1a\x14gogopro\
    to/gogo.proto\"\xf3\x01\n\x0cGenesisState\x12+\n\x07port_id\x18\x01\x20\
    \x01(\tR\x06portIdB\x12\xf2\xde\x1f\x0eyaml:\"port_id\"\x12r\n\x0cdenom_\
    traces\x18\x02\x20\x03(\x0b2(.ibc.applications.transfer.v1.DenomTraceR\
    \x0bdenomTracesB%\xaa\xdf\x1f\x06Traces\xc8\xde\x1f\0\xf2\xde\x1f\x13yam\
    l:\"denom_traces\"\x12B\n\x06params\x18\x03\x20\x01(\x0b2$.ibc.applicati\
    ons.transfer.v1.ParamsR\x06paramsB\x04\xc8\xde\x1f\0B9Z7github.com/cosmo\
    s/ibc-go/v3/modules/apps/transfer/typesJ\xca\x03\n\x06\x12\x04\0\0\x12\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0%\n\
    \x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\x0b\x12\x03\x04\0N\n\t\n\x02\
    \x03\0\x12\x03\x06\05\n\t\n\x02\x03\x01\x12\x03\x07\0\x1e\nA\n\x02\x04\0\
    \x12\x04\n\0\x12\x01\x1a5\x20GenesisState\x20defines\x20the\x20ibc-trans\
    fer\x20genesis\x20state\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x14\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x0b\x02S\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x0b\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\x16\x1d\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x0b%&\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0b'R\
    \n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x0b(Q\n\x0c\n\x04\x04\0\
    \x02\x01\x12\x04\x0c\x02\x10\x04\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x0c\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0c\x0b\x15\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x0c\x16\"\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x0c%&\n\r\n\x05\x04\0\x02\x01\x08\x12\x04\x0c'\x10\x03\n\x0f\n\x08\
    \x04\0\x02\x01\x08\xf5\xfb\x03\x12\x03\r\x04'\n\x0f\n\x08\x04\0\x02\x01\
    \x08\xe9\xfb\x03\x12\x03\x0e\x04$\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\
    \x03\x12\x03\x0f\x046\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x11\x023\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x11\t\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x11\x12\x13\n\
    \x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x11\x142\n\x0f\n\x08\x04\0\x02\x02\
    \x08\xe9\xfb\x03\x12\x03\x11\x151b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::transfer::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GenesisState::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
