// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ibc/applications/transfer/v2/packet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  FungibleTokenPacketData defines a struct for the packet payload
///  See FungibleTokenPacketData spec:
///  https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ibc.applications.transfer.v2.FungibleTokenPacketData)
pub struct FungibleTokenPacketData {
    // message fields
    ///  the token denomination to be transferred
    // @@protoc_insertion_point(field:ibc.applications.transfer.v2.FungibleTokenPacketData.denom)
    pub denom: ::std::string::String,
    ///  the token amount to be transferred
    // @@protoc_insertion_point(field:ibc.applications.transfer.v2.FungibleTokenPacketData.amount)
    pub amount: ::std::string::String,
    ///  the sender address
    // @@protoc_insertion_point(field:ibc.applications.transfer.v2.FungibleTokenPacketData.sender)
    pub sender: ::std::string::String,
    ///  the recipient address on the destination chain
    // @@protoc_insertion_point(field:ibc.applications.transfer.v2.FungibleTokenPacketData.receiver)
    pub receiver: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ibc.applications.transfer.v2.FungibleTokenPacketData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FungibleTokenPacketData {
    fn default() -> &'a FungibleTokenPacketData {
        <FungibleTokenPacketData as ::protobuf::Message>::default_instance()
    }
}

impl FungibleTokenPacketData {
    pub fn new() -> FungibleTokenPacketData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "denom",
            |m: &FungibleTokenPacketData| { &m.denom },
            |m: &mut FungibleTokenPacketData| { &mut m.denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &FungibleTokenPacketData| { &m.amount },
            |m: &mut FungibleTokenPacketData| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &FungibleTokenPacketData| { &m.sender },
            |m: &mut FungibleTokenPacketData| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "receiver",
            |m: &FungibleTokenPacketData| { &m.receiver },
            |m: &mut FungibleTokenPacketData| { &mut m.receiver },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FungibleTokenPacketData>(
            "FungibleTokenPacketData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FungibleTokenPacketData {
    const NAME: &'static str = "FungibleTokenPacketData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.denom = is.read_string()?;
                },
                18 => {
                    self.amount = is.read_string()?;
                },
                26 => {
                    self.sender = is.read_string()?;
                },
                34 => {
                    self.receiver = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sender);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.receiver);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        if !self.sender.is_empty() {
            os.write_string(3, &self.sender)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(4, &self.receiver)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FungibleTokenPacketData {
        FungibleTokenPacketData::new()
    }

    fn clear(&mut self) {
        self.denom.clear();
        self.amount.clear();
        self.sender.clear();
        self.receiver.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FungibleTokenPacketData {
        static instance: FungibleTokenPacketData = FungibleTokenPacketData {
            denom: ::std::string::String::new(),
            amount: ::std::string::String::new(),
            sender: ::std::string::String::new(),
            receiver: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FungibleTokenPacketData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FungibleTokenPacketData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FungibleTokenPacketData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FungibleTokenPacketData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)ibc/applications/transfer/v2/packet.proto\x12\x1cibc.applications.tra\
    nsfer.v2\"{\n\x17FungibleTokenPacketData\x12\x14\n\x05denom\x18\x01\x20\
    \x01(\tR\x05denom\x12\x16\n\x06amount\x18\x02\x20\x01(\tR\x06amount\x12\
    \x16\n\x06sender\x18\x03\x20\x01(\tR\x06sender\x12\x1a\n\x08receiver\x18\
    \x04\x20\x01(\tR\x08receiverB9Z7github.com/cosmos/ibc-go/v3/modules/apps\
    /transfer/typesJ\x8b\x05\n\x06\x12\x04\0\0\x12\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0%\n\x08\n\x01\x08\x12\x03\x04\
    \0N\n\t\n\x02\x08\x0b\x12\x03\x04\0N\n\xd5\x01\n\x02\x04\0\x12\x04\t\0\
    \x12\x01\x1a\xc8\x01\x20FungibleTokenPacketData\x20defines\x20a\x20struc\
    t\x20for\x20the\x20packet\x20payload\n\x20See\x20FungibleTokenPacketData\
    \x20spec:\n\x20https://github.com/cosmos/ibc/tree/master/spec/app/ics-02\
    0-fungible-token-transfer#data-structures\n\n\n\n\x03\x04\0\x01\x12\x03\
    \t\x08\x1f\n7\n\x04\x04\0\x02\0\x12\x03\x0b\x02\x13\x1a*\x20the\x20token\
    \x20denomination\x20to\x20be\x20transferred\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\t\x0e\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0b\x11\x12\n1\n\x04\x04\0\x02\x01\
    \x12\x03\r\x02\x14\x1a$\x20the\x20token\x20amount\x20to\x20be\x20transfe\
    rred\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\r\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r\x12\
    \x13\n!\n\x04\x04\0\x02\x02\x12\x03\x0f\x02\x14\x1a\x14\x20the\x20sender\
    \x20address\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0f\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x0f\t\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x0f\x12\x13\n=\n\x04\x04\0\x02\x03\x12\x03\x11\x02\x16\x1a0\x20\
    the\x20recipient\x20address\x20on\x20the\x20destination\x20chain\n\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x11\t\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x11\x14\x15\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FungibleTokenPacketData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
