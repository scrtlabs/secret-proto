// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `confio/proofs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
/// ExistenceProof takes a key and a value and a set of steps to perform on it.
/// The result of peforming all these steps will provide a "root hash", which can
/// be compared to the value in a header.
///
/// Since it is computationally infeasible to produce a hash collission for any of the used
/// cryptographic hash functions, if someone can provide a series of operations to transform
/// a given key and value into a root hash that matches some trusted root, these key and values
/// must be in the referenced merkle tree.
///
/// The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
/// which should be controlled by a spec. Eg. with lengthOp as NONE,
/// prefix = FOO, key = BAR, value = CHOICE
/// and
/// prefix = F, key = OOBAR, value = CHOICE
/// would produce the same value.
///
/// With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
/// in the ProofSpec is valuable to prevent this mutability. And why all trees should
/// length-prefix the data before hashing it.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.ExistenceProof)
pub struct ExistenceProof {
    // message fields
    // @@protoc_insertion_point(field:ics23.ExistenceProof.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ics23.ExistenceProof.value)
    pub value: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ics23.ExistenceProof.leaf)
    pub leaf: ::protobuf::MessageField<LeafOp>,
    // @@protoc_insertion_point(field:ics23.ExistenceProof.path)
    pub path: ::std::vec::Vec<InnerOp>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.ExistenceProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExistenceProof {
    fn default() -> &'a ExistenceProof {
        <ExistenceProof as ::protobuf::Message>::default_instance()
    }
}

impl ExistenceProof {
    pub fn new() -> ExistenceProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &ExistenceProof| { &m.key },
            |m: &mut ExistenceProof| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &ExistenceProof| { &m.value },
            |m: &mut ExistenceProof| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LeafOp>(
            "leaf",
            |m: &ExistenceProof| { &m.leaf },
            |m: &mut ExistenceProof| { &mut m.leaf },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "path",
            |m: &ExistenceProof| { &m.path },
            |m: &mut ExistenceProof| { &mut m.path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExistenceProof>(
            "ExistenceProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExistenceProof {
    const NAME: &'static str = "ExistenceProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.leaf)?;
                },
                34 => {
                    self.path.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if let Some(v) = self.leaf.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.path {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if let Some(v) = self.leaf.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.path {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExistenceProof {
        ExistenceProof::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.leaf.clear();
        self.path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExistenceProof {
        static instance: ExistenceProof = ExistenceProof {
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            leaf: ::protobuf::MessageField::none(),
            path: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExistenceProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExistenceProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExistenceProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExistenceProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///
/// NonExistenceProof takes a proof of two neighbors, one left of the desired key,
/// one right of the desired key. If both proofs are valid AND they are neighbors,
/// then there is no valid proof for the given key.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.NonExistenceProof)
pub struct NonExistenceProof {
    // message fields
    // @@protoc_insertion_point(field:ics23.NonExistenceProof.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ics23.NonExistenceProof.left)
    pub left: ::protobuf::MessageField<ExistenceProof>,
    // @@protoc_insertion_point(field:ics23.NonExistenceProof.right)
    pub right: ::protobuf::MessageField<ExistenceProof>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.NonExistenceProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NonExistenceProof {
    fn default() -> &'a NonExistenceProof {
        <NonExistenceProof as ::protobuf::Message>::default_instance()
    }
}

impl NonExistenceProof {
    pub fn new() -> NonExistenceProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &NonExistenceProof| { &m.key },
            |m: &mut NonExistenceProof| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExistenceProof>(
            "left",
            |m: &NonExistenceProof| { &m.left },
            |m: &mut NonExistenceProof| { &mut m.left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExistenceProof>(
            "right",
            |m: &NonExistenceProof| { &m.right },
            |m: &mut NonExistenceProof| { &mut m.right },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NonExistenceProof>(
            "NonExistenceProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NonExistenceProof {
    const NAME: &'static str = "NonExistenceProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.left)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.right)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if let Some(v) = self.left.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.right.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if let Some(v) = self.left.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.right.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NonExistenceProof {
        NonExistenceProof::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.left.clear();
        self.right.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NonExistenceProof {
        static instance: NonExistenceProof = NonExistenceProof {
            key: ::std::vec::Vec::new(),
            left: ::protobuf::MessageField::none(),
            right: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NonExistenceProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NonExistenceProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NonExistenceProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NonExistenceProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///
/// CommitmentProof is either an ExistenceProof or a NonExistenceProof, or a Batch of such messages
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.CommitmentProof)
pub struct CommitmentProof {
    // message oneof groups
    pub proof: ::std::option::Option<commitment_proof::Proof>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.CommitmentProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommitmentProof {
    fn default() -> &'a CommitmentProof {
        <CommitmentProof as ::protobuf::Message>::default_instance()
    }
}

impl CommitmentProof {
    pub fn new() -> CommitmentProof {
        ::std::default::Default::default()
    }

    // .ics23.ExistenceProof exist = 1;

    pub fn exist(&self) -> &ExistenceProof {
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Exist(ref v)) => v,
            _ => <ExistenceProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_exist(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_exist(&self) -> bool {
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Exist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exist(&mut self, v: ExistenceProof) {
        self.proof = ::std::option::Option::Some(commitment_proof::Proof::Exist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exist(&mut self) -> &mut ExistenceProof {
        if let ::std::option::Option::Some(commitment_proof::Proof::Exist(_)) = self.proof {
        } else {
            self.proof = ::std::option::Option::Some(commitment_proof::Proof::Exist(ExistenceProof::new()));
        }
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Exist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exist(&mut self) -> ExistenceProof {
        if self.has_exist() {
            match self.proof.take() {
                ::std::option::Option::Some(commitment_proof::Proof::Exist(v)) => v,
                _ => panic!(),
            }
        } else {
            ExistenceProof::new()
        }
    }

    // .ics23.NonExistenceProof nonexist = 2;

    pub fn nonexist(&self) -> &NonExistenceProof {
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Nonexist(ref v)) => v,
            _ => <NonExistenceProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_nonexist(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_nonexist(&self) -> bool {
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Nonexist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nonexist(&mut self, v: NonExistenceProof) {
        self.proof = ::std::option::Option::Some(commitment_proof::Proof::Nonexist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nonexist(&mut self) -> &mut NonExistenceProof {
        if let ::std::option::Option::Some(commitment_proof::Proof::Nonexist(_)) = self.proof {
        } else {
            self.proof = ::std::option::Option::Some(commitment_proof::Proof::Nonexist(NonExistenceProof::new()));
        }
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Nonexist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nonexist(&mut self) -> NonExistenceProof {
        if self.has_nonexist() {
            match self.proof.take() {
                ::std::option::Option::Some(commitment_proof::Proof::Nonexist(v)) => v,
                _ => panic!(),
            }
        } else {
            NonExistenceProof::new()
        }
    }

    // .ics23.BatchProof batch = 3;

    pub fn batch(&self) -> &BatchProof {
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Batch(ref v)) => v,
            _ => <BatchProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_batch(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_batch(&self) -> bool {
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Batch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_batch(&mut self, v: BatchProof) {
        self.proof = ::std::option::Option::Some(commitment_proof::Proof::Batch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_batch(&mut self) -> &mut BatchProof {
        if let ::std::option::Option::Some(commitment_proof::Proof::Batch(_)) = self.proof {
        } else {
            self.proof = ::std::option::Option::Some(commitment_proof::Proof::Batch(BatchProof::new()));
        }
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Batch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_batch(&mut self) -> BatchProof {
        if self.has_batch() {
            match self.proof.take() {
                ::std::option::Option::Some(commitment_proof::Proof::Batch(v)) => v,
                _ => panic!(),
            }
        } else {
            BatchProof::new()
        }
    }

    // .ics23.CompressedBatchProof compressed = 4;

    pub fn compressed(&self) -> &CompressedBatchProof {
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Compressed(ref v)) => v,
            _ => <CompressedBatchProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_compressed(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_compressed(&self) -> bool {
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Compressed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_compressed(&mut self, v: CompressedBatchProof) {
        self.proof = ::std::option::Option::Some(commitment_proof::Proof::Compressed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_compressed(&mut self) -> &mut CompressedBatchProof {
        if let ::std::option::Option::Some(commitment_proof::Proof::Compressed(_)) = self.proof {
        } else {
            self.proof = ::std::option::Option::Some(commitment_proof::Proof::Compressed(CompressedBatchProof::new()));
        }
        match self.proof {
            ::std::option::Option::Some(commitment_proof::Proof::Compressed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_compressed(&mut self) -> CompressedBatchProof {
        if self.has_compressed() {
            match self.proof.take() {
                ::std::option::Option::Some(commitment_proof::Proof::Compressed(v)) => v,
                _ => panic!(),
            }
        } else {
            CompressedBatchProof::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ExistenceProof>(
            "exist",
            CommitmentProof::has_exist,
            CommitmentProof::exist,
            CommitmentProof::mut_exist,
            CommitmentProof::set_exist,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, NonExistenceProof>(
            "nonexist",
            CommitmentProof::has_nonexist,
            CommitmentProof::nonexist,
            CommitmentProof::mut_nonexist,
            CommitmentProof::set_nonexist,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BatchProof>(
            "batch",
            CommitmentProof::has_batch,
            CommitmentProof::batch,
            CommitmentProof::mut_batch,
            CommitmentProof::set_batch,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CompressedBatchProof>(
            "compressed",
            CommitmentProof::has_compressed,
            CommitmentProof::compressed,
            CommitmentProof::mut_compressed,
            CommitmentProof::set_compressed,
        ));
        oneofs.push(commitment_proof::Proof::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommitmentProof>(
            "CommitmentProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommitmentProof {
    const NAME: &'static str = "CommitmentProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.proof = ::std::option::Option::Some(commitment_proof::Proof::Exist(is.read_message()?));
                },
                18 => {
                    self.proof = ::std::option::Option::Some(commitment_proof::Proof::Nonexist(is.read_message()?));
                },
                26 => {
                    self.proof = ::std::option::Option::Some(commitment_proof::Proof::Batch(is.read_message()?));
                },
                34 => {
                    self.proof = ::std::option::Option::Some(commitment_proof::Proof::Compressed(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.proof {
            match v {
                &commitment_proof::Proof::Exist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &commitment_proof::Proof::Nonexist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &commitment_proof::Proof::Batch(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &commitment_proof::Proof::Compressed(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.proof {
            match v {
                &commitment_proof::Proof::Exist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &commitment_proof::Proof::Nonexist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &commitment_proof::Proof::Batch(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &commitment_proof::Proof::Compressed(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommitmentProof {
        CommitmentProof::new()
    }

    fn clear(&mut self) {
        self.proof = ::std::option::Option::None;
        self.proof = ::std::option::Option::None;
        self.proof = ::std::option::Option::None;
        self.proof = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommitmentProof {
        static instance: CommitmentProof = CommitmentProof {
            proof: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CommitmentProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommitmentProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommitmentProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitmentProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CommitmentProof`
pub mod commitment_proof {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ics23.CommitmentProof.proof)
    pub enum Proof {
        // @@protoc_insertion_point(oneof_field:ics23.CommitmentProof.exist)
        Exist(super::ExistenceProof),
        // @@protoc_insertion_point(oneof_field:ics23.CommitmentProof.nonexist)
        Nonexist(super::NonExistenceProof),
        // @@protoc_insertion_point(oneof_field:ics23.CommitmentProof.batch)
        Batch(super::BatchProof),
        // @@protoc_insertion_point(oneof_field:ics23.CommitmentProof.compressed)
        Compressed(super::CompressedBatchProof),
    }

    impl ::protobuf::Oneof for Proof {
    }

    impl ::protobuf::OneofFull for Proof {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CommitmentProof as ::protobuf::MessageFull>::descriptor().oneof_by_name("proof").unwrap()).clone()
        }
    }

    impl Proof {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Proof>("proof")
        }
    }
}

/// *
/// LeafOp represents the raw key-value data we wish to prove, and
/// must be flexible to represent the internal transformation from
/// the original key-value pairs into the basis hash, for many existing
/// merkle trees.
///
/// key and value are passed in. So that the signature of this operation is:
/// leafOp(key, value) -> output
///
/// To process this, first prehash the keys and values if needed (ANY means no hash in this case):
/// hkey = prehashKey(key)
/// hvalue = prehashValue(value)
///
/// Then combine the bytes, and hash it
/// output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.LeafOp)
pub struct LeafOp {
    // message fields
    // @@protoc_insertion_point(field:ics23.LeafOp.hash)
    pub hash: ::protobuf::EnumOrUnknown<HashOp>,
    // @@protoc_insertion_point(field:ics23.LeafOp.prehash_key)
    pub prehash_key: ::protobuf::EnumOrUnknown<HashOp>,
    // @@protoc_insertion_point(field:ics23.LeafOp.prehash_value)
    pub prehash_value: ::protobuf::EnumOrUnknown<HashOp>,
    // @@protoc_insertion_point(field:ics23.LeafOp.length)
    pub length: ::protobuf::EnumOrUnknown<LengthOp>,
    ///  prefix is a fixed bytes that may optionally be included at the beginning to differentiate
    ///  a leaf node from an inner node.
    // @@protoc_insertion_point(field:ics23.LeafOp.prefix)
    pub prefix: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.LeafOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LeafOp {
    fn default() -> &'a LeafOp {
        <LeafOp as ::protobuf::Message>::default_instance()
    }
}

impl LeafOp {
    pub fn new() -> LeafOp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &LeafOp| { &m.hash },
            |m: &mut LeafOp| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prehash_key",
            |m: &LeafOp| { &m.prehash_key },
            |m: &mut LeafOp| { &mut m.prehash_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prehash_value",
            |m: &LeafOp| { &m.prehash_value },
            |m: &mut LeafOp| { &mut m.prehash_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &LeafOp| { &m.length },
            |m: &mut LeafOp| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prefix",
            |m: &LeafOp| { &m.prefix },
            |m: &mut LeafOp| { &mut m.prefix },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LeafOp>(
            "LeafOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LeafOp {
    const NAME: &'static str = "LeafOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hash = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.prehash_key = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.prehash_value = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.length = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.prefix = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.hash != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            my_size += ::protobuf::rt::int32_size(1, self.hash.value());
        }
        if self.prehash_key != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            my_size += ::protobuf::rt::int32_size(2, self.prehash_key.value());
        }
        if self.prehash_value != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            my_size += ::protobuf::rt::int32_size(3, self.prehash_value.value());
        }
        if self.length != ::protobuf::EnumOrUnknown::new(LengthOp::NO_PREFIX) {
            my_size += ::protobuf::rt::int32_size(4, self.length.value());
        }
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.prefix);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.hash != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.hash))?;
        }
        if self.prehash_key != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.prehash_key))?;
        }
        if self.prehash_value != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.prehash_value))?;
        }
        if self.length != ::protobuf::EnumOrUnknown::new(LengthOp::NO_PREFIX) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.length))?;
        }
        if !self.prefix.is_empty() {
            os.write_bytes(5, &self.prefix)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LeafOp {
        LeafOp::new()
    }

    fn clear(&mut self) {
        self.hash = ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH);
        self.prehash_key = ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH);
        self.prehash_value = ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH);
        self.length = ::protobuf::EnumOrUnknown::new(LengthOp::NO_PREFIX);
        self.prefix.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LeafOp {
        static instance: LeafOp = LeafOp {
            hash: ::protobuf::EnumOrUnknown::from_i32(0),
            prehash_key: ::protobuf::EnumOrUnknown::from_i32(0),
            prehash_value: ::protobuf::EnumOrUnknown::from_i32(0),
            length: ::protobuf::EnumOrUnknown::from_i32(0),
            prefix: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LeafOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LeafOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LeafOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeafOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
/// InnerOp represents a merkle-proof step that is not a leaf.
/// It represents concatenating two children and hashing them to provide the next result.
///
/// The result of the previous step is passed in, so the signature of this op is:
/// innerOp(child) -> output
///
/// The result of applying InnerOp should be:
/// output = op.hash(op.prefix || child || op.suffix)
///
/// where the || operator is concatenation of binary data,
/// and child is the result of hashing all the tree below this step.
///
/// Any special data, like prepending child with the length, or prepending the entire operation with
/// some value to differentiate from leaf nodes, should be included in prefix and suffix.
/// If either of prefix or suffix is empty, we just treat it as an empty string
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.InnerOp)
pub struct InnerOp {
    // message fields
    // @@protoc_insertion_point(field:ics23.InnerOp.hash)
    pub hash: ::protobuf::EnumOrUnknown<HashOp>,
    // @@protoc_insertion_point(field:ics23.InnerOp.prefix)
    pub prefix: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ics23.InnerOp.suffix)
    pub suffix: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.InnerOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InnerOp {
    fn default() -> &'a InnerOp {
        <InnerOp as ::protobuf::Message>::default_instance()
    }
}

impl InnerOp {
    pub fn new() -> InnerOp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &InnerOp| { &m.hash },
            |m: &mut InnerOp| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prefix",
            |m: &InnerOp| { &m.prefix },
            |m: &mut InnerOp| { &mut m.prefix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "suffix",
            |m: &InnerOp| { &m.suffix },
            |m: &mut InnerOp| { &mut m.suffix },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InnerOp>(
            "InnerOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InnerOp {
    const NAME: &'static str = "InnerOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hash = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.prefix = is.read_bytes()?;
                },
                26 => {
                    self.suffix = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.hash != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            my_size += ::protobuf::rt::int32_size(1, self.hash.value());
        }
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.prefix);
        }
        if !self.suffix.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.suffix);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.hash != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.hash))?;
        }
        if !self.prefix.is_empty() {
            os.write_bytes(2, &self.prefix)?;
        }
        if !self.suffix.is_empty() {
            os.write_bytes(3, &self.suffix)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InnerOp {
        InnerOp::new()
    }

    fn clear(&mut self) {
        self.hash = ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH);
        self.prefix.clear();
        self.suffix.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InnerOp {
        static instance: InnerOp = InnerOp {
            hash: ::protobuf::EnumOrUnknown::from_i32(0),
            prefix: ::std::vec::Vec::new(),
            suffix: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InnerOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InnerOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InnerOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InnerOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
/// ProofSpec defines what the expected parameters are for a given proof type.
/// This can be stored in the client and used to validate any incoming proofs.
///
/// verify(ProofSpec, Proof) -> Proof | Error
///
/// As demonstrated in tests, if we don't fix the algorithm used to calculate the
/// LeafHash for a given tree, there are many possible key-value pairs that can
/// generate a given hash (by interpretting the preimage differently).
/// We need this for proper security, requires client knows a priori what
/// tree format server uses. But not in code, rather a configuration object.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.ProofSpec)
pub struct ProofSpec {
    // message fields
    ///  any field in the ExistenceProof must be the same as in this spec.
    ///  except Prefix, which is just the first bytes of prefix (spec can be longer) 
    // @@protoc_insertion_point(field:ics23.ProofSpec.leaf_spec)
    pub leaf_spec: ::protobuf::MessageField<LeafOp>,
    // @@protoc_insertion_point(field:ics23.ProofSpec.inner_spec)
    pub inner_spec: ::protobuf::MessageField<InnerSpec>,
    ///  max_depth (if > 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
    // @@protoc_insertion_point(field:ics23.ProofSpec.max_depth)
    pub max_depth: i32,
    ///  min_depth (if > 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
    // @@protoc_insertion_point(field:ics23.ProofSpec.min_depth)
    pub min_depth: i32,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.ProofSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProofSpec {
    fn default() -> &'a ProofSpec {
        <ProofSpec as ::protobuf::Message>::default_instance()
    }
}

impl ProofSpec {
    pub fn new() -> ProofSpec {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LeafOp>(
            "leaf_spec",
            |m: &ProofSpec| { &m.leaf_spec },
            |m: &mut ProofSpec| { &mut m.leaf_spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, InnerSpec>(
            "inner_spec",
            |m: &ProofSpec| { &m.inner_spec },
            |m: &mut ProofSpec| { &mut m.inner_spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_depth",
            |m: &ProofSpec| { &m.max_depth },
            |m: &mut ProofSpec| { &mut m.max_depth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_depth",
            |m: &ProofSpec| { &m.min_depth },
            |m: &mut ProofSpec| { &mut m.min_depth },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProofSpec>(
            "ProofSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProofSpec {
    const NAME: &'static str = "ProofSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.leaf_spec)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.inner_spec)?;
                },
                24 => {
                    self.max_depth = is.read_int32()?;
                },
                32 => {
                    self.min_depth = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.leaf_spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.inner_spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.max_depth != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.max_depth);
        }
        if self.min_depth != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.min_depth);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.leaf_spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.inner_spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.max_depth != 0 {
            os.write_int32(3, self.max_depth)?;
        }
        if self.min_depth != 0 {
            os.write_int32(4, self.min_depth)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProofSpec {
        ProofSpec::new()
    }

    fn clear(&mut self) {
        self.leaf_spec.clear();
        self.inner_spec.clear();
        self.max_depth = 0;
        self.min_depth = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProofSpec {
        static instance: ProofSpec = ProofSpec {
            leaf_spec: ::protobuf::MessageField::none(),
            inner_spec: ::protobuf::MessageField::none(),
            max_depth: 0,
            min_depth: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProofSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProofSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProofSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///
/// InnerSpec contains all store-specific structure info to determine if two proofs from a
/// given store are neighbors.
///
/// This enables:
///
/// isLeftMost(spec: InnerSpec, op: InnerOp)
/// isRightMost(spec: InnerSpec, op: InnerOp)
/// isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.InnerSpec)
pub struct InnerSpec {
    // message fields
    ///  Child order is the ordering of the children node, must count from 0
    ///  iavl tree is [0, 1] (left then right)
    ///  merk is [0, 2, 1] (left, right, here)
    // @@protoc_insertion_point(field:ics23.InnerSpec.child_order)
    pub child_order: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:ics23.InnerSpec.child_size)
    pub child_size: i32,
    // @@protoc_insertion_point(field:ics23.InnerSpec.min_prefix_length)
    pub min_prefix_length: i32,
    // @@protoc_insertion_point(field:ics23.InnerSpec.max_prefix_length)
    pub max_prefix_length: i32,
    ///  empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
    // @@protoc_insertion_point(field:ics23.InnerSpec.empty_child)
    pub empty_child: ::std::vec::Vec<u8>,
    ///  hash is the algorithm that must be used for each InnerOp
    // @@protoc_insertion_point(field:ics23.InnerSpec.hash)
    pub hash: ::protobuf::EnumOrUnknown<HashOp>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.InnerSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InnerSpec {
    fn default() -> &'a InnerSpec {
        <InnerSpec as ::protobuf::Message>::default_instance()
    }
}

impl InnerSpec {
    pub fn new() -> InnerSpec {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "child_order",
            |m: &InnerSpec| { &m.child_order },
            |m: &mut InnerSpec| { &mut m.child_order },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "child_size",
            |m: &InnerSpec| { &m.child_size },
            |m: &mut InnerSpec| { &mut m.child_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_prefix_length",
            |m: &InnerSpec| { &m.min_prefix_length },
            |m: &mut InnerSpec| { &mut m.min_prefix_length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_prefix_length",
            |m: &InnerSpec| { &m.max_prefix_length },
            |m: &mut InnerSpec| { &mut m.max_prefix_length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "empty_child",
            |m: &InnerSpec| { &m.empty_child },
            |m: &mut InnerSpec| { &mut m.empty_child },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &InnerSpec| { &m.hash },
            |m: &mut InnerSpec| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InnerSpec>(
            "InnerSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InnerSpec {
    const NAME: &'static str = "InnerSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.child_order)?;
                },
                8 => {
                    self.child_order.push(is.read_int32()?);
                },
                16 => {
                    self.child_size = is.read_int32()?;
                },
                24 => {
                    self.min_prefix_length = is.read_int32()?;
                },
                32 => {
                    self.max_prefix_length = is.read_int32()?;
                },
                42 => {
                    self.empty_child = is.read_bytes()?;
                },
                48 => {
                    self.hash = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.child_order {
            my_size += ::protobuf::rt::int32_size(1, *value);
        };
        if self.child_size != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.child_size);
        }
        if self.min_prefix_length != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.min_prefix_length);
        }
        if self.max_prefix_length != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.max_prefix_length);
        }
        if !self.empty_child.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.empty_child);
        }
        if self.hash != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            my_size += ::protobuf::rt::int32_size(6, self.hash.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.child_order {
            os.write_int32(1, *v)?;
        };
        if self.child_size != 0 {
            os.write_int32(2, self.child_size)?;
        }
        if self.min_prefix_length != 0 {
            os.write_int32(3, self.min_prefix_length)?;
        }
        if self.max_prefix_length != 0 {
            os.write_int32(4, self.max_prefix_length)?;
        }
        if !self.empty_child.is_empty() {
            os.write_bytes(5, &self.empty_child)?;
        }
        if self.hash != ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.hash))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InnerSpec {
        InnerSpec::new()
    }

    fn clear(&mut self) {
        self.child_order.clear();
        self.child_size = 0;
        self.min_prefix_length = 0;
        self.max_prefix_length = 0;
        self.empty_child.clear();
        self.hash = ::protobuf::EnumOrUnknown::new(HashOp::NO_HASH);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InnerSpec {
        static instance: InnerSpec = InnerSpec {
            child_order: ::std::vec::Vec::new(),
            child_size: 0,
            min_prefix_length: 0,
            max_prefix_length: 0,
            empty_child: ::std::vec::Vec::new(),
            hash: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InnerSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InnerSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InnerSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InnerSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///
/// BatchProof is a group of multiple proof types than can be compressed
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.BatchProof)
pub struct BatchProof {
    // message fields
    // @@protoc_insertion_point(field:ics23.BatchProof.entries)
    pub entries: ::std::vec::Vec<BatchEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.BatchProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchProof {
    fn default() -> &'a BatchProof {
        <BatchProof as ::protobuf::Message>::default_instance()
    }
}

impl BatchProof {
    pub fn new() -> BatchProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &BatchProof| { &m.entries },
            |m: &mut BatchProof| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchProof>(
            "BatchProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchProof {
    const NAME: &'static str = "BatchProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchProof {
        BatchProof::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchProof {
        static instance: BatchProof = BatchProof {
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Use BatchEntry not CommitmentProof, to avoid recursion
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.BatchEntry)
pub struct BatchEntry {
    // message oneof groups
    pub proof: ::std::option::Option<batch_entry::Proof>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.BatchEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchEntry {
    fn default() -> &'a BatchEntry {
        <BatchEntry as ::protobuf::Message>::default_instance()
    }
}

impl BatchEntry {
    pub fn new() -> BatchEntry {
        ::std::default::Default::default()
    }

    // .ics23.ExistenceProof exist = 1;

    pub fn exist(&self) -> &ExistenceProof {
        match self.proof {
            ::std::option::Option::Some(batch_entry::Proof::Exist(ref v)) => v,
            _ => <ExistenceProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_exist(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_exist(&self) -> bool {
        match self.proof {
            ::std::option::Option::Some(batch_entry::Proof::Exist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exist(&mut self, v: ExistenceProof) {
        self.proof = ::std::option::Option::Some(batch_entry::Proof::Exist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exist(&mut self) -> &mut ExistenceProof {
        if let ::std::option::Option::Some(batch_entry::Proof::Exist(_)) = self.proof {
        } else {
            self.proof = ::std::option::Option::Some(batch_entry::Proof::Exist(ExistenceProof::new()));
        }
        match self.proof {
            ::std::option::Option::Some(batch_entry::Proof::Exist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exist(&mut self) -> ExistenceProof {
        if self.has_exist() {
            match self.proof.take() {
                ::std::option::Option::Some(batch_entry::Proof::Exist(v)) => v,
                _ => panic!(),
            }
        } else {
            ExistenceProof::new()
        }
    }

    // .ics23.NonExistenceProof nonexist = 2;

    pub fn nonexist(&self) -> &NonExistenceProof {
        match self.proof {
            ::std::option::Option::Some(batch_entry::Proof::Nonexist(ref v)) => v,
            _ => <NonExistenceProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_nonexist(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_nonexist(&self) -> bool {
        match self.proof {
            ::std::option::Option::Some(batch_entry::Proof::Nonexist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nonexist(&mut self, v: NonExistenceProof) {
        self.proof = ::std::option::Option::Some(batch_entry::Proof::Nonexist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nonexist(&mut self) -> &mut NonExistenceProof {
        if let ::std::option::Option::Some(batch_entry::Proof::Nonexist(_)) = self.proof {
        } else {
            self.proof = ::std::option::Option::Some(batch_entry::Proof::Nonexist(NonExistenceProof::new()));
        }
        match self.proof {
            ::std::option::Option::Some(batch_entry::Proof::Nonexist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nonexist(&mut self) -> NonExistenceProof {
        if self.has_nonexist() {
            match self.proof.take() {
                ::std::option::Option::Some(batch_entry::Proof::Nonexist(v)) => v,
                _ => panic!(),
            }
        } else {
            NonExistenceProof::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ExistenceProof>(
            "exist",
            BatchEntry::has_exist,
            BatchEntry::exist,
            BatchEntry::mut_exist,
            BatchEntry::set_exist,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, NonExistenceProof>(
            "nonexist",
            BatchEntry::has_nonexist,
            BatchEntry::nonexist,
            BatchEntry::mut_nonexist,
            BatchEntry::set_nonexist,
        ));
        oneofs.push(batch_entry::Proof::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchEntry>(
            "BatchEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchEntry {
    const NAME: &'static str = "BatchEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.proof = ::std::option::Option::Some(batch_entry::Proof::Exist(is.read_message()?));
                },
                18 => {
                    self.proof = ::std::option::Option::Some(batch_entry::Proof::Nonexist(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.proof {
            match v {
                &batch_entry::Proof::Exist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &batch_entry::Proof::Nonexist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.proof {
            match v {
                &batch_entry::Proof::Exist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &batch_entry::Proof::Nonexist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchEntry {
        BatchEntry::new()
    }

    fn clear(&mut self) {
        self.proof = ::std::option::Option::None;
        self.proof = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchEntry {
        static instance: BatchEntry = BatchEntry {
            proof: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BatchEntry`
pub mod batch_entry {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ics23.BatchEntry.proof)
    pub enum Proof {
        // @@protoc_insertion_point(oneof_field:ics23.BatchEntry.exist)
        Exist(super::ExistenceProof),
        // @@protoc_insertion_point(oneof_field:ics23.BatchEntry.nonexist)
        Nonexist(super::NonExistenceProof),
    }

    impl ::protobuf::Oneof for Proof {
    }

    impl ::protobuf::OneofFull for Proof {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BatchEntry as ::protobuf::MessageFull>::descriptor().oneof_by_name("proof").unwrap()).clone()
        }
    }

    impl Proof {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Proof>("proof")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.CompressedBatchProof)
pub struct CompressedBatchProof {
    // message fields
    // @@protoc_insertion_point(field:ics23.CompressedBatchProof.entries)
    pub entries: ::std::vec::Vec<CompressedBatchEntry>,
    // @@protoc_insertion_point(field:ics23.CompressedBatchProof.lookup_inners)
    pub lookup_inners: ::std::vec::Vec<InnerOp>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.CompressedBatchProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompressedBatchProof {
    fn default() -> &'a CompressedBatchProof {
        <CompressedBatchProof as ::protobuf::Message>::default_instance()
    }
}

impl CompressedBatchProof {
    pub fn new() -> CompressedBatchProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &CompressedBatchProof| { &m.entries },
            |m: &mut CompressedBatchProof| { &mut m.entries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lookup_inners",
            |m: &CompressedBatchProof| { &m.lookup_inners },
            |m: &mut CompressedBatchProof| { &mut m.lookup_inners },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompressedBatchProof>(
            "CompressedBatchProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompressedBatchProof {
    const NAME: &'static str = "CompressedBatchProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entries.push(is.read_message()?);
                },
                18 => {
                    self.lookup_inners.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.lookup_inners {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.lookup_inners {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompressedBatchProof {
        CompressedBatchProof::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.lookup_inners.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompressedBatchProof {
        static instance: CompressedBatchProof = CompressedBatchProof {
            entries: ::std::vec::Vec::new(),
            lookup_inners: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompressedBatchProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompressedBatchProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompressedBatchProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompressedBatchProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Use BatchEntry not CommitmentProof, to avoid recursion
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.CompressedBatchEntry)
pub struct CompressedBatchEntry {
    // message oneof groups
    pub proof: ::std::option::Option<compressed_batch_entry::Proof>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.CompressedBatchEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompressedBatchEntry {
    fn default() -> &'a CompressedBatchEntry {
        <CompressedBatchEntry as ::protobuf::Message>::default_instance()
    }
}

impl CompressedBatchEntry {
    pub fn new() -> CompressedBatchEntry {
        ::std::default::Default::default()
    }

    // .ics23.CompressedExistenceProof exist = 1;

    pub fn exist(&self) -> &CompressedExistenceProof {
        match self.proof {
            ::std::option::Option::Some(compressed_batch_entry::Proof::Exist(ref v)) => v,
            _ => <CompressedExistenceProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_exist(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_exist(&self) -> bool {
        match self.proof {
            ::std::option::Option::Some(compressed_batch_entry::Proof::Exist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exist(&mut self, v: CompressedExistenceProof) {
        self.proof = ::std::option::Option::Some(compressed_batch_entry::Proof::Exist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exist(&mut self) -> &mut CompressedExistenceProof {
        if let ::std::option::Option::Some(compressed_batch_entry::Proof::Exist(_)) = self.proof {
        } else {
            self.proof = ::std::option::Option::Some(compressed_batch_entry::Proof::Exist(CompressedExistenceProof::new()));
        }
        match self.proof {
            ::std::option::Option::Some(compressed_batch_entry::Proof::Exist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exist(&mut self) -> CompressedExistenceProof {
        if self.has_exist() {
            match self.proof.take() {
                ::std::option::Option::Some(compressed_batch_entry::Proof::Exist(v)) => v,
                _ => panic!(),
            }
        } else {
            CompressedExistenceProof::new()
        }
    }

    // .ics23.CompressedNonExistenceProof nonexist = 2;

    pub fn nonexist(&self) -> &CompressedNonExistenceProof {
        match self.proof {
            ::std::option::Option::Some(compressed_batch_entry::Proof::Nonexist(ref v)) => v,
            _ => <CompressedNonExistenceProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_nonexist(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_nonexist(&self) -> bool {
        match self.proof {
            ::std::option::Option::Some(compressed_batch_entry::Proof::Nonexist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nonexist(&mut self, v: CompressedNonExistenceProof) {
        self.proof = ::std::option::Option::Some(compressed_batch_entry::Proof::Nonexist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nonexist(&mut self) -> &mut CompressedNonExistenceProof {
        if let ::std::option::Option::Some(compressed_batch_entry::Proof::Nonexist(_)) = self.proof {
        } else {
            self.proof = ::std::option::Option::Some(compressed_batch_entry::Proof::Nonexist(CompressedNonExistenceProof::new()));
        }
        match self.proof {
            ::std::option::Option::Some(compressed_batch_entry::Proof::Nonexist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nonexist(&mut self) -> CompressedNonExistenceProof {
        if self.has_nonexist() {
            match self.proof.take() {
                ::std::option::Option::Some(compressed_batch_entry::Proof::Nonexist(v)) => v,
                _ => panic!(),
            }
        } else {
            CompressedNonExistenceProof::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CompressedExistenceProof>(
            "exist",
            CompressedBatchEntry::has_exist,
            CompressedBatchEntry::exist,
            CompressedBatchEntry::mut_exist,
            CompressedBatchEntry::set_exist,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CompressedNonExistenceProof>(
            "nonexist",
            CompressedBatchEntry::has_nonexist,
            CompressedBatchEntry::nonexist,
            CompressedBatchEntry::mut_nonexist,
            CompressedBatchEntry::set_nonexist,
        ));
        oneofs.push(compressed_batch_entry::Proof::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompressedBatchEntry>(
            "CompressedBatchEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompressedBatchEntry {
    const NAME: &'static str = "CompressedBatchEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.proof = ::std::option::Option::Some(compressed_batch_entry::Proof::Exist(is.read_message()?));
                },
                18 => {
                    self.proof = ::std::option::Option::Some(compressed_batch_entry::Proof::Nonexist(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.proof {
            match v {
                &compressed_batch_entry::Proof::Exist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &compressed_batch_entry::Proof::Nonexist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.proof {
            match v {
                &compressed_batch_entry::Proof::Exist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &compressed_batch_entry::Proof::Nonexist(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompressedBatchEntry {
        CompressedBatchEntry::new()
    }

    fn clear(&mut self) {
        self.proof = ::std::option::Option::None;
        self.proof = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompressedBatchEntry {
        static instance: CompressedBatchEntry = CompressedBatchEntry {
            proof: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompressedBatchEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompressedBatchEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompressedBatchEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompressedBatchEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CompressedBatchEntry`
pub mod compressed_batch_entry {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ics23.CompressedBatchEntry.proof)
    pub enum Proof {
        // @@protoc_insertion_point(oneof_field:ics23.CompressedBatchEntry.exist)
        Exist(super::CompressedExistenceProof),
        // @@protoc_insertion_point(oneof_field:ics23.CompressedBatchEntry.nonexist)
        Nonexist(super::CompressedNonExistenceProof),
    }

    impl ::protobuf::Oneof for Proof {
    }

    impl ::protobuf::OneofFull for Proof {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CompressedBatchEntry as ::protobuf::MessageFull>::descriptor().oneof_by_name("proof").unwrap()).clone()
        }
    }

    impl Proof {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Proof>("proof")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.CompressedExistenceProof)
pub struct CompressedExistenceProof {
    // message fields
    // @@protoc_insertion_point(field:ics23.CompressedExistenceProof.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ics23.CompressedExistenceProof.value)
    pub value: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ics23.CompressedExistenceProof.leaf)
    pub leaf: ::protobuf::MessageField<LeafOp>,
    ///  these are indexes into the lookup_inners table in CompressedBatchProof
    // @@protoc_insertion_point(field:ics23.CompressedExistenceProof.path)
    pub path: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.CompressedExistenceProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompressedExistenceProof {
    fn default() -> &'a CompressedExistenceProof {
        <CompressedExistenceProof as ::protobuf::Message>::default_instance()
    }
}

impl CompressedExistenceProof {
    pub fn new() -> CompressedExistenceProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &CompressedExistenceProof| { &m.key },
            |m: &mut CompressedExistenceProof| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &CompressedExistenceProof| { &m.value },
            |m: &mut CompressedExistenceProof| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LeafOp>(
            "leaf",
            |m: &CompressedExistenceProof| { &m.leaf },
            |m: &mut CompressedExistenceProof| { &mut m.leaf },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "path",
            |m: &CompressedExistenceProof| { &m.path },
            |m: &mut CompressedExistenceProof| { &mut m.path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompressedExistenceProof>(
            "CompressedExistenceProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompressedExistenceProof {
    const NAME: &'static str = "CompressedExistenceProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.leaf)?;
                },
                34 => {
                    is.read_repeated_packed_int32_into(&mut self.path)?;
                },
                32 => {
                    self.path.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if let Some(v) = self.leaf.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.path {
            my_size += ::protobuf::rt::int32_size(4, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if let Some(v) = self.leaf.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.path {
            os.write_int32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompressedExistenceProof {
        CompressedExistenceProof::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.leaf.clear();
        self.path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompressedExistenceProof {
        static instance: CompressedExistenceProof = CompressedExistenceProof {
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            leaf: ::protobuf::MessageField::none(),
            path: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompressedExistenceProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompressedExistenceProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompressedExistenceProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompressedExistenceProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ics23.CompressedNonExistenceProof)
pub struct CompressedNonExistenceProof {
    // message fields
    // @@protoc_insertion_point(field:ics23.CompressedNonExistenceProof.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ics23.CompressedNonExistenceProof.left)
    pub left: ::protobuf::MessageField<CompressedExistenceProof>,
    // @@protoc_insertion_point(field:ics23.CompressedNonExistenceProof.right)
    pub right: ::protobuf::MessageField<CompressedExistenceProof>,
    // special fields
    // @@protoc_insertion_point(special_field:ics23.CompressedNonExistenceProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompressedNonExistenceProof {
    fn default() -> &'a CompressedNonExistenceProof {
        <CompressedNonExistenceProof as ::protobuf::Message>::default_instance()
    }
}

impl CompressedNonExistenceProof {
    pub fn new() -> CompressedNonExistenceProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &CompressedNonExistenceProof| { &m.key },
            |m: &mut CompressedNonExistenceProof| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CompressedExistenceProof>(
            "left",
            |m: &CompressedNonExistenceProof| { &m.left },
            |m: &mut CompressedNonExistenceProof| { &mut m.left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CompressedExistenceProof>(
            "right",
            |m: &CompressedNonExistenceProof| { &m.right },
            |m: &mut CompressedNonExistenceProof| { &mut m.right },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompressedNonExistenceProof>(
            "CompressedNonExistenceProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompressedNonExistenceProof {
    const NAME: &'static str = "CompressedNonExistenceProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.left)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.right)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if let Some(v) = self.left.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.right.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if let Some(v) = self.left.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.right.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompressedNonExistenceProof {
        CompressedNonExistenceProof::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.left.clear();
        self.right.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompressedNonExistenceProof {
        static instance: CompressedNonExistenceProof = CompressedNonExistenceProof {
            key: ::std::vec::Vec::new(),
            left: ::protobuf::MessageField::none(),
            right: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompressedNonExistenceProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompressedNonExistenceProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompressedNonExistenceProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompressedNonExistenceProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ics23.HashOp)
pub enum HashOp {
    // @@protoc_insertion_point(enum_value:ics23.HashOp.NO_HASH)
    NO_HASH = 0,
    // @@protoc_insertion_point(enum_value:ics23.HashOp.SHA256)
    SHA256 = 1,
    // @@protoc_insertion_point(enum_value:ics23.HashOp.SHA512)
    SHA512 = 2,
    // @@protoc_insertion_point(enum_value:ics23.HashOp.KECCAK)
    KECCAK = 3,
    // @@protoc_insertion_point(enum_value:ics23.HashOp.RIPEMD160)
    RIPEMD160 = 4,
    // @@protoc_insertion_point(enum_value:ics23.HashOp.BITCOIN)
    BITCOIN = 5,
}

impl ::protobuf::Enum for HashOp {
    const NAME: &'static str = "HashOp";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HashOp> {
        match value {
            0 => ::std::option::Option::Some(HashOp::NO_HASH),
            1 => ::std::option::Option::Some(HashOp::SHA256),
            2 => ::std::option::Option::Some(HashOp::SHA512),
            3 => ::std::option::Option::Some(HashOp::KECCAK),
            4 => ::std::option::Option::Some(HashOp::RIPEMD160),
            5 => ::std::option::Option::Some(HashOp::BITCOIN),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [HashOp] = &[
        HashOp::NO_HASH,
        HashOp::SHA256,
        HashOp::SHA512,
        HashOp::KECCAK,
        HashOp::RIPEMD160,
        HashOp::BITCOIN,
    ];
}

impl ::protobuf::EnumFull for HashOp {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("HashOp").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for HashOp {
    fn default() -> Self {
        HashOp::NO_HASH
    }
}

impl HashOp {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<HashOp>("HashOp")
    }
}

/// *
/// LengthOp defines how to process the key and value of the LeafOp
/// to include length information. After encoding the length with the given
/// algorithm, the length will be prepended to the key and value bytes.
/// (Each one with it's own encoded length)
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ics23.LengthOp)
pub enum LengthOp {
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.NO_PREFIX)
    NO_PREFIX = 0,
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.VAR_PROTO)
    VAR_PROTO = 1,
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.VAR_RLP)
    VAR_RLP = 2,
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.FIXED32_BIG)
    FIXED32_BIG = 3,
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.FIXED32_LITTLE)
    FIXED32_LITTLE = 4,
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.FIXED64_BIG)
    FIXED64_BIG = 5,
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.FIXED64_LITTLE)
    FIXED64_LITTLE = 6,
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.REQUIRE_32_BYTES)
    REQUIRE_32_BYTES = 7,
    // @@protoc_insertion_point(enum_value:ics23.LengthOp.REQUIRE_64_BYTES)
    REQUIRE_64_BYTES = 8,
}

impl ::protobuf::Enum for LengthOp {
    const NAME: &'static str = "LengthOp";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LengthOp> {
        match value {
            0 => ::std::option::Option::Some(LengthOp::NO_PREFIX),
            1 => ::std::option::Option::Some(LengthOp::VAR_PROTO),
            2 => ::std::option::Option::Some(LengthOp::VAR_RLP),
            3 => ::std::option::Option::Some(LengthOp::FIXED32_BIG),
            4 => ::std::option::Option::Some(LengthOp::FIXED32_LITTLE),
            5 => ::std::option::Option::Some(LengthOp::FIXED64_BIG),
            6 => ::std::option::Option::Some(LengthOp::FIXED64_LITTLE),
            7 => ::std::option::Option::Some(LengthOp::REQUIRE_32_BYTES),
            8 => ::std::option::Option::Some(LengthOp::REQUIRE_64_BYTES),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [LengthOp] = &[
        LengthOp::NO_PREFIX,
        LengthOp::VAR_PROTO,
        LengthOp::VAR_RLP,
        LengthOp::FIXED32_BIG,
        LengthOp::FIXED32_LITTLE,
        LengthOp::FIXED64_BIG,
        LengthOp::FIXED64_LITTLE,
        LengthOp::REQUIRE_32_BYTES,
        LengthOp::REQUIRE_64_BYTES,
    ];
}

impl ::protobuf::EnumFull for LengthOp {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("LengthOp").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for LengthOp {
    fn default() -> Self {
        LengthOp::NO_PREFIX
    }
}

impl LengthOp {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LengthOp>("LengthOp")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13confio/proofs.proto\x12\x05ics23\"\x7f\n\x0eExistenceProof\x12\x10\
    \n\x03key\x18\x01\x20\x01(\x0cR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\x0cR\x05value\x12!\n\x04leaf\x18\x03\x20\x01(\x0b2\r.ics23.LeafOpR\
    \x04leaf\x12\"\n\x04path\x18\x04\x20\x03(\x0b2\x0e.ics23.InnerOpR\x04pat\
    h\"}\n\x11NonExistenceProof\x12\x10\n\x03key\x18\x01\x20\x01(\x0cR\x03ke\
    y\x12)\n\x04left\x18\x02\x20\x01(\x0b2\x15.ics23.ExistenceProofR\x04left\
    \x12+\n\x05right\x18\x03\x20\x01(\x0b2\x15.ics23.ExistenceProofR\x05righ\
    t\"\xeb\x01\n\x0fCommitmentProof\x12-\n\x05exist\x18\x01\x20\x01(\x0b2\
    \x15.ics23.ExistenceProofH\0R\x05exist\x126\n\x08nonexist\x18\x02\x20\
    \x01(\x0b2\x18.ics23.NonExistenceProofH\0R\x08nonexist\x12)\n\x05batch\
    \x18\x03\x20\x01(\x0b2\x11.ics23.BatchProofH\0R\x05batch\x12=\n\ncompres\
    sed\x18\x04\x20\x01(\x0b2\x1b.ics23.CompressedBatchProofH\0R\ncompressed\
    B\x07\n\x05proof\"\xd0\x01\n\x06LeafOp\x12!\n\x04hash\x18\x01\x20\x01(\
    \x0e2\r.ics23.HashOpR\x04hash\x12.\n\x0bprehash_key\x18\x02\x20\x01(\x0e\
    2\r.ics23.HashOpR\nprehashKey\x122\n\rprehash_value\x18\x03\x20\x01(\x0e\
    2\r.ics23.HashOpR\x0cprehashValue\x12'\n\x06length\x18\x04\x20\x01(\x0e2\
    \x0f.ics23.LengthOpR\x06length\x12\x16\n\x06prefix\x18\x05\x20\x01(\x0cR\
    \x06prefix\"\\\n\x07InnerOp\x12!\n\x04hash\x18\x01\x20\x01(\x0e2\r.ics23\
    .HashOpR\x04hash\x12\x16\n\x06prefix\x18\x02\x20\x01(\x0cR\x06prefix\x12\
    \x16\n\x06suffix\x18\x03\x20\x01(\x0cR\x06suffix\"\xa2\x01\n\tProofSpec\
    \x12*\n\tleaf_spec\x18\x01\x20\x01(\x0b2\r.ics23.LeafOpR\x08leafSpec\x12\
    /\n\ninner_spec\x18\x02\x20\x01(\x0b2\x10.ics23.InnerSpecR\tinnerSpec\
    \x12\x1b\n\tmax_depth\x18\x03\x20\x01(\x05R\x08maxDepth\x12\x1b\n\tmin_d\
    epth\x18\x04\x20\x01(\x05R\x08minDepth\"\xe7\x01\n\tInnerSpec\x12\x1f\n\
    \x0bchild_order\x18\x01\x20\x03(\x05R\nchildOrder\x12\x1d\n\nchild_size\
    \x18\x02\x20\x01(\x05R\tchildSize\x12*\n\x11min_prefix_length\x18\x03\
    \x20\x01(\x05R\x0fminPrefixLength\x12*\n\x11max_prefix_length\x18\x04\
    \x20\x01(\x05R\x0fmaxPrefixLength\x12\x1f\n\x0bempty_child\x18\x05\x20\
    \x01(\x0cR\nemptyChild\x12!\n\x04hash\x18\x06\x20\x01(\x0e2\r.ics23.Hash\
    OpR\x04hash\"9\n\nBatchProof\x12+\n\x07entries\x18\x01\x20\x03(\x0b2\x11\
    .ics23.BatchEntryR\x07entries\"|\n\nBatchEntry\x12-\n\x05exist\x18\x01\
    \x20\x01(\x0b2\x15.ics23.ExistenceProofH\0R\x05exist\x126\n\x08nonexist\
    \x18\x02\x20\x01(\x0b2\x18.ics23.NonExistenceProofH\0R\x08nonexistB\x07\
    \n\x05proof\"\x82\x01\n\x14CompressedBatchProof\x125\n\x07entries\x18\
    \x01\x20\x03(\x0b2\x1b.ics23.CompressedBatchEntryR\x07entries\x123\n\rlo\
    okup_inners\x18\x02\x20\x03(\x0b2\x0e.ics23.InnerOpR\x0clookupInners\"\
    \x9a\x01\n\x14CompressedBatchEntry\x127\n\x05exist\x18\x01\x20\x01(\x0b2\
    \x1f.ics23.CompressedExistenceProofH\0R\x05exist\x12@\n\x08nonexist\x18\
    \x02\x20\x01(\x0b2\".ics23.CompressedNonExistenceProofH\0R\x08nonexistB\
    \x07\n\x05proof\"y\n\x18CompressedExistenceProof\x12\x10\n\x03key\x18\
    \x01\x20\x01(\x0cR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05va\
    lue\x12!\n\x04leaf\x18\x03\x20\x01(\x0b2\r.ics23.LeafOpR\x04leaf\x12\x12\
    \n\x04path\x18\x04\x20\x03(\x05R\x04path\"\x9b\x01\n\x1bCompressedNonExi\
    stenceProof\x12\x10\n\x03key\x18\x01\x20\x01(\x0cR\x03key\x123\n\x04left\
    \x18\x02\x20\x01(\x0b2\x1f.ics23.CompressedExistenceProofR\x04left\x125\
    \n\x05right\x18\x03\x20\x01(\x0b2\x1f.ics23.CompressedExistenceProofR\
    \x05right*U\n\x06HashOp\x12\x0b\n\x07NO_HASH\x10\0\x12\n\n\x06SHA256\x10\
    \x01\x12\n\n\x06SHA512\x10\x02\x12\n\n\x06KECCAK\x10\x03\x12\r\n\tRIPEMD\
    160\x10\x04\x12\x0b\n\x07BITCOIN\x10\x05*\xab\x01\n\x08LengthOp\x12\r\n\
    \tNO_PREFIX\x10\0\x12\r\n\tVAR_PROTO\x10\x01\x12\x0b\n\x07VAR_RLP\x10\
    \x02\x12\x0f\n\x0bFIXED32_BIG\x10\x03\x12\x12\n\x0eFIXED32_LITTLE\x10\
    \x04\x12\x0f\n\x0bFIXED64_BIG\x10\x05\x12\x12\n\x0eFIXED64_LITTLE\x10\
    \x06\x12\x14\n\x10REQUIRE_32_BYTES\x10\x07\x12\x14\n\x10REQUIRE_64_BYTES\
    \x10\x08B\x1cZ\x1agithub.com/confio/ics23/goJ\xa6I\n\x07\x12\x05\0\0\xe9\
    \x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\
    \x0e\n\x08\n\x01\x08\x12\x03\x03\01\n\t\n\x02\x08\x0b\x12\x03\x03\01\n\n\
    \n\x02\x05\0\x12\x04\x05\0\r\x01\n\n\n\x03\x05\0\x01\x12\x03\x05\x05\x0b\
    \nf\n\x04\x05\0\x02\0\x12\x03\x07\x04\x10\x1aY\x20NO_HASH\x20is\x20the\
    \x20default\x20if\x20no\x20data\x20passed.\x20Note\x20this\x20is\x20an\
    \x20illegal\x20argument\x20some\x20places.\n\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x07\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x07\x0e\x0f\n\
    \x0b\n\x04\x05\0\x02\x01\x12\x03\x08\x04\x0f\n\x0c\n\x05\x05\0\x02\x01\
    \x01\x12\x03\x08\x04\n\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x08\r\x0e\n\
    \x0b\n\x04\x05\0\x02\x02\x12\x03\t\x04\x0f\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03\t\x04\n\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\t\r\x0e\n\x0b\n\
    \x04\x05\0\x02\x03\x12\x03\n\x04\x0f\n\x0c\n\x05\x05\0\x02\x03\x01\x12\
    \x03\n\x04\n\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\n\r\x0e\n\x0b\n\x04\
    \x05\0\x02\x04\x12\x03\x0b\x04\x12\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\
    \x0b\x04\r\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0b\x10\x11\n#\n\x04\
    \x05\0\x02\x05\x12\x03\x0c\x04\x10\"\x16\x20ripemd160(sha256(x))\n\n\x0c\
    \n\x05\x05\0\x02\x05\x01\x12\x03\x0c\x04\x0b\n\x0c\n\x05\x05\0\x02\x05\
    \x02\x12\x03\x0c\x0e\x0f\n\x83\x02\n\x02\x05\x01\x12\x04\x15\0(\x01\x1a\
    \xf6\x01*\nLengthOp\x20defines\x20how\x20to\x20process\x20the\x20key\x20\
    and\x20value\x20of\x20the\x20LeafOp\nto\x20include\x20length\x20informat\
    ion.\x20After\x20encoding\x20the\x20length\x20with\x20the\x20given\nalgo\
    rithm,\x20the\x20length\x20will\x20be\x20prepended\x20to\x20the\x20key\
    \x20and\x20value\x20bytes.\n(Each\x20one\x20with\x20it's\x20own\x20encod\
    ed\x20length)\n\n\n\n\x03\x05\x01\x01\x12\x03\x15\x05\r\n6\n\x04\x05\x01\
    \x02\0\x12\x03\x17\x04\x12\x1a)\x20NO_PREFIX\x20don't\x20include\x20any\
    \x20length\x20info\n\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x17\x04\r\n\
    \x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x17\x10\x11\nS\n\x04\x05\x01\x02\
    \x01\x12\x03\x19\x04\x12\x1aF\x20VAR_PROTO\x20uses\x20protobuf\x20(and\
    \x20go-amino)\x20varint\x20encoding\x20of\x20the\x20length\n\n\x0c\n\x05\
    \x05\x01\x02\x01\x01\x12\x03\x19\x04\r\n\x0c\n\x05\x05\x01\x02\x01\x02\
    \x12\x03\x19\x10\x11\n:\n\x04\x05\x01\x02\x02\x12\x03\x1b\x04\x10\x1a-\
    \x20VAR_RLP\x20uses\x20rlp\x20int\x20encoding\x20of\x20the\x20length\n\n\
    \x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x1b\x04\x0b\n\x0c\n\x05\x05\x01\
    \x02\x02\x02\x12\x03\x1b\x0e\x0f\nU\n\x04\x05\x01\x02\x03\x12\x03\x1d\
    \x04\x14\x1aH\x20FIXED32_BIG\x20uses\x20big-endian\x20encoding\x20of\x20\
    the\x20length\x20as\x20a\x2032\x20bit\x20integer\n\n\x0c\n\x05\x05\x01\
    \x02\x03\x01\x12\x03\x1d\x04\x0f\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\
    \x1d\x12\x13\n[\n\x04\x05\x01\x02\x04\x12\x03\x1f\x04\x17\x1aN\x20FIXED3\
    2_LITTLE\x20uses\x20little-endian\x20encoding\x20of\x20the\x20length\x20\
    as\x20a\x2032\x20bit\x20integer\n\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\
    \x03\x1f\x04\x12\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x1f\x15\x16\nU\
    \n\x04\x05\x01\x02\x05\x12\x03!\x04\x14\x1aH\x20FIXED64_BIG\x20uses\x20b\
    ig-endian\x20encoding\x20of\x20the\x20length\x20as\x20a\x2064\x20bit\x20\
    integer\n\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03!\x04\x0f\n\x0c\n\x05\
    \x05\x01\x02\x05\x02\x12\x03!\x12\x13\n[\n\x04\x05\x01\x02\x06\x12\x03#\
    \x04\x17\x1aN\x20FIXED64_LITTLE\x20uses\x20little-endian\x20encoding\x20\
    of\x20the\x20length\x20as\x20a\x2064\x20bit\x20integer\n\n\x0c\n\x05\x05\
    \x01\x02\x06\x01\x12\x03#\x04\x12\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\
    \x03#\x15\x16\np\n\x04\x05\x01\x02\x07\x12\x03%\x04\x19\x1ac\x20REQUIRE_\
    32_BYTES\x20is\x20like\x20NONE,\x20but\x20will\x20fail\x20if\x20the\x20i\
    nput\x20is\x20not\x20exactly\x2032\x20bytes\x20(sha256\x20output)\n\n\
    \x0c\n\x05\x05\x01\x02\x07\x01\x12\x03%\x04\x14\n\x0c\n\x05\x05\x01\x02\
    \x07\x02\x12\x03%\x17\x18\np\n\x04\x05\x01\x02\x08\x12\x03'\x04\x19\x1ac\
    \x20REQUIRE_64_BYTES\x20is\x20like\x20NONE,\x20but\x20will\x20fail\x20if\
    \x20the\x20input\x20is\x20not\x20exactly\x2064\x20bytes\x20(sha512\x20ou\
    tput)\n\n\x0c\n\x05\x05\x01\x02\x08\x01\x12\x03'\x04\x14\n\x0c\n\x05\x05\
    \x01\x02\x08\x02\x12\x03'\x17\x18\n\xe6\x07\n\x02\x04\0\x12\x04?\0D\x01\
    \x1a\xd9\x07*\nExistenceProof\x20takes\x20a\x20key\x20and\x20a\x20value\
    \x20and\x20a\x20set\x20of\x20steps\x20to\x20perform\x20on\x20it.\nThe\
    \x20result\x20of\x20peforming\x20all\x20these\x20steps\x20will\x20provid\
    e\x20a\x20\"root\x20hash\",\x20which\x20can\nbe\x20compared\x20to\x20the\
    \x20value\x20in\x20a\x20header.\n\nSince\x20it\x20is\x20computationally\
    \x20infeasible\x20to\x20produce\x20a\x20hash\x20collission\x20for\x20any\
    \x20of\x20the\x20used\ncryptographic\x20hash\x20functions,\x20if\x20some\
    one\x20can\x20provide\x20a\x20series\x20of\x20operations\x20to\x20transf\
    orm\na\x20given\x20key\x20and\x20value\x20into\x20a\x20root\x20hash\x20t\
    hat\x20matches\x20some\x20trusted\x20root,\x20these\x20key\x20and\x20val\
    ues\nmust\x20be\x20in\x20the\x20referenced\x20merkle\x20tree.\n\nThe\x20\
    only\x20possible\x20issue\x20is\x20maliablity\x20in\x20LeafOp,\x20such\
    \x20as\x20providing\x20extra\x20prefix\x20data,\nwhich\x20should\x20be\
    \x20controlled\x20by\x20a\x20spec.\x20Eg.\x20with\x20lengthOp\x20as\x20N\
    ONE,\nprefix\x20=\x20FOO,\x20key\x20=\x20BAR,\x20value\x20=\x20CHOICE\na\
    nd\nprefix\x20=\x20F,\x20key\x20=\x20OOBAR,\x20value\x20=\x20CHOICE\nwou\
    ld\x20produce\x20the\x20same\x20value.\n\nWith\x20LengthOp\x20this\x20is\
    \x20tricker\x20but\x20not\x20impossible.\x20Which\x20is\x20why\x20the\
    \x20\"leafPrefixEqual\"\x20field\nin\x20the\x20ProofSpec\x20is\x20valuab\
    le\x20to\x20prevent\x20this\x20mutability.\x20And\x20why\x20all\x20trees\
    \x20should\nlength-prefix\x20the\x20data\x20before\x20hashing\x20it.\n\n\
    \n\n\x03\x04\0\x01\x12\x03?\x08\x16\n\x0b\n\x04\x04\0\x02\0\x12\x03@\x04\
    \x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03@\x04\t\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03@\n\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03@\x10\x11\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03A\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03A\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03A\n\x0f\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03A\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03B\x04\
    \x14\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03B\x04\n\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03B\x0b\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03B\x12\x13\
    \n\x0b\n\x04\x04\0\x02\x03\x12\x03C\x04\x1e\n\x0c\n\x05\x04\0\x02\x03\
    \x04\x12\x03C\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03C\r\x14\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03C\x15\x19\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03C\x1c\x1d\n\xdc\x01\n\x02\x04\x01\x12\x04K\0O\x01\x1a\xcf\x01\nN\
    onExistenceProof\x20takes\x20a\x20proof\x20of\x20two\x20neighbors,\x20on\
    e\x20left\x20of\x20the\x20desired\x20key,\none\x20right\x20of\x20the\x20\
    desired\x20key.\x20If\x20both\x20proofs\x20are\x20valid\x20AND\x20they\
    \x20are\x20neighbors,\nthen\x20there\x20is\x20no\x20valid\x20proof\x20fo\
    r\x20the\x20given\x20key.\n\n\n\n\x03\x04\x01\x01\x12\x03K\x08\x19\nC\n\
    \x04\x04\x01\x02\0\x12\x03L\x04\x12\"6\x20TODO:\x20remove\x20this\x20as\
    \x20unnecessary???\x20we\x20prove\x20a\x20range\n\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03L\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03L\n\r\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03L\x10\x11\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03M\x04\x1c\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03M\x04\x12\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03M\x13\x17\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03M\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x02\x12\x03N\x04\x1d\n\
    \x0c\n\x05\x04\x01\x02\x02\x06\x12\x03N\x04\x12\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03N\x13\x18\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03N\x1b\
    \x1c\nm\n\x02\x04\x02\x12\x04T\0[\x01\x1aa\nCommitmentProof\x20is\x20eit\
    her\x20an\x20ExistenceProof\x20or\x20a\x20NonExistenceProof,\x20or\x20a\
    \x20Batch\x20of\x20such\x20messages\n\n\n\n\x03\x04\x02\x01\x12\x03T\x08\
    \x17\n\x0c\n\x04\x04\x02\x08\0\x12\x04U\x04Z\x05\n\x0c\n\x05\x04\x02\x08\
    \0\x01\x12\x03U\n\x0f\n\x0b\n\x04\x04\x02\x02\0\x12\x03V\x08!\n\x0c\n\
    \x05\x04\x02\x02\0\x06\x12\x03V\x08\x16\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03V\x17\x1c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03V\x1f\x20\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03W\x08'\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\
    \x03W\x08\x19\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03W\x1a\"\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03W%&\n\x0b\n\x04\x04\x02\x02\x02\x12\x03X\x08\
    \x1d\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03X\x08\x12\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03X\x13\x18\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03X\x1b\x1c\n\x0b\n\x04\x04\x02\x02\x03\x12\x03Y\x08,\n\x0c\n\x05\x04\
    \x02\x02\x03\x06\x12\x03Y\x08\x1c\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\
    \x03Y\x1d'\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03Y*+\n\xc9\x04\n\x02\
    \x04\x03\x12\x04m\0u\x01\x1a\xbc\x04*\nLeafOp\x20represents\x20the\x20ra\
    w\x20key-value\x20data\x20we\x20wish\x20to\x20prove,\x20and\nmust\x20be\
    \x20flexible\x20to\x20represent\x20the\x20internal\x20transformation\x20\
    from\nthe\x20original\x20key-value\x20pairs\x20into\x20the\x20basis\x20h\
    ash,\x20for\x20many\x20existing\nmerkle\x20trees.\n\nkey\x20and\x20value\
    \x20are\x20passed\x20in.\x20So\x20that\x20the\x20signature\x20of\x20this\
    \x20operation\x20is:\nleafOp(key,\x20value)\x20->\x20output\n\nTo\x20pro\
    cess\x20this,\x20first\x20prehash\x20the\x20keys\x20and\x20values\x20if\
    \x20needed\x20(ANY\x20means\x20no\x20hash\x20in\x20this\x20case):\nhkey\
    \x20=\x20prehashKey(key)\nhvalue\x20=\x20prehashValue(value)\n\nThen\x20\
    combine\x20the\x20bytes,\x20and\x20hash\x20it\noutput\x20=\x20hash(prefi\
    x\x20||\x20length(hkey)\x20||\x20hkey\x20||\x20length(hvalue)\x20||\x20h\
    value)\n\n\n\n\x03\x04\x03\x01\x12\x03m\x08\x0e\n\x0b\n\x04\x04\x03\x02\
    \0\x12\x03n\x04\x14\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03n\x04\n\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03n\x0b\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03n\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03o\x04\x1b\n\x0c\n\
    \x05\x04\x03\x02\x01\x06\x12\x03o\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03o\x0b\x16\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03o\x19\x1a\n\x0b\
    \n\x04\x04\x03\x02\x02\x12\x03p\x04\x1d\n\x0c\n\x05\x04\x03\x02\x02\x06\
    \x12\x03p\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03p\x0b\x18\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03p\x1b\x1c\n\x0b\n\x04\x04\x03\x02\x03\
    \x12\x03q\x04\x18\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03q\x04\x0c\n\x0c\
    \n\x05\x04\x03\x02\x03\x01\x12\x03q\r\x13\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03q\x16\x17\n\x89\x01\n\x04\x04\x03\x02\x04\x12\x03t\x04\x15\
    \x1a|\x20prefix\x20is\x20a\x20fixed\x20bytes\x20that\x20may\x20optionall\
    y\x20be\x20included\x20at\x20the\x20beginning\x20to\x20differentiate\n\
    \x20a\x20leaf\x20node\x20from\x20an\x20inner\x20node.\n\n\x0c\n\x05\x04\
    \x03\x02\x04\x05\x12\x03t\x04\t\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03t\
    \n\x10\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03t\x13\x14\n\xe4\x05\n\x02\
    \x04\x04\x12\x06\x88\x01\0\x8c\x01\x01\x1a\xd5\x05*\nInnerOp\x20represen\
    ts\x20a\x20merkle-proof\x20step\x20that\x20is\x20not\x20a\x20leaf.\nIt\
    \x20represents\x20concatenating\x20two\x20children\x20and\x20hashing\x20\
    them\x20to\x20provide\x20the\x20next\x20result.\n\nThe\x20result\x20of\
    \x20the\x20previous\x20step\x20is\x20passed\x20in,\x20so\x20the\x20signa\
    ture\x20of\x20this\x20op\x20is:\ninnerOp(child)\x20->\x20output\n\nThe\
    \x20result\x20of\x20applying\x20InnerOp\x20should\x20be:\noutput\x20=\
    \x20op.hash(op.prefix\x20||\x20child\x20||\x20op.suffix)\n\nwhere\x20the\
    \x20||\x20operator\x20is\x20concatenation\x20of\x20binary\x20data,\nand\
    \x20child\x20is\x20the\x20result\x20of\x20hashing\x20all\x20the\x20tree\
    \x20below\x20this\x20step.\n\nAny\x20special\x20data,\x20like\x20prepend\
    ing\x20child\x20with\x20the\x20length,\x20or\x20prepending\x20the\x20ent\
    ire\x20operation\x20with\nsome\x20value\x20to\x20differentiate\x20from\
    \x20leaf\x20nodes,\x20should\x20be\x20included\x20in\x20prefix\x20and\
    \x20suffix.\nIf\x20either\x20of\x20prefix\x20or\x20suffix\x20is\x20empty\
    ,\x20we\x20just\x20treat\x20it\x20as\x20an\x20empty\x20string\n\n\x0b\n\
    \x03\x04\x04\x01\x12\x04\x88\x01\x08\x0f\n\x0c\n\x04\x04\x04\x02\0\x12\
    \x04\x89\x01\x04\x14\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\x89\x01\x04\n\n\
    \r\n\x05\x04\x04\x02\0\x01\x12\x04\x89\x01\x0b\x0f\n\r\n\x05\x04\x04\x02\
    \0\x03\x12\x04\x89\x01\x12\x13\n\x0c\n\x04\x04\x04\x02\x01\x12\x04\x8a\
    \x01\x04\x15\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\x8a\x01\x04\t\n\r\n\
    \x05\x04\x04\x02\x01\x01\x12\x04\x8a\x01\n\x10\n\r\n\x05\x04\x04\x02\x01\
    \x03\x12\x04\x8a\x01\x13\x14\n\x0c\n\x04\x04\x04\x02\x02\x12\x04\x8b\x01\
    \x04\x15\n\r\n\x05\x04\x04\x02\x02\x05\x12\x04\x8b\x01\x04\t\n\r\n\x05\
    \x04\x04\x02\x02\x01\x12\x04\x8b\x01\n\x10\n\r\n\x05\x04\x04\x02\x02\x03\
    \x12\x04\x8b\x01\x13\x14\n\xbf\x04\n\x02\x04\x05\x12\x06\x9b\x01\0\xa4\
    \x01\x01\x1a\xb0\x04*\nProofSpec\x20defines\x20what\x20the\x20expected\
    \x20parameters\x20are\x20for\x20a\x20given\x20proof\x20type.\nThis\x20ca\
    n\x20be\x20stored\x20in\x20the\x20client\x20and\x20used\x20to\x20validat\
    e\x20any\x20incoming\x20proofs.\n\nverify(ProofSpec,\x20Proof)\x20->\x20\
    Proof\x20|\x20Error\n\nAs\x20demonstrated\x20in\x20tests,\x20if\x20we\
    \x20don't\x20fix\x20the\x20algorithm\x20used\x20to\x20calculate\x20the\n\
    LeafHash\x20for\x20a\x20given\x20tree,\x20there\x20are\x20many\x20possib\
    le\x20key-value\x20pairs\x20that\x20can\ngenerate\x20a\x20given\x20hash\
    \x20(by\x20interpretting\x20the\x20preimage\x20differently).\nWe\x20need\
    \x20this\x20for\x20proper\x20security,\x20requires\x20client\x20knows\
    \x20a\x20priori\x20what\ntree\x20format\x20server\x20uses.\x20But\x20not\
    \x20in\x20code,\x20rather\x20a\x20configuration\x20object.\n\n\x0b\n\x03\
    \x04\x05\x01\x12\x04\x9b\x01\x08\x11\n\xa0\x01\n\x04\x04\x05\x02\0\x12\
    \x04\x9e\x01\x02\x17\x1a\x91\x01\x20any\x20field\x20in\x20the\x20Existen\
    ceProof\x20must\x20be\x20the\x20same\x20as\x20in\x20this\x20spec.\n\x20e\
    xcept\x20Prefix,\x20which\x20is\x20just\x20the\x20first\x20bytes\x20of\
    \x20prefix\x20(spec\x20can\x20be\x20longer)\x20\n\n\r\n\x05\x04\x05\x02\
    \0\x06\x12\x04\x9e\x01\x02\x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x9e\
    \x01\t\x12\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x9e\x01\x15\x16\n\x0c\n\
    \x04\x04\x05\x02\x01\x12\x04\x9f\x01\x02\x1b\n\r\n\x05\x04\x05\x02\x01\
    \x06\x12\x04\x9f\x01\x02\x0b\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x9f\
    \x01\x0c\x16\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\x9f\x01\x19\x1a\nk\n\
    \x04\x04\x05\x02\x02\x12\x04\xa1\x01\x02\x16\x1a]\x20max_depth\x20(if\
    \x20>\x200)\x20is\x20the\x20maximum\x20number\x20of\x20InnerOps\x20allow\
    ed\x20(mainly\x20for\x20fixed-depth\x20tries)\n\n\r\n\x05\x04\x05\x02\
    \x02\x05\x12\x04\xa1\x01\x02\x07\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\
    \xa1\x01\x08\x11\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xa1\x01\x14\x15\n\
    k\n\x04\x04\x05\x02\x03\x12\x04\xa3\x01\x02\x16\x1a]\x20min_depth\x20(if\
    \x20>\x200)\x20is\x20the\x20minimum\x20number\x20of\x20InnerOps\x20allow\
    ed\x20(mainly\x20for\x20fixed-depth\x20tries)\n\n\r\n\x05\x04\x05\x02\
    \x03\x05\x12\x04\xa3\x01\x02\x07\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\
    \xa3\x01\x08\x11\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xa3\x01\x14\x15\n\
    \xa4\x02\n\x02\x04\x06\x12\x06\xb0\x01\0\xbc\x01\x01\x1a\x95\x02\nInnerS\
    pec\x20contains\x20all\x20store-specific\x20structure\x20info\x20to\x20d\
    etermine\x20if\x20two\x20proofs\x20from\x20a\ngiven\x20store\x20are\x20n\
    eighbors.\n\nThis\x20enables:\n\nisLeftMost(spec:\x20InnerSpec,\x20op:\
    \x20InnerOp)\nisRightMost(spec:\x20InnerSpec,\x20op:\x20InnerOp)\nisLeft\
    Neighbor(spec:\x20InnerSpec,\x20left:\x20InnerOp,\x20right:\x20InnerOp)\
    \n\n\x0b\n\x03\x04\x06\x01\x12\x04\xb0\x01\x08\x11\n\xa2\x01\n\x04\x04\
    \x06\x02\0\x12\x04\xb4\x01\x04#\x1a\x93\x01\x20Child\x20order\x20is\x20t\
    he\x20ordering\x20of\x20the\x20children\x20node,\x20must\x20count\x20fro\
    m\x200\n\x20iavl\x20tree\x20is\x20[0,\x201]\x20(left\x20then\x20right)\n\
    \x20merk\x20is\x20[0,\x202,\x201]\x20(left,\x20right,\x20here)\n\n\r\n\
    \x05\x04\x06\x02\0\x04\x12\x04\xb4\x01\x04\x0c\n\r\n\x05\x04\x06\x02\0\
    \x05\x12\x04\xb4\x01\r\x12\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xb4\x01\
    \x13\x1e\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xb4\x01!\"\n\x0c\n\x04\x04\
    \x06\x02\x01\x12\x04\xb5\x01\x04\x19\n\r\n\x05\x04\x06\x02\x01\x05\x12\
    \x04\xb5\x01\x04\t\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xb5\x01\n\x14\n\
    \r\n\x05\x04\x06\x02\x01\x03\x12\x04\xb5\x01\x17\x18\n\x0c\n\x04\x04\x06\
    \x02\x02\x12\x04\xb6\x01\x04\x20\n\r\n\x05\x04\x06\x02\x02\x05\x12\x04\
    \xb6\x01\x04\t\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\xb6\x01\n\x1b\n\r\n\
    \x05\x04\x06\x02\x02\x03\x12\x04\xb6\x01\x1e\x1f\n\x0c\n\x04\x04\x06\x02\
    \x03\x12\x04\xb7\x01\x04\x20\n\r\n\x05\x04\x06\x02\x03\x05\x12\x04\xb7\
    \x01\x04\t\n\r\n\x05\x04\x06\x02\x03\x01\x12\x04\xb7\x01\n\x1b\n\r\n\x05\
    \x04\x06\x02\x03\x03\x12\x04\xb7\x01\x1e\x1f\ng\n\x04\x04\x06\x02\x04\
    \x12\x04\xb9\x01\x04\x1a\x1aY\x20empty\x20child\x20is\x20the\x20prehash\
    \x20image\x20that\x20is\x20used\x20when\x20one\x20child\x20is\x20nil\x20\
    (eg.\x2020\x20bytes\x20of\x200)\n\n\r\n\x05\x04\x06\x02\x04\x05\x12\x04\
    \xb9\x01\x04\t\n\r\n\x05\x04\x06\x02\x04\x01\x12\x04\xb9\x01\n\x15\n\r\n\
    \x05\x04\x06\x02\x04\x03\x12\x04\xb9\x01\x18\x19\nH\n\x04\x04\x06\x02\
    \x05\x12\x04\xbb\x01\x04\x14\x1a:\x20hash\x20is\x20the\x20algorithm\x20t\
    hat\x20must\x20be\x20used\x20for\x20each\x20InnerOp\n\n\r\n\x05\x04\x06\
    \x02\x05\x06\x12\x04\xbb\x01\x04\n\n\r\n\x05\x04\x06\x02\x05\x01\x12\x04\
    \xbb\x01\x0b\x0f\n\r\n\x05\x04\x06\x02\x05\x03\x12\x04\xbb\x01\x12\x13\n\
    T\n\x02\x04\x07\x12\x06\xc1\x01\0\xc3\x01\x01\x1aF\nBatchProof\x20is\x20\
    a\x20group\x20of\x20multiple\x20proof\x20types\x20than\x20can\x20be\x20c\
    ompressed\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xc1\x01\x08\x12\n\x0c\n\x04\
    \x04\x07\x02\0\x12\x04\xc2\x01\x02\"\n\r\n\x05\x04\x07\x02\0\x04\x12\x04\
    \xc2\x01\x02\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\xc2\x01\x0b\x15\n\r\n\
    \x05\x04\x07\x02\0\x01\x12\x04\xc2\x01\x16\x1d\n\r\n\x05\x04\x07\x02\0\
    \x03\x12\x04\xc2\x01\x20!\nF\n\x02\x04\x08\x12\x06\xc6\x01\0\xcb\x01\x01\
    \x1a8\x20Use\x20BatchEntry\x20not\x20CommitmentProof,\x20to\x20avoid\x20\
    recursion\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xc6\x01\x08\x12\n\x0e\n\x04\
    \x04\x08\x08\0\x12\x06\xc7\x01\x02\xca\x01\x03\n\r\n\x05\x04\x08\x08\0\
    \x01\x12\x04\xc7\x01\x08\r\n\x0c\n\x04\x04\x08\x02\0\x12\x04\xc8\x01\x04\
    \x1d\n\r\n\x05\x04\x08\x02\0\x06\x12\x04\xc8\x01\x04\x12\n\r\n\x05\x04\
    \x08\x02\0\x01\x12\x04\xc8\x01\x13\x18\n\r\n\x05\x04\x08\x02\0\x03\x12\
    \x04\xc8\x01\x1b\x1c\n\x0c\n\x04\x04\x08\x02\x01\x12\x04\xc9\x01\x04#\n\
    \r\n\x05\x04\x08\x02\x01\x06\x12\x04\xc9\x01\x04\x15\n\r\n\x05\x04\x08\
    \x02\x01\x01\x12\x04\xc9\x01\x16\x1e\n\r\n\x05\x04\x08\x02\x01\x03\x12\
    \x04\xc9\x01!\"\n>\n\x02\x04\t\x12\x06\xd0\x01\0\xd3\x01\x0120*****\x20a\
    ll\x20items\x20here\x20are\x20compressed\x20forms\x20******\n\x0b\n\x03\
    \x04\t\x01\x12\x04\xd0\x01\x08\x1c\n\x0c\n\x04\x04\t\x02\0\x12\x04\xd1\
    \x01\x02,\n\r\n\x05\x04\t\x02\0\x04\x12\x04\xd1\x01\x02\n\n\r\n\x05\x04\
    \t\x02\0\x06\x12\x04\xd1\x01\x0b\x1f\n\r\n\x05\x04\t\x02\0\x01\x12\x04\
    \xd1\x01\x20'\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xd1\x01*+\n\x0c\n\x04\
    \x04\t\x02\x01\x12\x04\xd2\x01\x02%\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\
    \xd2\x01\x02\n\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\xd2\x01\x0b\x12\n\r\n\
    \x05\x04\t\x02\x01\x01\x12\x04\xd2\x01\x13\x20\n\r\n\x05\x04\t\x02\x01\
    \x03\x12\x04\xd2\x01#$\nF\n\x02\x04\n\x12\x06\xd6\x01\0\xdb\x01\x01\x1a8\
    \x20Use\x20BatchEntry\x20not\x20CommitmentProof,\x20to\x20avoid\x20recur\
    sion\n\n\x0b\n\x03\x04\n\x01\x12\x04\xd6\x01\x08\x1c\n\x0e\n\x04\x04\n\
    \x08\0\x12\x06\xd7\x01\x02\xda\x01\x03\n\r\n\x05\x04\n\x08\0\x01\x12\x04\
    \xd7\x01\x08\r\n\x0c\n\x04\x04\n\x02\0\x12\x04\xd8\x01\x04'\n\r\n\x05\
    \x04\n\x02\0\x06\x12\x04\xd8\x01\x04\x1c\n\r\n\x05\x04\n\x02\0\x01\x12\
    \x04\xd8\x01\x1d\"\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xd8\x01%&\n\x0c\n\
    \x04\x04\n\x02\x01\x12\x04\xd9\x01\x04-\n\r\n\x05\x04\n\x02\x01\x06\x12\
    \x04\xd9\x01\x04\x1f\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\xd9\x01\x20(\n\
    \r\n\x05\x04\n\x02\x01\x03\x12\x04\xd9\x01+,\n\x0c\n\x02\x04\x0b\x12\x06\
    \xdd\x01\0\xe3\x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\x04\xdd\x01\x08\x20\n\
    \x0c\n\x04\x04\x0b\x02\0\x12\x04\xde\x01\x02\x10\n\r\n\x05\x04\x0b\x02\0\
    \x05\x12\x04\xde\x01\x02\x07\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xde\x01\
    \x08\x0b\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xde\x01\x0e\x0f\n\x0c\n\x04\
    \x04\x0b\x02\x01\x12\x04\xdf\x01\x02\x12\n\r\n\x05\x04\x0b\x02\x01\x05\
    \x12\x04\xdf\x01\x02\x07\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xdf\x01\
    \x08\r\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xdf\x01\x10\x11\n\x0c\n\x04\
    \x04\x0b\x02\x02\x12\x04\xe0\x01\x02\x12\n\r\n\x05\x04\x0b\x02\x02\x06\
    \x12\x04\xe0\x01\x02\x08\n\r\n\x05\x04\x0b\x02\x02\x01\x12\x04\xe0\x01\t\
    \r\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\xe0\x01\x10\x11\nV\n\x04\x04\
    \x0b\x02\x03\x12\x04\xe2\x01\x02\x1a\x1aH\x20these\x20are\x20indexes\x20\
    into\x20the\x20lookup_inners\x20table\x20in\x20CompressedBatchProof\n\n\
    \r\n\x05\x04\x0b\x02\x03\x04\x12\x04\xe2\x01\x02\n\n\r\n\x05\x04\x0b\x02\
    \x03\x05\x12\x04\xe2\x01\x0b\x10\n\r\n\x05\x04\x0b\x02\x03\x01\x12\x04\
    \xe2\x01\x11\x15\n\r\n\x05\x04\x0b\x02\x03\x03\x12\x04\xe2\x01\x18\x19\n\
    \x0c\n\x02\x04\x0c\x12\x06\xe5\x01\0\xe9\x01\x01\n\x0b\n\x03\x04\x0c\x01\
    \x12\x04\xe5\x01\x08#\nD\n\x04\x04\x0c\x02\0\x12\x04\xe6\x01\x02\x10\"6\
    \x20TODO:\x20remove\x20this\x20as\x20unnecessary???\x20we\x20prove\x20a\
    \x20range\n\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xe6\x01\x02\x07\n\r\n\
    \x05\x04\x0c\x02\0\x01\x12\x04\xe6\x01\x08\x0b\n\r\n\x05\x04\x0c\x02\0\
    \x03\x12\x04\xe6\x01\x0e\x0f\n\x0c\n\x04\x04\x0c\x02\x01\x12\x04\xe7\x01\
    \x02$\n\r\n\x05\x04\x0c\x02\x01\x06\x12\x04\xe7\x01\x02\x1a\n\r\n\x05\
    \x04\x0c\x02\x01\x01\x12\x04\xe7\x01\x1b\x1f\n\r\n\x05\x04\x0c\x02\x01\
    \x03\x12\x04\xe7\x01\"#\n\x0c\n\x04\x04\x0c\x02\x02\x12\x04\xe8\x01\x02%\
    \n\r\n\x05\x04\x0c\x02\x02\x06\x12\x04\xe8\x01\x02\x1a\n\r\n\x05\x04\x0c\
    \x02\x02\x01\x12\x04\xe8\x01\x1b\x20\n\r\n\x05\x04\x0c\x02\x02\x03\x12\
    \x04\xe8\x01#$b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(13);
            messages.push(ExistenceProof::generated_message_descriptor_data());
            messages.push(NonExistenceProof::generated_message_descriptor_data());
            messages.push(CommitmentProof::generated_message_descriptor_data());
            messages.push(LeafOp::generated_message_descriptor_data());
            messages.push(InnerOp::generated_message_descriptor_data());
            messages.push(ProofSpec::generated_message_descriptor_data());
            messages.push(InnerSpec::generated_message_descriptor_data());
            messages.push(BatchProof::generated_message_descriptor_data());
            messages.push(BatchEntry::generated_message_descriptor_data());
            messages.push(CompressedBatchProof::generated_message_descriptor_data());
            messages.push(CompressedBatchEntry::generated_message_descriptor_data());
            messages.push(CompressedExistenceProof::generated_message_descriptor_data());
            messages.push(CompressedNonExistenceProof::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(HashOp::generated_enum_descriptor_data());
            enums.push(LengthOp::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
