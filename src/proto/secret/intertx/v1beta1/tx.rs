// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `secret/intertx/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  MsgRegisterAccount registers an interchain account for the given owner over the specified connection pair
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.intertx.v1beta1.MsgRegisterAccount)
pub struct MsgRegisterAccount {
    // message fields
    // @@protoc_insertion_point(field:secret.intertx.v1beta1.MsgRegisterAccount.owner)
    pub owner: ::std::string::String,
    // @@protoc_insertion_point(field:secret.intertx.v1beta1.MsgRegisterAccount.connection_id)
    pub connection_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:secret.intertx.v1beta1.MsgRegisterAccount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgRegisterAccount {
    fn default() -> &'a MsgRegisterAccount {
        <MsgRegisterAccount as ::protobuf::Message>::default_instance()
    }
}

impl MsgRegisterAccount {
    pub fn new() -> MsgRegisterAccount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &MsgRegisterAccount| { &m.owner },
            |m: &mut MsgRegisterAccount| { &mut m.owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &MsgRegisterAccount| { &m.connection_id },
            |m: &mut MsgRegisterAccount| { &mut m.connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgRegisterAccount>(
            "MsgRegisterAccount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgRegisterAccount {
    const NAME: &'static str = "MsgRegisterAccount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner = is.read_string()?;
                },
                18 => {
                    self.connection_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.owner);
        }
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.connection_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner.is_empty() {
            os.write_string(1, &self.owner)?;
        }
        if !self.connection_id.is_empty() {
            os.write_string(2, &self.connection_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgRegisterAccount {
        MsgRegisterAccount::new()
    }

    fn clear(&mut self) {
        self.owner.clear();
        self.connection_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgRegisterAccount {
        static instance: MsgRegisterAccount = MsgRegisterAccount {
            owner: ::std::string::String::new(),
            connection_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgRegisterAccount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgRegisterAccount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgRegisterAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRegisterAccount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgRegisterAccountResponse is the response type for Msg/RegisterAccount
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.intertx.v1beta1.MsgRegisterAccountResponse)
pub struct MsgRegisterAccountResponse {
    // special fields
    // @@protoc_insertion_point(special_field:secret.intertx.v1beta1.MsgRegisterAccountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgRegisterAccountResponse {
    fn default() -> &'a MsgRegisterAccountResponse {
        <MsgRegisterAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRegisterAccountResponse {
    pub fn new() -> MsgRegisterAccountResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgRegisterAccountResponse>(
            "MsgRegisterAccountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgRegisterAccountResponse {
    const NAME: &'static str = "MsgRegisterAccountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgRegisterAccountResponse {
        MsgRegisterAccountResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgRegisterAccountResponse {
        static instance: MsgRegisterAccountResponse = MsgRegisterAccountResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgRegisterAccountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgRegisterAccountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgRegisterAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRegisterAccountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSubmitTx creates and submits an arbitrary transaction msg to be executed using an interchain account
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.intertx.v1beta1.MsgSubmitTx)
pub struct MsgSubmitTx {
    // message fields
    // @@protoc_insertion_point(field:secret.intertx.v1beta1.MsgSubmitTx.owner)
    pub owner: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.intertx.v1beta1.MsgSubmitTx.connection_id)
    pub connection_id: ::std::string::String,
    // @@protoc_insertion_point(field:secret.intertx.v1beta1.MsgSubmitTx.msg)
    pub msg: ::protobuf::MessageField<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.intertx.v1beta1.MsgSubmitTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSubmitTx {
    fn default() -> &'a MsgSubmitTx {
        <MsgSubmitTx as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitTx {
    pub fn new() -> MsgSubmitTx {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &MsgSubmitTx| { &m.owner },
            |m: &mut MsgSubmitTx| { &mut m.owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &MsgSubmitTx| { &m.connection_id },
            |m: &mut MsgSubmitTx| { &mut m.connection_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "msg",
            |m: &MsgSubmitTx| { &m.msg },
            |m: &mut MsgSubmitTx| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSubmitTx>(
            "MsgSubmitTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSubmitTx {
    const NAME: &'static str = "MsgSubmitTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner = is.read_bytes()?;
                },
                18 => {
                    self.connection_id = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.msg)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.owner);
        }
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.connection_id);
        }
        if let Some(v) = self.msg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner.is_empty() {
            os.write_bytes(1, &self.owner)?;
        }
        if !self.connection_id.is_empty() {
            os.write_string(2, &self.connection_id)?;
        }
        if let Some(v) = self.msg.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSubmitTx {
        MsgSubmitTx::new()
    }

    fn clear(&mut self) {
        self.owner.clear();
        self.connection_id.clear();
        self.msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSubmitTx {
        static instance: MsgSubmitTx = MsgSubmitTx {
            owner: ::std::vec::Vec::new(),
            connection_id: ::std::string::String::new(),
            msg: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSubmitTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSubmitTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSubmitTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  MsgSubmitTxResponse defines the MsgSubmitTx response type
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.intertx.v1beta1.MsgSubmitTxResponse)
pub struct MsgSubmitTxResponse {
    // special fields
    // @@protoc_insertion_point(special_field:secret.intertx.v1beta1.MsgSubmitTxResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgSubmitTxResponse {
    fn default() -> &'a MsgSubmitTxResponse {
        <MsgSubmitTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitTxResponse {
    pub fn new() -> MsgSubmitTxResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgSubmitTxResponse>(
            "MsgSubmitTxResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgSubmitTxResponse {
    const NAME: &'static str = "MsgSubmitTxResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgSubmitTxResponse {
        MsgSubmitTxResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgSubmitTxResponse {
        static instance: MsgSubmitTxResponse = MsgSubmitTxResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgSubmitTxResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgSubmitTxResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgSubmitTxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitTxResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fsecret/intertx/v1beta1/tx.proto\x12\x16secret.intertx.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/\
    api/annotations.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a\x19cosmo\
    s_proto/cosmos.proto\"i\n\x12MsgRegisterAccount\x12\x14\n\x05owner\x18\
    \x01\x20\x01(\tR\x05owner\x12=\n\rconnection_id\x18\x02\x20\x01(\tR\x0cc\
    onnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\"\x1c\n\x1aMsgReg\
    isterAccountResponse\"\xbd\x01\n\x0bMsgSubmitTx\x12G\n\x05owner\x18\x01\
    \x20\x01(\x0cR\x05ownerB1\xfa\xde\x1f-github.com/cosmos/cosmos-sdk/types\
    .AccAddress\x12=\n\rconnection_id\x18\x02\x20\x01(\tR\x0cconnectionIdB\
    \x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x12&\n\x03msg\x18\x04\x20\x01\
    (\x0b2\x14.google.protobuf.AnyR\x03msg\"\x15\n\x13MsgSubmitTxResponse2\
    \xa2\x02\n\x03Msg\x12\x9a\x01\n\x0fRegisterAccount\x12*.secret.intertx.v\
    1beta1.MsgRegisterAccount\x1a2.secret.intertx.v1beta1.MsgRegisterAccount\
    Response\"'\x82\xd3\xe4\x93\x02!\"\x1f/mauth/v1beta1/register-account\
    \x12~\n\x08SubmitTx\x12#.secret.intertx.v1beta1.MsgSubmitTx\x1a+.secret.\
    intertx.v1beta1.MsgSubmitTxResponse\"\x20\x82\xd3\xe4\x93\x02\x1a\"\x18/\
    mauth/v1beta1/submit-txB:Z0github.com/enigmampc/SecretNetwork/x/mauth/ty\
    pes\xc8\xe1\x1e\0\xa8\xe2\x1e\x01J\xfa\t\n\x06\x12\x04\0\0,\x1e\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1f\n\t\n\x02\x03\
    \0\x12\x03\x04\0\x1e\n\t\n\x02\x03\x01\x12\x03\x05\0#\n\t\n\x02\x03\x02\
    \x12\x03\x06\0&\n\t\n\x02\x03\x03\x12\x03\x07\0(\n\t\n\x02\x03\x04\x12\
    \x03\x08\0#\n\x08\n\x01\x08\x12\x03\n\0G\n\t\n\x02\x08\x0b\x12\x03\n\0G\
    \n\x08\n\x01\x08\x12\x03\x0b\0/\n\x0b\n\x04\x08\x99\xec\x03\x12\x03\x0b\
    \0/\n\x08\n\x01\x08\x12\x03\x0c\0$\n\x0b\n\x04\x08\xa5\xec\x03\x12\x03\
    \x0c\0$\n=\n\x02\x06\0\x12\x04\x0f\0\x17\x01\x1a1\x20Msg\x20defines\x20t\
    he\x20ica-authentication\x20Msg\x20service.\n\n\n\n\x03\x06\0\x01\x12\
    \x03\x0f\x08\x0b\nE\n\x04\x06\0\x02\0\x12\x04\x11\x02\x13\x03\x1a7\x20Re\
    gister\x20defines\x20a\x20rpc\x20handler\x20for\x20MsgRegisterAccount\n\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x11\x06\x15\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x11\x16(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x113M\n\x0c\n\
    \x05\x06\0\x02\0\x04\x12\x03\x12\x04F\n\x11\n\n\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x04\x12\x03\x12\x04F\n\x0c\n\x04\x06\0\x02\x01\x12\x04\x14\x02\
    \x16\x03\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x14\x06\x0e\n\x0c\n\x05\
    \x06\0\x02\x01\x02\x12\x03\x14\x0f\x1a\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x03\x14%8\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03\x15\x04?\n\x11\n\n\x06\
    \0\x02\x01\x04\xb0\xca\xbc\"\x04\x12\x03\x15\x04?\nw\n\x02\x04\0\x12\x04\
    \x1a\0\x1e\x01\x1ak\x20MsgRegisterAccount\x20registers\x20an\x20intercha\
    in\x20account\x20for\x20the\x20given\x20owner\x20over\x20the\x20specifie\
    d\x20connection\x20pair\n\n\n\n\x03\x04\0\x01\x12\x03\x1a\x08\x1a\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03\x1c\x02(\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x1c\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1c\t\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x1c&'\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x1d\x02\
    Z\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x1d\t\x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1d\
    &'\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x1d(Y\n\x0f\n\x08\x04\0\x02\x01\
    \x08\xee\xfb\x03\x12\x03\x1d)X\nT\n\x02\x04\x01\x12\x03!\0%\x1aI\x20MsgR\
    egisterAccountResponse\x20is\x20the\x20response\x20type\x20for\x20Msg/Re\
    gisterAccount\n\n\n\n\x03\x04\x01\x01\x12\x03!\x08\"\nu\n\x02\x04\x02\
    \x12\x04$\0)\x01\x1ai\x20MsgSubmitTx\x20creates\x20and\x20submits\x20an\
    \x20arbitrary\x20transaction\x20msg\x20to\x20be\x20executed\x20using\x20\
    an\x20interchain\x20account\n\n\n\n\x03\x04\x02\x01\x12\x03$\x08\x13\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03&\x02q\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03&\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03&\x08\r\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03&&'\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03&(p\n\
    \x0f\n\x08\x04\x02\x02\0\x08\xef\xfb\x03\x12\x03&)o\n\x0b\n\x04\x04\x02\
    \x02\x01\x12\x03'\x02Z\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03'\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03'\t\x16\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03'&'\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03'(Y\n\x0f\n\
    \x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\x03')X\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x03(\x02(\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03(\x02\x15\n\
    \x0c\n\x05\x04\x02\x02\x02\x01\x12\x03(\x16\x19\n\x0c\n\x05\x04\x02\x02\
    \x02\x03\x12\x03(&'\nF\n\x02\x04\x03\x12\x03,\0\x1e\x1a;\x20MsgSubmitTxR\
    esponse\x20defines\x20the\x20MsgSubmitTx\x20response\x20type\n\n\n\n\x03\
    \x04\x03\x01\x12\x03,\x08\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            deps.push(super::cosmos::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(MsgRegisterAccount::generated_message_descriptor_data());
            messages.push(MsgRegisterAccountResponse::generated_message_descriptor_data());
            messages.push(MsgSubmitTx::generated_message_descriptor_data());
            messages.push(MsgSubmitTxResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
