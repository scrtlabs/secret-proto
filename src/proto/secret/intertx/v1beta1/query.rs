// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `secret/intertx/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  QueryInterchainAccountFromAddressRequest is the request type for the Query/InterchainAccountAddress RPC
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.intertx.v1beta1.QueryInterchainAccountFromAddressRequest)
pub struct QueryInterchainAccountFromAddressRequest {
    // message fields
    // @@protoc_insertion_point(field:secret.intertx.v1beta1.QueryInterchainAccountFromAddressRequest.owner)
    pub owner: ::std::string::String,
    // @@protoc_insertion_point(field:secret.intertx.v1beta1.QueryInterchainAccountFromAddressRequest.connection_id)
    pub connection_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:secret.intertx.v1beta1.QueryInterchainAccountFromAddressRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryInterchainAccountFromAddressRequest {
    fn default() -> &'a QueryInterchainAccountFromAddressRequest {
        <QueryInterchainAccountFromAddressRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryInterchainAccountFromAddressRequest {
    pub fn new() -> QueryInterchainAccountFromAddressRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &QueryInterchainAccountFromAddressRequest| { &m.owner },
            |m: &mut QueryInterchainAccountFromAddressRequest| { &mut m.owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_id",
            |m: &QueryInterchainAccountFromAddressRequest| { &m.connection_id },
            |m: &mut QueryInterchainAccountFromAddressRequest| { &mut m.connection_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryInterchainAccountFromAddressRequest>(
            "QueryInterchainAccountFromAddressRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryInterchainAccountFromAddressRequest {
    const NAME: &'static str = "QueryInterchainAccountFromAddressRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner = is.read_string()?;
                },
                18 => {
                    self.connection_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.owner);
        }
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.connection_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.owner.is_empty() {
            os.write_string(1, &self.owner)?;
        }
        if !self.connection_id.is_empty() {
            os.write_string(2, &self.connection_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryInterchainAccountFromAddressRequest {
        QueryInterchainAccountFromAddressRequest::new()
    }

    fn clear(&mut self) {
        self.owner.clear();
        self.connection_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryInterchainAccountFromAddressRequest {
        static instance: QueryInterchainAccountFromAddressRequest = QueryInterchainAccountFromAddressRequest {
            owner: ::std::string::String::new(),
            connection_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryInterchainAccountFromAddressRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryInterchainAccountFromAddressRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryInterchainAccountFromAddressRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInterchainAccountFromAddressRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  QueryInterchainAccountFromAddressResponse the response type for the Query/InterchainAccountAddress RPC
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.intertx.v1beta1.QueryInterchainAccountFromAddressResponse)
pub struct QueryInterchainAccountFromAddressResponse {
    // message fields
    // @@protoc_insertion_point(field:secret.intertx.v1beta1.QueryInterchainAccountFromAddressResponse.interchain_account_address)
    pub interchain_account_address: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:secret.intertx.v1beta1.QueryInterchainAccountFromAddressResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryInterchainAccountFromAddressResponse {
    fn default() -> &'a QueryInterchainAccountFromAddressResponse {
        <QueryInterchainAccountFromAddressResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryInterchainAccountFromAddressResponse {
    pub fn new() -> QueryInterchainAccountFromAddressResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interchain_account_address",
            |m: &QueryInterchainAccountFromAddressResponse| { &m.interchain_account_address },
            |m: &mut QueryInterchainAccountFromAddressResponse| { &mut m.interchain_account_address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryInterchainAccountFromAddressResponse>(
            "QueryInterchainAccountFromAddressResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryInterchainAccountFromAddressResponse {
    const NAME: &'static str = "QueryInterchainAccountFromAddressResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.interchain_account_address = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.interchain_account_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.interchain_account_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.interchain_account_address.is_empty() {
            os.write_string(1, &self.interchain_account_address)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryInterchainAccountFromAddressResponse {
        QueryInterchainAccountFromAddressResponse::new()
    }

    fn clear(&mut self) {
        self.interchain_account_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryInterchainAccountFromAddressResponse {
        static instance: QueryInterchainAccountFromAddressResponse = QueryInterchainAccountFromAddressResponse {
            interchain_account_address: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryInterchainAccountFromAddressResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryInterchainAccountFromAddressResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryInterchainAccountFromAddressResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInterchainAccountFromAddressResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"secret/intertx/v1beta1/query.proto\x12\x16secret.intertx.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x1cgoogle/api/annotations.proto\"\x7f\n(Que\
    ryInterchainAccountFromAddressRequest\x12\x14\n\x05owner\x18\x01\x20\x01\
    (\tR\x05owner\x12=\n\rconnection_id\x18\x02\x20\x01(\tR\x0cconnectionIdB\
    \x18\xf2\xde\x1f\x14yaml:\"connection_id\"\"\x90\x01\n)QueryInterchainAc\
    countFromAddressResponse\x12c\n\x1ainterchain_account_address\x18\x01\
    \x20\x01(\tR\x18interchainAccountAddressB%\xf2\xde\x1f!yaml:\"interchain\
    _account_address\"2\xd4\x01\n\x05Query\x12\xca\x01\n\x1cInterchainAccoun\
    tFromAddress\x12@.secret.intertx.v1beta1.QueryInterchainAccountFromAddre\
    ssRequest\x1aA.secret.intertx.v1beta1.QueryInterchainAccountFromAddressR\
    esponse\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/mauth/v1beta1/address-to-icaB\
    :Z0github.com/enigmampc/SecretNetwork/x/mauth/types\xc8\xe1\x1e\0\xa8\
    \xe2\x1e\x01J\xf1\x06\n\x06\x12\x04\0\0\x1d\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1f\n\t\n\x02\x03\0\x12\x03\x05\0\
    \x1e\n\t\n\x02\x03\x01\x12\x03\x06\0&\n\x08\n\x01\x08\x12\x03\x08\0G\n\t\
    \n\x02\x08\x0b\x12\x03\x08\0G\n\x08\n\x01\x08\x12\x03\t\00\n\x0b\n\x04\
    \x08\x99\xec\x03\x12\x03\t\00\n\x08\n\x01\x08\x12\x03\n\0/\n\x0b\n\x04\
    \x08\xa5\xec\x03\x12\x03\n\0/\n5\n\x02\x06\0\x12\x04\r\0\x12\x01\x1a)\
    \x20Query\x20defines\x20the\x20gRPC\x20querier\x20service.\n\n\n\n\x03\
    \x06\0\x01\x12\x03\r\x08\r\n\x83\x01\n\x04\x06\0\x02\0\x12\x04\x0f\x02\
    \x11\x03\x1au\x20QueryInterchainAccountFromAddress\x20returns\x20the\x20\
    interchain\x20account\x20for\x20given\x20owner\x20address\x20on\x20a\x20\
    given\x20connection\x20pair\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0f\
    \x06\"\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0f#K\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x03\x0fV\x7f\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x10\x04C\n\x11\
    \n\n\x06\0\x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x10\x04C\nu\n\x02\x04\0\
    \x12\x04\x15\0\x18\x01\x1ai\x20QueryInterchainAccountFromAddressRequest\
    \x20is\x20the\x20request\x20type\x20for\x20the\x20Query/InterchainAccoun\
    tAddress\x20RPC\n\n\n\n\x03\x04\0\x01\x12\x03\x15\x080\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x16\x02(\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x16\x02\x08\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x16\t\x0e\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x16&'\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x17\x02Z\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x17\t\x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x17&'\n\x0c\n\
    \x05\x04\0\x02\x01\x08\x12\x03\x17(Y\n\x0f\n\x08\x04\0\x02\x01\x08\xee\
    \xfb\x03\x12\x03\x17)X\nt\n\x02\x04\x01\x12\x04\x1b\0\x1d\x01\x1ah\x20Qu\
    eryInterchainAccountFromAddressResponse\x20the\x20response\x20type\x20fo\
    r\x20the\x20Query/InterchainAccountAddress\x20RPC\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1b\x081\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1c\x02g\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x1c\t#\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1c&'\n\x0c\n\x05\
    \x04\x01\x02\0\x08\x12\x03\x1c(f\n\x0f\n\x08\x04\x01\x02\0\x08\xee\xfb\
    \x03\x12\x03\x1c)eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(QueryInterchainAccountFromAddressRequest::generated_message_descriptor_data());
            messages.push(QueryInterchainAccountFromAddressResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
