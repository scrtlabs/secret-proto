// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `secret/compute/v1beta1/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.AccessTypeParam)
pub struct AccessTypeParam {
    // message fields
    // @@protoc_insertion_point(field:secret.compute.v1beta1.AccessTypeParam.value)
    pub value: ::protobuf::EnumOrUnknown<AccessType>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.AccessTypeParam.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AccessTypeParam {
    fn default() -> &'a AccessTypeParam {
        <AccessTypeParam as ::protobuf::Message>::default_instance()
    }
}

impl AccessTypeParam {
    pub fn new() -> AccessTypeParam {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &AccessTypeParam| { &m.value },
            |m: &mut AccessTypeParam| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AccessTypeParam>(
            "AccessTypeParam",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AccessTypeParam {
    const NAME: &'static str = "AccessTypeParam";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value != ::protobuf::EnumOrUnknown::new(AccessType::UNDEFINED) {
            my_size += ::protobuf::rt::int32_size(1, self.value.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value != ::protobuf::EnumOrUnknown::new(AccessType::UNDEFINED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.value))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AccessTypeParam {
        AccessTypeParam::new()
    }

    fn clear(&mut self) {
        self.value = ::protobuf::EnumOrUnknown::new(AccessType::UNDEFINED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AccessTypeParam {
        static instance: AccessTypeParam = AccessTypeParam {
            value: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AccessTypeParam {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AccessTypeParam").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AccessTypeParam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccessTypeParam {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  CodeInfo is data for the uploaded contract WASM code
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.CodeInfo)
pub struct CodeInfo {
    // message fields
    // @@protoc_insertion_point(field:secret.compute.v1beta1.CodeInfo.code_hash)
    pub code_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.CodeInfo.creator)
    pub creator: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.CodeInfo.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.CodeInfo.builder)
    pub builder: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.CodeInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CodeInfo {
    fn default() -> &'a CodeInfo {
        <CodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl CodeInfo {
    pub fn new() -> CodeInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code_hash",
            |m: &CodeInfo| { &m.code_hash },
            |m: &mut CodeInfo| { &mut m.code_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator",
            |m: &CodeInfo| { &m.creator },
            |m: &mut CodeInfo| { &mut m.creator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &CodeInfo| { &m.source },
            |m: &mut CodeInfo| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "builder",
            |m: &CodeInfo| { &m.builder },
            |m: &mut CodeInfo| { &mut m.builder },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CodeInfo>(
            "CodeInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CodeInfo {
    const NAME: &'static str = "CodeInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.code_hash = is.read_bytes()?;
                },
                18 => {
                    self.creator = is.read_bytes()?;
                },
                26 => {
                    self.source = is.read_string()?;
                },
                34 => {
                    self.builder = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.code_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.code_hash);
        }
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.creator);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source);
        }
        if !self.builder.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.builder);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.code_hash.is_empty() {
            os.write_bytes(1, &self.code_hash)?;
        }
        if !self.creator.is_empty() {
            os.write_bytes(2, &self.creator)?;
        }
        if !self.source.is_empty() {
            os.write_string(3, &self.source)?;
        }
        if !self.builder.is_empty() {
            os.write_string(4, &self.builder)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CodeInfo {
        CodeInfo::new()
    }

    fn clear(&mut self) {
        self.code_hash.clear();
        self.creator.clear();
        self.source.clear();
        self.builder.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CodeInfo {
        static instance: CodeInfo = CodeInfo {
            code_hash: ::std::vec::Vec::new(),
            creator: ::std::vec::Vec::new(),
            source: ::std::string::String::new(),
            builder: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CodeInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CodeInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CodeInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.ContractCustomInfo)
pub struct ContractCustomInfo {
    // message fields
    // @@protoc_insertion_point(field:secret.compute.v1beta1.ContractCustomInfo.enclave_key)
    pub enclave_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.ContractCustomInfo.label)
    pub label: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.ContractCustomInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContractCustomInfo {
    fn default() -> &'a ContractCustomInfo {
        <ContractCustomInfo as ::protobuf::Message>::default_instance()
    }
}

impl ContractCustomInfo {
    pub fn new() -> ContractCustomInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enclave_key",
            |m: &ContractCustomInfo| { &m.enclave_key },
            |m: &mut ContractCustomInfo| { &mut m.enclave_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label",
            |m: &ContractCustomInfo| { &m.label },
            |m: &mut ContractCustomInfo| { &mut m.label },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContractCustomInfo>(
            "ContractCustomInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContractCustomInfo {
    const NAME: &'static str = "ContractCustomInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.enclave_key = is.read_bytes()?;
                },
                18 => {
                    self.label = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.enclave_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.enclave_key);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.enclave_key.is_empty() {
            os.write_bytes(1, &self.enclave_key)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContractCustomInfo {
        ContractCustomInfo::new()
    }

    fn clear(&mut self) {
        self.enclave_key.clear();
        self.label.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContractCustomInfo {
        static instance: ContractCustomInfo = ContractCustomInfo {
            enclave_key: ::std::vec::Vec::new(),
            label: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContractCustomInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContractCustomInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContractCustomInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractCustomInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ContractInfo stores a WASM contract instance
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.ContractInfo)
pub struct ContractInfo {
    // message fields
    // @@protoc_insertion_point(field:secret.compute.v1beta1.ContractInfo.code_id)
    pub code_id: u64,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.ContractInfo.creator)
    pub creator: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.ContractInfo.label)
    pub label: ::std::string::String,
    ///  never show this in query results, just use for sorting
    ///  (Note: when using json tag "-" amino refused to serialize it...)
    // @@protoc_insertion_point(field:secret.compute.v1beta1.ContractInfo.created)
    pub created: ::protobuf::MessageField<AbsoluteTxPosition>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.ContractInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContractInfo {
    fn default() -> &'a ContractInfo {
        <ContractInfo as ::protobuf::Message>::default_instance()
    }
}

impl ContractInfo {
    pub fn new() -> ContractInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code_id",
            |m: &ContractInfo| { &m.code_id },
            |m: &mut ContractInfo| { &mut m.code_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "creator",
            |m: &ContractInfo| { &m.creator },
            |m: &mut ContractInfo| { &mut m.creator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label",
            |m: &ContractInfo| { &m.label },
            |m: &mut ContractInfo| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AbsoluteTxPosition>(
            "created",
            |m: &ContractInfo| { &m.created },
            |m: &mut ContractInfo| { &mut m.created },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContractInfo>(
            "ContractInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContractInfo {
    const NAME: &'static str = "ContractInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code_id = is.read_uint64()?;
                },
                18 => {
                    self.creator = is.read_bytes()?;
                },
                34 => {
                    self.label = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.created)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.code_id);
        }
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.creator);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.label);
        }
        if let Some(v) = self.created.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code_id != 0 {
            os.write_uint64(1, self.code_id)?;
        }
        if !self.creator.is_empty() {
            os.write_bytes(2, &self.creator)?;
        }
        if !self.label.is_empty() {
            os.write_string(4, &self.label)?;
        }
        if let Some(v) = self.created.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContractInfo {
        ContractInfo::new()
    }

    fn clear(&mut self) {
        self.code_id = 0;
        self.creator.clear();
        self.label.clear();
        self.created.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContractInfo {
        static instance: ContractInfo = ContractInfo {
            code_id: 0,
            creator: ::std::vec::Vec::new(),
            label: ::std::string::String::new(),
            created: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContractInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContractInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContractInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  AbsoluteTxPosition can be used to sort contracts
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.AbsoluteTxPosition)
pub struct AbsoluteTxPosition {
    // message fields
    ///  BlockHeight is the block the contract was created at
    // @@protoc_insertion_point(field:secret.compute.v1beta1.AbsoluteTxPosition.block_height)
    pub block_height: i64,
    ///  TxIndex is a monotonic counter within the block (actual transaction index, or gas consumed)
    // @@protoc_insertion_point(field:secret.compute.v1beta1.AbsoluteTxPosition.tx_index)
    pub tx_index: u64,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.AbsoluteTxPosition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AbsoluteTxPosition {
    fn default() -> &'a AbsoluteTxPosition {
        <AbsoluteTxPosition as ::protobuf::Message>::default_instance()
    }
}

impl AbsoluteTxPosition {
    pub fn new() -> AbsoluteTxPosition {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_height",
            |m: &AbsoluteTxPosition| { &m.block_height },
            |m: &mut AbsoluteTxPosition| { &mut m.block_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_index",
            |m: &AbsoluteTxPosition| { &m.tx_index },
            |m: &mut AbsoluteTxPosition| { &mut m.tx_index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AbsoluteTxPosition>(
            "AbsoluteTxPosition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AbsoluteTxPosition {
    const NAME: &'static str = "AbsoluteTxPosition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.block_height = is.read_int64()?;
                },
                16 => {
                    self.tx_index = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.block_height != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.block_height);
        }
        if self.tx_index != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.tx_index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.block_height != 0 {
            os.write_int64(1, self.block_height)?;
        }
        if self.tx_index != 0 {
            os.write_uint64(2, self.tx_index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AbsoluteTxPosition {
        AbsoluteTxPosition::new()
    }

    fn clear(&mut self) {
        self.block_height = 0;
        self.tx_index = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AbsoluteTxPosition {
        static instance: AbsoluteTxPosition = AbsoluteTxPosition {
            block_height: 0,
            tx_index: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AbsoluteTxPosition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AbsoluteTxPosition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AbsoluteTxPosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AbsoluteTxPosition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Model is a struct that holds a KV pair
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.Model)
pub struct Model {
    // message fields
    ///  hex-encode key to read it better (this is often ascii)
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Model.Key)
    pub Key: ::std::vec::Vec<u8>,
    ///  base64-encode raw value
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Model.Value)
    pub Value: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.Model.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Model {
    fn default() -> &'a Model {
        <Model as ::protobuf::Message>::default_instance()
    }
}

impl Model {
    pub fn new() -> Model {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Key",
            |m: &Model| { &m.Key },
            |m: &mut Model| { &mut m.Key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Value",
            |m: &Model| { &m.Value },
            |m: &mut Model| { &mut m.Value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Model>(
            "Model",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Model {
    const NAME: &'static str = "Model";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Key = is.read_bytes()?;
                },
                18 => {
                    self.Value = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Key);
        }
        if !self.Value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Key.is_empty() {
            os.write_bytes(1, &self.Key)?;
        }
        if !self.Value.is_empty() {
            os.write_bytes(2, &self.Value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Model {
        Model::new()
    }

    fn clear(&mut self) {
        self.Key.clear();
        self.Value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Model {
        static instance: Model = Model {
            Key: ::std::vec::Vec::new(),
            Value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Model {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Model").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Model {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Model {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:secret.compute.v1beta1.AccessType)
pub enum AccessType {
    // @@protoc_insertion_point(enum_value:secret.compute.v1beta1.AccessType.UNDEFINED)
    UNDEFINED = 0,
    // @@protoc_insertion_point(enum_value:secret.compute.v1beta1.AccessType.NOBODY)
    NOBODY = 1,
    // @@protoc_insertion_point(enum_value:secret.compute.v1beta1.AccessType.ONLY_ADDRESS)
    ONLY_ADDRESS = 2,
    // @@protoc_insertion_point(enum_value:secret.compute.v1beta1.AccessType.EVERYBODY)
    EVERYBODY = 3,
}

impl ::protobuf::Enum for AccessType {
    const NAME: &'static str = "AccessType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AccessType> {
        match value {
            0 => ::std::option::Option::Some(AccessType::UNDEFINED),
            1 => ::std::option::Option::Some(AccessType::NOBODY),
            2 => ::std::option::Option::Some(AccessType::ONLY_ADDRESS),
            3 => ::std::option::Option::Some(AccessType::EVERYBODY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [AccessType] = &[
        AccessType::UNDEFINED,
        AccessType::NOBODY,
        AccessType::ONLY_ADDRESS,
        AccessType::EVERYBODY,
    ];
}

impl ::protobuf::EnumFull for AccessType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("AccessType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for AccessType {
    fn default() -> Self {
        AccessType::UNDEFINED
    }
}

impl AccessType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<AccessType>("AccessType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"secret/compute/v1beta1/types.proto\x12\x16secret.compute.v1beta1\x1a\
    \x14gogoproto/gogo.proto\"c\n\x0fAccessTypeParam\x12J\n\x05value\x18\x01\
    \x20\x01(\x0e2\".secret.compute.v1beta1.AccessTypeR\x05valueB\x10\xf2\
    \xde\x1f\x0cyaml:\"value\":\x04\x98\xa0\x1f\x01\"\xa6\x01\n\x08CodeInfo\
    \x12\x1b\n\tcode_hash\x18\x01\x20\x01(\x0cR\x08codeHash\x12K\n\x07creato\
    r\x18\x02\x20\x01(\x0cR\x07creatorB1\xfa\xde\x1f-github.com/cosmos/cosmo\
    s-sdk/types.AccAddress\x12\x16\n\x06source\x18\x03\x20\x01(\tR\x06source\
    \x12\x18\n\x07builder\x18\x04\x20\x01(\tR\x07builder\"[\n\x12ContractCus\
    tomInfo\x12/\n\x0benclave_key\x18\x01\x20\x01(\x0cR\nenclaveKeyB\x0e\xe2\
    \xde\x1f\nEnclaveKey\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\"\
    \xdc\x01\n\x0cContractInfo\x12#\n\x07code_id\x18\x01\x20\x01(\x04R\x06co\
    deIdB\n\xe2\xde\x1f\x06CodeID\x12K\n\x07creator\x18\x02\x20\x01(\x0cR\
    \x07creatorB1\xfa\xde\x1f-github.com/cosmos/cosmos-sdk/types.AccAddress\
    \x12\x14\n\x05label\x18\x04\x20\x01(\tR\x05label\x12D\n\x07created\x18\
    \x05\x20\x01(\x0b2*.secret.compute.v1beta1.AbsoluteTxPositionR\x07create\
    d\"R\n\x12AbsoluteTxPosition\x12!\n\x0cblock_height\x18\x01\x20\x01(\x03\
    R\x0bblockHeight\x12\x19\n\x08tx_index\x18\x02\x20\x01(\x04R\x07txIndex\
    \"i\n\x05Model\x12J\n\x03Key\x18\x01\x20\x01(\x0cR\x03KeyB8\xfa\xde\x1f4\
    github.com/tendermint/tendermint/libs/bytes.HexBytes\x12\x14\n\x05Value\
    \x18\x02\x20\x01(\x0cR\x05Value*\xb5\x01\n\nAccessType\x12&\n\tUNDEFINED\
    \x10\0\x1a\x17\x8a\x9d\x20\x13AccessTypeUndefined\x12\x20\n\x06NOBODY\
    \x10\x01\x1a\x14\x8a\x9d\x20\x10AccessTypeNobody\x12+\n\x0cONLY_ADDRESS\
    \x10\x02\x1a\x19\x8a\x9d\x20\x15AccessTypeOnlyAddress\x12&\n\tEVERYBODY\
    \x10\x03\x1a\x17\x8a\x9d\x20\x13AccessTypeEverybody\x1a\x08\xa8\xa4\x1e\
    \0\x88\xa3\x1e\0BEZ;github.com/enigmampc/SecretNetwork/x/compute/interna\
    l/types\xc8\xe1\x1e\0\xa8\xe2\x1e\x01J\xa5\x11\n\x06\x12\x04\0\0<\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1f\n\t\n\
    \x02\x03\0\x12\x03\x03\0\x1e\n\x08\n\x01\x08\x12\x03\x05\0R\n\t\n\x02\
    \x08\x0b\x12\x03\x05\0R\n\x08\n\x01\x08\x12\x03\x06\0/\n\x0b\n\x04\x08\
    \x99\xec\x03\x12\x03\x06\0/\n\x08\n\x01\x08\x12\x03\x07\0$\n\x0b\n\x04\
    \x08\xa5\xec\x03\x12\x03\x07\0$\n\n\n\x02\x05\0\x12\x04\t\0\x10\x01\n\n\
    \n\x03\x05\0\x01\x12\x03\t\x05\x0f\n\n\n\x03\x05\0\x03\x12\x03\n\x043\n\
    \r\n\x06\x05\0\x03\xb1\xe4\x03\x12\x03\n\x043\n\n\n\x03\x05\0\x03\x12\
    \x03\x0b\x045\n\r\n\x06\x05\0\x03\xc5\xe4\x03\x12\x03\x0b\x045\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03\x0c\x04M\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x0c\x04\r\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x0c\x10\x11\n\x0c\n\x05\
    \x05\0\x02\0\x03\x12\x03\x0c\x12L\n\x0f\n\x08\x05\0\x02\0\x03\xd1\x83\
    \x04\x12\x03\x0c\x13K\n\x0b\n\x04\x05\0\x02\x01\x12\x03\r\x04G\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\r\x04\n\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\r\r\x0e\n\x0c\n\x05\x05\0\x02\x01\x03\x12\x03\r\x0fF\n\x0f\n\x08\
    \x05\0\x02\x01\x03\xd1\x83\x04\x12\x03\r\x10E\n\x0b\n\x04\x05\0\x02\x02\
    \x12\x03\x0e\x04R\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0e\x04\x10\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x0e\x13\x14\n\x0c\n\x05\x05\0\x02\
    \x02\x03\x12\x03\x0e\x15Q\n\x0f\n\x08\x05\0\x02\x02\x03\xd1\x83\x04\x12\
    \x03\x0e\x16P\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0f\x04M\n\x0c\n\x05\x05\
    \0\x02\x03\x01\x12\x03\x0f\x04\r\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\
    \x0f\x10\x11\n\x0c\n\x05\x05\0\x02\x03\x03\x12\x03\x0f\x12L\n\x0f\n\x08\
    \x05\0\x02\x03\x03\xd1\x83\x04\x12\x03\x0f\x13K\n\n\n\x02\x04\0\x12\x04\
    \x12\0\x15\x01\n\n\n\x03\x04\0\x01\x12\x03\x12\x08\x17\n\n\n\x03\x04\0\
    \x07\x12\x03\x13\x04/\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\x03\x13\x04/\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x14\x04C\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\x14\x04\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x14\x0f\x14\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x14\x17\x18\n\x0c\n\x05\x04\0\x02\0\x08\x12\
    \x03\x14\x19B\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x14\x1aA\n\
    B\n\x02\x04\x01\x12\x04\x18\0\x1d\x01\x1a6\x20CodeInfo\x20is\x20data\x20\
    for\x20the\x20uploaded\x20contract\x20WASM\x20code\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x18\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x19\x04\x18\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x19\x04\t\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x19\n\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x19\x16\x17\
    \n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1a\x04_\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x1a\x04\t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1a\n\
    \x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1a\x14\x15\n\x0c\n\x05\x04\
    \x01\x02\x01\x08\x12\x03\x1a\x16^\n\x0f\n\x08\x04\x01\x02\x01\x08\xef\
    \xfb\x03\x12\x03\x1a\x17]\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1b\x04\
    \x16\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03\x1b\x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\x1b\x14\x15\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1c\x04\x17\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03\x1c\x0b\x12\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1c\x15\
    \x16\n\n\n\x02\x04\x02\x12\x04\x1f\0\"\x01\n\n\n\x03\x04\x02\x01\x12\x03\
    \x1f\x08\x1a\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x20\x04B\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\x20\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x20\n\x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x20\x18\x19\n\x0c\n\x05\
    \x04\x02\x02\0\x08\x12\x03\x20\x1aA\n\x0f\n\x08\x04\x02\x02\0\x08\xec\
    \xfb\x03\x12\x03\x20\x1b@\n\x0b\n\x04\x04\x02\x02\x01\x12\x03!\x04\x15\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03!\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03!\x0b\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03!\x13\
    \x14\n:\n\x02\x04\x03\x12\x04%\0,\x01\x1a.\x20ContractInfo\x20stores\x20\
    a\x20WASM\x20contract\x20instance\n\n\n\n\x03\x04\x03\x01\x12\x03%\x08\
    \x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03&\x04;\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03&\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03&\x0b\x12\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03&\x15\x16\n\x0c\n\x05\x04\x03\x02\0\x08\
    \x12\x03&\x17:\n\x0f\n\x08\x04\x03\x02\0\x08\xec\xfb\x03\x12\x03&\x189\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03'\x04_\n\x0c\n\x05\x04\x03\x02\x01\x05\
    \x12\x03'\x04\t\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03'\n\x11\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03'\x14\x15\n\x0c\n\x05\x04\x03\x02\x01\
    \x08\x12\x03'\x16^\n\x0f\n\x08\x04\x03\x02\x01\x08\xef\xfb\x03\x12\x03'\
    \x17]\n\x0b\n\x04\x04\x03\x02\x02\x12\x03(\x04\x15\n\x0c\n\x05\x04\x03\
    \x02\x02\x05\x12\x03(\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03(\x0b\
    \x10\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03(\x13\x14\n\x87\x01\n\x04\
    \x04\x03\x02\x03\x12\x03+\x04#\x1az\x20never\x20show\x20this\x20in\x20qu\
    ery\x20results,\x20just\x20use\x20for\x20sorting\n\x20(Note:\x20when\x20\
    using\x20json\x20tag\x20\"-\"\x20amino\x20refused\x20to\x20serialize\x20\
    it...)\n\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03+\x04\x16\n\x0c\n\x05\
    \x04\x03\x02\x03\x01\x12\x03+\x17\x1e\n\x0c\n\x05\x04\x03\x02\x03\x03\
    \x12\x03+!\"\n>\n\x02\x04\x04\x12\x04/\04\x01\x1a2\x20AbsoluteTxPosition\
    \x20can\x20be\x20used\x20to\x20sort\x20contracts\n\n\n\n\x03\x04\x04\x01\
    \x12\x03/\x08\x1a\nC\n\x04\x04\x04\x02\0\x12\x031\x04\x1b\x1a6\x20BlockH\
    eight\x20is\x20the\x20block\x20the\x20contract\x20was\x20created\x20at\n\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x031\x04\t\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x031\n\x16\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x031\x19\x1a\nj\n\
    \x04\x04\x04\x02\x01\x12\x033\x04\x18\x1a]\x20TxIndex\x20is\x20a\x20mono\
    tonic\x20counter\x20within\x20the\x20block\x20(actual\x20transaction\x20\
    index,\x20or\x20gas\x20consumed)\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\
    \x033\x04\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x033\x0b\x13\n\x0c\n\x05\
    \x04\x04\x02\x01\x03\x12\x033\x16\x17\n4\n\x02\x04\x05\x12\x047\0<\x01\
    \x1a(\x20Model\x20is\x20a\x20struct\x20that\x20holds\x20a\x20KV\x20pair\
    \n\n\n\n\x03\x04\x05\x01\x12\x037\x08\r\nE\n\x04\x04\x05\x02\0\x12\x039\
    \x04b\x1a8\x20hex-encode\x20key\x20to\x20read\x20it\x20better\x20(this\
    \x20is\x20often\x20ascii)\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x039\x04\t\
    \n\x0c\n\x05\x04\x05\x02\0\x01\x12\x039\n\r\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x039\x10\x11\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x039\x12a\n\x0f\
    \n\x08\x04\x05\x02\0\x08\xef\xfb\x03\x12\x039\x13`\n&\n\x04\x04\x05\x02\
    \x01\x12\x03;\x04\x14\x1a\x19\x20base64-encode\x20raw\x20value\n\n\x0c\n\
    \x05\x04\x05\x02\x01\x05\x12\x03;\x04\t\n\x0c\n\x05\x04\x05\x02\x01\x01\
    \x12\x03;\n\x0f\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03;\x12\x13b\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(AccessTypeParam::generated_message_descriptor_data());
            messages.push(CodeInfo::generated_message_descriptor_data());
            messages.push(ContractCustomInfo::generated_message_descriptor_data());
            messages.push(ContractInfo::generated_message_descriptor_data());
            messages.push(AbsoluteTxPosition::generated_message_descriptor_data());
            messages.push(Model::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(AccessType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
