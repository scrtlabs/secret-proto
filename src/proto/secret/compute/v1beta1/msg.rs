// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `secret/compute/v1beta1/msg.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.MsgStoreCode)
pub struct MsgStoreCode {
    // message fields
    ///  sender is the canonical address of the sender
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgStoreCode.sender)
    pub sender: ::std::vec::Vec<u8>,
    ///  WASMByteCode can be raw or gzip compressed
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgStoreCode.wasm_byte_code)
    pub wasm_byte_code: ::std::vec::Vec<u8>,
    ///  Source is a valid absolute HTTPS URI to the contract's source code, optional
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgStoreCode.source)
    pub source: ::std::string::String,
    ///  Builder is a valid docker image name with tag, optional
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgStoreCode.builder)
    pub builder: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.MsgStoreCode.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgStoreCode {
    fn default() -> &'a MsgStoreCode {
        <MsgStoreCode as ::protobuf::Message>::default_instance()
    }
}

impl MsgStoreCode {
    pub fn new() -> MsgStoreCode {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &MsgStoreCode| { &m.sender },
            |m: &mut MsgStoreCode| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wasm_byte_code",
            |m: &MsgStoreCode| { &m.wasm_byte_code },
            |m: &mut MsgStoreCode| { &mut m.wasm_byte_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &MsgStoreCode| { &m.source },
            |m: &mut MsgStoreCode| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "builder",
            |m: &MsgStoreCode| { &m.builder },
            |m: &mut MsgStoreCode| { &mut m.builder },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgStoreCode>(
            "MsgStoreCode",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgStoreCode {
    const NAME: &'static str = "MsgStoreCode";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sender = is.read_bytes()?;
                },
                18 => {
                    self.wasm_byte_code = is.read_bytes()?;
                },
                26 => {
                    self.source = is.read_string()?;
                },
                34 => {
                    self.builder = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sender);
        }
        if !self.wasm_byte_code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.wasm_byte_code);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source);
        }
        if !self.builder.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.builder);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.sender.is_empty() {
            os.write_bytes(1, &self.sender)?;
        }
        if !self.wasm_byte_code.is_empty() {
            os.write_bytes(2, &self.wasm_byte_code)?;
        }
        if !self.source.is_empty() {
            os.write_string(3, &self.source)?;
        }
        if !self.builder.is_empty() {
            os.write_string(4, &self.builder)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgStoreCode {
        MsgStoreCode::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.wasm_byte_code.clear();
        self.source.clear();
        self.builder.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgStoreCode {
        static instance: MsgStoreCode = MsgStoreCode {
            sender: ::std::vec::Vec::new(),
            wasm_byte_code: ::std::vec::Vec::new(),
            source: ::std::string::String::new(),
            builder: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgStoreCode {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgStoreCode").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgStoreCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgStoreCode {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.MsgInstantiateContract)
pub struct MsgInstantiateContract {
    // message fields
    ///  sender is the canonical address of the sender
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgInstantiateContract.sender)
    pub sender: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgInstantiateContract.callback_code_hash)
    pub callback_code_hash: ::std::string::String,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgInstantiateContract.code_id)
    pub code_id: u64,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgInstantiateContract.label)
    pub label: ::std::string::String,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgInstantiateContract.init_msg)
    pub init_msg: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgInstantiateContract.init_funds)
    pub init_funds: ::std::vec::Vec<super::coin::Coin>,
    ///  used internally for encryption, should always be empty in a signed transaction
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgInstantiateContract.callback_sig)
    pub callback_sig: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.MsgInstantiateContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgInstantiateContract {
    fn default() -> &'a MsgInstantiateContract {
        <MsgInstantiateContract as ::protobuf::Message>::default_instance()
    }
}

impl MsgInstantiateContract {
    pub fn new() -> MsgInstantiateContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &MsgInstantiateContract| { &m.sender },
            |m: &mut MsgInstantiateContract| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "callback_code_hash",
            |m: &MsgInstantiateContract| { &m.callback_code_hash },
            |m: &mut MsgInstantiateContract| { &mut m.callback_code_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code_id",
            |m: &MsgInstantiateContract| { &m.code_id },
            |m: &mut MsgInstantiateContract| { &mut m.code_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label",
            |m: &MsgInstantiateContract| { &m.label },
            |m: &mut MsgInstantiateContract| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "init_msg",
            |m: &MsgInstantiateContract| { &m.init_msg },
            |m: &mut MsgInstantiateContract| { &mut m.init_msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "init_funds",
            |m: &MsgInstantiateContract| { &m.init_funds },
            |m: &mut MsgInstantiateContract| { &mut m.init_funds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "callback_sig",
            |m: &MsgInstantiateContract| { &m.callback_sig },
            |m: &mut MsgInstantiateContract| { &mut m.callback_sig },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgInstantiateContract>(
            "MsgInstantiateContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgInstantiateContract {
    const NAME: &'static str = "MsgInstantiateContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sender = is.read_bytes()?;
                },
                18 => {
                    self.callback_code_hash = is.read_string()?;
                },
                24 => {
                    self.code_id = is.read_uint64()?;
                },
                34 => {
                    self.label = is.read_string()?;
                },
                42 => {
                    self.init_msg = is.read_bytes()?;
                },
                50 => {
                    self.init_funds.push(is.read_message()?);
                },
                58 => {
                    self.callback_sig = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sender);
        }
        if !self.callback_code_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.callback_code_hash);
        }
        if self.code_id != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.code_id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.label);
        }
        if !self.init_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.init_msg);
        }
        for value in &self.init_funds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.callback_sig.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.callback_sig);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.sender.is_empty() {
            os.write_bytes(1, &self.sender)?;
        }
        if !self.callback_code_hash.is_empty() {
            os.write_string(2, &self.callback_code_hash)?;
        }
        if self.code_id != 0 {
            os.write_uint64(3, self.code_id)?;
        }
        if !self.label.is_empty() {
            os.write_string(4, &self.label)?;
        }
        if !self.init_msg.is_empty() {
            os.write_bytes(5, &self.init_msg)?;
        }
        for v in &self.init_funds {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if !self.callback_sig.is_empty() {
            os.write_bytes(7, &self.callback_sig)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgInstantiateContract {
        MsgInstantiateContract::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.callback_code_hash.clear();
        self.code_id = 0;
        self.label.clear();
        self.init_msg.clear();
        self.init_funds.clear();
        self.callback_sig.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgInstantiateContract {
        static instance: MsgInstantiateContract = MsgInstantiateContract {
            sender: ::std::vec::Vec::new(),
            callback_code_hash: ::std::string::String::new(),
            code_id: 0,
            label: ::std::string::String::new(),
            init_msg: ::std::vec::Vec::new(),
            init_funds: ::std::vec::Vec::new(),
            callback_sig: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgInstantiateContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgInstantiateContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgInstantiateContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgInstantiateContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.MsgExecuteContract)
pub struct MsgExecuteContract {
    // message fields
    ///  sender is the canonical address of the sender
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgExecuteContract.sender)
    pub sender: ::std::vec::Vec<u8>,
    ///  contract is the canonical address of the contract
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgExecuteContract.contract)
    pub contract: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgExecuteContract.msg)
    pub msg: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgExecuteContract.callback_code_hash)
    pub callback_code_hash: ::std::string::String,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgExecuteContract.sent_funds)
    pub sent_funds: ::std::vec::Vec<super::coin::Coin>,
    ///  used internally for encryption, should always be empty in a signed transaction
    // @@protoc_insertion_point(field:secret.compute.v1beta1.MsgExecuteContract.callback_sig)
    pub callback_sig: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.MsgExecuteContract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgExecuteContract {
    fn default() -> &'a MsgExecuteContract {
        <MsgExecuteContract as ::protobuf::Message>::default_instance()
    }
}

impl MsgExecuteContract {
    pub fn new() -> MsgExecuteContract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &MsgExecuteContract| { &m.sender },
            |m: &mut MsgExecuteContract| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "contract",
            |m: &MsgExecuteContract| { &m.contract },
            |m: &mut MsgExecuteContract| { &mut m.contract },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &MsgExecuteContract| { &m.msg },
            |m: &mut MsgExecuteContract| { &mut m.msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "callback_code_hash",
            |m: &MsgExecuteContract| { &m.callback_code_hash },
            |m: &mut MsgExecuteContract| { &mut m.callback_code_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sent_funds",
            |m: &MsgExecuteContract| { &m.sent_funds },
            |m: &mut MsgExecuteContract| { &mut m.sent_funds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "callback_sig",
            |m: &MsgExecuteContract| { &m.callback_sig },
            |m: &mut MsgExecuteContract| { &mut m.callback_sig },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgExecuteContract>(
            "MsgExecuteContract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgExecuteContract {
    const NAME: &'static str = "MsgExecuteContract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sender = is.read_bytes()?;
                },
                18 => {
                    self.contract = is.read_bytes()?;
                },
                26 => {
                    self.msg = is.read_bytes()?;
                },
                34 => {
                    self.callback_code_hash = is.read_string()?;
                },
                42 => {
                    self.sent_funds.push(is.read_message()?);
                },
                50 => {
                    self.callback_sig = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sender);
        }
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.contract);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.msg);
        }
        if !self.callback_code_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.callback_code_hash);
        }
        for value in &self.sent_funds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.callback_sig.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.callback_sig);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.sender.is_empty() {
            os.write_bytes(1, &self.sender)?;
        }
        if !self.contract.is_empty() {
            os.write_bytes(2, &self.contract)?;
        }
        if !self.msg.is_empty() {
            os.write_bytes(3, &self.msg)?;
        }
        if !self.callback_code_hash.is_empty() {
            os.write_string(4, &self.callback_code_hash)?;
        }
        for v in &self.sent_funds {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if !self.callback_sig.is_empty() {
            os.write_bytes(6, &self.callback_sig)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgExecuteContract {
        MsgExecuteContract::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.contract.clear();
        self.msg.clear();
        self.callback_code_hash.clear();
        self.sent_funds.clear();
        self.callback_sig.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgExecuteContract {
        static instance: MsgExecuteContract = MsgExecuteContract {
            sender: ::std::vec::Vec::new(),
            contract: ::std::vec::Vec::new(),
            msg: ::std::vec::Vec::new(),
            callback_code_hash: ::std::string::String::new(),
            sent_funds: ::std::vec::Vec::new(),
            callback_sig: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgExecuteContract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgExecuteContract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgExecuteContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgExecuteContract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20secret/compute/v1beta1/msg.proto\x12\x16secret.compute.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\xc9\x01\
    \n\x0cMsgStoreCode\x12I\n\x06sender\x18\x01\x20\x01(\x0cR\x06senderB1\
    \xfa\xde\x1f-github.com/cosmos/cosmos-sdk/types.AccAddress\x126\n\x0ewas\
    m_byte_code\x18\x02\x20\x01(\x0cR\x0cwasmByteCodeB\x10\xe2\xde\x1f\x0cWA\
    SMByteCode\x12\x16\n\x06source\x18\x03\x20\x01(\tR\x06source\x12\x18\n\
    \x07builder\x18\x04\x20\x01(\tR\x07builder:\x04\x88\xa0\x1f\0\"\x8d\x03\
    \n\x16MsgInstantiateContract\x12I\n\x06sender\x18\x01\x20\x01(\x0cR\x06s\
    enderB1\xfa\xde\x1f-github.com/cosmos/cosmos-sdk/types.AccAddress\x12,\n\
    \x12callback_code_hash\x18\x02\x20\x01(\tR\x10callbackCodeHash\x12#\n\
    \x07code_id\x18\x03\x20\x01(\x04R\x06codeIdB\n\xe2\xde\x1f\x06CodeID\x12\
    \x14\n\x05label\x18\x04\x20\x01(\tR\x05label\x12\x19\n\x08init_msg\x18\
    \x05\x20\x01(\x0cR\x07initMsg\x12j\n\ninit_funds\x18\x06\x20\x03(\x0b2\
    \x19.cosmos.base.v1beta1.CoinR\tinitFundsB0\xaa\xdf\x1f(github.com/cosmo\
    s/cosmos-sdk/types.Coins\xc8\xde\x1f\0\x122\n\x0ccallback_sig\x18\x07\
    \x20\x01(\x0cR\x0bcallbackSigB\x0f\xe2\xde\x1f\x0bCallbackSig:\x04\x88\
    \xa0\x1f\0\"\x94\x03\n\x12MsgExecuteContract\x12I\n\x06sender\x18\x01\
    \x20\x01(\x0cR\x06senderB1\xfa\xde\x1f-github.com/cosmos/cosmos-sdk/type\
    s.AccAddress\x12M\n\x08contract\x18\x02\x20\x01(\x0cR\x08contractB1\xfa\
    \xde\x1f-github.com/cosmos/cosmos-sdk/types.AccAddress\x12\x10\n\x03msg\
    \x18\x03\x20\x01(\x0cR\x03msg\x12,\n\x12callback_code_hash\x18\x04\x20\
    \x01(\tR\x10callbackCodeHash\x12j\n\nsent_funds\x18\x05\x20\x03(\x0b2\
    \x19.cosmos.base.v1beta1.CoinR\tsentFundsB0\xaa\xdf\x1f(github.com/cosmo\
    s/cosmos-sdk/types.Coins\xc8\xde\x1f\0\x122\n\x0ccallback_sig\x18\x06\
    \x20\x01(\x0cR\x0bcallbackSigB\x0f\xe2\xde\x1f\x0bCallbackSig:\x04\x88\
    \xa0\x1f\0B=Z;github.com/enigmampc/SecretNetwork/x/compute/internal/type\
    sJ\xd7\x10\n\x06\x12\x04\0\01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x01\0\x1f\n\x08\n\x01\x08\x12\x03\x03\0R\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0R\n\t\n\x02\x03\0\x12\x03\x05\0\x1e\n\t\n\x02\x03\
    \x01\x12\x03\x06\0(\n;\n\x02\x04\0\x12\x04\x0b\0\x15\x012/import\x20\"x/\
    compute/internal/types/types.proto\";\n\n\n\n\x03\x04\0\x01\x12\x03\x0b\
    \x08\x14\n\n\n\x03\x04\0\x07\x12\x03\x0c\x02-\n\r\n\x06\x04\0\x07\x81\
    \xf4\x03\x12\x03\x0c\x02-\n<\n\x04\x04\0\x02\0\x12\x03\x0e\x02\\\x1a/\
    \x20sender\x20is\x20the\x20canonical\x20address\x20of\x20the\x20sender\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\x02\x07\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0e\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x11\x12\
    \n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0e\x13[\n\x0f\n\x08\x04\0\x02\0\
    \x08\xef\xfb\x03\x12\x03\x0e\x14Z\n9\n\x04\x04\0\x02\x01\x12\x03\x10\x02\
    E\x1a,\x20WASMByteCode\x20can\x20be\x20raw\x20or\x20gzip\x20compressed\n\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x10\x08\x16\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10\
    \x19\x1a\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x10\x1bD\n\x0f\n\x08\x04\
    \0\x02\x01\x08\xec\xfb\x03\x12\x03\x10\x1cC\n[\n\x04\x04\0\x02\x02\x12\
    \x03\x12\x02\x14\x1aN\x20Source\x20is\x20a\x20valid\x20absolute\x20HTTPS\
    \x20URI\x20to\x20the\x20contract's\x20source\x20code,\x20optional\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x12\t\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x12\x12\
    \x13\nF\n\x04\x04\0\x02\x03\x12\x03\x14\x02\x15\x1a9\x20Builder\x20is\
    \x20a\x20valid\x20docker\x20image\x20name\x20with\x20tag,\x20optional\n\
    \n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x14\t\x10\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x14\x13\
    \x14\n\n\n\x02\x04\x01\x12\x04\x17\0#\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \x17\x08\x1e\n\n\n\x03\x04\x01\x07\x12\x03\x18\x02-\n\r\n\x06\x04\x01\
    \x07\x81\xf4\x03\x12\x03\x18\x02-\n<\n\x04\x04\x01\x02\0\x12\x03\x1b\x02\
    \\\x1a/\x20sender\x20is\x20the\x20canonical\x20address\x20of\x20the\x20s\
    ender\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1b\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x1b\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x1b\x11\x12\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x1b\x13[\n\x0f\n\
    \x08\x04\x01\x02\0\x08\xef\xfb\x03\x12\x03\x1b\x14Z\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x1c\x02\x20\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1c\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1c\t\x1b\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x1c\x1e\x1f\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x1d\x029\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1d\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\x1d\t\x10\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\x1d\x13\x14\n\x0c\n\x05\x04\x01\x02\x02\x08\x12\x03\x1d\x15\
    8\n\x0f\n\x08\x04\x01\x02\x02\x08\xec\xfb\x03\x12\x03\x1d\x167\n\x0b\n\
    \x04\x04\x01\x02\x03\x12\x03\x1e\x02\x13\n\x0c\n\x05\x04\x01\x02\x03\x05\
    \x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1e\t\x0e\n\
    \x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1e\x11\x12\n\x0b\n\x04\x04\x01\
    \x02\x04\x12\x03\x1f\x02\x15\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x1f\
    \x02\x07\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x1f\x08\x10\n\x0c\n\x05\
    \x04\x01\x02\x04\x03\x12\x03\x1f\x13\x14\n\x0c\n\x04\x04\x01\x02\x05\x12\
    \x04\x20\x02\x99\x01\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03\x20\x02\n\n\
    \x0c\n\x05\x04\x01\x02\x05\x06\x12\x03\x20\x0b#\n\x0c\n\x05\x04\x01\x02\
    \x05\x01\x12\x03\x20$.\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x2012\n\r\
    \n\x05\x04\x01\x02\x05\x08\x12\x04\x203\x98\x01\n\x0f\n\x08\x04\x01\x02\
    \x05\x08\xe9\xfb\x03\x12\x03\x204P\n\x10\n\x08\x04\x01\x02\x05\x08\xf5\
    \xfb\x03\x12\x04\x20R\x97\x01\n]\n\x04\x04\x01\x02\x06\x12\x03\"\x02B\
    \x1aP\x20used\x20internally\x20for\x20encryption,\x20should\x20always\
    \x20be\x20empty\x20in\x20a\x20signed\x20transaction\n\n\x0c\n\x05\x04\
    \x01\x02\x06\x05\x12\x03\"\x02\x07\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\
    \x03\"\x08\x14\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\"\x17\x18\n\x0c\n\
    \x05\x04\x01\x02\x06\x08\x12\x03\"\x19A\n\x0f\n\x08\x04\x01\x02\x06\x08\
    \xec\xfb\x03\x12\x03\"\x1a@\n\n\n\x02\x04\x02\x12\x04%\01\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03%\x08\x1a\n\n\n\x03\x04\x02\x07\x12\x03&\x02-\n\r\n\
    \x06\x04\x02\x07\x81\xf4\x03\x12\x03&\x02-\n<\n\x04\x04\x02\x02\0\x12\
    \x03)\x02\\\x1a/\x20sender\x20is\x20the\x20canonical\x20address\x20of\
    \x20the\x20sender\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03)\x02\x07\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03)\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03)\x11\x12\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03)\x13[\n\x0f\n\
    \x08\x04\x02\x02\0\x08\xef\xfb\x03\x12\x03)\x14Z\n@\n\x04\x04\x02\x02\
    \x01\x12\x03+\x02^\x1a3\x20contract\x20is\x20the\x20canonical\x20address\
    \x20of\x20the\x20contract\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03+\x02\
    \x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03+\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03+\x13\x14\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\
    \x03+\x15]\n\x0f\n\x08\x04\x02\x02\x01\x08\xef\xfb\x03\x12\x03+\x16\\\n\
    \x0b\n\x04\x04\x02\x02\x02\x12\x03,\x02\x10\n\x0c\n\x05\x04\x02\x02\x02\
    \x05\x12\x03,\x02\x07\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03,\x08\x0b\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03,\x0e\x0f\n\x0b\n\x04\x04\x02\x02\
    \x03\x12\x03-\x02\x20\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03-\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x03\x01\x12\x03-\t\x1b\n\x0c\n\x05\x04\x02\x02\
    \x03\x03\x12\x03-\x1e\x1f\n\x0c\n\x04\x04\x02\x02\x04\x12\x04.\x02\x99\
    \x01\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03.\x02\n\n\x0c\n\x05\x04\x02\
    \x02\x04\x06\x12\x03.\x0b#\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03.$.\n\
    \x0c\n\x05\x04\x02\x02\x04\x03\x12\x03.12\n\r\n\x05\x04\x02\x02\x04\x08\
    \x12\x04.3\x98\x01\n\x0f\n\x08\x04\x02\x02\x04\x08\xe9\xfb\x03\x12\x03.4\
    P\n\x10\n\x08\x04\x02\x02\x04\x08\xf5\xfb\x03\x12\x04.R\x97\x01\n]\n\x04\
    \x04\x02\x02\x05\x12\x030\x02B\x1aP\x20used\x20internally\x20for\x20encr\
    yption,\x20should\x20always\x20be\x20empty\x20in\x20a\x20signed\x20trans\
    action\n\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x030\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\x05\x01\x12\x030\x08\x14\n\x0c\n\x05\x04\x02\x02\x05\x03\
    \x12\x030\x17\x18\n\x0c\n\x05\x04\x02\x02\x05\x08\x12\x030\x19A\n\x0f\n\
    \x08\x04\x02\x02\x05\x08\xec\xfb\x03\x12\x030\x1a@b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::coin::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(MsgStoreCode::generated_message_descriptor_data());
            messages.push(MsgInstantiateContract::generated_message_descriptor_data());
            messages.push(MsgExecuteContract::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
