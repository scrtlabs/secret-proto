// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `secret/compute/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  GenesisState - genesis state of x/wasm
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.GenesisState)
pub struct GenesisState {
    // message fields
    // @@protoc_insertion_point(field:secret.compute.v1beta1.GenesisState.codes)
    pub codes: ::std::vec::Vec<Code>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.GenesisState.contracts)
    pub contracts: ::std::vec::Vec<Contract>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.GenesisState.sequences)
    pub sequences: ::std::vec::Vec<Sequence>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.GenesisState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "codes",
            |m: &GenesisState| { &m.codes },
            |m: &mut GenesisState| { &mut m.codes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "contracts",
            |m: &GenesisState| { &m.contracts },
            |m: &mut GenesisState| { &mut m.contracts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sequences",
            |m: &GenesisState| { &m.sequences },
            |m: &mut GenesisState| { &mut m.sequences },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenesisState>(
            "GenesisState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenesisState {
    const NAME: &'static str = "GenesisState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.codes.push(is.read_message()?);
                },
                26 => {
                    self.contracts.push(is.read_message()?);
                },
                34 => {
                    self.sequences.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.codes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.contracts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.sequences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.codes {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.contracts {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.sequences {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn clear(&mut self) {
        self.codes.clear();
        self.contracts.clear();
        self.sequences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenesisState {
        static instance: GenesisState = GenesisState {
            codes: ::std::vec::Vec::new(),
            contracts: ::std::vec::Vec::new(),
            sequences: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenesisState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenesisState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Code struct encompasses CodeInfo and CodeBytes
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.Code)
pub struct Code {
    // message fields
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Code.code_id)
    pub code_id: u64,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Code.code_info)
    pub code_info: ::protobuf::MessageField<super::types::CodeInfo>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Code.code_bytes)
    pub code_bytes: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.Code.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Code {
    fn default() -> &'a Code {
        <Code as ::protobuf::Message>::default_instance()
    }
}

impl Code {
    pub fn new() -> Code {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code_id",
            |m: &Code| { &m.code_id },
            |m: &mut Code| { &mut m.code_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::CodeInfo>(
            "code_info",
            |m: &Code| { &m.code_info },
            |m: &mut Code| { &mut m.code_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code_bytes",
            |m: &Code| { &m.code_bytes },
            |m: &mut Code| { &mut m.code_bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Code>(
            "Code",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Code {
    const NAME: &'static str = "Code";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code_id = is.read_uint64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.code_info)?;
                },
                26 => {
                    self.code_bytes = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.code_id);
        }
        if let Some(v) = self.code_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.code_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.code_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code_id != 0 {
            os.write_uint64(1, self.code_id)?;
        }
        if let Some(v) = self.code_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.code_bytes.is_empty() {
            os.write_bytes(3, &self.code_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Code {
        Code::new()
    }

    fn clear(&mut self) {
        self.code_id = 0;
        self.code_info.clear();
        self.code_bytes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Code {
        static instance: Code = Code {
            code_id: 0,
            code_info: ::protobuf::MessageField::none(),
            code_bytes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Code {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Code").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Code {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Code {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Contract struct encompasses ContractAddress, ContractInfo, and ContractState
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.Contract)
pub struct Contract {
    // message fields
    ///  contract_address is the canonical address of the contract
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Contract.contract_address)
    pub contract_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Contract.contract_info)
    pub contract_info: ::protobuf::MessageField<super::types::ContractInfo>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Contract.contract_state)
    pub contract_state: ::std::vec::Vec<super::types::Model>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Contract.contract_custom_info)
    pub contract_custom_info: ::protobuf::MessageField<super::types::ContractCustomInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.Contract.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Contract {
    fn default() -> &'a Contract {
        <Contract as ::protobuf::Message>::default_instance()
    }
}

impl Contract {
    pub fn new() -> Contract {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "contract_address",
            |m: &Contract| { &m.contract_address },
            |m: &mut Contract| { &mut m.contract_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::ContractInfo>(
            "contract_info",
            |m: &Contract| { &m.contract_info },
            |m: &mut Contract| { &mut m.contract_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "contract_state",
            |m: &Contract| { &m.contract_state },
            |m: &mut Contract| { &mut m.contract_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::ContractCustomInfo>(
            "contract_custom_info",
            |m: &Contract| { &m.contract_custom_info },
            |m: &mut Contract| { &mut m.contract_custom_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Contract>(
            "Contract",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Contract {
    const NAME: &'static str = "Contract";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.contract_address = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contract_info)?;
                },
                26 => {
                    self.contract_state.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contract_custom_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.contract_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.contract_address);
        }
        if let Some(v) = self.contract_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.contract_state {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.contract_custom_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.contract_address.is_empty() {
            os.write_bytes(1, &self.contract_address)?;
        }
        if let Some(v) = self.contract_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.contract_state {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.contract_custom_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Contract {
        Contract::new()
    }

    fn clear(&mut self) {
        self.contract_address.clear();
        self.contract_info.clear();
        self.contract_state.clear();
        self.contract_custom_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Contract {
        static instance: Contract = Contract {
            contract_address: ::std::vec::Vec::new(),
            contract_info: ::protobuf::MessageField::none(),
            contract_state: ::std::vec::Vec::new(),
            contract_custom_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Contract {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Contract").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Contract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Contract {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Sequence id and value of a counter
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.compute.v1beta1.Sequence)
pub struct Sequence {
    // message fields
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Sequence.id_key)
    pub id_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.compute.v1beta1.Sequence.value)
    pub value: u64,
    // special fields
    // @@protoc_insertion_point(special_field:secret.compute.v1beta1.Sequence.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sequence {
    fn default() -> &'a Sequence {
        <Sequence as ::protobuf::Message>::default_instance()
    }
}

impl Sequence {
    pub fn new() -> Sequence {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id_key",
            |m: &Sequence| { &m.id_key },
            |m: &mut Sequence| { &mut m.id_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Sequence| { &m.value },
            |m: &mut Sequence| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sequence>(
            "Sequence",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sequence {
    const NAME: &'static str = "Sequence";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id_key = is.read_bytes()?;
                },
                16 => {
                    self.value = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id_key);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id_key.is_empty() {
            os.write_bytes(1, &self.id_key)?;
        }
        if self.value != 0 {
            os.write_uint64(2, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sequence {
        Sequence::new()
    }

    fn clear(&mut self) {
        self.id_key.clear();
        self.value = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sequence {
        static instance: Sequence = Sequence {
            id_key: ::std::vec::Vec::new(),
            value: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sequence {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sequence").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sequence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sequence {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$secret/compute/v1beta1/genesis.proto\x12\x16secret.compute.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\"secret/compute/v1beta1/types.proto\"\
    \x95\x02\n\x0cGenesisState\x12K\n\x05codes\x18\x02\x20\x03(\x0b2\x1c.sec\
    ret.compute.v1beta1.CodeR\x05codesB\x17\xc8\xde\x1f\0\xea\xde\x1f\x0fcod\
    es,omitempty\x12[\n\tcontracts\x18\x03\x20\x03(\x0b2\x20.secret.compute.\
    v1beta1.ContractR\tcontractsB\x1b\xc8\xde\x1f\0\xea\xde\x1f\x13contracts\
    ,omitempty\x12[\n\tsequences\x18\x04\x20\x03(\x0b2\x20.secret.compute.v1\
    beta1.SequenceR\tsequencesB\x1b\xc8\xde\x1f\0\xea\xde\x1f\x13sequences,o\
    mitempty\"\x8f\x01\n\x04Code\x12#\n\x07code_id\x18\x01\x20\x01(\x04R\x06\
    codeIdB\n\xe2\xde\x1f\x06CodeID\x12C\n\tcode_info\x18\x02\x20\x01(\x0b2\
    \x20.secret.compute.v1beta1.CodeInfoR\x08codeInfoB\x04\xc8\xde\x1f\0\x12\
    \x1d\n\ncode_bytes\x18\x03\x20\x01(\x0cR\tcodeBytes\"\xe3\x02\n\x08Contr\
    act\x12\\\n\x10contract_address\x18\x01\x20\x01(\x0cR\x0fcontractAddress\
    B1\xfa\xde\x1f-github.com/cosmos/cosmos-sdk/types.AccAddress\x12O\n\rcon\
    tract_info\x18\x02\x20\x01(\x0b2$.secret.compute.v1beta1.ContractInfoR\
    \x0ccontractInfoB\x04\xc8\xde\x1f\0\x12J\n\x0econtract_state\x18\x03\x20\
    \x03(\x0b2\x1d.secret.compute.v1beta1.ModelR\rcontractStateB\x04\xc8\xde\
    \x1f\0\x12\\\n\x14contract_custom_info\x18\x04\x20\x01(\x0b2*.secret.com\
    pute.v1beta1.ContractCustomInfoR\x12contractCustomInfo\"B\n\x08Sequence\
    \x12\x20\n\x06id_key\x18\x01\x20\x01(\x0cR\x05idKeyB\t\xe2\xde\x1f\x05ID\
    Key\x12\x14\n\x05value\x18\x02\x20\x01(\x04R\x05valueB=Z;github.com/enig\
    mampc/SecretNetwork/x/compute/internal/typesJ\x84\x0c\n\x06\x12\x04\0\0$\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1f\n\
    \t\n\x02\x03\0\x12\x03\x03\0\x1e\n\t\n\x02\x03\x01\x12\x03\x04\0,\n\x08\
    \n\x01\x08\x12\x03\x06\0R\n\t\n\x02\x08\x0b\x12\x03\x06\0R\n4\n\x02\x04\
    \0\x12\x04\t\0\x0e\x01\x1a(\x20GenesisState\x20-\x20genesis\x20state\x20\
    of\x20x/wasm\n\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x14\nC\n\x04\x04\0\x02\
    \0\x12\x03\x0b\x04d\x1a6\x20\x20\x20\x20Params\x20params\x20=\x201\x20[(\
    gogoproto.nullable)\x20=\x20false];\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03\x0b\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0b\r\x11\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x0b\x12\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0b\x1a\x1b\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0b\x1cc\n\x0f\n\
    \x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\x0b\x1d9\n\x0f\n\x08\x04\0\x02\
    \0\x08\xed\xfb\x03\x12\x03\x0b;b\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\
    \x04p\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0c\x04\x0c\n\x0c\n\x05\x04\
    \0\x02\x01\x06\x12\x03\x0c\r\x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x0c\x16\x1f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\"#\n\x0c\n\x05\
    \x04\0\x02\x01\x08\x12\x03\x0c$o\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\
    \x03\x12\x03\x0c%A\n\x0f\n\x08\x04\0\x02\x01\x08\xed\xfb\x03\x12\x03\x0c\
    Cn\n\x0b\n\x04\x04\0\x02\x02\x12\x03\r\x04p\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03\r\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\r\r\x15\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\r\x16\x1f\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\r\"#\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\r$o\n\x0f\n\x08\
    \x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\r%A\n\x0f\n\x08\x04\0\x02\x02\x08\
    \xed\xfb\x03\x12\x03\rCn\n<\n\x02\x04\x01\x12\x04\x11\0\x15\x01\x1a0\x20\
    Code\x20struct\x20encompasses\x20CodeInfo\x20and\x20CodeBytes\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\x11\x08\x0c\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x12\x04;\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x12\x04\n\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x12\x0b\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x12\x15\x16\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x12\x17:\n\x0f\n\
    \x08\x04\x01\x02\0\x08\xec\xfb\x03\x12\x03\x12\x189\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x13\x04:\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x13\
    \x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x13\r\x16\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x13\x19\x1a\n\x0c\n\x05\x04\x01\x02\x01\x08\
    \x12\x03\x13\x1b9\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\x03\x12\x03\
    \x13\x1c8\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x14\x04\x19\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x14\x04\t\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x14\n\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x14\x17\x18\n\
    Z\n\x02\x04\x02\x12\x04\x18\0\x1e\x01\x1aN\x20Contract\x20struct\x20enco\
    mpasses\x20ContractAddress,\x20ContractInfo,\x20and\x20ContractState\n\n\
    \n\n\x03\x04\x02\x01\x12\x03\x18\x08\x10\nH\n\x04\x04\x02\x02\0\x12\x03\
    \x1a\x04h\x1a;\x20contract_address\x20is\x20the\x20canonical\x20address\
    \x20of\x20the\x20contract\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1a\
    \x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1a\n\x1a\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x1a\x1d\x1e\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03\
    \x1a\x1fg\n\x0f\n\x08\x04\x02\x02\0\x08\xef\xfb\x03\x12\x03\x1a\x20f\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x1b\x04B\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03\x1b\x04\x10\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1b\x11\
    \x1e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1b!\"\n\x0c\n\x05\x04\x02\
    \x02\x01\x08\x12\x03\x1b#A\n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\xfb\x03\
    \x12\x03\x1b$@\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1c\x04E\n\x0c\n\x05\
    \x04\x02\x02\x02\x04\x12\x03\x1c\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x06\
    \x12\x03\x1c\r\x12\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1c\x13!\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x1c$%\n\x0c\n\x05\x04\x02\x02\x02\
    \x08\x12\x03\x1c&D\n\x0f\n\x08\x04\x02\x02\x02\x08\xe9\xfb\x03\x12\x03\
    \x1c'C\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1d\x040\n\x0c\n\x05\x04\x02\
    \x02\x03\x06\x12\x03\x1d\x04\x16\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\
    \x1d\x17+\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1d./\n0\n\x02\x04\x03\
    \x12\x04!\0$\x01\x1a$\x20Sequence\x20id\x20and\x20value\x20of\x20a\x20co\
    unter\n\n\n\n\x03\x04\x03\x01\x12\x03!\x08\x10\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\"\x048\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\"\x04\t\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03\"\n\x10\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\"\x13\x14\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03\"\x157\n\x0f\n\x08\
    \x04\x03\x02\0\x08\xec\xfb\x03\x12\x03\"\x166\n\x0b\n\x04\x04\x03\x02\
    \x01\x12\x03#\x04\x15\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03#\x04\n\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03#\x0b\x10\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03#\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(super::types::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(GenesisState::generated_message_descriptor_data());
            messages.push(Code::generated_message_descriptor_data());
            messages.push(Contract::generated_message_descriptor_data());
            messages.push(Sequence::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
