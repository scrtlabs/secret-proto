// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `secret/registration/v1beta1/remote_attestation/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.registration.remote_attestation.v1beta1.QuoteReport)
pub struct QuoteReport {
    // message fields
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReport.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReport.timestamp)
    pub timestamp: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReport.version)
    pub version: u64,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReport.isv_enclave_quote_status)
    pub isv_enclave_quote_status: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReport.platform_info_blob)
    pub platform_info_blob: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReport.isv_enclave_quote_body)
    pub isv_enclave_quote_body: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReport.advisory_ids)
    pub advisory_ids: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.registration.remote_attestation.v1beta1.QuoteReport.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuoteReport {
    fn default() -> &'a QuoteReport {
        <QuoteReport as ::protobuf::Message>::default_instance()
    }
}

impl QuoteReport {
    pub fn new() -> QuoteReport {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &QuoteReport| { &m.id },
            |m: &mut QuoteReport| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &QuoteReport| { &m.timestamp },
            |m: &mut QuoteReport| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &QuoteReport| { &m.version },
            |m: &mut QuoteReport| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "isv_enclave_quote_status",
            |m: &QuoteReport| { &m.isv_enclave_quote_status },
            |m: &mut QuoteReport| { &mut m.isv_enclave_quote_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform_info_blob",
            |m: &QuoteReport| { &m.platform_info_blob },
            |m: &mut QuoteReport| { &mut m.platform_info_blob },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "isv_enclave_quote_body",
            |m: &QuoteReport| { &m.isv_enclave_quote_body },
            |m: &mut QuoteReport| { &mut m.isv_enclave_quote_body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "advisory_ids",
            |m: &QuoteReport| { &m.advisory_ids },
            |m: &mut QuoteReport| { &mut m.advisory_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuoteReport>(
            "QuoteReport",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuoteReport {
    const NAME: &'static str = "QuoteReport";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.timestamp = is.read_string()?;
                },
                24 => {
                    self.version = is.read_uint64()?;
                },
                34 => {
                    self.isv_enclave_quote_status = is.read_string()?;
                },
                42 => {
                    self.platform_info_blob = is.read_string()?;
                },
                50 => {
                    self.isv_enclave_quote_body = is.read_string()?;
                },
                58 => {
                    self.advisory_ids.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.timestamp);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.version);
        }
        if !self.isv_enclave_quote_status.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.isv_enclave_quote_status);
        }
        if !self.platform_info_blob.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.platform_info_blob);
        }
        if !self.isv_enclave_quote_body.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.isv_enclave_quote_body);
        }
        for value in &self.advisory_ids {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(2, &self.timestamp)?;
        }
        if self.version != 0 {
            os.write_uint64(3, self.version)?;
        }
        if !self.isv_enclave_quote_status.is_empty() {
            os.write_string(4, &self.isv_enclave_quote_status)?;
        }
        if !self.platform_info_blob.is_empty() {
            os.write_string(5, &self.platform_info_blob)?;
        }
        if !self.isv_enclave_quote_body.is_empty() {
            os.write_string(6, &self.isv_enclave_quote_body)?;
        }
        for v in &self.advisory_ids {
            os.write_string(7, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuoteReport {
        QuoteReport::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.timestamp.clear();
        self.version = 0;
        self.isv_enclave_quote_status.clear();
        self.platform_info_blob.clear();
        self.isv_enclave_quote_body.clear();
        self.advisory_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuoteReport {
        static instance: QuoteReport = QuoteReport {
            id: ::std::string::String::new(),
            timestamp: ::std::string::String::new(),
            version: 0,
            isv_enclave_quote_status: ::std::string::String::new(),
            platform_info_blob: ::std::string::String::new(),
            isv_enclave_quote_body: ::std::string::String::new(),
            advisory_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuoteReport {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuoteReport").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuoteReport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuoteReport {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.registration.remote_attestation.v1beta1.QuoteReportBody)
pub struct QuoteReportBody {
    // message fields
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReportBody.mr_enclave)
    pub mr_enclave: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReportBody.mr_signer)
    pub mr_signer: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReportBody.report_data)
    pub report_data: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:secret.registration.remote_attestation.v1beta1.QuoteReportBody.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuoteReportBody {
    fn default() -> &'a QuoteReportBody {
        <QuoteReportBody as ::protobuf::Message>::default_instance()
    }
}

impl QuoteReportBody {
    pub fn new() -> QuoteReportBody {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mr_enclave",
            |m: &QuoteReportBody| { &m.mr_enclave },
            |m: &mut QuoteReportBody| { &mut m.mr_enclave },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mr_signer",
            |m: &QuoteReportBody| { &m.mr_signer },
            |m: &mut QuoteReportBody| { &mut m.mr_signer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "report_data",
            |m: &QuoteReportBody| { &m.report_data },
            |m: &mut QuoteReportBody| { &mut m.report_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuoteReportBody>(
            "QuoteReportBody",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuoteReportBody {
    const NAME: &'static str = "QuoteReportBody";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mr_enclave = is.read_string()?;
                },
                18 => {
                    self.mr_signer = is.read_string()?;
                },
                26 => {
                    self.report_data = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mr_enclave.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mr_enclave);
        }
        if !self.mr_signer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.mr_signer);
        }
        if !self.report_data.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.report_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mr_enclave.is_empty() {
            os.write_string(1, &self.mr_enclave)?;
        }
        if !self.mr_signer.is_empty() {
            os.write_string(2, &self.mr_signer)?;
        }
        if !self.report_data.is_empty() {
            os.write_string(3, &self.report_data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuoteReportBody {
        QuoteReportBody::new()
    }

    fn clear(&mut self) {
        self.mr_enclave.clear();
        self.mr_signer.clear();
        self.report_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuoteReportBody {
        static instance: QuoteReportBody = QuoteReportBody {
            mr_enclave: ::std::string::String::new(),
            mr_signer: ::std::string::String::new(),
            report_data: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuoteReportBody {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuoteReportBody").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuoteReportBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuoteReportBody {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.registration.remote_attestation.v1beta1.QuoteReportData)
pub struct QuoteReportData {
    // message fields
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReportData.version)
    pub version: u64,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReportData.sign_type)
    pub sign_type: u64,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.QuoteReportData.report_body)
    pub report_body: ::protobuf::MessageField<QuoteReportBody>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.registration.remote_attestation.v1beta1.QuoteReportData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuoteReportData {
    fn default() -> &'a QuoteReportData {
        <QuoteReportData as ::protobuf::Message>::default_instance()
    }
}

impl QuoteReportData {
    pub fn new() -> QuoteReportData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &QuoteReportData| { &m.version },
            |m: &mut QuoteReportData| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sign_type",
            |m: &QuoteReportData| { &m.sign_type },
            |m: &mut QuoteReportData| { &mut m.sign_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, QuoteReportBody>(
            "report_body",
            |m: &QuoteReportData| { &m.report_body },
            |m: &mut QuoteReportData| { &mut m.report_body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuoteReportData>(
            "QuoteReportData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuoteReportData {
    const NAME: &'static str = "QuoteReportData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint64()?;
                },
                16 => {
                    self.sign_type = is.read_uint64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.report_body)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.version);
        }
        if self.sign_type != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.sign_type);
        }
        if let Some(v) = self.report_body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint64(1, self.version)?;
        }
        if self.sign_type != 0 {
            os.write_uint64(2, self.sign_type)?;
        }
        if let Some(v) = self.report_body.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuoteReportData {
        QuoteReportData::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.sign_type = 0;
        self.report_body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuoteReportData {
        static instance: QuoteReportData = QuoteReportData {
            version: 0,
            sign_type: 0,
            report_body: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuoteReportData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuoteReportData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuoteReportData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuoteReportData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.registration.remote_attestation.v1beta1.EndorsedAttestationReport)
pub struct EndorsedAttestationReport {
    // message fields
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.EndorsedAttestationReport.report)
    pub report: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.EndorsedAttestationReport.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.EndorsedAttestationReport.signing_cert)
    pub signing_cert: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.registration.remote_attestation.v1beta1.EndorsedAttestationReport.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EndorsedAttestationReport {
    fn default() -> &'a EndorsedAttestationReport {
        <EndorsedAttestationReport as ::protobuf::Message>::default_instance()
    }
}

impl EndorsedAttestationReport {
    pub fn new() -> EndorsedAttestationReport {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "report",
            |m: &EndorsedAttestationReport| { &m.report },
            |m: &mut EndorsedAttestationReport| { &mut m.report },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &EndorsedAttestationReport| { &m.signature },
            |m: &mut EndorsedAttestationReport| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signing_cert",
            |m: &EndorsedAttestationReport| { &m.signing_cert },
            |m: &mut EndorsedAttestationReport| { &mut m.signing_cert },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EndorsedAttestationReport>(
            "EndorsedAttestationReport",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EndorsedAttestationReport {
    const NAME: &'static str = "EndorsedAttestationReport";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.report = is.read_bytes()?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                26 => {
                    self.signing_cert = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.report.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.report);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        if !self.signing_cert.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signing_cert);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.report.is_empty() {
            os.write_bytes(1, &self.report)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        if !self.signing_cert.is_empty() {
            os.write_bytes(3, &self.signing_cert)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EndorsedAttestationReport {
        EndorsedAttestationReport::new()
    }

    fn clear(&mut self) {
        self.report.clear();
        self.signature.clear();
        self.signing_cert.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EndorsedAttestationReport {
        static instance: EndorsedAttestationReport = EndorsedAttestationReport {
            report: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            signing_cert: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EndorsedAttestationReport {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EndorsedAttestationReport").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EndorsedAttestationReport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndorsedAttestationReport {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.registration.remote_attestation.v1beta1.SGXEC256Signature)
pub struct SGXEC256Signature {
    // message fields
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.SGXEC256Signature.gx)
    pub gx: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.SGXEC256Signature.gy)
    pub gy: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:secret.registration.remote_attestation.v1beta1.SGXEC256Signature.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SGXEC256Signature {
    fn default() -> &'a SGXEC256Signature {
        <SGXEC256Signature as ::protobuf::Message>::default_instance()
    }
}

impl SGXEC256Signature {
    pub fn new() -> SGXEC256Signature {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gx",
            |m: &SGXEC256Signature| { &m.gx },
            |m: &mut SGXEC256Signature| { &mut m.gx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gy",
            |m: &SGXEC256Signature| { &m.gy },
            |m: &mut SGXEC256Signature| { &mut m.gy },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SGXEC256Signature>(
            "SGXEC256Signature",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SGXEC256Signature {
    const NAME: &'static str = "SGXEC256Signature";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.gx = is.read_string()?;
                },
                18 => {
                    self.gy = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.gx.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gx);
        }
        if !self.gy.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gy);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.gx.is_empty() {
            os.write_string(1, &self.gx)?;
        }
        if !self.gy.is_empty() {
            os.write_string(2, &self.gy)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SGXEC256Signature {
        SGXEC256Signature::new()
    }

    fn clear(&mut self) {
        self.gx.clear();
        self.gy.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SGXEC256Signature {
        static instance: SGXEC256Signature = SGXEC256Signature {
            gx: ::std::string::String::new(),
            gy: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SGXEC256Signature {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SGXEC256Signature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SGXEC256Signature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SGXEC256Signature {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob)
pub struct PlatformInfoBlob {
    // message fields
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.sgx_epid_group_flags)
    pub sgx_epid_group_flags: u32,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.sgx_tcb_evaluation_flags)
    pub sgx_tcb_evaluation_flags: u32,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.pse_evaluation_flags)
    pub pse_evaluation_flags: u32,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.latest_equivalent_tcb_psvn)
    pub latest_equivalent_tcb_psvn: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.latest_pse_isvsvn)
    pub latest_pse_isvsvn: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.latest_psda_svn)
    pub latest_psda_svn: ::std::string::String,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.xeid)
    pub xeid: u32,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.gid)
    pub gid: u32,
    // @@protoc_insertion_point(field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.sgx_ec256_signature_t)
    pub sgx_ec256_signature_t: ::protobuf::MessageField<SGXEC256Signature>,
    // special fields
    // @@protoc_insertion_point(special_field:secret.registration.remote_attestation.v1beta1.PlatformInfoBlob.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlatformInfoBlob {
    fn default() -> &'a PlatformInfoBlob {
        <PlatformInfoBlob as ::protobuf::Message>::default_instance()
    }
}

impl PlatformInfoBlob {
    pub fn new() -> PlatformInfoBlob {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sgx_epid_group_flags",
            |m: &PlatformInfoBlob| { &m.sgx_epid_group_flags },
            |m: &mut PlatformInfoBlob| { &mut m.sgx_epid_group_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sgx_tcb_evaluation_flags",
            |m: &PlatformInfoBlob| { &m.sgx_tcb_evaluation_flags },
            |m: &mut PlatformInfoBlob| { &mut m.sgx_tcb_evaluation_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pse_evaluation_flags",
            |m: &PlatformInfoBlob| { &m.pse_evaluation_flags },
            |m: &mut PlatformInfoBlob| { &mut m.pse_evaluation_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latest_equivalent_tcb_psvn",
            |m: &PlatformInfoBlob| { &m.latest_equivalent_tcb_psvn },
            |m: &mut PlatformInfoBlob| { &mut m.latest_equivalent_tcb_psvn },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latest_pse_isvsvn",
            |m: &PlatformInfoBlob| { &m.latest_pse_isvsvn },
            |m: &mut PlatformInfoBlob| { &mut m.latest_pse_isvsvn },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latest_psda_svn",
            |m: &PlatformInfoBlob| { &m.latest_psda_svn },
            |m: &mut PlatformInfoBlob| { &mut m.latest_psda_svn },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "xeid",
            |m: &PlatformInfoBlob| { &m.xeid },
            |m: &mut PlatformInfoBlob| { &mut m.xeid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gid",
            |m: &PlatformInfoBlob| { &m.gid },
            |m: &mut PlatformInfoBlob| { &mut m.gid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SGXEC256Signature>(
            "sgx_ec256_signature_t",
            |m: &PlatformInfoBlob| { &m.sgx_ec256_signature_t },
            |m: &mut PlatformInfoBlob| { &mut m.sgx_ec256_signature_t },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlatformInfoBlob>(
            "PlatformInfoBlob",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlatformInfoBlob {
    const NAME: &'static str = "PlatformInfoBlob";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sgx_epid_group_flags = is.read_uint32()?;
                },
                16 => {
                    self.sgx_tcb_evaluation_flags = is.read_uint32()?;
                },
                24 => {
                    self.pse_evaluation_flags = is.read_uint32()?;
                },
                34 => {
                    self.latest_equivalent_tcb_psvn = is.read_string()?;
                },
                42 => {
                    self.latest_pse_isvsvn = is.read_string()?;
                },
                50 => {
                    self.latest_psda_svn = is.read_string()?;
                },
                56 => {
                    self.xeid = is.read_uint32()?;
                },
                64 => {
                    self.gid = is.read_uint32()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sgx_ec256_signature_t)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sgx_epid_group_flags != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.sgx_epid_group_flags);
        }
        if self.sgx_tcb_evaluation_flags != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.sgx_tcb_evaluation_flags);
        }
        if self.pse_evaluation_flags != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.pse_evaluation_flags);
        }
        if !self.latest_equivalent_tcb_psvn.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.latest_equivalent_tcb_psvn);
        }
        if !self.latest_pse_isvsvn.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.latest_pse_isvsvn);
        }
        if !self.latest_psda_svn.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.latest_psda_svn);
        }
        if self.xeid != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.xeid);
        }
        if self.gid != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.gid);
        }
        if let Some(v) = self.sgx_ec256_signature_t.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sgx_epid_group_flags != 0 {
            os.write_uint32(1, self.sgx_epid_group_flags)?;
        }
        if self.sgx_tcb_evaluation_flags != 0 {
            os.write_uint32(2, self.sgx_tcb_evaluation_flags)?;
        }
        if self.pse_evaluation_flags != 0 {
            os.write_uint32(3, self.pse_evaluation_flags)?;
        }
        if !self.latest_equivalent_tcb_psvn.is_empty() {
            os.write_string(4, &self.latest_equivalent_tcb_psvn)?;
        }
        if !self.latest_pse_isvsvn.is_empty() {
            os.write_string(5, &self.latest_pse_isvsvn)?;
        }
        if !self.latest_psda_svn.is_empty() {
            os.write_string(6, &self.latest_psda_svn)?;
        }
        if self.xeid != 0 {
            os.write_uint32(7, self.xeid)?;
        }
        if self.gid != 0 {
            os.write_uint32(8, self.gid)?;
        }
        if let Some(v) = self.sgx_ec256_signature_t.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlatformInfoBlob {
        PlatformInfoBlob::new()
    }

    fn clear(&mut self) {
        self.sgx_epid_group_flags = 0;
        self.sgx_tcb_evaluation_flags = 0;
        self.pse_evaluation_flags = 0;
        self.latest_equivalent_tcb_psvn.clear();
        self.latest_pse_isvsvn.clear();
        self.latest_psda_svn.clear();
        self.xeid = 0;
        self.gid = 0;
        self.sgx_ec256_signature_t.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlatformInfoBlob {
        static instance: PlatformInfoBlob = PlatformInfoBlob {
            sgx_epid_group_flags: 0,
            sgx_tcb_evaluation_flags: 0,
            pse_evaluation_flags: 0,
            latest_equivalent_tcb_psvn: ::std::string::String::new(),
            latest_pse_isvsvn: ::std::string::String::new(),
            latest_psda_svn: ::std::string::String::new(),
            xeid: 0,
            gid: 0,
            sgx_ec256_signature_t: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlatformInfoBlob {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlatformInfoBlob").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlatformInfoBlob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlatformInfoBlob {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n:secret/registration/v1beta1/remote_attestation/types.proto\x12.secret\
    .registration.remote_attestation.v1beta1\x1a\x14gogoproto/gogo.proto\"\
    \x86\x03\n\x0bQuoteReport\x12\x16\n\x02id\x18\x01\x20\x01(\tR\x02idB\x06\
    \xe2\xde\x1f\x02ID\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\tR\ttimestamp\
    \x12\x18\n\x07version\x18\x03\x20\x01(\x04R\x07version\x12R\n\x18isv_enc\
    lave_quote_status\x18\x04\x20\x01(\tR\x15isvEnclaveQuoteStatusB\x19\xea\
    \xde\x1f\x15isvEnclaveQuoteStatus\x12B\n\x12platform_info_blob\x18\x05\
    \x20\x01(\tR\x10platformInfoBlobB\x14\xea\xde\x1f\x10platformInfoBlob\
    \x12L\n\x16isv_enclave_quote_body\x18\x06\x20\x01(\tR\x13isvEnclaveQuote\
    BodyB\x17\xea\xde\x1f\x13isvEnclaveQuoteBody\x12A\n\x0cadvisory_ids\x18\
    \x07\x20\x03(\tR\x0badvisoryIdsB\x1e\xe2\xde\x1f\x0bAdvisoryIDs\xea\xde\
    \x1f\x0badvisoryIDs\"n\n\x0fQuoteReportBody\x12\x1d\n\nmr_enclave\x18\
    \x01\x20\x01(\tR\tmrEnclave\x12\x1b\n\tmr_signer\x18\x02\x20\x01(\tR\x08\
    mrSigner\x12\x1f\n\x0breport_data\x18\x03\x20\x01(\tR\nreportData\"\xaa\
    \x01\n\x0fQuoteReportData\x12\x18\n\x07version\x18\x01\x20\x01(\x04R\x07\
    version\x12\x1b\n\tsign_type\x18\x02\x20\x01(\x04R\x08signType\x12`\n\
    \x0breport_body\x18\x03\x20\x01(\x0b2?.secret.registration.remote_attest\
    ation.v1beta1.QuoteReportBodyR\nreportBody\"t\n\x19EndorsedAttestationRe\
    port\x12\x16\n\x06report\x18\x01\x20\x01(\x0cR\x06report\x12\x1c\n\tsign\
    ature\x18\x02\x20\x01(\x0cR\tsignature\x12!\n\x0csigning_cert\x18\x03\
    \x20\x01(\x0cR\x0bsigningCert\"3\n\x11SGXEC256Signature\x12\x0e\n\x02gx\
    \x18\x01\x20\x01(\tR\x02gx\x12\x0e\n\x02gy\x18\x02\x20\x01(\tR\x02gy\"\
    \xdb\x03\n\x10PlatformInfoBlob\x12/\n\x14sgx_epid_group_flags\x18\x01\
    \x20\x01(\rR\x11sgxEpidGroupFlags\x127\n\x18sgx_tcb_evaluation_flags\x18\
    \x02\x20\x01(\rR\x15sgxTcbEvaluationFlags\x120\n\x14pse_evaluation_flags\
    \x18\x03\x20\x01(\rR\x12pseEvaluationFlags\x12;\n\x1alatest_equivalent_t\
    cb_psvn\x18\x04\x20\x01(\tR\x17latestEquivalentTcbPsvn\x12*\n\x11latest_\
    pse_isvsvn\x18\x05\x20\x01(\tR\x0flatestPseIsvsvn\x12&\n\x0flatest_psda_\
    svn\x18\x06\x20\x01(\tR\rlatestPsdaSvn\x12\x12\n\x04xeid\x18\x07\x20\x01\
    (\rR\x04xeid\x12\x10\n\x03gid\x18\x08\x20\x01(\rR\x03gid\x12t\n\x15sgx_e\
    c256_signature_t\x18\t\x20\x01(\x0b2A.secret.registration.remote_attesta\
    tion.v1beta1.SGXEC256SignatureR\x12sgxEc256SignatureTBNZDgithub.com/enig\
    mampc/SecretNetwork/x/registration/remote_attestation\xc8\xe1\x1e\0\xa8\
    \xe2\x1e\x01J\x81\x0f\n\x06\x12\x04\0\04\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\07\n\t\n\x02\x03\0\x12\x03\x03\0\x1e\n\
    \x08\n\x01\x08\x12\x03\x05\0[\n\t\n\x02\x08\x0b\x12\x03\x05\0[\n\x08\n\
    \x01\x08\x12\x03\x06\0/\n\x0b\n\x04\x08\x99\xec\x03\x12\x03\x06\0/\n\x08\
    \n\x01\x08\x12\x03\x07\0$\n\x0b\n\x04\x08\xa5\xec\x03\x12\x03\x07\0$\n\n\
    \n\x02\x04\0\x12\x04\t\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x13\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\n\x020\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\t\x0b\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\n\x0e\x0f\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\n\
    \x10/\n\x0f\n\x08\x04\0\x02\0\x08\xec\xfb\x03\x12\x03\n\x11.\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x0b\x02\x17\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\t\x12\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x0b\x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x0c\x02\x15\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0c\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x0c\t\x10\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x0c\x13\x14\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x02V\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\r\t!\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r$%\n\x0c\n\x05\x04\
    \0\x02\x03\x08\x12\x03\r&U\n\x0f\n\x08\x04\0\x02\x03\x08\xed\xfb\x03\x12\
    \x03\r'T\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0e\x02K\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x0e\t\x1b\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0e\x1e\x1f\n\x0c\n\x05\
    \x04\0\x02\x04\x08\x12\x03\x0e\x20J\n\x0f\n\x08\x04\0\x02\x04\x08\xed\
    \xfb\x03\x12\x03\x0e!I\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0f\x02R\n\x0c\
    \n\x05\x04\0\x02\x05\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\x05\
    \x01\x12\x03\x0f\t\x1f\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0f\"#\n\
    \x0c\n\x05\x04\0\x02\x05\x08\x12\x03\x0f$Q\n\x0f\n\x08\x04\0\x02\x05\x08\
    \xed\xfb\x03\x12\x03\x0f%P\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x10\x02q\n\
    \x0c\n\x05\x04\0\x02\x06\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\0\x02\x06\
    \x05\x12\x03\x10\x0b\x11\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x10\x12\
    \x1e\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x10!\"\n\x0c\n\x05\x04\0\x02\
    \x06\x08\x12\x03\x10#p\n\x0f\n\x08\x04\0\x02\x06\x08\xec\xfb\x03\x12\x03\
    \x10$J\n\x0f\n\x08\x04\0\x02\x06\x08\xed\xfb\x03\x12\x03\x10Lo\n\n\n\x02\
    \x04\x01\x12\x04\x13\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\x03\x13\x08\x17\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x14\x02\x18\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x14\t\x13\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x14\x16\x17\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x15\x02\x17\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x15\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\t\x12\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x15\x15\x16\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x16\x02\x19\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x16\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x16\t\x14\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x16\x17\x18\n\n\n\x02\x04\x02\x12\x04\x19\0\x1d\x01\n\n\
    \n\x03\x04\x02\x01\x12\x03\x19\x08\x17\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x1a\x02\x15\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1a\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x1a\t\x10\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x1a\x13\x14\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1b\x02\x17\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\x1b\t\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\
    \x1b\x15\x16\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1c\x02\"\n\x0c\n\x05\
    \x04\x02\x02\x02\x06\x12\x03\x1c\x02\x11\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x03\x1c\x12\x1d\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x1c\x20!\n\
    \n\n\x02\x04\x03\x12\x04\x1f\0#\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1f\
    \x08!\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x20\x02\x13\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03\x20\x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x20\
    \x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x20\x11\x12\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03!\x02\x16\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x03!\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03!\x08\x11\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03!\x14\x15\n\x0b\n\x04\x04\x03\x02\x02\
    \x12\x03\"\x02\x19\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\"\x02\x07\n\
    \x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\"\x08\x14\n\x0c\n\x05\x04\x03\x02\
    \x02\x03\x12\x03\"\x17\x18\n\n\n\x02\x04\x04\x12\x04%\0(\x01\n\n\n\x03\
    \x04\x04\x01\x12\x03%\x08\x19\n\x0b\n\x04\x04\x04\x02\0\x12\x03&\x02\x10\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03&\t\x0b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03&\x0e\x0f\n\
    \x0b\n\x04\x04\x04\x02\x01\x12\x03'\x02\x10\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03'\t\x0b\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03'\x0e\x0f\n\n\n\x02\x04\x05\x12\
    \x04*\04\x01\n\n\n\x03\x04\x05\x01\x12\x03*\x08\x18\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03+\x02\"\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03+\x02\x08\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03+\t\x1d\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03+\x20!\n\x0b\n\x04\x04\x05\x02\x01\x12\x03,\x02&\n\x0c\n\x05\
    \x04\x05\x02\x01\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\
    \x12\x03,\t!\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03,$%\n\x0b\n\x04\x04\
    \x05\x02\x02\x12\x03-\x02\"\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03-\x02\
    \x08\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03-\t\x1d\n\x0c\n\x05\x04\x05\
    \x02\x02\x03\x12\x03-\x20!\n\x0b\n\x04\x04\x05\x02\x03\x12\x03.\x02(\n\
    \x0c\n\x05\x04\x05\x02\x03\x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\x05\x02\
    \x03\x01\x12\x03.\t#\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03.&'\n\x0b\n\
    \x04\x04\x05\x02\x04\x12\x03/\x02\x1f\n\x0c\n\x05\x04\x05\x02\x04\x05\
    \x12\x03/\x02\x08\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03/\t\x1a\n\x0c\n\
    \x05\x04\x05\x02\x04\x03\x12\x03/\x1d\x1e\n\x0b\n\x04\x04\x05\x02\x05\
    \x12\x030\x02\x1d\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x030\x02\x08\n\x0c\
    \n\x05\x04\x05\x02\x05\x01\x12\x030\t\x18\n\x0c\n\x05\x04\x05\x02\x05\
    \x03\x12\x030\x1b\x1c\n\x0b\n\x04\x04\x05\x02\x06\x12\x031\x02\x12\n\x0c\
    \n\x05\x04\x05\x02\x06\x05\x12\x031\x02\x08\n\x0c\n\x05\x04\x05\x02\x06\
    \x01\x12\x031\t\r\n\x0c\n\x05\x04\x05\x02\x06\x03\x12\x031\x10\x11\n\x0b\
    \n\x04\x04\x05\x02\x07\x12\x032\x02\x11\n\x0c\n\x05\x04\x05\x02\x07\x05\
    \x12\x032\x02\x08\n\x0c\n\x05\x04\x05\x02\x07\x01\x12\x032\t\x0c\n\x0c\n\
    \x05\x04\x05\x02\x07\x03\x12\x032\x0f\x10\n\x0b\n\x04\x04\x05\x02\x08\
    \x12\x033\x02.\n\x0c\n\x05\x04\x05\x02\x08\x06\x12\x033\x02\x13\n\x0c\n\
    \x05\x04\x05\x02\x08\x01\x12\x033\x14)\n\x0c\n\x05\x04\x05\x02\x08\x03\
    \x12\x033,-b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(QuoteReport::generated_message_descriptor_data());
            messages.push(QuoteReportBody::generated_message_descriptor_data());
            messages.push(QuoteReportData::generated_message_descriptor_data());
            messages.push(EndorsedAttestationReport::generated_message_descriptor_data());
            messages.push(SGXEC256Signature::generated_message_descriptor_data());
            messages.push(PlatformInfoBlob::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
