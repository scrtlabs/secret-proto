// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/http.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Defines the HTTP configuration for an API service. It contains a list of
///  [HttpRule][google.api.HttpRule], each specifying the mapping of an RPC method
///  to one or more HTTP REST API methods.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.Http)
pub struct Http {
    // message fields
    ///  A list of HTTP configuration rules that apply to individual API methods.
    ///
    ///  **NOTE:** All service configuration rules follow "last one wins" order.
    // @@protoc_insertion_point(field:google.api.Http.rules)
    pub rules: ::std::vec::Vec<HttpRule>,
    ///  When set to true, URL path parmeters will be fully URI-decoded except in
    ///  cases of single segment matches in reserved expansion, where "%2F" will be
    ///  left encoded.
    ///
    ///  The default behavior is to not decode RFC 6570 reserved characters in multi
    ///  segment matches.
    // @@protoc_insertion_point(field:google.api.Http.fully_decode_reserved_expansion)
    pub fully_decode_reserved_expansion: bool,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Http.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Http {
    fn default() -> &'a Http {
        <Http as ::protobuf::Message>::default_instance()
    }
}

impl Http {
    pub fn new() -> Http {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &Http| { &m.rules },
            |m: &mut Http| { &mut m.rules },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fully_decode_reserved_expansion",
            |m: &Http| { &m.fully_decode_reserved_expansion },
            |m: &mut Http| { &mut m.fully_decode_reserved_expansion },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Http>(
            "Http",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Http {
    const NAME: &'static str = "Http";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                16 => {
                    self.fully_decode_reserved_expansion = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.fully_decode_reserved_expansion != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.fully_decode_reserved_expansion != false {
            os.write_bool(2, self.fully_decode_reserved_expansion)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Http {
        Http::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.fully_decode_reserved_expansion = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Http {
        static instance: Http = Http {
            rules: ::std::vec::Vec::new(),
            fully_decode_reserved_expansion: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Http {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Http").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Http {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.HttpRule)
pub struct HttpRule {
    // message fields
    ///  Selects methods to which this rule applies.
    ///
    ///  Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
    // @@protoc_insertion_point(field:google.api.HttpRule.selector)
    pub selector: ::std::string::String,
    ///  The name of the request field whose value is mapped to the HTTP body, or
    ///  `*` for mapping all fields not captured by the path pattern to the HTTP
    ///  body. NOTE: the referred field must not be a repeated field and must be
    ///  present at the top-level of request message type.
    // @@protoc_insertion_point(field:google.api.HttpRule.body)
    pub body: ::std::string::String,
    ///  Optional. The name of the response field whose value is mapped to the HTTP
    ///  body of response. Other response fields are ignored. When
    ///  not set, the response message will be used as HTTP body of response.
    // @@protoc_insertion_point(field:google.api.HttpRule.response_body)
    pub response_body: ::std::string::String,
    ///  Additional HTTP bindings for the selector. Nested bindings must
    ///  not contain an `additional_bindings` field themselves (that is,
    ///  the nesting may only be one level deep).
    // @@protoc_insertion_point(field:google.api.HttpRule.additional_bindings)
    pub additional_bindings: ::std::vec::Vec<HttpRule>,
    // message oneof groups
    pub pattern: ::std::option::Option<http_rule::Pattern>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.HttpRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HttpRule {
    fn default() -> &'a HttpRule {
        <HttpRule as ::protobuf::Message>::default_instance()
    }
}

impl HttpRule {
    pub fn new() -> HttpRule {
        ::std::default::Default::default()
    }

    // string get = 2;

    pub fn get(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Get(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_get(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Get(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Get(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> ::std::string::String {
        if self.has_get() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string put = 3;

    pub fn put(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Put(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_put(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_put(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Put(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_put(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Put(v))
    }

    // Mutable pointer to the field.
    pub fn mut_put(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Put(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Put(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Put(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_put(&mut self) -> ::std::string::String {
        if self.has_put() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Put(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string post = 4;

    pub fn post(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Post(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_post(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_post(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Post(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_post(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Post(v))
    }

    // Mutable pointer to the field.
    pub fn mut_post(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Post(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Post(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Post(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_post(&mut self) -> ::std::string::String {
        if self.has_post() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Post(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string delete = 5;

    pub fn delete(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Delete(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_delete(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Delete(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Delete(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> ::std::string::String {
        if self.has_delete() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Delete(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string patch = 6;

    pub fn patch(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Patch(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_patch(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_patch(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Patch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_patch(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Patch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_patch(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(http_rule::Pattern::Patch(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Patch(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Patch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_patch(&mut self) -> ::std::string::String {
        if self.has_patch() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Patch(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.api.CustomHttpPattern custom = 8;

    pub fn custom(&self) -> &CustomHttpPattern {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Custom(ref v)) => v,
            _ => <CustomHttpPattern as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_custom(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_custom(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Custom(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom(&mut self, v: CustomHttpPattern) {
        self.pattern = ::std::option::Option::Some(http_rule::Pattern::Custom(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom(&mut self) -> &mut CustomHttpPattern {
        if let ::std::option::Option::Some(http_rule::Pattern::Custom(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(http_rule::Pattern::Custom(CustomHttpPattern::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(http_rule::Pattern::Custom(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom(&mut self) -> CustomHttpPattern {
        if self.has_custom() {
            match self.pattern.take() {
                ::std::option::Option::Some(http_rule::Pattern::Custom(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomHttpPattern::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "selector",
            |m: &HttpRule| { &m.selector },
            |m: &mut HttpRule| { &mut m.selector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "get",
            HttpRule::has_get,
            HttpRule::get,
            HttpRule::set_get,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "put",
            HttpRule::has_put,
            HttpRule::put,
            HttpRule::set_put,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "post",
            HttpRule::has_post,
            HttpRule::post,
            HttpRule::set_post,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "delete",
            HttpRule::has_delete,
            HttpRule::delete,
            HttpRule::set_delete,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "patch",
            HttpRule::has_patch,
            HttpRule::patch,
            HttpRule::set_patch,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CustomHttpPattern>(
            "custom",
            HttpRule::has_custom,
            HttpRule::custom,
            HttpRule::mut_custom,
            HttpRule::set_custom,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &HttpRule| { &m.body },
            |m: &mut HttpRule| { &mut m.body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response_body",
            |m: &HttpRule| { &m.response_body },
            |m: &mut HttpRule| { &mut m.response_body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "additional_bindings",
            |m: &HttpRule| { &m.additional_bindings },
            |m: &mut HttpRule| { &mut m.additional_bindings },
        ));
        oneofs.push(http_rule::Pattern::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HttpRule>(
            "HttpRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HttpRule {
    const NAME: &'static str = "HttpRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.selector = is.read_string()?;
                },
                18 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Get(is.read_string()?));
                },
                26 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Put(is.read_string()?));
                },
                34 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Post(is.read_string()?));
                },
                42 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Delete(is.read_string()?));
                },
                50 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Patch(is.read_string()?));
                },
                66 => {
                    self.pattern = ::std::option::Option::Some(http_rule::Pattern::Custom(is.read_message()?));
                },
                58 => {
                    self.body = is.read_string()?;
                },
                98 => {
                    self.response_body = is.read_string()?;
                },
                90 => {
                    self.additional_bindings.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.body);
        }
        if !self.response_body.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.response_body);
        }
        for value in &self.additional_bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.pattern {
            match v {
                &http_rule::Pattern::Get(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &http_rule::Pattern::Put(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &http_rule::Pattern::Post(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &http_rule::Pattern::Delete(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &http_rule::Pattern::Patch(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &http_rule::Pattern::Custom(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.body.is_empty() {
            os.write_string(7, &self.body)?;
        }
        if !self.response_body.is_empty() {
            os.write_string(12, &self.response_body)?;
        }
        for v in &self.additional_bindings {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.pattern {
            match v {
                &http_rule::Pattern::Get(ref v) => {
                    os.write_string(2, v)?;
                },
                &http_rule::Pattern::Put(ref v) => {
                    os.write_string(3, v)?;
                },
                &http_rule::Pattern::Post(ref v) => {
                    os.write_string(4, v)?;
                },
                &http_rule::Pattern::Delete(ref v) => {
                    os.write_string(5, v)?;
                },
                &http_rule::Pattern::Patch(ref v) => {
                    os.write_string(6, v)?;
                },
                &http_rule::Pattern::Custom(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HttpRule {
        HttpRule::new()
    }

    fn clear(&mut self) {
        self.selector.clear();
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.body.clear();
        self.response_body.clear();
        self.additional_bindings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HttpRule {
        static instance: HttpRule = HttpRule {
            selector: ::std::string::String::new(),
            body: ::std::string::String::new(),
            response_body: ::std::string::String::new(),
            additional_bindings: ::std::vec::Vec::new(),
            pattern: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HttpRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HttpRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HttpRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HttpRule`
pub mod http_rule {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:google.api.HttpRule.pattern)
    pub enum Pattern {
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.get)
        Get(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.put)
        Put(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.post)
        Post(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.delete)
        Delete(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.patch)
        Patch(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.api.HttpRule.custom)
        Custom(super::CustomHttpPattern),
    }

    impl ::protobuf::Oneof for Pattern {
    }

    impl ::protobuf::OneofFull for Pattern {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::HttpRule as ::protobuf::MessageFull>::descriptor().oneof_by_name("pattern").unwrap()).clone()
        }
    }

    impl Pattern {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Pattern>("pattern")
        }
    }
}

///  A custom pattern is used for defining custom HTTP verb.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.CustomHttpPattern)
pub struct CustomHttpPattern {
    // message fields
    ///  The name of this custom HTTP verb.
    // @@protoc_insertion_point(field:google.api.CustomHttpPattern.kind)
    pub kind: ::std::string::String,
    ///  The path matched by this custom verb.
    // @@protoc_insertion_point(field:google.api.CustomHttpPattern.path)
    pub path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.CustomHttpPattern.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CustomHttpPattern {
    fn default() -> &'a CustomHttpPattern {
        <CustomHttpPattern as ::protobuf::Message>::default_instance()
    }
}

impl CustomHttpPattern {
    pub fn new() -> CustomHttpPattern {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kind",
            |m: &CustomHttpPattern| { &m.kind },
            |m: &mut CustomHttpPattern| { &mut m.kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &CustomHttpPattern| { &m.path },
            |m: &mut CustomHttpPattern| { &mut m.path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CustomHttpPattern>(
            "CustomHttpPattern",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CustomHttpPattern {
    const NAME: &'static str = "CustomHttpPattern";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.kind = is.read_string()?;
                },
                18 => {
                    self.path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kind);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.kind.is_empty() {
            os.write_string(1, &self.kind)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CustomHttpPattern {
        CustomHttpPattern::new()
    }

    fn clear(&mut self) {
        self.kind.clear();
        self.path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CustomHttpPattern {
        static instance: CustomHttpPattern = CustomHttpPattern {
            kind: ::std::string::String::new(),
            path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CustomHttpPattern {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CustomHttpPattern").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CustomHttpPattern {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomHttpPattern {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15google/api/http.proto\x12\ngoogle.api\"y\n\x04Http\x12*\n\x05rules\
    \x18\x01\x20\x03(\x0b2\x14.google.api.HttpRuleR\x05rules\x12E\n\x1ffully\
    _decode_reserved_expansion\x18\x02\x20\x01(\x08R\x1cfullyDecodeReservedE\
    xpansion\"\xda\x02\n\x08HttpRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\
    \tR\x08selector\x12\x12\n\x03get\x18\x02\x20\x01(\tH\0R\x03get\x12\x12\n\
    \x03put\x18\x03\x20\x01(\tH\0R\x03put\x12\x14\n\x04post\x18\x04\x20\x01(\
    \tH\0R\x04post\x12\x18\n\x06delete\x18\x05\x20\x01(\tH\0R\x06delete\x12\
    \x16\n\x05patch\x18\x06\x20\x01(\tH\0R\x05patch\x127\n\x06custom\x18\x08\
    \x20\x01(\x0b2\x1d.google.api.CustomHttpPatternH\0R\x06custom\x12\x12\n\
    \x04body\x18\x07\x20\x01(\tR\x04body\x12#\n\rresponse_body\x18\x0c\x20\
    \x01(\tR\x0cresponseBody\x12E\n\x13additional_bindings\x18\x0b\x20\x03(\
    \x0b2\x14.google.api.HttpRuleR\x12additionalBindingsB\t\n\x07pattern\";\
    \n\x11CustomHttpPattern\x12\x12\n\x04kind\x18\x01\x20\x01(\tR\x04kind\
    \x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04pathBj\n\x0ecom.google.apiB\tH\
    ttpProtoP\x01ZAgoogle.golang.org/genproto/googleapis/api/annotations;ann\
    otations\xf8\x01\x01\xa2\x02\x04GAPIJ\xc8\\\n\x07\x12\x05\x0e\0\xbd\x02\
    \x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202018\
    \x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\x08\n\
    \x01\x08\x12\x03\x12\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x12\0\x1f\n\x08\n\
    \x01\x08\x12\x03\x13\0X\n\t\n\x02\x08\x0b\x12\x03\x13\0X\n\x08\n\x01\x08\
    \x12\x03\x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\
    \x15\0*\n\t\n\x02\x08\x08\x12\x03\x15\0*\n\x08\n\x01\x08\x12\x03\x16\0'\
    \n\t\n\x02\x08\x01\x12\x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\
    \x02\x08$\x12\x03\x17\0\"\n\xcd\x01\n\x02\x04\0\x12\x04\x1d\0*\x01\x1a\
    \xc0\x01\x20Defines\x20the\x20HTTP\x20configuration\x20for\x20an\x20API\
    \x20service.\x20It\x20contains\x20a\x20list\x20of\n\x20[HttpRule][google\
    .api.HttpRule],\x20each\x20specifying\x20the\x20mapping\x20of\x20an\x20R\
    PC\x20method\n\x20to\x20one\x20or\x20more\x20HTTP\x20REST\x20API\x20meth\
    ods.\n\n\n\n\x03\x04\0\x01\x12\x03\x1d\x08\x0c\n\xa2\x01\n\x04\x04\0\x02\
    \0\x12\x03!\x02\x1e\x1a\x94\x01\x20A\x20list\x20of\x20HTTP\x20configurat\
    ion\x20rules\x20that\x20apply\x20to\x20individual\x20API\x20methods.\n\n\
    \x20**NOTE:**\x20All\x20service\x20configuration\x20rules\x20follow\x20\
    \"last\x20one\x20wins\"\x20order.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03!\
    \x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03!\x0b\x13\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03!\x14\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03!\x1c\x1d\
    \n\x93\x02\n\x04\x04\0\x02\x01\x12\x03)\x02+\x1a\x85\x02\x20When\x20set\
    \x20to\x20true,\x20URL\x20path\x20parmeters\x20will\x20be\x20fully\x20UR\
    I-decoded\x20except\x20in\n\x20cases\x20of\x20single\x20segment\x20match\
    es\x20in\x20reserved\x20expansion,\x20where\x20\"%2F\"\x20will\x20be\n\
    \x20left\x20encoded.\n\n\x20The\x20default\x20behavior\x20is\x20to\x20no\
    t\x20decode\x20RFC\x206570\x20reserved\x20characters\x20in\x20multi\n\
    \x20segment\x20matches.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03)\x02\x06\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03)\x07&\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03))*\n\xb2>\n\x02\x04\x01\x12\x06\x85\x02\0\xb4\x02\x01\x1a\
    \xa3>\x20`HttpRule`\x20defines\x20the\x20mapping\x20of\x20an\x20RPC\x20m\
    ethod\x20to\x20one\x20or\x20more\x20HTTP\n\x20REST\x20API\x20methods.\
    \x20The\x20mapping\x20specifies\x20how\x20different\x20portions\x20of\
    \x20the\x20RPC\n\x20request\x20message\x20are\x20mapped\x20to\x20URL\x20\
    path,\x20URL\x20query\x20parameters,\x20and\n\x20HTTP\x20request\x20body\
    .\x20The\x20mapping\x20is\x20typically\x20specified\x20as\x20an\n\x20`go\
    ogle.api.http`\x20annotation\x20on\x20the\x20RPC\x20method,\n\x20see\x20\
    \"google/api/annotations.proto\"\x20for\x20details.\n\n\x20The\x20mappin\
    g\x20consists\x20of\x20a\x20field\x20specifying\x20the\x20path\x20templa\
    te\x20and\n\x20method\x20kind.\x20\x20The\x20path\x20template\x20can\x20\
    refer\x20to\x20fields\x20in\x20the\x20request\n\x20message,\x20as\x20in\
    \x20the\x20example\x20below\x20which\x20describes\x20a\x20REST\x20GET\n\
    \x20operation\x20on\x20a\x20resource\x20collection\x20of\x20messages:\n\
    \n\n\x20\x20\x20\x20\x20service\x20Messaging\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20rpc\x20GetMessage(GetMessageRequest)\x20returns\x20(Message)\x20\
    {\n\x20\x20\x20\x20\x20\x20\x20\x20\x20option\x20(google.api.http).get\
    \x20=\x20\"/v1/messages/{message_id}/{sub.subfield}\";\n\x20\x20\x20\x20\
    \x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20message\x20Get\
    MessageRequest\x20{\n\x20\x20\x20\x20\x20\x20\x20message\x20SubMessage\
    \x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20string\x20subfield\x20=\x201;\
    \n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20string\x20m\
    essage_id\x20=\x201;\x20//\x20mapped\x20to\x20the\x20URL\n\x20\x20\x20\
    \x20\x20\x20\x20SubMessage\x20sub\x20=\x202;\x20\x20\x20\x20//\x20`sub.s\
    ubfield`\x20is\x20url-mapped\n\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\
    \x20message\x20Message\x20{\n\x20\x20\x20\x20\x20\x20\x20string\x20text\
    \x20=\x201;\x20//\x20content\x20of\x20the\x20resource\n\x20\x20\x20\x20\
    \x20}\n\n\x20The\x20same\x20http\x20annotation\x20can\x20alternatively\
    \x20be\x20expressed\x20inside\x20the\n\x20`GRPC\x20API\x20Configuration`\
    \x20YAML\x20file.\n\n\x20\x20\x20\x20\x20http:\n\x20\x20\x20\x20\x20\x20\
    \x20rules:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20selector:\x20<proto\
    _package_name>.Messaging.GetMessage\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20get:\x20/v1/messages/{message_id}/{sub.subfield}\n\n\x20This\
    \x20definition\x20enables\x20an\x20automatic,\x20bidrectional\x20mapping\
    \x20of\x20HTTP\n\x20JSON\x20to\x20RPC.\x20Example:\n\n\x20HTTP\x20|\x20R\
    PC\n\x20-----|-----\n\x20`GET\x20/v1/messages/123456/foo`\x20\x20|\x20`G\
    etMessage(message_id:\x20\"123456\"\x20sub:\x20SubMessage(subfield:\x20\
    \"foo\"))`\n\n\x20In\x20general,\x20not\x20only\x20fields\x20but\x20also\
    \x20field\x20paths\x20can\x20be\x20referenced\n\x20from\x20a\x20path\x20\
    pattern.\x20Fields\x20mapped\x20to\x20the\x20path\x20pattern\x20cannot\
    \x20be\n\x20repeated\x20and\x20must\x20have\x20a\x20primitive\x20(non-me\
    ssage)\x20type.\n\n\x20Any\x20fields\x20in\x20the\x20request\x20message\
    \x20which\x20are\x20not\x20bound\x20by\x20the\x20path\n\x20pattern\x20au\
    tomatically\x20become\x20(optional)\x20HTTP\x20query\n\x20parameters.\
    \x20Assume\x20the\x20following\x20definition\x20of\x20the\x20request\x20\
    message:\n\n\n\x20\x20\x20\x20\x20service\x20Messaging\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20rpc\x20GetMessage(GetMessageRequest)\x20returns\x20(\
    Message)\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20option\x20(google.api\
    .http).get\x20=\x20\"/v1/messages/{message_id}\";\n\x20\x20\x20\x20\x20\
    \x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20message\x20GetMess\
    ageRequest\x20{\n\x20\x20\x20\x20\x20\x20\x20message\x20SubMessage\x20{\
    \n\x20\x20\x20\x20\x20\x20\x20\x20\x20string\x20subfield\x20=\x201;\n\
    \x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20string\x20mes\
    sage_id\x20=\x201;\x20//\x20mapped\x20to\x20the\x20URL\n\x20\x20\x20\x20\
    \x20\x20\x20int64\x20revision\x20=\x202;\x20\x20\x20\x20//\x20becomes\
    \x20a\x20parameter\n\x20\x20\x20\x20\x20\x20\x20SubMessage\x20sub\x20=\
    \x203;\x20\x20\x20\x20//\x20`sub.subfield`\x20becomes\x20a\x20parameter\
    \n\x20\x20\x20\x20\x20}\n\n\n\x20This\x20enables\x20a\x20HTTP\x20JSON\
    \x20to\x20RPC\x20mapping\x20as\x20below:\n\n\x20HTTP\x20|\x20RPC\n\x20--\
    ---|-----\n\x20`GET\x20/v1/messages/123456?revision=2&sub.subfield=foo`\
    \x20|\x20`GetMessage(message_id:\x20\"123456\"\x20revision:\x202\x20sub:\
    \x20SubMessage(subfield:\x20\"foo\"))`\n\n\x20Note\x20that\x20fields\x20\
    which\x20are\x20mapped\x20to\x20HTTP\x20parameters\x20must\x20have\x20a\
    \n\x20primitive\x20type\x20or\x20a\x20repeated\x20primitive\x20type.\x20\
    Message\x20types\x20are\x20not\n\x20allowed.\x20In\x20the\x20case\x20of\
    \x20a\x20repeated\x20type,\x20the\x20parameter\x20can\x20be\n\x20repeate\
    d\x20in\x20the\x20URL,\x20as\x20in\x20`...?param=A&param=B`.\n\n\x20For\
    \x20HTTP\x20method\x20kinds\x20which\x20allow\x20a\x20request\x20body,\
    \x20the\x20`body`\x20field\n\x20specifies\x20the\x20mapping.\x20Consider\
    \x20a\x20REST\x20update\x20method\x20on\x20the\n\x20message\x20resource\
    \x20collection:\n\n\n\x20\x20\x20\x20\x20service\x20Messaging\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20rpc\x20UpdateMessage(UpdateMessageRequest)\x20re\
    turns\x20(Message)\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20option\x20(\
    google.api.http)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    put:\x20\"/v1/messages/{message_id}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20body:\x20\"message\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20};\
    \n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\
    \x20message\x20UpdateMessageRequest\x20{\n\x20\x20\x20\x20\x20\x20\x20st\
    ring\x20message_id\x20=\x201;\x20//\x20mapped\x20to\x20the\x20URL\n\x20\
    \x20\x20\x20\x20\x20\x20Message\x20message\x20=\x202;\x20\x20\x20//\x20m\
    apped\x20to\x20the\x20body\n\x20\x20\x20\x20\x20}\n\n\n\x20The\x20follow\
    ing\x20HTTP\x20JSON\x20to\x20RPC\x20mapping\x20is\x20enabled,\x20where\
    \x20the\n\x20representation\x20of\x20the\x20JSON\x20in\x20the\x20request\
    \x20body\x20is\x20determined\x20by\n\x20protos\x20JSON\x20encoding:\n\n\
    \x20HTTP\x20|\x20RPC\n\x20-----|-----\n\x20`PUT\x20/v1/messages/123456\
    \x20{\x20\"text\":\x20\"Hi!\"\x20}`\x20|\x20`UpdateMessage(message_id:\
    \x20\"123456\"\x20message\x20{\x20text:\x20\"Hi!\"\x20})`\n\n\x20The\x20\
    special\x20name\x20`*`\x20can\x20be\x20used\x20in\x20the\x20body\x20mapp\
    ing\x20to\x20define\x20that\n\x20every\x20field\x20not\x20bound\x20by\
    \x20the\x20path\x20template\x20should\x20be\x20mapped\x20to\x20the\n\x20\
    request\x20body.\x20\x20This\x20enables\x20the\x20following\x20alternati\
    ve\x20definition\x20of\n\x20the\x20update\x20method:\n\n\x20\x20\x20\x20\
    \x20service\x20Messaging\x20{\n\x20\x20\x20\x20\x20\x20\x20rpc\x20Update\
    Message(Message)\x20returns\x20(Message)\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20option\x20(google.api.http)\x20=\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20put:\x20\"/v1/messages/{message_id}\"\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20body:\x20\"*\"\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20};\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\
    \n\x20\x20\x20\x20\x20message\x20Message\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20string\x20message_id\x20=\x201;\n\x20\x20\x20\x20\x20\x20\x20string\
    \x20text\x20=\x202;\n\x20\x20\x20\x20\x20}\n\n\n\x20The\x20following\x20\
    HTTP\x20JSON\x20to\x20RPC\x20mapping\x20is\x20enabled:\n\n\x20HTTP\x20|\
    \x20RPC\n\x20-----|-----\n\x20`PUT\x20/v1/messages/123456\x20{\x20\"text\
    \":\x20\"Hi!\"\x20}`\x20|\x20`UpdateMessage(message_id:\x20\"123456\"\
    \x20text:\x20\"Hi!\")`\n\n\x20Note\x20that\x20when\x20using\x20`*`\x20in\
    \x20the\x20body\x20mapping,\x20it\x20is\x20not\x20possible\x20to\n\x20ha\
    ve\x20HTTP\x20parameters,\x20as\x20all\x20fields\x20not\x20bound\x20by\
    \x20the\x20path\x20end\x20in\n\x20the\x20body.\x20This\x20makes\x20this\
    \x20option\x20more\x20rarely\x20used\x20in\x20practice\x20of\n\x20defini\
    ng\x20REST\x20APIs.\x20The\x20common\x20usage\x20of\x20`*`\x20is\x20in\
    \x20custom\x20methods\n\x20which\x20don't\x20use\x20the\x20URL\x20at\x20\
    all\x20for\x20transferring\x20data.\n\n\x20It\x20is\x20possible\x20to\
    \x20define\x20multiple\x20HTTP\x20methods\x20for\x20one\x20RPC\x20by\x20\
    using\n\x20the\x20`additional_bindings`\x20option.\x20Example:\n\n\x20\
    \x20\x20\x20\x20service\x20Messaging\x20{\n\x20\x20\x20\x20\x20\x20\x20r\
    pc\x20GetMessage(GetMessageRequest)\x20returns\x20(Message)\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20option\x20(google.api.http)\x20=\x20{\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20get:\x20\"/v1/messages/{mess\
    age_id}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20additional_bindin\
    gs\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20get:\x20\"/\
    v1/users/{user_id}/messages/{message_id}\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\x20};\n\x20\x20\x20\
    \x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20message\
    \x20GetMessageRequest\x20{\n\x20\x20\x20\x20\x20\x20\x20string\x20messag\
    e_id\x20=\x201;\n\x20\x20\x20\x20\x20\x20\x20string\x20user_id\x20=\x202\
    ;\n\x20\x20\x20\x20\x20}\n\n\n\x20This\x20enables\x20the\x20following\
    \x20two\x20alternative\x20HTTP\x20JSON\x20to\x20RPC\n\x20mappings:\n\n\
    \x20HTTP\x20|\x20RPC\n\x20-----|-----\n\x20`GET\x20/v1/messages/123456`\
    \x20|\x20`GetMessage(message_id:\x20\"123456\")`\n\x20`GET\x20/v1/users/\
    me/messages/123456`\x20|\x20`GetMessage(user_id:\x20\"me\"\x20message_id\
    :\x20\"123456\")`\n\n\x20#\x20Rules\x20for\x20HTTP\x20mapping\n\n\x20The\
    \x20rules\x20for\x20mapping\x20HTTP\x20path,\x20query\x20parameters,\x20\
    and\x20body\x20fields\n\x20to\x20the\x20request\x20message\x20are\x20as\
    \x20follows:\n\n\x201.\x20The\x20`body`\x20field\x20specifies\x20either\
    \x20`*`\x20or\x20a\x20field\x20path,\x20or\x20is\n\x20\x20\x20\x20omitte\
    d.\x20If\x20omitted,\x20it\x20indicates\x20there\x20is\x20no\x20HTTP\x20\
    request\x20body.\n\x202.\x20Leaf\x20fields\x20(recursive\x20expansion\
    \x20of\x20nested\x20messages\x20in\x20the\n\x20\x20\x20\x20request)\x20c\
    an\x20be\x20classified\x20into\x20three\x20types:\n\x20\x20\x20\x20\x20(\
    a)\x20Matched\x20in\x20the\x20URL\x20template.\n\x20\x20\x20\x20\x20(b)\
    \x20Covered\x20by\x20body\x20(if\x20body\x20is\x20`*`,\x20everything\x20\
    except\x20(a)\x20fields;\n\x20\x20\x20\x20\x20\x20\x20\x20\x20else\x20ev\
    erything\x20under\x20the\x20body\x20field)\n\x20\x20\x20\x20\x20(c)\x20A\
    ll\x20other\x20fields.\n\x203.\x20URL\x20query\x20parameters\x20found\
    \x20in\x20the\x20HTTP\x20request\x20are\x20mapped\x20to\x20(c)\x20fields\
    .\n\x204.\x20Any\x20body\x20sent\x20with\x20an\x20HTTP\x20request\x20can\
    \x20contain\x20only\x20(b)\x20fields.\n\n\x20The\x20syntax\x20of\x20the\
    \x20path\x20template\x20is\x20as\x20follows:\n\n\x20\x20\x20\x20\x20Temp\
    late\x20=\x20\"/\"\x20Segments\x20[\x20Verb\x20]\x20;\n\x20\x20\x20\x20\
    \x20Segments\x20=\x20Segment\x20{\x20\"/\"\x20Segment\x20}\x20;\n\x20\
    \x20\x20\x20\x20Segment\x20\x20=\x20\"*\"\x20|\x20\"**\"\x20|\x20LITERAL\
    \x20|\x20Variable\x20;\n\x20\x20\x20\x20\x20Variable\x20=\x20\"{\"\x20Fi\
    eldPath\x20[\x20\"=\"\x20Segments\x20]\x20\"}\"\x20;\n\x20\x20\x20\x20\
    \x20FieldPath\x20=\x20IDENT\x20{\x20\".\"\x20IDENT\x20}\x20;\n\x20\x20\
    \x20\x20\x20Verb\x20\x20\x20\x20\x20=\x20\":\"\x20LITERAL\x20;\n\n\x20Th\
    e\x20syntax\x20`*`\x20matches\x20a\x20single\x20path\x20segment.\x20The\
    \x20syntax\x20`**`\x20matches\x20zero\n\x20or\x20more\x20path\x20segment\
    s,\x20which\x20must\x20be\x20the\x20last\x20part\x20of\x20the\x20path\
    \x20except\x20the\n\x20`Verb`.\x20The\x20syntax\x20`LITERAL`\x20matches\
    \x20literal\x20text\x20in\x20the\x20path.\n\n\x20The\x20syntax\x20`Varia\
    ble`\x20matches\x20part\x20of\x20the\x20URL\x20path\x20as\x20specified\
    \x20by\x20its\n\x20template.\x20A\x20variable\x20template\x20must\x20not\
    \x20contain\x20other\x20variables.\x20If\x20a\x20variable\n\x20matches\
    \x20a\x20single\x20path\x20segment,\x20its\x20template\x20may\x20be\x20o\
    mitted,\x20e.g.\x20`{var}`\n\x20is\x20equivalent\x20to\x20`{var=*}`.\n\n\
    \x20If\x20a\x20variable\x20contains\x20exactly\x20one\x20path\x20segment\
    ,\x20such\x20as\x20`\"{var}\"`\x20or\n\x20`\"{var=*}\"`,\x20when\x20such\
    \x20a\x20variable\x20is\x20expanded\x20into\x20a\x20URL\x20path,\x20all\
    \x20characters\n\x20except\x20`[-_.~0-9a-zA-Z]`\x20are\x20percent-encode\
    d.\x20Such\x20variables\x20show\x20up\x20in\x20the\n\x20Discovery\x20Doc\
    ument\x20as\x20`{var}`.\n\n\x20If\x20a\x20variable\x20contains\x20one\
    \x20or\x20more\x20path\x20segments,\x20such\x20as\x20`\"{var=foo/*}\"`\n\
    \x20or\x20`\"{var=**}\"`,\x20when\x20such\x20a\x20variable\x20is\x20expa\
    nded\x20into\x20a\x20URL\x20path,\x20all\n\x20characters\x20except\x20`[\
    -_.~/0-9a-zA-Z]`\x20are\x20percent-encoded.\x20Such\x20variables\n\x20sh\
    ow\x20up\x20in\x20the\x20Discovery\x20Document\x20as\x20`{+var}`.\n\n\
    \x20NOTE:\x20While\x20the\x20single\x20segment\x20variable\x20matches\
    \x20the\x20semantics\x20of\n\x20[RFC\x206570](https://tools.ietf.org/htm\
    l/rfc6570)\x20Section\x203.2.2\n\x20Simple\x20String\x20Expansion,\x20th\
    e\x20multi\x20segment\x20variable\x20**does\x20not**\x20match\n\x20RFC\
    \x206570\x20Reserved\x20Expansion.\x20The\x20reason\x20is\x20that\x20the\
    \x20Reserved\x20Expansion\n\x20does\x20not\x20expand\x20special\x20chara\
    cters\x20like\x20`?`\x20and\x20`#`,\x20which\x20would\x20lead\n\x20to\
    \x20invalid\x20URLs.\n\n\x20NOTE:\x20the\x20field\x20paths\x20in\x20vari\
    ables\x20and\x20in\x20the\x20`body`\x20must\x20not\x20refer\x20to\n\x20r\
    epeated\x20fields\x20or\x20map\x20fields.\n\n\x0b\n\x03\x04\x01\x01\x12\
    \x04\x85\x02\x08\x10\n\x8c\x01\n\x04\x04\x01\x02\0\x12\x04\x89\x02\x02\
    \x16\x1a~\x20Selects\x20methods\x20to\x20which\x20this\x20rule\x20applie\
    s.\n\n\x20Refer\x20to\x20[selector][google.api.DocumentationRule.selecto\
    r]\x20for\x20syntax\x20details.\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\
    \x89\x02\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x89\x02\t\x11\n\r\n\
    \x05\x04\x01\x02\0\x03\x12\x04\x89\x02\x14\x15\n\xd0\x01\n\x04\x04\x01\
    \x08\0\x12\x06\x8e\x02\x02\xa3\x02\x03\x1a\xbf\x01\x20Determines\x20the\
    \x20URL\x20pattern\x20is\x20matched\x20by\x20this\x20rules.\x20This\x20p\
    attern\x20can\x20be\n\x20used\x20with\x20any\x20of\x20the\x20{get|put|po\
    st|delete|patch}\x20methods.\x20A\x20custom\x20method\n\x20can\x20be\x20\
    defined\x20using\x20the\x20'custom'\x20field.\n\n\r\n\x05\x04\x01\x08\0\
    \x01\x12\x04\x8e\x02\x08\x0f\nI\n\x04\x04\x01\x02\x01\x12\x04\x90\x02\
    \x04\x13\x1a;\x20Used\x20for\x20listing\x20and\x20getting\x20information\
    \x20about\x20resources.\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\x90\x02\
    \x04\n\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\x90\x02\x0b\x0e\n\r\n\x05\
    \x04\x01\x02\x01\x03\x12\x04\x90\x02\x11\x12\n-\n\x04\x04\x01\x02\x02\
    \x12\x04\x93\x02\x04\x13\x1a\x1f\x20Used\x20for\x20updating\x20a\x20reso\
    urce.\n\n\r\n\x05\x04\x01\x02\x02\x05\x12\x04\x93\x02\x04\n\n\r\n\x05\
    \x04\x01\x02\x02\x01\x12\x04\x93\x02\x0b\x0e\n\r\n\x05\x04\x01\x02\x02\
    \x03\x12\x04\x93\x02\x11\x12\n-\n\x04\x04\x01\x02\x03\x12\x04\x96\x02\
    \x04\x14\x1a\x1f\x20Used\x20for\x20creating\x20a\x20resource.\n\n\r\n\
    \x05\x04\x01\x02\x03\x05\x12\x04\x96\x02\x04\n\n\r\n\x05\x04\x01\x02\x03\
    \x01\x12\x04\x96\x02\x0b\x0f\n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\x96\
    \x02\x12\x13\n-\n\x04\x04\x01\x02\x04\x12\x04\x99\x02\x04\x16\x1a\x1f\
    \x20Used\x20for\x20deleting\x20a\x20resource.\n\n\r\n\x05\x04\x01\x02\
    \x04\x05\x12\x04\x99\x02\x04\n\n\r\n\x05\x04\x01\x02\x04\x01\x12\x04\x99\
    \x02\x0b\x11\n\r\n\x05\x04\x01\x02\x04\x03\x12\x04\x99\x02\x14\x15\n-\n\
    \x04\x04\x01\x02\x05\x12\x04\x9c\x02\x04\x15\x1a\x1f\x20Used\x20for\x20u\
    pdating\x20a\x20resource.\n\n\r\n\x05\x04\x01\x02\x05\x05\x12\x04\x9c\
    \x02\x04\n\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\x9c\x02\x0b\x10\n\r\n\
    \x05\x04\x01\x02\x05\x03\x12\x04\x9c\x02\x13\x14\n\x98\x02\n\x04\x04\x01\
    \x02\x06\x12\x04\xa2\x02\x04!\x1a\x89\x02\x20The\x20custom\x20pattern\
    \x20is\x20used\x20for\x20specifying\x20an\x20HTTP\x20method\x20that\x20i\
    s\x20not\n\x20included\x20in\x20the\x20`pattern`\x20field,\x20such\x20as\
    \x20HEAD,\x20or\x20\"*\"\x20to\x20leave\x20the\n\x20HTTP\x20method\x20un\
    specified\x20for\x20this\x20rule.\x20The\x20wild-card\x20rule\x20is\x20u\
    seful\n\x20for\x20services\x20that\x20provide\x20content\x20to\x20Web\
    \x20(HTML)\x20clients.\n\n\r\n\x05\x04\x01\x02\x06\x06\x12\x04\xa2\x02\
    \x04\x15\n\r\n\x05\x04\x01\x02\x06\x01\x12\x04\xa2\x02\x16\x1c\n\r\n\x05\
    \x04\x01\x02\x06\x03\x12\x04\xa2\x02\x1f\x20\n\x9e\x02\n\x04\x04\x01\x02\
    \x07\x12\x04\xa9\x02\x02\x12\x1a\x8f\x02\x20The\x20name\x20of\x20the\x20\
    request\x20field\x20whose\x20value\x20is\x20mapped\x20to\x20the\x20HTTP\
    \x20body,\x20or\n\x20`*`\x20for\x20mapping\x20all\x20fields\x20not\x20ca\
    ptured\x20by\x20the\x20path\x20pattern\x20to\x20the\x20HTTP\n\x20body.\
    \x20NOTE:\x20the\x20referred\x20field\x20must\x20not\x20be\x20a\x20repea\
    ted\x20field\x20and\x20must\x20be\n\x20present\x20at\x20the\x20top-level\
    \x20of\x20request\x20message\x20type.\n\n\r\n\x05\x04\x01\x02\x07\x05\
    \x12\x04\xa9\x02\x02\x08\n\r\n\x05\x04\x01\x02\x07\x01\x12\x04\xa9\x02\t\
    \r\n\r\n\x05\x04\x01\x02\x07\x03\x12\x04\xa9\x02\x10\x11\n\xdc\x01\n\x04\
    \x04\x01\x02\x08\x12\x04\xae\x02\x02\x1c\x1a\xcd\x01\x20Optional.\x20The\
    \x20name\x20of\x20the\x20response\x20field\x20whose\x20value\x20is\x20ma\
    pped\x20to\x20the\x20HTTP\n\x20body\x20of\x20response.\x20Other\x20respo\
    nse\x20fields\x20are\x20ignored.\x20When\n\x20not\x20set,\x20the\x20resp\
    onse\x20message\x20will\x20be\x20used\x20as\x20HTTP\x20body\x20of\x20res\
    ponse.\n\n\r\n\x05\x04\x01\x02\x08\x05\x12\x04\xae\x02\x02\x08\n\r\n\x05\
    \x04\x01\x02\x08\x01\x12\x04\xae\x02\t\x16\n\r\n\x05\x04\x01\x02\x08\x03\
    \x12\x04\xae\x02\x19\x1b\n\xbb\x01\n\x04\x04\x01\x02\t\x12\x04\xb3\x02\
    \x02-\x1a\xac\x01\x20Additional\x20HTTP\x20bindings\x20for\x20the\x20sel\
    ector.\x20Nested\x20bindings\x20must\n\x20not\x20contain\x20an\x20`addit\
    ional_bindings`\x20field\x20themselves\x20(that\x20is,\n\x20the\x20nesti\
    ng\x20may\x20only\x20be\x20one\x20level\x20deep).\n\n\r\n\x05\x04\x01\
    \x02\t\x04\x12\x04\xb3\x02\x02\n\n\r\n\x05\x04\x01\x02\t\x06\x12\x04\xb3\
    \x02\x0b\x13\n\r\n\x05\x04\x01\x02\t\x01\x12\x04\xb3\x02\x14'\n\r\n\x05\
    \x04\x01\x02\t\x03\x12\x04\xb3\x02*,\nG\n\x02\x04\x02\x12\x06\xb7\x02\0\
    \xbd\x02\x01\x1a9\x20A\x20custom\x20pattern\x20is\x20used\x20for\x20defi\
    ning\x20custom\x20HTTP\x20verb.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xb7\
    \x02\x08\x19\n2\n\x04\x04\x02\x02\0\x12\x04\xb9\x02\x02\x12\x1a$\x20The\
    \x20name\x20of\x20this\x20custom\x20HTTP\x20verb.\n\n\r\n\x05\x04\x02\
    \x02\0\x05\x12\x04\xb9\x02\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\
    \xb9\x02\t\r\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xb9\x02\x10\x11\n5\n\
    \x04\x04\x02\x02\x01\x12\x04\xbc\x02\x02\x12\x1a'\x20The\x20path\x20matc\
    hed\x20by\x20this\x20custom\x20verb.\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\
    \x04\xbc\x02\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\xbc\x02\t\r\n\
    \r\n\x05\x04\x02\x02\x01\x03\x12\x04\xbc\x02\x10\x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Http::generated_message_descriptor_data());
            messages.push(HttpRule::generated_message_descriptor_data());
            messages.push(CustomHttpPattern::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
