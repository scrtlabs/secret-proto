// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/protobuf/duration.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.protobuf.Duration)
pub struct Duration {
    // message fields
    ///  Signed seconds of the span of time. Must be from -315,576,000,000
    ///  to +315,576,000,000 inclusive. Note: these bounds are computed from:
    ///  60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    // @@protoc_insertion_point(field:google.protobuf.Duration.seconds)
    pub seconds: i64,
    ///  Signed fractions of a second at nanosecond resolution of the span
    ///  of time. Durations less than one second are represented with a 0
    ///  `seconds` field and a positive or negative `nanos` field. For durations
    ///  of one second or more, a non-zero value for the `nanos` field must be
    ///  of the same sign as the `seconds` field. Must be from -999,999,999
    ///  to +999,999,999 inclusive.
    // @@protoc_insertion_point(field:google.protobuf.Duration.nanos)
    pub nanos: i32,
    // special fields
    // @@protoc_insertion_point(special_field:google.protobuf.Duration.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Duration {
    fn default() -> &'a Duration {
        <Duration as ::protobuf::Message>::default_instance()
    }
}

impl Duration {
    pub fn new() -> Duration {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seconds",
            |m: &Duration| { &m.seconds },
            |m: &mut Duration| { &mut m.seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nanos",
            |m: &Duration| { &m.nanos },
            |m: &mut Duration| { &mut m.nanos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Duration>(
            "Duration",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Duration {
    const NAME: &'static str = "Duration";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds = is.read_int64()?;
                },
                16 => {
                    self.nanos = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seconds != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.seconds);
        }
        if self.nanos != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.nanos);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seconds != 0 {
            os.write_int64(1, self.seconds)?;
        }
        if self.nanos != 0 {
            os.write_int32(2, self.nanos)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Duration {
        Duration::new()
    }

    fn clear(&mut self) {
        self.seconds = 0;
        self.nanos = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Duration {
        static instance: Duration = Duration {
            seconds: 0,
            nanos: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Duration {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Duration").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Duration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Duration {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1egoogle/protobuf/duration.proto\x12\x0fgoogle.protobuf\":\n\x08Dura\
    tion\x12\x18\n\x07seconds\x18\x01\x20\x01(\x03R\x07seconds\x12\x14\n\x05\
    nanos\x18\x02\x20\x01(\x05R\x05nanosBW\n\x13com.google.protobufB\rDurati\
    onProtoP\x01Z\x05types\xf8\x01\x01\xa2\x02\x03GPB\xaa\x02\x1eGoogle.Prot\
    obuf.WellKnownTypesJ\xdb#\n\x06\x12\x04\x1e\0s\x01\n\xcc\x0c\n\x01\x0c\
    \x12\x03\x1e\0\x122\xc1\x0c\x20Protocol\x20Buffers\x20-\x20Google's\x20d\
    ata\x20interchange\x20format\n\x20Copyright\x202008\x20Google\x20Inc.\
    \x20\x20All\x20rights\x20reserved.\n\x20https://developers.google.com/pr\
    otocol-buffers/\n\n\x20Redistribution\x20and\x20use\x20in\x20source\x20a\
    nd\x20binary\x20forms,\x20with\x20or\x20without\n\x20modification,\x20ar\
    e\x20permitted\x20provided\x20that\x20the\x20following\x20conditions\x20\
    are\n\x20met:\n\n\x20\x20\x20\x20\x20*\x20Redistributions\x20of\x20sourc\
    e\x20code\x20must\x20retain\x20the\x20above\x20copyright\n\x20notice,\
    \x20this\x20list\x20of\x20conditions\x20and\x20the\x20following\x20discl\
    aimer.\n\x20\x20\x20\x20\x20*\x20Redistributions\x20in\x20binary\x20form\
    \x20must\x20reproduce\x20the\x20above\n\x20copyright\x20notice,\x20this\
    \x20list\x20of\x20conditions\x20and\x20the\x20following\x20disclaimer\n\
    \x20in\x20the\x20documentation\x20and/or\x20other\x20materials\x20provid\
    ed\x20with\x20the\n\x20distribution.\n\x20\x20\x20\x20\x20*\x20Neither\
    \x20the\x20name\x20of\x20Google\x20Inc.\x20nor\x20the\x20names\x20of\x20\
    its\n\x20contributors\x20may\x20be\x20used\x20to\x20endorse\x20or\x20pro\
    mote\x20products\x20derived\x20from\n\x20this\x20software\x20without\x20\
    specific\x20prior\x20written\x20permission.\n\n\x20THIS\x20SOFTWARE\x20I\
    S\x20PROVIDED\x20BY\x20THE\x20COPYRIGHT\x20HOLDERS\x20AND\x20CONTRIBUTOR\
    S\n\x20\"AS\x20IS\"\x20AND\x20ANY\x20EXPRESS\x20OR\x20IMPLIED\x20WARRANT\
    IES,\x20INCLUDING,\x20BUT\x20NOT\n\x20LIMITED\x20TO,\x20THE\x20IMPLIED\
    \x20WARRANTIES\x20OF\x20MERCHANTABILITY\x20AND\x20FITNESS\x20FOR\n\x20A\
    \x20PARTICULAR\x20PURPOSE\x20ARE\x20DISCLAIMED.\x20IN\x20NO\x20EVENT\x20\
    SHALL\x20THE\x20COPYRIGHT\n\x20OWNER\x20OR\x20CONTRIBUTORS\x20BE\x20LIAB\
    LE\x20FOR\x20ANY\x20DIRECT,\x20INDIRECT,\x20INCIDENTAL,\n\x20SPECIAL,\
    \x20EXEMPLARY,\x20OR\x20CONSEQUENTIAL\x20DAMAGES\x20(INCLUDING,\x20BUT\
    \x20NOT\n\x20LIMITED\x20TO,\x20PROCUREMENT\x20OF\x20SUBSTITUTE\x20GOODS\
    \x20OR\x20SERVICES;\x20LOSS\x20OF\x20USE,\n\x20DATA,\x20OR\x20PROFITS;\
    \x20OR\x20BUSINESS\x20INTERRUPTION)\x20HOWEVER\x20CAUSED\x20AND\x20ON\
    \x20ANY\n\x20THEORY\x20OF\x20LIABILITY,\x20WHETHER\x20IN\x20CONTRACT,\
    \x20STRICT\x20LIABILITY,\x20OR\x20TORT\n\x20(INCLUDING\x20NEGLIGENCE\x20\
    OR\x20OTHERWISE)\x20ARISING\x20IN\x20ANY\x20WAY\x20OUT\x20OF\x20THE\x20U\
    SE\n\x20OF\x20THIS\x20SOFTWARE,\x20EVEN\x20IF\x20ADVISED\x20OF\x20THE\
    \x20POSSIBILITY\x20OF\x20SUCH\x20DAMAGE.\n\n\x08\n\x01\x02\x12\x03\x20\0\
    \x18\n\x08\n\x01\x08\x12\x03\"\0;\n\t\n\x02\x08%\x12\x03\"\0;\n\x08\n\
    \x01\x08\x12\x03#\0\x1f\n\t\n\x02\x08\x1f\x12\x03#\0\x1f\n\x08\n\x01\x08\
    \x12\x03$\0\x1c\n\t\n\x02\x08\x0b\x12\x03$\0\x1c\n\x08\n\x01\x08\x12\x03\
    %\0,\n\t\n\x02\x08\x01\x12\x03%\0,\n\x08\n\x01\x08\x12\x03&\0.\n\t\n\x02\
    \x08\x08\x12\x03&\0.\n\x08\n\x01\x08\x12\x03'\0\"\n\t\n\x02\x08\n\x12\
    \x03'\0\"\n\x08\n\x01\x08\x12\x03(\0!\n\t\n\x02\x08$\x12\x03(\0!\n\x9f\
    \x10\n\x02\x04\0\x12\x04f\0s\x01\x1a\x92\x10\x20A\x20Duration\x20represe\
    nts\x20a\x20signed,\x20fixed-length\x20span\x20of\x20time\x20represented\
    \n\x20as\x20a\x20count\x20of\x20seconds\x20and\x20fractions\x20of\x20sec\
    onds\x20at\x20nanosecond\n\x20resolution.\x20It\x20is\x20independent\x20\
    of\x20any\x20calendar\x20and\x20concepts\x20like\x20\"day\"\n\x20or\x20\
    \"month\".\x20It\x20is\x20related\x20to\x20Timestamp\x20in\x20that\x20th\
    e\x20difference\x20between\n\x20two\x20Timestamp\x20values\x20is\x20a\
    \x20Duration\x20and\x20it\x20can\x20be\x20added\x20or\x20subtracted\n\
    \x20from\x20a\x20Timestamp.\x20Range\x20is\x20approximately\x20+-10,000\
    \x20years.\n\n\x20#\x20Examples\n\n\x20Example\x201:\x20Compute\x20Durat\
    ion\x20from\x20two\x20Timestamps\x20in\x20pseudo\x20code.\n\n\x20\x20\
    \x20\x20\x20Timestamp\x20start\x20=\x20...;\n\x20\x20\x20\x20\x20Timesta\
    mp\x20end\x20=\x20...;\n\x20\x20\x20\x20\x20Duration\x20duration\x20=\
    \x20...;\n\n\x20\x20\x20\x20\x20duration.seconds\x20=\x20end.seconds\x20\
    -\x20start.seconds;\n\x20\x20\x20\x20\x20duration.nanos\x20=\x20end.nano\
    s\x20-\x20start.nanos;\n\n\x20\x20\x20\x20\x20if\x20(duration.seconds\
    \x20<\x200\x20&&\x20duration.nanos\x20>\x200)\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20duration.seconds\x20+=\x201;\n\x20\x20\x20\x20\x20\x20\x20durati\
    on.nanos\x20-=\x201000000000;\n\x20\x20\x20\x20\x20}\x20else\x20if\x20(d\
    urations.seconds\x20>\x200\x20&&\x20duration.nanos\x20<\x200)\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20duration.seconds\x20-=\x201;\n\x20\x20\x20\x20\
    \x20\x20\x20duration.nanos\x20+=\x201000000000;\n\x20\x20\x20\x20\x20}\n\
    \n\x20Example\x202:\x20Compute\x20Timestamp\x20from\x20Timestamp\x20+\
    \x20Duration\x20in\x20pseudo\x20code.\n\n\x20\x20\x20\x20\x20Timestamp\
    \x20start\x20=\x20...;\n\x20\x20\x20\x20\x20Duration\x20duration\x20=\
    \x20...;\n\x20\x20\x20\x20\x20Timestamp\x20end\x20=\x20...;\n\n\x20\x20\
    \x20\x20\x20end.seconds\x20=\x20start.seconds\x20+\x20duration.seconds;\
    \n\x20\x20\x20\x20\x20end.nanos\x20=\x20start.nanos\x20+\x20duration.nan\
    os;\n\n\x20\x20\x20\x20\x20if\x20(end.nanos\x20<\x200)\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20end.seconds\x20-=\x201;\n\x20\x20\x20\x20\x20\x20\
    \x20end.nanos\x20+=\x201000000000;\n\x20\x20\x20\x20\x20}\x20else\x20if\
    \x20(end.nanos\x20>=\x201000000000)\x20{\n\x20\x20\x20\x20\x20\x20\x20en\
    d.seconds\x20+=\x201;\n\x20\x20\x20\x20\x20\x20\x20end.nanos\x20-=\x2010\
    00000000;\n\x20\x20\x20\x20\x20}\n\n\x20Example\x203:\x20Compute\x20Dura\
    tion\x20from\x20datetime.timedelta\x20in\x20Python.\n\n\x20\x20\x20\x20\
    \x20td\x20=\x20datetime.timedelta(days=3,\x20minutes=10)\n\x20\x20\x20\
    \x20\x20duration\x20=\x20Duration()\n\x20\x20\x20\x20\x20duration.FromTi\
    medelta(td)\n\n\x20#\x20JSON\x20Mapping\n\n\x20In\x20JSON\x20format,\x20\
    the\x20Duration\x20type\x20is\x20encoded\x20as\x20a\x20string\x20rather\
    \x20than\x20an\n\x20object,\x20where\x20the\x20string\x20ends\x20in\x20t\
    he\x20suffix\x20\"s\"\x20(indicating\x20seconds)\x20and\n\x20is\x20prece\
    ded\x20by\x20the\x20number\x20of\x20seconds,\x20with\x20nanoseconds\x20e\
    xpressed\x20as\n\x20fractional\x20seconds.\x20For\x20example,\x203\x20se\
    conds\x20with\x200\x20nanoseconds\x20should\x20be\n\x20encoded\x20in\x20\
    JSON\x20format\x20as\x20\"3s\",\x20while\x203\x20seconds\x20and\x201\x20\
    nanosecond\x20should\n\x20be\x20expressed\x20in\x20JSON\x20format\x20as\
    \x20\"3.000000001s\",\x20and\x203\x20seconds\x20and\x201\n\x20microsecon\
    d\x20should\x20be\x20expressed\x20in\x20JSON\x20format\x20as\x20\"3.0000\
    01s\".\n\n\n\n\n\n\x03\x04\0\x01\x12\x03f\x08\x10\n\xdc\x01\n\x04\x04\0\
    \x02\0\x12\x03j\x02\x14\x1a\xce\x01\x20Signed\x20seconds\x20of\x20the\
    \x20span\x20of\x20time.\x20Must\x20be\x20from\x20-315,576,000,000\n\x20t\
    o\x20+315,576,000,000\x20inclusive.\x20Note:\x20these\x20bounds\x20are\
    \x20computed\x20from:\n\x2060\x20sec/min\x20*\x2060\x20min/hr\x20*\x2024\
    \x20hr/day\x20*\x20365.25\x20days/year\x20*\x2010000\x20years\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03j\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03j\x08\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03j\x12\x13\n\x83\x03\n\
    \x04\x04\0\x02\x01\x12\x03r\x02\x12\x1a\xf5\x02\x20Signed\x20fractions\
    \x20of\x20a\x20second\x20at\x20nanosecond\x20resolution\x20of\x20the\x20\
    span\n\x20of\x20time.\x20Durations\x20less\x20than\x20one\x20second\x20a\
    re\x20represented\x20with\x20a\x200\n\x20`seconds`\x20field\x20and\x20a\
    \x20positive\x20or\x20negative\x20`nanos`\x20field.\x20For\x20durations\
    \n\x20of\x20one\x20second\x20or\x20more,\x20a\x20non-zero\x20value\x20fo\
    r\x20the\x20`nanos`\x20field\x20must\x20be\n\x20of\x20the\x20same\x20sig\
    n\x20as\x20the\x20`seconds`\x20field.\x20Must\x20be\x20from\x20-999,999,\
    999\n\x20to\x20+999,999,999\x20inclusive.\n\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03r\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03r\x08\r\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03r\x10\x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Duration::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
